diff -urN pywinpty-1.1.6-orig/build.rs pywinpty-1.1.6/build.rs
--- pywinpty-1.1.6-orig/build.rs	2021-11-16 03:47:15.000000000 +0800
+++ pywinpty-1.1.6/build.rs	2021-12-08 07:52:50.462331000 +0800
@@ -1,8 +1,6 @@
 use cxx_build::CFG;
-use windows::Win32::System::LibraryLoader::{GetProcAddress, GetModuleHandleW};
 use windows::Win32::Foundation::{PWSTR, PSTR};
 use std::env;
-use std::i64;
 use std::path::Path;
 use std::process::Command;
 use std::str;
@@ -71,44 +69,7 @@
     CFG.exported_header_dirs.push(&include_path);
     CFG.exported_header_dirs.push(&Path::new(&manifest_dir));
     // Check if ConPTY is enabled
-    let reg_entry = "HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion";
-
-    let major_version = command_output(
-        Command::new("Reg")
-            .arg("Query")
-            .arg(&reg_entry)
-            .arg("/v")
-            .arg("CurrentMajorVersionNumber"),
-    );
-    let version_parts: Vec<&str> = major_version.split("REG_DWORD").collect();
-    let major_version =
-        i64::from_str_radix(version_parts[1].trim().trim_start_matches("0x"), 16).unwrap();
-
-    let build_version = command_output(
-        Command::new("Reg")
-            .arg("Query")
-            .arg(&reg_entry)
-            .arg("/v")
-            .arg("CurrentBuildNumber"),
-    );
-    let build_parts: Vec<&str> = build_version.split("REG_SZ").collect();
-    let build_version = i64::from_str_radix(build_parts[1].trim(), 10).unwrap();
-
-    println!("Windows major version: {:?}", major_version);
-    println!("Windows build number: {:?}", build_version);
-
-    let conpty_enabled;
-    let kernel32 = unsafe { GetModuleHandleW("kernel32.dll".into_pwstr()) };
-    let conpty = unsafe { GetProcAddress(kernel32, "CreatePseudoConsole".into_pstr()) };
-    match conpty {
-        Some(_) => {
-            conpty_enabled = "1";
-        }
-        None => {
-            conpty_enabled = "0";
-        }
-    }
-
+    let conpty_enabled = "0";
     println!("ConPTY enabled: {}", conpty_enabled);
 
     // Check if winpty is installed
@@ -135,6 +96,8 @@
             "cargo:rustc-link-search=native={}",
             winpty_path.to_str().unwrap()
         );
+        println!(
+            "cargo:rustc-link-search=native={}", manifest_dir);
 
         CFG.exported_header_dirs.push(&winpty_include);
     }
@@ -174,6 +137,6 @@
         .compile("winptywrapper");
 
     if winpty_enabled == "1" {
-        println!("cargo:rustc-link-lib=dylib=winpty");
+        println!("cargo:rustc-link-lib=dylib=syswinpty");
     }
 }
diff -urN pywinpty-1.1.6-orig/include/conpty_common.h pywinpty-1.1.6/include/conpty_common.h
--- pywinpty-1.1.6-orig/include/conpty_common.h	2021-11-16 03:47:15.000000000 +0800
+++ pywinpty-1.1.6/include/conpty_common.h	2021-12-08 07:28:46.280405400 +0800
@@ -23,7 +23,7 @@
 
     bool pty_created;
     bool pty_started;
-    HPCON pty_handle;
+    VOID* pty_handle;
     PROCESS_INFORMATION process_info;
     STARTUPINFOEX startup_info;
 
