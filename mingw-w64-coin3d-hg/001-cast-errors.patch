diff -Naur coin3d-orig/include/Inventor/C/glue/spidermonkey.h coin3d/include/Inventor/C/glue/spidermonkey.h
--- coin3d-orig/include/Inventor/C/glue/spidermonkey.h	2018-07-21 15:37:52.548250700 +0300
+++ coin3d/include/Inventor/C/glue/spidermonkey.h	2018-07-21 20:04:39.524179500 +0300
@@ -56,7 +56,7 @@
    Structs and defines.
 */
 typedef int JSBool;
-typedef long jsword;
+typedef intptr_t jsword;
 typedef jsword jsval;
 typedef jsword jsid;
 typedef int intN;
diff -Naur coin3d-orig/src/foreignfiles/SoSTLFileKit.cpp coin3d/src/foreignfiles/SoSTLFileKit.cpp
--- coin3d-orig/src/foreignfiles/SoSTLFileKit.cpp	2018-07-21 15:37:55.230404100 +0300
+++ coin3d/src/foreignfiles/SoSTLFileKit.cpp	2018-07-21 20:01:30.106345400 +0300
@@ -569,11 +569,11 @@
   long v1idx = PRIVATE(this)->points->findPoint(v1), v1new = (v1idx == -1);
   long v2idx = PRIVATE(this)->points->findPoint(v2), v2new = (v2idx == -1);
   long v3idx = PRIVATE(this)->points->findPoint(v3), v3new = (v3idx == -1);
-  if (!v1new) { v1idx = (long) PRIVATE(this)->points->getUserData(v1idx); }
-  if (!v2new) { v2idx = (long) PRIVATE(this)->points->getUserData(v2idx); }
-  if (!v3new) { v3idx = (long) PRIVATE(this)->points->getUserData(v3idx); }
+  if (!v1new) { v1idx = (long) reinterpret_cast<intptr_t>(PRIVATE(this)->points->getUserData(v1idx)); }
+  if (!v2new) { v2idx = (long) reinterpret_cast<intptr_t>(PRIVATE(this)->points->getUserData(v2idx)); }
+  if (!v3new) { v3idx = (long) reinterpret_cast<intptr_t>(PRIVATE(this)->points->getUserData(v3idx)); }
   long nidx = PRIVATE(this)->normals->findPoint(n);
-  if (nidx != -1) { nidx = (long) PRIVATE(this)->normals->getUserData(nidx); }
+  if (nidx != -1) { nidx = (long) reinterpret_cast<intptr_t>(PRIVATE(this)->normals->getUserData(nidx)); }
 
   // toss out invalid facets - facets where two or more points are in
   // the same location.  what are these - are they lines and points or
diff -Naur coin3d-orig/src/threads/thread.cpp coin3d/src/threads/thread.cpp
--- coin3d-orig/src/threads/thread.cpp	2018-07-21 15:37:55.503419800 +0300
+++ coin3d/src/threads/thread.cpp	2018-07-21 19:20:32.442443900 +0300
@@ -161,7 +161,7 @@
 void
 cc_sleep(float seconds)
 {
-#ifndef _WIN32
+#ifndef _MSC_VER
   /* FIXME: 20011107, thammer: create a configure macro to detect
    * which sleep function is available */
   sleep(floor(seconds));
diff -Naur coin3d-orig/src/vrml97/JS_VRMLClasses.cpp coin3d/src/vrml97/JS_VRMLClasses.cpp
--- coin3d-orig/src/vrml97/JS_VRMLClasses.cpp	2018-07-21 15:37:55.553422600 +0300
+++ coin3d/src/vrml97/JS_VRMLClasses.cpp	2018-07-21 20:10:36.229581900 +0300
@@ -110,8 +110,11 @@ struct CoinVrmlJs {
 struct CoinVrmlJs_SensorInfo {
   SbList <JSObject *> objects;
 };
+#if defined(_WIN64)
+SbHash<unsigned long long, void *> * CoinVrmlJs_sensorinfohash = NULL;
+#else
 SbHash<unsigned long, void *> * CoinVrmlJs_sensorinfohash = NULL;
-
+#endif
 
 const char * CoinVrmlJs_SFColorAliases[] = {"r", "g", "b"};
 const char * CoinVrmlJs_SFRotationAliases[] = {"x", "y", "z", "angle"};
@@ -674,7 +677,11 @@ static void SFNode_deleteCB(void * COIN_UNUSED_ARG(data), SoSensor * sensor)
 {
   SoNode * node = ((SoNodeSensor *) sensor)->getAttachedNode();
   void * tmp;
+#if defined(_WIN64)
+  if(!CoinVrmlJs_sensorinfohash->get((unsigned long long) node, tmp)) {
+#else
   if(!CoinVrmlJs_sensorinfohash->get((unsigned long) node, tmp)) {
+#endif
     assert(FALSE && "Trying to delete an unregistered SoNodeSensor. Internal error.");
     return;
   }
@@ -690,7 +697,11 @@ static void SFNode_deleteCB(void * COIN_UNUSED_ARG(data), SoSensor * sensor)
 
   // Store the sensor-pointer so that it can be properly deleted later
   nodesensorstobedeleted->append((SoNodeSensor *) sensor);
+#if defined(_WIN64)
+  CoinVrmlJs_sensorinfohash->erase((unsigned long long) node);
+#else
   CoinVrmlJs_sensorinfohash->erase((unsigned long) node);
+#endif
   delete si;
 }
 
@@ -1428,13 +1439,21 @@ static void attachSensorToNode(SoNode * node, JSObject * obj)
 {
   // Has the hash-table been initialized?
   if (!CoinVrmlJs_sensorinfohash) {
+#if defined(_WIN64)
+    CoinVrmlJs_sensorinfohash = new SbHash<unsigned long long, void *>;
+#else
     CoinVrmlJs_sensorinfohash = new SbHash<unsigned long, void *>;
+#endif
     coin_atexit(deleteSensorInfoHash, CC_ATEXIT_NORMAL);
   }
 
   // Is a sensor already attached to this SoNode?
   void * tmp;
+#if defined(_WIN64)
+  if (CoinVrmlJs_sensorinfohash->get((unsigned long long) node, tmp)) {
+#else
   if (CoinVrmlJs_sensorinfohash->get((unsigned long) node, tmp)) {
+#endif
     CoinVrmlJs_SensorInfo * si = (CoinVrmlJs_SensorInfo *) tmp;
     si->objects.append(obj);
   }
@@ -1444,7 +1463,11 @@ static void attachSensorToNode(SoNode * node, JSObject * obj)
     ns->attach(node);
     CoinVrmlJs_SensorInfo * si = new CoinVrmlJs_SensorInfo;
     si->objects.append(obj);
+#if defined(_WIN64)
+    CoinVrmlJs_sensorinfohash->put((unsigned long long) node, si);
+#else
     CoinVrmlJs_sensorinfohash->put((unsigned long) node, si);
+#endif
   }
 }
 
