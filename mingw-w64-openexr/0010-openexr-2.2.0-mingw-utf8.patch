From 675f12b834c7d273ed5efa7fde9b441b8b7406a6 Mon Sep 17 00:00:00 2001
From: MrKepzie <alexandre230@msn.com>
Date: Wed, 24 Feb 2016 17:40:04 +0100
Subject: [PATCH 1/2] [MingW] Fix fstream usage so that filenames with UTF-8
 encoding can correctly be read.

---
 OpenEXR/IlmImf/CMakeLists.txt                |  1 +
 OpenEXR/IlmImf/ImfDeepScanLineInputFile.cpp  |  1 -
 OpenEXR/IlmImf/ImfDeepScanLineOutputFile.cpp |  1 -
 OpenEXR/IlmImf/ImfDeepTiledOutputFile.cpp    |  1 -
 OpenEXR/IlmImf/ImfOutputFile.cpp             |  1 -
 OpenEXR/IlmImf/ImfScanLineInputFile.cpp      |  1 -
 OpenEXR/IlmImf/ImfStdIO.cpp                  | 49 ++++++++++++---
 OpenEXR/IlmImf/ImfStdIO.h                    | 37 +++++++++--
 OpenEXR/IlmImf/ImfTiledOutputFile.cpp        |  1 -
 OpenEXR/IlmImfFuzzTest/fuzzFile.cpp          | 50 +++++++++------
 OpenEXR/IlmImfTest/testExistingStreams.cpp   | 91 +++++++++++++++++-----------
 OpenEXR/IlmImfTest/testMagic.cpp             | 24 +++++---
 OpenEXR/IlmImfTest/testPreviewImage.cpp      | 31 ++++++----
 13 files changed, 196 insertions(+), 93 deletions(-)

diff --git a/OpenEXR/IlmImf/CMakeLists.txt b/OpenEXR/IlmImf/CMakeLists.txt
index 18d90ed..ba6a95a 100644
--- a/OpenEXR/IlmImf/CMakeLists.txt
+++ b/OpenEXR/IlmImf/CMakeLists.txt
@@ -380,6 +380,7 @@ INSTALL ( FILES
     ImfTileOffsets.h
     ImfZip.h
     ImfZipCompressor.h
+    fstream_mingw.h
 
   DESTINATION
     include/OpenEXR
diff --git a/OpenEXR/IlmImf/ImfDeepScanLineInputFile.cpp b/OpenEXR/IlmImf/ImfDeepScanLineInputFile.cpp
index 8a7002b..24fdecc 100644
--- a/OpenEXR/IlmImf/ImfDeepScanLineInputFile.cpp
+++ b/OpenEXR/IlmImf/ImfDeepScanLineInputFile.cpp
@@ -80,7 +80,6 @@ using IMATH_NAMESPACE::divp;
 using IMATH_NAMESPACE::modp;
 using std::string;
 using std::vector;
-using std::ifstream;
 using std::min;
 using std::max;
 using ILMTHREAD_NAMESPACE::Mutex;
diff --git a/OpenEXR/IlmImf/ImfDeepScanLineOutputFile.cpp b/OpenEXR/IlmImf/ImfDeepScanLineOutputFile.cpp
index ebee084..4324c67 100644
--- a/OpenEXR/IlmImf/ImfDeepScanLineOutputFile.cpp
+++ b/OpenEXR/IlmImf/ImfDeepScanLineOutputFile.cpp
@@ -75,7 +75,6 @@ using IMATH_NAMESPACE::divp;
 using IMATH_NAMESPACE::modp;
 using std::string;
 using std::vector;
-using std::ofstream;
 using std::min;
 using std::max;
 using ILMTHREAD_NAMESPACE::Mutex;
diff --git a/OpenEXR/IlmImf/ImfDeepTiledOutputFile.cpp b/OpenEXR/IlmImf/ImfDeepTiledOutputFile.cpp
index a9b226b..2982ac7 100644
--- a/OpenEXR/IlmImf/ImfDeepTiledOutputFile.cpp
+++ b/OpenEXR/IlmImf/ImfDeepTiledOutputFile.cpp
@@ -81,7 +81,6 @@ using IMATH_NAMESPACE::Box2i;
 using IMATH_NAMESPACE::V2i;
 using std::string;
 using std::vector;
-using std::ofstream;
 using std::map;
 using std::min;
 using std::max;
diff --git a/OpenEXR/IlmImf/ImfOutputFile.cpp b/OpenEXR/IlmImf/ImfOutputFile.cpp
index 2619d9c..f64853b 100644
--- a/OpenEXR/IlmImf/ImfOutputFile.cpp
+++ b/OpenEXR/IlmImf/ImfOutputFile.cpp
@@ -77,7 +77,6 @@ using IMATH_NAMESPACE::divp;
 using IMATH_NAMESPACE::modp;
 using std::string;
 using std::vector;
-using std::ofstream;
 using std::min;
 using std::max;
 using ILMTHREAD_NAMESPACE::Mutex;
diff --git a/OpenEXR/IlmImf/ImfScanLineInputFile.cpp b/OpenEXR/IlmImf/ImfScanLineInputFile.cpp
index 9e13b9f..3bb560f 100644
--- a/OpenEXR/IlmImf/ImfScanLineInputFile.cpp
+++ b/OpenEXR/IlmImf/ImfScanLineInputFile.cpp
@@ -73,7 +73,6 @@ using IMATH_NAMESPACE::divp;
 using IMATH_NAMESPACE::modp;
 using std::string;
 using std::vector;
-using std::ifstream;
 using std::min;
 using std::max;
 using std::sort;
diff --git a/OpenEXR/IlmImf/ImfStdIO.cpp b/OpenEXR/IlmImf/ImfStdIO.cpp
index 1839a94..95c7d9f 100644
--- a/OpenEXR/IlmImf/ImfStdIO.cpp
+++ b/OpenEXR/IlmImf/ImfStdIO.cpp
@@ -43,20 +43,20 @@
 #include <ImfStdIO.h>
 #include "Iex.h"
 #include <errno.h>
-#ifdef _MSC_VER
+#ifdef _WIN32
+#ifdef _MSC_VER
 # define VC_EXTRALEAN
-# include <Windows.h>
+#endif
+# include <windows.h>
 # include <string.h>
 #endif
-
-using namespace std;
 #include "ImfNamespace.h"
 
 OPENEXR_IMF_INTERNAL_NAMESPACE_SOURCE_ENTER
 
-namespace {
+namespace StrUtils {
 
-#ifdef _MSC_VER
+#ifdef _WIN32
 std::wstring WidenFilename (const char *filename)
 {
     std::wstring ret;
@@ -50,6 +50,9 @@
     return ret;
 }
 #endif
+}
+
+namespace {
 
 void
 clearError ()
@@ -59,7 +79,7 @@ clearError ()
 
 
 bool
-checkError (istream &is, streamsize expected = 0)
+checkError (std::istream &is, std::streamsize expected = 0)
 {
     if (!is)
     {
@@ -79,7 +99,7 @@ checkError (istream &is, streamsize expected = 0)
 
 
 void
-checkError (ostream &os)
+checkError (std::ostream &os)
 {
     if (!os)
     {
@@ -116,12 +116,12 @@ checkError (ostream &os)
 StdIFStream::StdIFStream (const char fileName[]):
     OPENEXR_IMF_INTERNAL_NAMESPACE::IStream (fileName),
     _is (new ifstream (
-#ifdef _MSC_VER
-             WidenFilename(fileName).c_str(),
+#ifdef _WIN32
+             StrUtils::WidenFilename(fileName).c_str(),
 #else
              fileName,
 #endif
-             ios_base::binary)),
+             std::ios_base::binary)),
     _deleteStream (true)
 {
     if (!*_is)
@@ -132,7 +132,7 @@ StdIFStream::StdIFStream (const char fileName[]):
 }
 
     
-StdIFStream::StdIFStream (ifstream &is, const char fileName[]):
+StdIFStream::StdIFStream (OPENEXR_IMF_INTERNAL_NAMESPACE::ifstream &is, const char fileName[]):
     OPENEXR_IMF_INTERNAL_NAMESPACE::IStream (fileName),
     _is (&is),
     _deleteStream (false)
@@ -185,12 +185,12 @@ StdIFStream::clear ()
 StdOFStream::StdOFStream (const char fileName[]):
     OPENEXR_IMF_INTERNAL_NAMESPACE::OStream (fileName),
     _os (new ofstream (
-#ifdef _MSC_VER
-             WidenFilename(fileName).c_str(),
+#ifdef _WIN32
+             StrUtils::WidenFilename(fileName).c_str(),
 #else
              fileName,
 #endif
-             ios_base::binary)),
+             std::ios_base::binary)),
     _deleteStream (true)
 {
     if (!*_os)
@@ -202,7 +202,7 @@ StdOFStream::StdOFStream (const char fileName[]):
 }
 
 
-StdOFStream::StdOFStream (ofstream &os, const char fileName[]):
+StdOFStream::StdOFStream (OPENEXR_IMF_INTERNAL_NAMESPACE::ofstream &os, const char fileName[]):
     OPENEXR_IMF_INTERNAL_NAMESPACE::OStream (fileName),
     _os (&os),
     _deleteStream (false)
diff --git a/OpenEXR/IlmImf/ImfStdIO.h b/OpenEXR/IlmImf/ImfStdIO.h
index 56ea4e2..bc51a7b 100644
--- a/OpenEXR/IlmImf/ImfStdIO.h
+++ b/OpenEXR/IlmImf/ImfStdIO.h
@@ -50,9 +50,37 @@
 #include <fstream>
 #include <sstream>
 
+#if defined(_WIN32) && defined(__GLIBCXX__)
+#define FSTREAM_USE_STDIO_FILEBUF 1
+#include "fstream_mingw.h"
+#endif
 
 OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER
 
+
+#if FSTREAM_USE_STDIO_FILEBUF
+// MingW uses GCC to build, but does not support having a wchar_t* passed as argument
+// of ifstream::open or ofstream::open. To properly support UTF-8 encoding on MingW we must
+// use the __gnu_cxx::stdio_filebuf GNU extension that can be used with _wfsopen and returned
+// into a istream which share the same API as ifsteam. The same reasoning holds for ofstream.
+typedef basic_ifstream<char> ifstream;
+typedef basic_ofstream<char> ofstream;
+#else
+typedef std::ifstream ifstream;
+typedef std::ofstream ofstream;
+#endif //FSTREAM_USE_STDIO_FILEBUF
+#ifdef _WIN32
+namespace StrUtils {
+//-------------------------------------------
+// Converts a UTF-8 encoded string into a UTF-16 encoded wide string.
+// This is useful on Windows to correctly handle UTF-8 encoded std::string filenames 
+// passed to ifstream/ofstream
+//-------------------------------------------
+IMF_EXPORT std::wstring WidenFilename (const char *filename);
+
+} // namespace StrUtils
+#endif // _WIN32
+
 //-------------------------------------------
 // class StdIFStream -- an implementation of
 // class OPENEXR_IMF_INTERNAL_NAMESPACE::IStream based on class std::ifstream
@@ -76,7 +105,7 @@ class IMF_EXPORT StdIFStream: public OPENEXR_IMF_INTERNAL_NAMESPACE::IStream
     //---------------------------------------------------------
 
     IMF_EXPORT
-    StdIFStream (std::ifstream &is, const char fileName[]);
+    StdIFStream (OPENEXR_IMF_INTERNAL_NAMESPACE::ifstream &is, const char fileName[]);
 
 
     IMF_EXPORT
@@ -88,7 +117,7 @@ class IMF_EXPORT StdIFStream: public OPENEXR_IMF_INTERNAL_NAMESPACE::IStream
 
   private:
 
-    std::ifstream *	_is;
+    OPENEXR_IMF_INTERNAL_NAMESPACE::ifstream *	_is;
     bool		_deleteStream;
 };
 
@@ -116,7 +145,7 @@ class IMF_EXPORT StdOFStream: public OPENEXR_IMF_INTERNAL_NAMESPACE::OStream
     //-------------------------------------------------------
 
     IMF_EXPORT
-    StdOFStream (std::ofstream &os, const char fileName[]);
+    StdOFStream (OPENEXR_IMF_INTERNAL_NAMESPACE::ofstream &os, const char fileName[]);
 
 
     IMF_EXPORT
@@ -127,7 +156,7 @@ class IMF_EXPORT StdOFStream: public OPENEXR_IMF_INTERNAL_NAMESPACE::OStream
 
   private:
 
-    std::ofstream *	_os;
+    OPENEXR_IMF_INTERNAL_NAMESPACE::ofstream *	_os;
     bool		_deleteStream;
 };
 
diff --git a/OpenEXR/IlmImf/ImfTiledOutputFile.cpp b/OpenEXR/IlmImf/ImfTiledOutputFile.cpp
index 3a17561..d54584c 100644
--- a/OpenEXR/IlmImf/ImfTiledOutputFile.cpp
+++ b/OpenEXR/IlmImf/ImfTiledOutputFile.cpp
@@ -79,7 +79,6 @@ using IMATH_NAMESPACE::Box2i;
 using IMATH_NAMESPACE::V2i;
 using std::string;
 using std::vector;
-using std::ofstream;
 using std::map;
 using std::min;
 using std::max;
diff --git a/OpenEXR/IlmImfFuzzTest/fuzzFile.cpp b/OpenEXR/IlmImfFuzzTest/fuzzFile.cpp
index f7d3b33..202b5d6 100644
--- a/OpenEXR/IlmImfFuzzTest/fuzzFile.cpp
+++ b/OpenEXR/IlmImfFuzzTest/fuzzFile.cpp
@@ -35,6 +35,7 @@
 
 #include <fuzzFile.h>
 
+#include <ImfStdIO.h>
 #include <ImfRgbaFile.h>
 #include <ImfArray.h>
 #include <Iex.h>
@@ -43,10 +44,10 @@
 #include <iostream>
 #include <fstream>
 
+
 // Handle the case when the custom namespace is not exposed
 #include <OpenEXRConfig.h>
 using namespace OPENEXR_IMF_INTERNAL_NAMESPACE;
-using namespace std;
 using namespace IMATH_NAMESPACE;
 
 
@@ -55,12 +56,17 @@ namespace {
 Int64
 lengthOfFile (const char fileName[])
 {
-    ifstream ifs (fileName, ios_base::binary);
+#ifdef _WIN32
+	std::wstring filenameStr = StrUtils::WidenFilename(fileName);
+#else
+	std::string filenameStr(fileName);
+#endif
+	OPENEXR_IMF_INTERNAL_NAMESPACE::ifstream ifs (filenameStr, std::ios_base::binary);
 
     if (!ifs)
 	return 0;
 
-    ifs.seekg (0, ios_base::end);
+    ifs.seekg (0, std::ios_base::end);
     return ifs.tellg();
 }
 
@@ -76,21 +82,25 @@ fuzzFile (const char goodFile[],
     //
     // Read the input file.
     //
-
-    ifstream ifs (goodFile, ios_base::binary);
+#ifdef _WIN32
+	std::wstring goodFileStr = StrUtils::WidenFilename(goodFile);
+#else
+	std::string goodFileStr(goodFile);
+#endif
+    OPENEXR_IMF_INTERNAL_NAMESPACE::ifstream ifs (goodFileStr, std::ios_base::binary);
 
     if (!ifs)
 	THROW_ERRNO ("Cannot open file " << goodFile << " (%T).");
 
-    ifs.seekg (0, ios_base::end);
+    ifs.seekg (0, std::ios_base::end);
     Int64 fileLength = ifs.tellg();
-    ifs.seekg (0, ios_base::beg);
+    ifs.seekg (0, std::ios_base::beg);
 
     Array<char> data (fileLength);
     ifs.read (data, fileLength);
 
     if (!ifs)
-	THROW_ERRNO ("Cannot read file " << goodFile << " (%T)." << endl);
+	THROW_ERRNO ("Cannot read file " << goodFile << " (%T)." << std::endl);
 
     //
     // Damage the contents of the file by overwriting some of the bytes
@@ -106,16 +116,20 @@ fuzzFile (const char goodFile[],
     //
     // Save the damaged file contents in the output file.
     //
-
-    ofstream ofs (brokenFile, ios_base::binary);
+#ifdef _WIN32
+	std::wstring brokenFileStr = StrUtils::WidenFilename(brokenFile);
+#else
+	std::string brokenFileStr(brokenFile);
+#endif
+    OPENEXR_IMF_INTERNAL_NAMESPACE::ofstream ofs (brokenFileStr, std::ios_base::binary);
 
     if (!ofs)
-	THROW_ERRNO ("Cannot open file " << brokenFile << " (%T)." << endl);
+	THROW_ERRNO ("Cannot open file " << brokenFile << " (%T)." << std::endl);
 
     ofs.write (data, fileLength);
 
     if (!ofs)
-	THROW_ERRNO ("Cannot write file " << brokenFile << " (%T)." << endl);
+	THROW_ERRNO ("Cannot write file " << brokenFile << " (%T)." << std::endl);
 }
 
 } // namespace
@@ -154,12 +168,12 @@ fuzzFile (const char goodFile[],
 	Int64 windowSize = fileSize * 2 / nSlidingWindow;
 	Int64 lastWindowOffset = fileSize - windowSize;
 
-	cout << "sliding " << windowSize << "-byte window" << endl;
+	std::cout << "sliding " << windowSize << "-byte window" << std::endl;
 
 	for (int i = 0; i < nSlidingWindow; ++i)
 	{
 	    if (i % 100 == 0)
-		cout << i << "\r" << flush;
+		std::cout << i << "\r" << std::flush;
 
 	    Int64 offset = lastWindowOffset * i / (nSlidingWindow - 1);
 	    double fuzzAmount = random.nextf (0.0, 0.1);
@@ -171,18 +185,18 @@ fuzzFile (const char goodFile[],
 	    readFile (brokenFile);
 	}
 
-	cout << nSlidingWindow << endl;
+	std::cout << nSlidingWindow << std::endl;
     }
 
     {
 	Int64 windowSize = 2048;
 
-	cout << windowSize << "-byte window at start of file" << endl;
+	std::cout << windowSize << "-byte window at start of file" << std::endl;
 
 	for (int i = 0; i < nFixedWindow; ++i)
 	{
 	    if (i % 100 == 0)
-		cout << i << "\r" << flush;
+		std::cout << i << "\r" << std::flush;
 
 	    double fuzzAmount = random.nextf (0.0, 0.1);
 
@@ -193,6 +207,6 @@ fuzzFile (const char goodFile[],
 	    readFile (brokenFile);
 	}
 
-	cout << nFixedWindow << endl;
+	std::cout << nFixedWindow << std::endl;
     }
 }
diff --git a/OpenEXR/IlmImfTest/testExistingStreams.cpp b/OpenEXR/IlmImfTest/testExistingStreams.cpp
index 69658c3..0e09b1e 100644
--- a/OpenEXR/IlmImfTest/testExistingStreams.cpp
+++ b/OpenEXR/IlmImfTest/testExistingStreams.cpp
@@ -53,7 +53,6 @@
 
 
 using namespace OPENEXR_IMF_NAMESPACE;
-using namespace std;
 using namespace IMATH_NAMESPACE;
 
 namespace {
@@ -136,15 +135,20 @@ MMIFStream::MMIFStream (const char fileName[]):
     _length (0),
     _pos (0)
 {
-    std::ifstream ifs (fileName, ios_base::binary);
+#ifdef _WIN32
+	std::wstring filenameStr = StrUtils::WidenFilename(fileName);
+#else
+	std::string filenameStr(fileName);
+#endif
+    OPENEXR_IMF_INTERNAL_NAMESPACE::ifstream ifs (filenameStr, std::ios_base::binary);
 
     //
     // Get length of file
     //
 
-    ifs.seekg (0, ios::end);
+    ifs.seekg (0, std::ios::end);
     _length = ifs.tellg();
-    ifs.seekg (0, ios::beg);
+    ifs.seekg (0, std::ios::beg);
     
     //
     // Allocate memory
@@ -209,6 +213,12 @@ writeReadScanLines (const char fileName[],
 		    int height,
 		    const Array2D<Rgba> &p1)
 {
+#ifdef _WIN32
+	std::wstring filenameStr = StrUtils::WidenFilename(fileName);
+#else
+	std::string filenameStr(fileName);
+#endif
+
     //
     // Save a scanline-based RGBA image, but instead of
     // letting the RgbaOutputFile object open the file,
@@ -220,14 +230,14 @@ writeReadScanLines (const char fileName[],
     // MMIFStream (see above).
     //
 
-    cout << "scan-line based file:" << endl;
+    std::cout << "scan-line based file:" << std::endl;
 
     Header header (width, height);
 
     {
-        cout << "writing";
+        std::cout << "writing";
 	remove (fileName);
-	std::ofstream os (fileName, ios_base::binary);
+	OPENEXR_IMF_INTERNAL_NAMESPACE::ofstream os (filenameStr, std::ios_base::binary);
 	StdOFStream ofs (os, fileName);
 	RgbaOutputFile out (ofs, header, WRITE_RGBA);
 	out.setFrameBuffer (&p1[0][0], 1, width);
@@ -235,8 +245,9 @@ writeReadScanLines (const char fileName[],
     }
 
     {
-        cout << ", reading";
-	std::ifstream is (fileName, ios_base::binary);
+        std::cout << ", reading";
+
+	OPENEXR_IMF_INTERNAL_NAMESPACE::ifstream is (filenameStr, std::ios_base::binary);
 	StdIFStream ifs (is, fileName);
 	RgbaInputFile in (ifs);
 
@@ -250,7 +261,7 @@ writeReadScanLines (const char fileName[],
 	in.setFrameBuffer (&p2[-dy][-dx], 1, w);
 	in.readPixels (dw.min.y, dw.max.y);
 
-        cout << ", comparing";
+        std::cout << ", comparing";
 	for (int y = 0; y < h; ++y)
 	{
 	    for (int x = 0; x < w; ++x)
@@ -264,7 +275,7 @@ writeReadScanLines (const char fileName[],
     }
     
     {
-        cout << ", reading (memory-mapped)";
+        std::cout << ", reading (memory-mapped)";
 	MMIFStream ifs (fileName);
 	RgbaInputFile in (ifs);
 
@@ -278,7 +289,7 @@ writeReadScanLines (const char fileName[],
 	in.setFrameBuffer (&p2[-dy][-dx], 1, w);
 	in.readPixels (dw.min.y, dw.max.y);
 
-        cout << ", comparing";
+        std::cout << ", comparing";
 	for (int y = 0; y < h; ++y)
 	{
 	    for (int x = 0; x < w; ++x)
@@ -291,7 +302,7 @@ writeReadScanLines (const char fileName[],
 	}
     }
     
-    cout << endl;
+    std::cout << std::endl;
 
     remove (fileName);
 }
@@ -301,6 +312,11 @@ writeReadMultiPart (const char fileName[],
                     int height,
                     const Array2D<Rgba> &p1)
 {
+#ifdef _WIN32
+	std::wstring filenameStr = StrUtils::WidenFilename(fileName);
+#else
+	std::string filenameStr(fileName);
+#endif
     //
     // Save a two scanline parts in an image, but instead of
     // letting the MultiPartOutputFile object open the file,
@@ -312,9 +328,9 @@ writeReadMultiPart (const char fileName[],
     // MMIFStream (see above).
     //
                         
-    cout << "scan-line based mulitpart file:" << endl;
+    std::cout << "scan-line based mulitpart file:" << std::endl;
                         
-    vector<Header> headers(2);
+    std::vector<Header> headers(2);
     headers[0] = Header(width, height);
     headers[0].setName("part1");
     headers[0].channels().insert("R",Channel());
@@ -328,9 +344,9 @@ writeReadMultiPart (const char fileName[],
     
     
     {
-        cout << "writing";
+        std::cout << "writing";
         remove (fileName);
-        std::ofstream os (fileName, ios_base::binary);
+        OPENEXR_IMF_INTERNAL_NAMESPACE::ofstream os (filenameStr, std::ios_base::binary);
         StdOFStream ofs (os, fileName);
         MultiPartOutputFile out (ofs, &headers[0],2);
         FrameBuffer f;
@@ -348,8 +364,8 @@ writeReadMultiPart (const char fileName[],
     }
                         
     {
-        cout << ", reading";
-        std::ifstream is (fileName, ios_base::binary);
+        std::cout << ", reading";
+        OPENEXR_IMF_INTERNAL_NAMESPACE::ifstream is (filenameStr, std::ios_base::binary);
         StdIFStream ifs (is, fileName);
         MultiPartInputFile in (ifs);
         
@@ -376,7 +392,7 @@ writeReadMultiPart (const char fileName[],
             p.setFrameBuffer(f);
             p.readPixels (dw.min.y, dw.max.y);
                             
-            cout << ", comparing pt " << part;
+            std::cout << ", comparing pt " << part;
             for (int y = 0; y < h; ++y)
             {
                 for (int x = 0; x < w; ++x)
@@ -391,7 +407,7 @@ writeReadMultiPart (const char fileName[],
     }
     
     {
-        cout << ", reading (memory-mapped)";
+        std::cout << ", reading (memory-mapped)";
         MMIFStream ifs (fileName);
         MultiPartInputFile in (ifs);
         
@@ -419,7 +435,7 @@ writeReadMultiPart (const char fileName[],
             p.setFrameBuffer(f);
             p.readPixels (dw.min.y, dw.max.y);
             
-            cout << ", comparing pt " << part;
+            std::cout << ", comparing pt " << part;
             for (int y = 0; y < h; ++y)
             {
                 for (int x = 0; x < w; ++x)
@@ -433,7 +449,7 @@ writeReadMultiPart (const char fileName[],
         }
     }
     
-    cout << endl;
+    std::cout << std::endl;
                         
     remove (fileName);
 }
@@ -446,6 +462,11 @@ writeReadTiles (const char fileName[],
 		int height,
 		const Array2D<Rgba> &p1)
 {
+#ifdef _WIN32
+	std::wstring filenameStr = StrUtils::WidenFilename(fileName);
+#else
+	std::string filenameStr(fileName);
+#endif
     //
     // Save a tiled RGBA image, but instead of letting
     // the TiledRgbaOutputFile object open the file, make
@@ -455,14 +476,14 @@ writeReadTiles (const char fileName[],
     // second time using a memory-mapped MMIFStream (see above).
     //
 
-    cout << "tiled file:" << endl;
+    std::cout << "tiled file:" << std::endl;
 
     Header header (width, height);
 
     {
-        cout << "writing";
+        std::cout << "writing";
 	remove (fileName);
-	std::ofstream os (fileName, ios_base::binary);
+	OPENEXR_IMF_INTERNAL_NAMESPACE::ofstream os (filenameStr, std::ios_base::binary);
 	StdOFStream ofs (os, fileName);
 	TiledRgbaOutputFile out (ofs, header, WRITE_RGBA, 20, 20, ONE_LEVEL);
 	out.setFrameBuffer (&p1[0][0], 1, width);
@@ -470,8 +491,8 @@ writeReadTiles (const char fileName[],
     }
 
     {
-        cout << ", reading";
-	std::ifstream is (fileName, ios_base::binary);
+        std::cout << ", reading";
+	OPENEXR_IMF_INTERNAL_NAMESPACE::ifstream is (filenameStr, std::ios_base::binary);
 	StdIFStream ifs (is, fileName);
 	TiledRgbaInputFile in (ifs);
 
@@ -485,7 +506,7 @@ writeReadTiles (const char fileName[],
 	in.setFrameBuffer (&p2[-dy][-dx], 1, w);
         in.readTiles (0, in.numXTiles() - 1, 0, in.numYTiles() - 1);
 
-        cout << ", comparing";
+        std::cout << ", comparing";
 	for (int y = 0; y < h; ++y)
 	{
 	    for (int x = 0; x < w; ++x)
@@ -499,7 +520,7 @@ writeReadTiles (const char fileName[],
     }
     
     {
-        cout << ", reading (memory-mapped)";
+        std::cout << ", reading (memory-mapped)";
 	MMIFStream ifs (fileName);
 	TiledRgbaInputFile in (ifs);
 
@@ -513,7 +534,7 @@ writeReadTiles (const char fileName[],
 	in.setFrameBuffer (&p2[-dy][-dx], 1, w);
         in.readTiles (0, in.numXTiles() - 1, 0, in.numYTiles() - 1);
 
-        cout << ", comparing";
+        std::cout << ", comparing";
 	for (int y = 0; y < h; ++y)
 	{
 	    for (int x = 0; x < w; ++x)
@@ -526,7 +547,7 @@ writeReadTiles (const char fileName[],
 	}
     }
     
-    cout << endl;
+    std::cout << std::endl;
 
     remove (fileName);
 }
@@ -540,7 +561,7 @@ testExistingStreams (const std::string &tempDir)
 {
     try
     {
-	cout << "Testing reading and writing using existing streams" << endl;
+	std::cout << "Testing reading and writing using existing streams" << std::endl;
 
 	const int W = 119;
 	const int H = 237;
@@ -556,11 +577,11 @@ testExistingStreams (const std::string &tempDir)
     fillPixels1 (p1, W, H);
     writeReadMultiPart ((tempDir +  "imf_test_streams3.exr").c_str(), W, H, p1);
 
-	cout << "ok\n" << endl;
+	std::cout << "ok\n" << std::endl;
     }
     catch (const std::exception &e)
     {
-	cerr << "ERROR -- caught exception: " << e.what() << endl;
+	std::cerr << "ERROR -- caught exception: " << e.what() << std::endl;
 	assert (false);
     }
 }
diff --git a/OpenEXR/IlmImfTest/testMagic.cpp b/OpenEXR/IlmImfTest/testMagic.cpp
index afe87e1..aa7603a 100644
--- a/OpenEXR/IlmImfTest/testMagic.cpp
+++ b/OpenEXR/IlmImfTest/testMagic.cpp
@@ -46,7 +46,6 @@
 
 
 using namespace OPENEXR_IMF_NAMESPACE;
-using namespace std;
 
 
 namespace {
@@ -54,9 +53,14 @@ namespace {
 void
 testFile1 (const char fileName[], bool isImfFile)
 {
-    cout << fileName << " " << flush;
+    std::cout << fileName << " " << std::flush;
 
-    ifstream f (fileName, ios_base::binary);
+#ifdef _WIN32
+	std::wstring filenameStr = StrUtils::WidenFilename(fileName);
+#else
+	std::string filenameStr(fileName);
+#endif
+    OPENEXR_IMF_INTERNAL_NAMESPACE::ifstream f (filenameStr, std::ios_base::binary);
     assert (!!f);
 
     char bytes[4];
@@ -64,14 +68,14 @@ testFile1 (const char fileName[], bool isImfFile)
 
     assert (!!f && isImfFile == isImfMagic (bytes));
 
-    cout << "is " << (isImfMagic (bytes)? "": "not ") << "an OpenEXR file\n";
+    std::cout << "is " << (isImfMagic (bytes)? "": "not ") << "an OpenEXR file\n";
 }
 
 
 void
 testFile2 (const char fileName[], bool exists, bool exrFile, bool tiledFile)
 {
-    cout << fileName << " " << flush;
+    std::cout << fileName << " " << std::flush;
 
     bool exr, tiled;
 
@@ -107,9 +111,9 @@ testFile2 (const char fileName[], bool exists, bool exrFile, bool tiledFile)
 	    assert (is.tellg() == 0);
     }
 
-    cout << (exists? "exists": "does not exist") << ", " <<
+    std::cout << (exists? "exists": "does not exist") << ", " <<
 	    (exrFile? "is an OpenEXR file": "is not an OpenEXR file") << ", " <<
-	    (tiledFile? "is tiled": "is not tiled") << endl;
+	    (tiledFile? "is tiled": "is not tiled") << std::endl;
 }
 
 } // namespace
@@ -120,7 +124,7 @@ testMagic (const std::string &)
 {
     try
     {
-	cout << "Testing magic number" << endl;
+	std::cout << "Testing magic number" << std::endl;
 
 	testFile1 (ILM_IMF_TEST_IMAGEDIR "comp_none.exr", true);
 	testFile1 (ILM_IMF_TEST_IMAGEDIR "invalid.exr", false);
@@ -130,11 +134,11 @@ testMagic (const std::string &)
 	testFile2 (ILM_IMF_TEST_IMAGEDIR "invalid.exr", true, false, false);
 	testFile2 (ILM_IMF_TEST_IMAGEDIR "does_not_exist.exr", false, false, false);
 
-	cout << "ok\n" << endl;
+	std::cout << "ok\n" << std::endl;
     }
     catch (const std::exception &e)
     {
-	cerr << "ERROR -- caught exception: " << e.what() << endl;
+	std::cerr << "ERROR -- caught exception: " << e.what() << std::endl;
 	assert (false);
     }
 }
diff --git a/OpenEXR/IlmImfTest/testPreviewImage.cpp b/OpenEXR/IlmImfTest/testPreviewImage.cpp
index 16c0573..afeff40 100644
--- a/OpenEXR/IlmImfTest/testPreviewImage.cpp
+++ b/OpenEXR/IlmImfTest/testPreviewImage.cpp
@@ -33,6 +33,7 @@
 ///////////////////////////////////////////////////////////////////////////
 
 
+#include <ImfStdIO.h>
 #include <ImfRgbaFile.h>
 #include <ImfArray.h>
 #include <ImfPreviewImage.h>
@@ -46,7 +47,6 @@
 
 
 using namespace OPENEXR_IMF_NAMESPACE;
-using namespace std;
 using namespace IMATH_NAMESPACE;
 
 
@@ -77,7 +77,7 @@ readWriteFiles (const char fileName1[],
     // the files are identical.
     //
 
-    cout << "reading file " << fileName1 << endl;
+    std::cout << "reading file " << fileName1 << std::endl;
 
     RgbaInputFile file1 (fileName1);
 
@@ -94,7 +94,7 @@ readWriteFiles (const char fileName1[],
     file1.setFrameBuffer (pixels1 - dx - dy * w, 1, w);
     file1.readPixels (dw.min.y, dw.max.y);
 
-    cout << "generating preview image" << endl;
+    std::cout << "generating preview image" << std::endl;
 
     const int PREVIEW_WIDTH  = 128;
     const int PREVIEW_HEIGHT = 64;
@@ -105,7 +105,7 @@ readWriteFiles (const char fileName1[],
 	for (int x = 0; x < PREVIEW_WIDTH; ++x)
 	    preview1.pixel (x, y) = PreviewRgba (x*2, y*4, x+y, 128);
 
-    cout << "writing file " << fileName2 << endl;
+    std::cout << "writing file " << fileName2 << std::endl;
 
     {
 	Header header (file1.header());
@@ -118,7 +118,7 @@ readWriteFiles (const char fileName1[],
 	    file2.writePixels (1);
     }
 
-    cout << "reading file " << fileName2 << endl;
+    std::cout << "reading file " << fileName2 << std::endl;
 
     {
 	RgbaInputFile file2 (fileName2);
@@ -155,7 +155,7 @@ readWriteFiles (const char fileName1[],
 	}
     }
 
-    cout << "writing file " << fileName3 << endl;
+    std::cout << "writing file " << fileName3 << std::endl;
 
     {
 	Header header (file1.header());
@@ -173,11 +173,18 @@ readWriteFiles (const char fileName1[],
 	}
     }
 
-    cout << "comparing files " << fileName2 << " and " << fileName3 << endl;
+    std::cout << "comparing files " << fileName2 << " and " << fileName3 << std::endl;
 
     {
-	ifstream file2 (fileName2, std::ios_base::binary);
-	ifstream file3 (fileName3, std::ios_base::binary);
+#ifdef _WIN32
+	std::wstring filename2Str = StrUtils::WidenFilename(fileName2);
+	std::wstring filename3Str = StrUtils::WidenFilename(fileName3);
+#else
+	std::string filename2Str(fileName2);
+	std::string filename3Str(fileName3);
+#endif
+	OPENEXR_IMF_INTERNAL_NAMESPACE::ifstream file2 (filename2Str, std::ios_base::binary);
+	OPENEXR_IMF_INTERNAL_NAMESPACE::ifstream file3 (filename3Str, std::ios_base::binary);
 
 	while (true)
 	{
@@ -207,17 +214,17 @@ testPreviewImage (const std::string &tempDir)
 
     try
     {
-	cout << "Testing preview image attribute" << endl;
+	std::cout << "Testing preview image attribute" << std::endl;
 
 	readWriteFiles (ILM_IMF_TEST_IMAGEDIR "comp_piz.exr",
 			filename1.c_str(),
 			filename2.c_str());
 
-	cout << "ok\n" << endl;
+	std::cout << "ok\n" << std::endl;
     }
     catch (const std::exception &e)
     {
-	cerr << "ERROR -- caught exception: " << e.what() << endl;
+	std::cerr << "ERROR -- caught exception: " << e.what() << std::endl;
 	assert (false);
     }
 }

From 0e0cafdac40cd9d64c4ed0b2ed0ed324ee9b339a Mon Sep 17 00:00:00 2001
From: MrKepzie <alexandre230@msn.com>
Date: Wed, 24 Feb 2016 17:41:34 +0100
Subject: [PATCH 2/2] Add missing header

---
 OpenEXR/IlmImf/fstream_mingw.h | 357 +++++++++++++++++++++++++++++++++++++++++
 1 file changed, 357 insertions(+)
 create mode 100644 IlmImf/fstream_mingw.h

diff --git a/OpenEXR/IlmImf/fstream_mingw.h b/OpenEXR/IlmImf/fstream_mingw.h
new file mode 100644
index 0000000..fd2ccc4
--- /dev/null
+++ b/IlmImf/fstream_mingw.h
@@ -0,0 +1,357 @@
+///////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2004, Industrial Light & Magic, a division of Lucas
+// Digital Ltd. LLC
+// 
+// All rights reserved.
+// 
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are
+// met:
+// *       Redistributions of source code must retain the above copyright
+// notice, this list of conditions and the following disclaimer.
+// *       Redistributions in binary form must reproduce the above
+// copyright notice, this list of conditions and the following disclaimer
+// in the documentation and/or other materials provided with the
+// distribution.
+// *       Neither the name of Industrial Light & Magic nor the names of
+// its contributors may be used to endorse or promote products derived
+// from this software without specific prior written permission. 
+// 
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+///////////////////////////////////////////////////////////////////////////
+
+
+/// @file  fstream_mingw.h
+///
+/// @brief Utilities for dealing with fstream on MingW.
+/// Basically accepting wchar_t* filenames in the std::ifstream::open function
+/// is a Windows MSVC extension and does not work on MingW. This file implements
+/// ifstream and ofstream so that they work with UTF-8 filenames.
+
+
+#ifndef INCLUDED_IMF_FSTREAM_MINGW_H
+#define INCLUDED_IMF_FSTREAM_MINGW_H
+
+#include <cassert>
+#include <istream>
+#include <ostream>
+
+#if defined(_WIN32) && defined(__GLIBCXX__)
+#include <ext/stdio_filebuf.h> // __gnu_cxx::stdio_filebuf
+#include <fcntl.h>
+#include <sys/stat.h>
+#include <Share.h>
+
+#include "ImfNamespace.h"
+
+OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER
+
+
+template <class _CharT, class _Traits = std::char_traits<_CharT> >
+class basic_ifstream
+: public std::basic_istream<_CharT, _Traits>
+{
+public:
+    typedef _CharT                         char_type;
+    typedef _Traits                        traits_type;
+    typedef typename traits_type::int_type int_type;
+    typedef typename traits_type::pos_type pos_type;
+    typedef typename traits_type::off_type off_type;
+    
+    typedef typename __gnu_cxx::stdio_filebuf<char_type, traits_type> stdio_filebuf;
+
+    
+    basic_ifstream();
+    explicit basic_ifstream(const std::wstring& path, std::ios_base::openmode __mode = std::ios_base::in);
+    
+    virtual ~basic_ifstream();
+    
+    stdio_filebuf* rdbuf() const;
+    bool is_open() const;
+    void open(const std::wstring& path, std::ios_base::openmode __mode = std::ios_base::in);
+    void close();
+    
+private:
+    
+    void open_internal(const std::wstring& path, std::ios_base::openmode mode);
+    
+    stdio_filebuf* __sb_;
+};
+
+template <class _CharT, class _Traits>
+inline
+basic_ifstream<_CharT, _Traits>::basic_ifstream()
+: std::basic_istream<char_type, traits_type>(0)
+, __sb_(0)
+{
+}
+
+
+template <class _CharT, class _Traits>
+inline
+basic_ifstream<_CharT, _Traits>::basic_ifstream(const std::wstring& path, std::ios_base::openmode __mode)
+: std::basic_istream<char_type, traits_type>(0)
+, __sb_(0)
+{
+    open_internal(path, __mode | std::ios_base::in);
+}
+
+template <class _CharT, class _Traits>
+inline
+basic_ifstream<_CharT, _Traits>::~basic_ifstream()
+{
+    delete __sb_;
+}
+
+
+inline int
+ios_open_mode_to_oflag(std::ios_base::openmode mode)
+{
+    int f = 0;
+    if (mode & std::ios_base::in) {
+        f |= _O_RDONLY;
+    }
+    if (mode & std::ios_base::out) {
+        f |= _O_WRONLY;
+        f |= _O_CREAT;
+        if (mode & std::ios_base::app) {
+            f |= _O_APPEND;
+        }
+        if (mode & std::ios_base::trunc) {
+            f |= _O_TRUNC;
+        }
+    }
+    if (mode & std::ios_base::binary) {
+        f |= _O_BINARY;
+    } else {
+        f |= _O_TEXT;
+    }
+    return f;
+}
+
+template <class _CharT, class _Traits>
+inline
+void
+basic_ifstream<_CharT, _Traits>::open_internal(const std::wstring& path, std::ios_base::openmode mode)
+{
+	if (is_open()) {
+		// if the stream is already associated with a file (i.e., it is already open), calling this function fails.
+		this->setstate(std::ios_base::failbit);
+        return;
+	}
+    int fd;
+    int oflag = ios_open_mode_to_oflag(mode);
+    errno_t errcode = _wsopen_s(&fd, path.c_str(), oflag, _SH_DENYNO, _S_IREAD | _S_IWRITE);
+    if (errcode != 0) {
+        this->setstate(std::ios_base::failbit);
+        return;
+    }
+    __sb_ = new stdio_filebuf(fd, mode, 1);
+    if (__sb_ == 0) {
+        this->setstate(std::ios_base::failbit);
+        return;
+    }
+	// 409. Closing an fstream should clear error state
+    this->clear();
+	assert(__sb_);
+	
+	// In init() the rdstate() is set to badbit if __sb_ is NULL and
+	// goodbit otherwise. The assert afterwards ensures this.
+    this->init(__sb_);
+	assert(this->good() && !this->fail());
+}
+
+template <class _CharT, class _Traits>
+inline
+typename basic_ifstream<_CharT, _Traits>::stdio_filebuf*
+basic_ifstream<_CharT, _Traits>::rdbuf() const
+{
+    return const_cast<stdio_filebuf*>(__sb_);
+}
+
+
+template <class _CharT, class _Traits>
+inline
+bool
+basic_ifstream<_CharT, _Traits>::is_open() const
+{
+    return __sb_ && __sb_->is_open();
+}
+
+
+template <class _CharT, class _Traits>
+void
+basic_ifstream<_CharT, _Traits>::open(const std::wstring& path, std::ios_base::openmode __mode)
+{
+    open_internal(path, __mode | std::ios_base::in);
+}
+
+template <class _CharT, class _Traits>
+inline
+void
+basic_ifstream<_CharT, _Traits>::close()
+{
+    if (!__sb_) {
+        return;
+    }
+    if (__sb_->close() == 0)
+        this->setstate(std::ios_base::failbit);
+    
+    delete __sb_;
+	__sb_= 0;
+
+}
+
+
+
+template <class _CharT, class _Traits = std::char_traits<_CharT> >
+class basic_ofstream
+: public std::basic_ostream<_CharT, _Traits>
+{
+public:
+    typedef _CharT                         char_type;
+    typedef _Traits                        traits_type;
+    typedef typename traits_type::int_type int_type;
+    typedef typename traits_type::pos_type pos_type;
+    typedef typename traits_type::off_type off_type;
+    
+    typedef typename __gnu_cxx::stdio_filebuf<char_type, traits_type> stdio_filebuf;
+    
+    
+    basic_ofstream();
+    explicit basic_ofstream(const std::wstring& path, std::ios_base::openmode __mode = std::ios_base::out);
+    
+    virtual ~basic_ofstream();
+    
+    stdio_filebuf* rdbuf() const;
+    bool is_open() const;
+    void open(const std::wstring& path, std::ios_base::openmode __mode = std::ios_base::out);
+    void close();
+    
+private:
+    
+    void open_internal(const std::wstring& path, std::ios_base::openmode mode);
+    
+    stdio_filebuf* __sb_;
+};
+
+template <class _CharT, class _Traits>
+inline
+basic_ofstream<_CharT, _Traits>::basic_ofstream()
+: std::basic_ostream<char_type, traits_type>(0)
+, __sb_(0)
+{
+}
+
+
+template <class _CharT, class _Traits>
+inline
+basic_ofstream<_CharT, _Traits>::basic_ofstream(const std::wstring& path, std::ios_base::openmode __mode)
+: std::basic_ostream<char_type, traits_type>(0)
+, __sb_(0)
+{
+    open_internal(path, __mode  | std::ios_base::out);
+}
+
+template <class _CharT, class _Traits>
+inline
+basic_ofstream<_CharT, _Traits>::~basic_ofstream()
+{
+    delete __sb_;
+}
+
+
+template <class _CharT, class _Traits>
+inline
+void
+basic_ofstream<_CharT, _Traits>::open_internal(const std::wstring& path, std::ios_base::openmode mode)
+{
+	if (is_open()) {
+		// if the stream is already associated with a file (i.e., it is already open), calling this function fails.
+		this->setstate(std::ios_base::failbit);
+        return;
+	}
+    int fd;
+    int oflag = ios_open_mode_to_oflag(mode);
+    errno_t errcode = _wsopen_s(&fd, path.c_str(), oflag, _SH_DENYNO, _S_IREAD | _S_IWRITE);
+    if (errcode != 0) {
+        this->setstate(std::ios_base::failbit);
+        return;
+    }
+    __sb_ = new stdio_filebuf(fd, mode, 1);
+    if (__sb_ == 0) {
+        this->setstate(std::ios_base::failbit);
+        return;
+    }
+	// 409. Closing an fstream should clear error state
+    this->clear();
+	assert(__sb_);
+	
+	// In init() the rdstate() is set to badbit if __sb_ is NULL and
+	// goodbit otherwise. The assert afterwards ensures this.
+    this->init(__sb_);
+	assert(this->good() && !this->fail());
+}
+
+
+template <class _CharT, class _Traits>
+inline
+typename basic_ofstream<_CharT, _Traits>::stdio_filebuf*
+basic_ofstream<_CharT, _Traits>::rdbuf() const
+{
+    return const_cast<stdio_filebuf*>(__sb_);
+}
+
+
+
+template <class _CharT, class _Traits>
+inline
+bool
+basic_ofstream<_CharT, _Traits>::is_open() const
+{
+    return __sb_ && __sb_->is_open();
+}
+
+
+template <class _CharT, class _Traits>
+void
+basic_ofstream<_CharT, _Traits>::open(const std::wstring& path, std::ios_base::openmode __mode)
+{
+    open_internal(path, __mode | std::ios_base::out);
+}
+
+template <class _CharT, class _Traits>
+inline 
+void
+basic_ofstream<_CharT, _Traits>::close()
+{
+    if (!__sb_) {
+        return;
+    }
+    if (__sb_->close() == 0)
+        this->setstate(std::ios_base::failbit);
+    
+    delete __sb_;
+	__sb_= 0;
+}
+// basic_fstream
+
+OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT
+
+
+#endif // #if defined(_WIN32) && defined(__GLIBCXX__)
+
+
+#endif // INCLUDED_IMF_FSTREAM_MINGW_H
