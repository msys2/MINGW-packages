--- configure.ac.orig	2012-11-21 22:34:12.148598606 +0100
+++ configure.ac	2012-11-21 22:35:17.036673433 +0100
@@ -112,6 +112,13 @@
 AM_CONDITIONAL([COMPAT_OPT], [test "$want_compat" = yes])
 AM_CONDITIONAL([ENABLE_EXPORT], [test "$want_export" = yes])
 
+if test x$host_os = xmingw32
+then
+  AM_CONDITIONAL(WIN32, true)
+else
+  AM_CONDITIONAL(WIN32, false)
+fi
+
 # Initialize the test suite.
 AC_CONFIG_TESTDIR(tests)
 AC_CONFIG_FILES([tests/Makefile tests/atlocal po/Makefile.in])
--- src/Makefile.am.orig	2012-11-21 22:27:53.410325014 +0100
+++ src/Makefile.am	2012-11-21 22:33:13.957634294 +0100
@@ -65,7 +65,10 @@
  update.c\
  version.c
 
-libgdbm_la_LDFLAGS = -version-info $(VI_CURRENT):$(VI_REVISION):$(VI_AGE)
+libgdbm_la_LDFLAGS = -version-info $(VI_CURRENT):$(VI_REVISION):$(VI_AGE) -no-undefined
+if WIN32
+libgdbm_la_LDFLAGS += -lws2_32
+endif
 
 noinst_LIBRARIES = libgdbmapp.a
 
--- src/update.c.orig	2012-11-21 22:25:32.667991693 +0100
+++ src/update.c	2012-11-21 22:27:07.567564969 +0100
@@ -39,8 +39,10 @@
     _gdbm_fatal (dbf, gdbm_strerror (rc));
 
   /* Sync the file if fast_write is FALSE. */
+#ifdef HAVE_FSYNC
   if (dbf->fast_write == FALSE)
     __fsync (dbf);
+#endif
 }
 
 
@@ -84,8 +86,10 @@
       if (rc)
 	_gdbm_fatal (dbf, gdbm_strerror (rc));
       dbf->directory_changed = FALSE;
+#ifdef HAVE_FSYNC
       if (!dbf->header_changed && dbf->fast_write == FALSE)
 	__fsync (dbf);
+#endif
     }
 
   /* Final write of the header. */
--- src/gdbmsync.c.orig	2012-11-21 22:30:53.253304003 +0100
+++ src/gdbmsync.c	2012-11-21 22:31:02.123450829 +0100
@@ -31,7 +31,8 @@
   /* Initialize the gdbm_errno variable. */
   gdbm_errno = GDBM_NO_ERROR;
 
+#ifdef HAVE_FSYNC
   /* Do the sync on the file. */
   __fsync (dbf);
-
+#endif
 }
--- src/gdbmopen.c.orig	2012-11-21 22:29:23.495815449 +0100
+++ src/gdbmopen.c	2012-11-21 22:29:37.659050171 +0100
@@ -316,8 +316,10 @@
 	  return NULL;
 	}
 
+#ifdef HAVE_FSYNC
       /* Wait for initial configuration to be written to disk. */
       __fsync (dbf);
+#endif
 
       free (dbf->bucket);
     }
--- src/gdbmclose.c.orig	2012-11-21 22:30:04.928503285 +0100
+++ src/gdbmclose.c	2012-11-21 22:30:14.862667066 +0100
@@ -31,9 +31,11 @@
 {
   int index;	/* For freeing the bucket cache. */
 
+#ifdef HAVE_FSYNC
   /* Make sure the database is all on disk. */
   if (dbf->read_write != GDBM_READER)
     __fsync (dbf);
+#endif
 
   /* Close the file and free all malloced memory. */
 #if HAVE_MMAP
--- src/gdbmreorg.c.orig	2012-11-21 22:30:26.776863411 +0100
+++ src/gdbmreorg.c	2012-11-21 22:30:37.976049148 +0100
@@ -207,8 +207,10 @@
   free (new_dbf);
   free (new_name);
 
+#ifdef HAVE_FSYNC
   /* Make sure the new database is all on disk. */
   __fsync (dbf);
+#endif
 
   /* Force the right stuff for a correct bucket cache. */
   dbf->cache_entry    = &dbf->bucket_cache[0];
--- src/gdbmdump.c.orig	2015-01-01 22:10:46.464030280 +0100
+++ src/gdbmdump.c	2015-01-01 22:11:29.762727347 +0100
@@ -17,8 +17,6 @@
 # include "autoconf.h"
 # include "gdbmdefs.h"
 # include "gdbm.h"
-# include <pwd.h>
-# include <grp.h>
 # include <time.h>
 
 static int
@@ -56,8 +54,6 @@
   time_t t;
   int fd;
   struct stat st;
-  struct passwd *pw;
-  struct group *gr;
   datum key;
   size_t count = 0;
   unsigned char *buffer = NULL;
@@ -76,13 +72,7 @@
 
   fprintf (fp, "#:file=%s\n", dbf->name);
   fprintf (fp, "#:uid=%lu,", (unsigned long) st.st_uid);
-  pw = getpwuid (st.st_uid);
-  if (pw)
-    fprintf (fp, "user=%s,", pw->pw_name);
   fprintf (fp, "gid=%lu,", (unsigned long) st.st_gid);
-  gr = getgrgid (st.st_gid);
-  if (gr)
-    fprintf (fp, "group=%s,", gr->gr_name);
   fprintf (fp, "mode=%03o\n", st.st_mode & 0777);
   fprintf (fp, "# End of header\n");
   
--- src/gdbmexp.c.orig	2015-01-01 22:37:11.643551174 +0100
+++ src/gdbmexp.c	2015-01-01 22:37:18.896668075 +0100
@@ -18,7 +18,7 @@
 
 /* Include system configuration before all else. */
 # include "autoconf.h"
-# include <arpa/inet.h>
+# include <winsock2.h>
 
 # include "gdbmdefs.h"
 # include "gdbm.h"
--- src/gdbmload.c.windows	2013-12-25 10:52:42.000000000 +0100
+++ src/gdbmload.c	2015-01-01 22:47:10.027195405 +0100
@@ -18,8 +18,6 @@
 # include "gdbmdefs.h"
 # include "gdbm.h"
 # include <sys/types.h>
-# include <pwd.h>
-# include <grp.h>
 
 struct datbuf
 {
@@ -288,14 +286,13 @@
 _set_gdbm_meta_info (GDBM_FILE dbf, char *param, int meta_mask)
 {
   unsigned long n;
-  uid_t owner_uid;
-  uid_t owner_gid;
   mode_t mode;
   int meta_flags = 0;
   const char *p;
   char *end;
   int rc = 0;
 
+#if 0
   if (!(meta_mask & GDBM_META_MASK_OWNER))
     {
       p = getparm (param, "user");
@@ -341,6 +338,7 @@
 	    }
 	}
     }
+#endif
   
   if (!(meta_mask & GDBM_META_MASK_MODE))
     {
@@ -357,6 +355,7 @@
 	}
     }
   
+#if 0 
   if (meta_flags)
     {
       int fd = gdbm_fdesc (dbf);
@@ -383,6 +382,7 @@
 	  rc = 1;
 	}
     }
+#endif
   return rc;
 }
 
--- src/gdbmimp.c.orig	2015-01-01 22:47:52.994887921 +0100
+++ src/gdbmimp.c	2015-01-01 22:47:58.755980773 +0100
@@ -17,7 +17,7 @@
    along with GDBM. If not, see <http://www.gnu.org/licenses/>.   */
 
 # include "autoconf.h"
-# include <arpa/inet.h>
+# include <winsock2.h>
 # include <limits.h>
 
 # include "gdbmdefs.h"
--- src/gdbmtool.c.orig	2015-01-01 22:50:36.615525016 +0100
+++ src/gdbmtool.c	2015-01-01 22:50:59.346891381 +0100
@@ -22,8 +22,6 @@
 #include <errno.h>
 #include <ctype.h>
 #include <signal.h>
-#include <pwd.h>
-#include <sys/ioctl.h>
 #ifdef HAVE_SYS_TERMIOS_H
 # include <sys/termios.h>
 #endif
@@ -1497,6 +1495,7 @@
       if (setsource (GDBMTOOLRC, 0) == 0)
 	yyparse ();
     }
+#if 0
   else
     {
       char *fname;
@@ -1519,6 +1518,7 @@
 	}
       free (fname);
     }
+#endif
 }
 
 int
@@ -1620,8 +1620,6 @@
   if (argc == 1)
     file_name = argv[0];
 
-  signal (SIGPIPE, SIG_IGN);
-
   memset (&param, 0, sizeof (param));
   argmax = 0;
 
--- src/util.c.orig	2015-01-01 23:01:56.323492992 +0100
+++ src/util.c	2015-01-01 23:02:01.910583185 +0100
@@ -16,7 +16,6 @@
    along with GDBM. If not, see <http://www.gnu.org/licenses/>.    */
 
 #include "gdbmtool.h"
-#include <pwd.h>
 
 char *
 mkfilename (const char *dir, const char *file, const char *suf)
@@ -45,6 +44,7 @@
 char *
 tildexpand (char *s)
 {
+#if 0
   if (s[0] == '~')
     {
       char *p = s + 1;
@@ -65,6 +65,7 @@
       if (pw)
 	return mkfilename (pw->pw_dir, p + len + 1, NULL);
     }
+#endif
   return estrdup (s);
 }
 
--- src/gdbm_load.c.orig	2015-01-01 23:04:32.733017885 +0100
+++ src/gdbm_load.c	2015-01-01 23:05:01.929489199 +0100
@@ -18,16 +18,12 @@
 # include "gdbm.h"
 # include "gdbmapp.h"
 # include "gdbmdefs.h"
-# include <pwd.h>
-# include <grp.h>
 
 int replace = 0;
 int meta_mask = 0;
 int no_meta_option;
 
 int mode;
-uid_t owner_uid;
-gid_t owner_gid;
 
 char *parseopt_program_doc = "load a GDBM database from a file";
 char *parseopt_program_args = "FILE [DB_FILE]";
@@ -45,6 +44,7 @@
 static int
 set_meta_info (GDBM_FILE dbf)
 {
+#if 0
   if (meta_mask)
     {
       int fd = gdbm_fdesc (dbf);
@@ -63,6 +63,7 @@
 	  return 1;
 	}
     }
+#endif
   return 0;
 }
 
@@ -139,6 +137,7 @@
 	}
 	break;
 
+#if 0
       case 'u':
 	{
 	  size_t len;
@@ -198,6 +197,7 @@
 	  meta_mask |= GDBM_META_MASK_OWNER;
 	}
 	break;
+#endif
 	  
       case 'r':
 	replace = 1;
