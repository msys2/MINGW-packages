diff -Naur gdbm-1.14.1.orig/configure.ac gdbm-1.14.1/configure.ac
--- gdbm-1.14.1.orig/configure.ac	2018-05-07 16:31:46.286799900 -0400
+++ gdbm-1.14.1/configure.ac	2018-05-07 16:32:59.724857300 -0400
@@ -132,6 +132,13 @@
 AM_CONDITIONAL([COMPAT_OPT], [test "$want_compat" = yes])
 AM_CONDITIONAL([ENABLE_EXPORT], [test "$want_export" = yes])
 
+if test x$host_os = xmingw32
+then
+  AM_CONDITIONAL(WIN32, true)
+else
+  AM_CONDITIONAL(WIN32, false)
+fi
+
 # Check for Curses libs.
 for lib in ncurses curses termcap
 do
diff -Naur gdbm-1.14.1.orig/src/gdbm_load.c gdbm-1.14.1/src/gdbm_load.c
--- gdbm-1.14.1.orig/src/gdbm_load.c	2018-05-07 16:31:46.146175400 -0400
+++ gdbm-1.14.1/src/gdbm_load.c	2018-05-07 17:08:16.286847400 -0400
@@ -18,16 +18,20 @@
 # include "gdbm.h"
 # include "gdbmapp.h"
 # include "gdbmdefs.h"
+#ifndef _WIN32
 # include <pwd.h>
 # include <grp.h>
+#endif
 
 int replace = 0;
 int meta_mask = 0;
 int no_meta_option;
 
 int mode;
+#ifndef _WIN32
 uid_t owner_uid;
 gid_t owner_gid;
+#endif
 
 char *parseopt_program_doc = "load a GDBM database from a file";
 char *parseopt_program_args = "FILE [DB_FILE]";
@@ -45,6 +49,7 @@
 static int
 set_meta_info (GDBM_FILE dbf)
 {
+  #ifndef _WIN32
   if (meta_mask)
     {
       int fd = gdbm_fdesc (dbf);
@@ -63,6 +68,7 @@
 	  return 1;
 	}
     }
+  #endif
   return 0;
 }
 
@@ -139,6 +145,7 @@
 	}
 	break;
 
+    #ifndef _WIN32
       case 'u':
 	{
 	  size_t len;
@@ -198,6 +205,7 @@
 	  meta_mask |= GDBM_META_MASK_OWNER;
 	}
 	break;
+#endif
 	  
       case 'r':
 	replace = 1;
diff -Naur gdbm-1.14.1.orig/src/gdbmclose.c gdbm-1.14.1/src/gdbmclose.c
--- gdbm-1.14.1.orig/src/gdbmclose.c	2018-05-07 16:31:46.130550300 -0400
+++ gdbm-1.14.1/src/gdbmclose.c	2018-05-07 16:38:28.413015100 -0400
@@ -33,9 +33,11 @@
 
   if (dbf->desc != -1)
     {
+    #ifdef HAVE_FSYNC
       /* Make sure the database is all on disk. */
       if (dbf->read_write != GDBM_READER)
 	__fsync (dbf);
+    #endif
 
       /* Close the file and free all malloced memory. */
 #if HAVE_MMAP
diff -Naur gdbm-1.14.1.orig/src/gdbmdump.c gdbm-1.14.1/src/gdbmdump.c
--- gdbm-1.14.1.orig/src/gdbmdump.c	2018-05-07 16:31:46.193049200 -0400
+++ gdbm-1.14.1/src/gdbmdump.c	2018-05-07 16:41:45.306003300 -0400
@@ -17,8 +17,10 @@
 # include "autoconf.h"
 # include "gdbmdefs.h"
 # include "gdbm.h"
+#ifndef _WIN32
 # include <pwd.h>
 # include <grp.h>
+#endif
 # include <time.h>
 
 static int
@@ -56,8 +58,10 @@
   time_t t;
   int fd;
   struct stat st;
+  #ifndef _WIN32
   struct passwd *pw;
   struct group *gr;
+  #endif
   datum key;
   size_t count = 0;
   unsigned char *buffer = NULL;
@@ -76,13 +80,17 @@
 
   fprintf (fp, "#:file=%s\n", dbf->name);
   fprintf (fp, "#:uid=%lu,", (unsigned long) st.st_uid);
+  #ifndef _WIN32
   pw = getpwuid (st.st_uid);
   if (pw)
     fprintf (fp, "user=%s,", pw->pw_name);
+  #endif
   fprintf (fp, "gid=%lu,", (unsigned long) st.st_gid);
+  #ifndef _WIN32
   gr = getgrgid (st.st_gid);
   if (gr)
     fprintf (fp, "group=%s,", gr->gr_name);
+  #endif
   fprintf (fp, "mode=%03o\n", st.st_mode & 0777);
   fprintf (fp, "# End of header\n");
   
diff -Naur gdbm-1.14.1.orig/src/gdbmexp.c gdbm-1.14.1/src/gdbmexp.c
--- gdbm-1.14.1.orig/src/gdbmexp.c	2018-05-07 16:31:46.099298000 -0400
+++ gdbm-1.14.1/src/gdbmexp.c	2018-05-07 16:42:49.070806000 -0400
@@ -19,7 +19,11 @@
 
 /* Include system configuration before all else. */
 # include "autoconf.h"
+#ifdef _WIN32
+# include <winsock2.h>
+#else
 # include <arpa/inet.h>
+#endif
 
 #ifdef GDBM_EXPORT_18
 # define GDBM_SET_ERRNO(dbf, ec, fatal) gdbm_errno = ec
diff -Naur gdbm-1.14.1.orig/src/gdbmimp.c gdbm-1.14.1/src/gdbmimp.c
--- gdbm-1.14.1.orig/src/gdbmimp.c	2018-05-07 16:31:46.193049200 -0400
+++ gdbm-1.14.1/src/gdbmimp.c	2018-05-07 16:50:48.372304600 -0400
@@ -18,7 +18,11 @@
    along with GDBM. If not, see <http://www.gnu.org/licenses/>.   */
 
 # include "autoconf.h"
+#ifdef _WIN32
+# include <winsock2.h>
+#else
 # include <arpa/inet.h>
+#endif
 # include <limits.h>
 
 # include "gdbmdefs.h"
diff -Naur gdbm-1.14.1.orig/src/gdbmload.c gdbm-1.14.1/src/gdbmload.c
--- gdbm-1.14.1.orig/src/gdbmload.c	2018-05-07 16:31:46.114922700 -0400
+++ gdbm-1.14.1/src/gdbmload.c	2018-05-07 17:04:52.140643800 -0400
@@ -18,8 +18,10 @@
 # include "gdbmdefs.h"
 # include "gdbm.h"
 # include <sys/types.h>
+#ifndef _WIN32
 # include <pwd.h>
 # include <grp.h>
+#endif
 
 struct datbuf
 {
@@ -289,13 +291,16 @@
 _set_gdbm_meta_info (GDBM_FILE dbf, char *param, int meta_mask)
 {
   unsigned long n;
+  #ifndef _WIN32
   uid_t owner_uid;
   uid_t owner_gid;
+  #endif
   mode_t mode;
   int meta_flags = 0;
   const char *p;
   char *end;
 
+#ifndef _WIN32
   if (!(meta_mask & GDBM_META_MASK_OWNER))
     {
       p = getparm (param, "user");
@@ -341,6 +346,7 @@
 	    }
 	}
     }
+#endif
   
   if (!(meta_mask & GDBM_META_MASK_MODE))
     {
@@ -356,6 +362,8 @@
 	    }
 	}
     }
+
+#ifndef _WIN32
   
   if (meta_flags)
     {
@@ -388,6 +396,7 @@
 	}
     }
   return 0;
+  #endif
 }
 
 int
diff -Naur gdbm-1.14.1.orig/src/gdbmopen.c gdbm-1.14.1/src/gdbmopen.c
--- gdbm-1.14.1.orig/src/gdbmopen.c	2018-05-07 16:31:46.177424500 -0400
+++ gdbm-1.14.1/src/gdbmopen.c	2018-05-07 17:03:14.955767000 -0400
@@ -32,7 +32,7 @@
 #endif
 
 static void
-compute_directory_size (GDBM_FILE dbf, blksize_t block_size,
+compute_directory_size (GDBM_FILE dbf, _fsize_t block_size,
 			int *ret_dir_size, int *ret_dir_bits)
 {
   /* Create the initial hash table directory.  */
@@ -312,8 +312,10 @@
 	  return NULL;
 	}
 
+#ifdef HAVE_FSYNC
       /* Wait for initial configuration to be written to disk. */
       __fsync (dbf);
+#endif
 
       free (dbf->bucket);
     }
diff -Naur gdbm-1.14.1.orig/src/gdbmsync.c gdbm-1.14.1/src/gdbmsync.c
--- gdbm-1.14.1.orig/src/gdbmsync.c	2018-05-07 16:31:46.146175400 -0400
+++ gdbm-1.14.1/src/gdbmsync.c	2018-05-07 16:36:49.799892800 -0400
@@ -33,7 +33,9 @@
   /* Initialize the gdbm_errno variable. */
   gdbm_set_errno (dbf, GDBM_NO_ERROR, FALSE);
 
+#ifdef HAVE_FSYNC
   /* Do the sync on the file. */
   __fsync (dbf);
+#endif
 
 }
diff -Naur gdbm-1.14.1.orig/src/gdbmtool.c gdbm-1.14.1/src/gdbmtool.c
--- gdbm-1.14.1.orig/src/gdbmtool.c	2018-05-07 16:31:46.255549500 -0400
+++ gdbm-1.14.1/src/gdbmtool.c	2018-05-07 16:52:52.622428900 -0400
@@ -22,8 +22,10 @@
 #include <errno.h>
 #include <ctype.h>
 #include <signal.h>
+#ifndef _WIN32
 #include <pwd.h>
 #include <sys/ioctl.h>
+#endif
 #ifdef HAVE_SYS_TERMIOS_H
 # include <sys/termios.h>
 #endif
@@ -1945,6 +1947,7 @@
       if (setsource (GDBMTOOLRC, 0) == 0)
 	yyparse ();
     }
+  #ifndef _WIN32
   else
     {
       char *fname;
@@ -1967,6 +1970,7 @@
 	}
       free (fname);
     }
+  #endif
 }
 
 #if GDBM_DEBUG_ENABLE
@@ -2087,7 +2091,9 @@
   if (argc == 1)
     file_name = estrdup (argv[0]);
 
+  #ifndef _WIN32
   signal (SIGPIPE, SIG_IGN);
+  #endif
 
   memset (&param, 0, sizeof (param));
   argmax = 0;
diff -Naur gdbm-1.14.1.orig/src/Makefile.am gdbm-1.14.1/src/Makefile.am
--- gdbm-1.14.1.orig/src/Makefile.am	2018-05-07 16:31:46.255549500 -0400
+++ gdbm-1.14.1/src/Makefile.am	2018-05-07 16:34:27.678336500 -0400
@@ -74,7 +74,10 @@
   libgdbm_la_SOURCES += debug.c
 endif
 
-libgdbm_la_LDFLAGS = -version-info $(VI_CURRENT):$(VI_REVISION):$(VI_AGE)
+libgdbm_la_LDFLAGS = -version-info $(VI_CURRENT):$(VI_REVISION):$(VI_AGE) -no-undefined
+if WIN32
+libgdbm_la_LDFLAGS += -lws2_32
+endif
 
 noinst_LIBRARIES = libgdbmapp.a
 
diff -Naur gdbm-1.14.1.orig/src/recover.c gdbm-1.14.1/src/recover.c
--- gdbm-1.14.1.orig/src/recover.c	2018-05-07 16:31:46.239923800 -0400
+++ gdbm-1.14.1/src/recover.c	2018-05-07 20:51:08.067645700 -0400
@@ -23,7 +23,7 @@
 gdbm_copy_meta (GDBM_FILE dst, GDBM_FILE src)
 {
   struct stat st;
-
+  #ifndef _WIN32
   if (fstat (src->desc, &st))
     {
       GDBM_SET_ERRNO (src, GDBM_FILE_STAT_ERROR, src->need_recovery);
@@ -40,6 +40,7 @@
       return -1;
     }
   return 0;
+  #endif
 }
 
 static char *
@@ -176,8 +177,10 @@
      _gdbm_mapped_init (dbf);
  #endif
 
+   #ifdef HAVE_FSYNC
    /* Make sure the new database is all on disk. */
    __fsync (dbf);
+   #endif
 
    /* Force the right stuff for a correct bucket cache. */
    dbf->cache_entry    = &dbf->bucket_cache[0];
diff -Naur gdbm-1.14.1.orig/src/update.c gdbm-1.14.1/src/update.c
--- gdbm-1.14.1.orig/src/update.c	2018-05-07 16:31:46.193049200 -0400
+++ gdbm-1.14.1/src/update.c	2018-05-07 16:36:03.601080900 -0400
@@ -51,8 +51,10 @@
     }
 
   /* Sync the file if fast_write is FALSE. */
+  #ifdef HAVE_FSYNC
   if (dbf->fast_write == FALSE)
     __fsync (dbf);
+  #endif
 
   return 0;
 }
@@ -117,8 +119,10 @@
 	}
 
       dbf->directory_changed = FALSE;
+    #ifdef HAVE_FSYNC
       if (!dbf->header_changed && dbf->fast_write == FALSE)
 	__fsync (dbf);
+    #endif
     }
 
   /* Final write of the header. */
diff -Naur gdbm-1.14.1.orig/src/util.c gdbm-1.14.1/src/util.c
--- gdbm-1.14.1.orig/src/util.c	2018-05-07 16:31:46.114922700 -0400
+++ gdbm-1.14.1/src/util.c	2018-05-07 16:53:41.434777700 -0400
@@ -16,7 +16,9 @@
    along with GDBM. If not, see <http://www.gnu.org/licenses/>.    */
 
 #include "gdbmtool.h"
+#ifndef _WIN32
 #include <pwd.h>
+#endif
 
 char *
 mkfilename (const char *dir, const char *file, const char *suf)
@@ -45,6 +47,7 @@
 char *
 tildexpand (char *s)
 {
+  #ifndef _WIN32
   if (s[0] == '~')
     {
       char *p = s + 1;
@@ -65,6 +68,7 @@
       if (pw)
 	return mkfilename (pw->pw_dir, p + len + 1, NULL);
     }
+  #endif
   return estrdup (s);
 }
 
