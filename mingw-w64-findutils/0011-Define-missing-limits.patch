From 6489c4a1880059660f0c593f7229a849deacdbac Mon Sep 17 00:00:00 2001
From: Cyril Arnould <cyril.arnould@outlook.com>
Date: Wed, 14 Jun 2023 00:04:50 +0200
Subject: [PATCH 11/17] Define missing limits

* posix_arg_size_min has been hardcoded to fall back to 2048 in findutils 4.2.30
* ARG_MAX definition is taken from ezwinports
* Use getdtablesize instead of sysconf (_SC_OPEN_MAX) to define open_max
---
 lib/buildcmd.c |  4 ++++
 lib/fdleak.c   |  6 ++++++
 xargs/xargs.c  | 11 +++++++++++
 3 files changed, 21 insertions(+)

diff --git a/lib/buildcmd.c b/lib/buildcmd.c
index 1239b74c..0c49fb8a 100644
--- a/lib/buildcmd.c
+++ b/lib/buildcmd.c
@@ -488,7 +488,11 @@ bc_init_controlinfo (struct buildcmd_control *ctl,
    * possible value for ARG_MAX on a POSIX compliant system.  See
    * https://www.opengroup.org/onlinepubs/009695399/basedefs/limits.h.html
    */
+#if defined(__MINGW32__) || defined(_MSC_VER)
+  ctl->posix_arg_size_min = 2048L;
+#else  
   ctl->posix_arg_size_min = _POSIX_ARG_MAX;
+#endif
   ctl->posix_arg_size_max = bc_get_arg_max ();
 
   ctl->exit_if_size_exceeded = 0;
diff --git a/lib/fdleak.c b/lib/fdleak.c
index 6e2f6a6a..84629f12 100644
--- a/lib/fdleak.c
+++ b/lib/fdleak.c
@@ -115,9 +115,15 @@ get_max_fd (void)
   if (open_max >= 0)
     return open_max;
 
+#if defined(__MINGW32__) || defined(_MSC_VER)
+  open_max = getdtablesize ();
+  if (open_max == -1)
+    open_max = 16;
+#else  
   open_max = sysconf (_SC_OPEN_MAX);
   if (open_max == -1)
     open_max = _POSIX_OPEN_MAX;	/* underestimate */
+#endif
 
   /* We assume if RLIMIT_NOFILE is defined, all the related macros are, too. */
 #if defined HAVE_GETRLIMIT && defined RLIMIT_NOFILE
diff --git a/xargs/xargs.c b/xargs/xargs.c
index 94b512e8..72a51f88 100644
--- a/xargs/xargs.c
+++ b/xargs/xargs.c
@@ -74,6 +74,17 @@
 # include "xgetcwd.h"
 #endif
 
+#if defined(__MINGW32__) || defined(_MSC_VER)
+/* MS docs says the maximum is 32K, but testing indicates it fails
+   to run a subsidiary at 32760, which is slightly less.  So we play
+   it safe and leave a 50-byte slack.  We add 2K because by stupid
+   Posix rules bc_init_controlinfo will subtract 2K, and we are not
+   Posix.  PATH_MAX is subtracted to leave enough space for the file
+   name of the invoked program itself, and 2 more for the space and
+   terminating null character.  */
+# define ARG_MAX (32700 + 2048 - PATH_MAX - 2)
+#endif
+
 #ifndef LONG_MAX
 # define LONG_MAX (~(1 << (sizeof (long) * 8 - 1)))
 #endif
-- 
2.41.0

