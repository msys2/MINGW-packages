From c5519a0db923a722317421739b9e973d145de10a Mon Sep 17 00:00:00 2001
From: Cyril Arnould <cyril.arnould@outlook.com>
Date: Tue, 13 Jun 2023 16:50:27 +0200
Subject: [PATCH 03/17] Replace grp.h and pwd.h with functions added to
 idcache.c

Copied from ezwinports
---
 configure.ac                    |  34 +++++++
 find/parser.c                   |   4 +-
 find/pred.c                     |   4 +-
 find/print.c                    |   4 +-
 gnulib-local/lib/idcache.c.diff | 165 ++++++++++++++++++++++++++++++++
 lib/listfile.c                  |   2 +
 locate/locate.c                 |   2 +
 7 files changed, 212 insertions(+), 3 deletions(-)
 create mode 100644 gnulib-local/lib/idcache.c.diff

diff --git a/configure.ac b/configure.ac
index 5c34d10a..e7c96553 100644
--- a/configure.ac
+++ b/configure.ac
@@ -297,6 +297,40 @@ AM_CONDITIONAL([HAVE_FAKETIME], [test "$FAKETIME" != :])
 # the ANSI2KNR-filtering rules.
 #LIBOBJS=`echo $LIBOBJS|sed 's/\.o /\$U.o /g;s/\.o$/\$U.o/'`
 
+dnl mingw replacement for pwd.h and grp.h. zzz prefix so this comes last in config.h.in
+AH_VERBATIM([zzz_mingw_pwd_grp_replacement], [
+  /* Replace pwd.h and grp.h for mingw */
+  #ifndef PWD_DEFINED
+  #define PWD_DEFINED
+  /* uid/gid stuff */
+  struct passwd {
+    char *pw_name;
+    uid_t pw_uid;
+    gid_t pw_gid;
+    char *pw_dir;
+    char *pw_shell;
+  };
+  
+  extern struct passwd *getpwent (void);
+  extern void           setpwent (void);
+  extern void           endpwent (void);
+  extern struct passwd *getpwnam (const char *);
+  extern struct passwd *getpwuid (uid_t);
+  
+  struct group {
+    char *gr_name;
+    gid_t gr_gid;
+    char **gr_mem;
+  };
+  
+  extern struct group *getgrent (void);
+  extern void   setgrent (void);
+  extern void   endgrent (void);
+  extern struct group *getgrgid (gid_t);
+  extern struct group *getgrnam (const char *);
+  #endif
+  ])
+  
 # Note that in the list below, po/Makefile.in should appear before
 # po/Makefile, so that po/Makefile can be created even if po/Makefile.in
 # starts off missing.
diff --git a/find/parser.c b/find/parser.c
index c728fd6b..f865783f 100644
--- a/find/parser.c
+++ b/find/parser.c
@@ -23,9 +23,11 @@
 #include <ctype.h>
 #include <errno.h>
 #include <fcntl.h>
+#if !defined(__MINGW32__) && !defined(_MSC_VER)
 #include <grp.h>
-#include <math.h>
 #include <pwd.h>
+#endif
+#include <math.h>
 #include <regex.h>
 #include <sys/stat.h>
 #include <unistd.h>
diff --git a/find/pred.c b/find/pred.c
index f9f42fac..5909fb65 100644
--- a/find/pred.c
+++ b/find/pred.c
@@ -24,9 +24,11 @@
 #include <dirent.h>
 #include <errno.h>
 #include <fcntl.h>
+#if !defined(__MINGW32__) && !defined(_MSC_VER)
 #include <grp.h>
-#include <math.h>
 #include <pwd.h>
+#endif
+#include <math.h>
 #include <selinux/selinux.h>
 #include <stdarg.h>
 #include <sys/stat.h>
diff --git a/find/print.c b/find/print.c
index e7f0ba37..316a6e04 100644
--- a/find/print.c
+++ b/find/print.c
@@ -22,9 +22,11 @@
 #include <assert.h>
 #include <ctype.h>
 #include <errno.h>
+#if !defined(__MINGW32__) && !defined(_MSC_VER)
 #include <grp.h>
-#include <math.h>
 #include <pwd.h>
+#endif
+#include <math.h>
 #include <stdarg.h>
 #include <sys/stat.h>
 #include <sys/types.h>
diff --git a/lib/listfile.c b/lib/listfile.c
index 6ec0f381..aa3ffbb9 100644
--- a/lib/listfile.c
+++ b/lib/listfile.c
@@ -21,8 +21,10 @@
 #include <alloca.h>
 #include <errno.h>
 #include <fcntl.h>
+#if !defined(__MINGW32__) && !defined(_MSC_VER)
 #include <grp.h>
 #include <pwd.h>
+#endif
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
diff --git a/locate/locate.c b/locate/locate.c
index da161ff7..5d6f64fe 100644
--- a/locate/locate.c
+++ b/locate/locate.c
@@ -66,7 +66,9 @@
 #include <errno.h>
 #include <fcntl.h>
 #include <getopt.h>
+#if !defined(__MINGW32__) && !defined(_MSC_VER)
 #include <grp.h>                /* for setgroups() */
+#endif
 #include <regex.h>
 #include <signal.h>
 #include <stdbool.h>
-- 
2.41.0

--- a/gl/lib/idcache.c
+++ b/gl/lib/idcache.c
@@ -22,8 +22,10 @@
 #include <stddef.h>
 #include <stdio.h>
 #include <string.h>
+#if !defined(__MINGW32__) && !defined(_MSC_VER)
 #include <pwd.h>
 #include <grp.h>
+#endif
 
 #include <unistd.h>
 
@@ -226,3 +228,149 @@
   nogroup_alist = tail;
   return NULL;
 }
+
+#if defined(__MINGW32__) || defined(_MSC_VER)
+#include <stdlib.h>
+#include <windows.h>
+#include <lmcons.h>
+
+char *
+getlogin (void)
+{
+  static char user_name[UNLEN+1];
+  DWORD  length = sizeof (user_name);
+
+  if (GetUserName (user_name, &length))
+    return user_name;
+  return NULL;
+}
+
+static struct passwd pwentry = {
+  NULL, 0, 0, NULL, NULL
+};
+
+static int pw_count = 0;
+
+struct passwd *
+getpwent (void)
+{
+  if (!pwentry.pw_name)
+    pwentry.pw_name = strdup (getlogin ());
+  if (stricmp (pwentry.pw_name, "administrator") != 0)
+    pwentry.pw_uid = 42;
+  if (!pwentry.pw_dir)
+    {
+      char *home = getenv ("HOME");
+      char *h;
+
+      if (!home)
+	home = "/";
+      pwentry.pw_dir = strdup (home);
+      for (h = pwentry.pw_dir; *h; h++)
+	if (*h == '\\')
+	  *h = '/';
+    }
+  if (!pwentry.pw_shell)
+    {
+      char *shell = getenv ("SHELL");
+      char *s;
+
+      if (!shell)
+	shell = getenv ("ComSpec");
+      if (!shell)
+	shell = getenv ("COMSPEC");
+      if (!shell)
+	shell = "C:/WINDOWS/system32/cmd.exe";
+      pwentry.pw_shell = strdup (shell);
+      for (s = pwentry.pw_shell; *s; s++)
+	if (*s == '\\')
+	  *s = '/';
+    }
+
+  if (pw_count++ == 0)
+    return &pwentry;
+  return NULL;
+}
+
+void
+setpwent (void)
+{
+  pw_count = 0;
+}
+
+void
+endpwent (void)
+{
+  pw_count = 0;
+}
+
+struct passwd *
+getpwnam (const char *name)
+{
+  char *user = getlogin ();
+
+  if (strcmp (user, name))
+    return NULL;
+  setpwent ();
+  return getpwent ();
+}
+
+struct passwd *
+getpwuid (uid_t uid)
+{
+  (void) uid;
+  setpwent ();
+  return getpwent ();
+}
+
+static char *grentry_members[] = {
+  NULL, NULL
+};
+
+static struct group grentry = {
+  "root", 42, &grentry_members[0]
+};
+
+static int gr_count = 0;
+
+struct group *
+getgrent (void)
+{
+  if (!grentry_members[0])
+    grentry_members[0] = getlogin ();
+
+  if (gr_count++ == 0)
+    return &grentry;
+  return NULL;
+}
+
+void
+setgrent (void)
+{
+  gr_count = 0;
+}
+
+void
+endgrent (void)
+{
+  gr_count = 0;
+}
+
+struct group *
+getgrgid (gid_t gid)
+{
+  (void) gid;
+  setgrent ();
+  return getgrent ();
+}
+
+struct group *
+getgrnam (const char *name)
+{
+  if (strcmp (name, grentry.gr_name))
+    return NULL;
+  setgrent ();
+  return getgrent ();
+}
+
+#endif
