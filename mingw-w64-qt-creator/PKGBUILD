# Maintainer: Alexey Pavlov <alexpux@gmail.com>
# Maintainer: Ray Donnelly <mingw.android@gmail.com>

_realname=qt-creator
pkgbase=mingw-w64-${_realname}
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
__pre=
_base_ver=9.0.0
pkgver=${_base_ver}${_pre}
pkgrel=1
pkgdesc='Cross-platform IDE (mingw-w64)'
url='https://www.qt.io/'
install=qt-creator-${MSYSTEM}.install
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clang32' 'clangarm64')
license=('GPL3')
depends=("${MINGW_PACKAGE_PREFIX}-qt6-declarative"
         "${MINGW_PACKAGE_PREFIX}-qt6-tools"
         "${MINGW_PACKAGE_PREFIX}-qt6-svg"
         "${MINGW_PACKAGE_PREFIX}-qt6-quick3d"
         "${MINGW_PACKAGE_PREFIX}-qt6-serialport"
         "${MINGW_PACKAGE_PREFIX}-qt6-translations"
         "${MINGW_PACKAGE_PREFIX}-qt6-5compat"
         "${MINGW_PACKAGE_PREFIX}-make"
         "${MINGW_PACKAGE_PREFIX}-yaml-cpp")
optdepends=("${MINGW_PACKAGE_PREFIX}-gdb: for the debugger"
            "${MINGW_PACKAGE_PREFIX}-cmake: CMake project support"
            "${MINGW_PACKAGE_PREFIX}-ninja: Ninja Generator"
            "${MINGW_PACKAGE_PREFIX}-qbs: QBS project support"
            "${MINGW_PACKAGE_PREFIX}-clang: Clang code model"
            "${MINGW_PACKAGE_PREFIX}-qt6-doc: integrated Qt6 documentation"
            "${MINGW_PACKAGE_PREFIX}-qt6-quicktimeline"
            #'openssh-askpass: for ssh support'
            #'git: for git support'
            #'mercurial: for mercurial support'
            #'bzr: for bazaar support'
            )
makedepends=("${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-ninja"
             "${MINGW_PACKAGE_PREFIX}-clang"
             "${MINGW_PACKAGE_PREFIX}-clang-tools-extra"
             "${MINGW_PACKAGE_PREFIX}-python"
             "${MINGW_PACKAGE_PREFIX}-qt6-doc"
             "${MINGW_PACKAGE_PREFIX}-qt6-quicktimeline"
             "${MINGW_PACKAGE_PREFIX}-cc"
)
options=('docs' 'staticlibs') # 'debug' '!strip')
_pkgfqn="${_realname}-opensource-src-${_base_ver}${__pre}"
source=(#https://download.qt.io/development_releases/qtcreator/${_base_ver%.*}/${_base_ver}${__pre}/${_pkgfqn}.tar.xz
        https://download.qt.io/official_releases/qtcreator/${pkgver%.*}/${pkgver}/${_pkgfqn}.tar.xz
        qt-creator-3.2.0-Allow-iOS-plugin-on-any-platform.patch
        qt-creator-5.0.1-fix-library-archive-path.patch
        003-find-qdoc-qt6.patch)
noextract=(${_pkgfqn}.tar.xz)
sha256sums=('5cb4798cd81b086e7f17f5a8d42ea024f64da7efd38ccb5c62f9c1457c23551a'
            '6166817edb9055b98e53f644a41f28a1dbbfc3743931776852753212eee639c3'
            '29d67f88f071abe7a4b589182767b8a697fe4e516d70707bfca88f035883718f'
            '5870c81167909d549c14c2b60acabfae2b0b85e84bae7aa7e383333ff9411a4a')

apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying ${_patch}"
    patch -Nbp1 -i "${srcdir}/${_patch}"
  done
}

prepare() {
  [[ -d ${srcdir}/${_pkgfqn} ]] && rm -rf ${srcdir}/${_pkgfqn}
  tar -xf ${srcdir}/${_pkgfqn}.tar.xz -C "${srcdir}" || true

  cd ${srcdir}/${_pkgfqn}

  apply_patch_with_msg \
    qt-creator-3.2.0-Allow-iOS-plugin-on-any-platform.patch \
    qt-creator-5.0.1-fix-library-archive-path.patch \
    003-find-qdoc-qt6.patch
}

build() {
  [[ -d ${srcdir}/build-${MSYSTEM} ]] && rm -rf ${srcdir}/build-${MSYSTEM}
  mkdir -p ${srcdir}/build-${MSYSTEM} && cd ${srcdir}/build-${MSYSTEM}

  if check_option "debug" "y"; then
    _build_type=Debug
  else
    _build_type=Release
  fi

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  ${MINGW_PREFIX}/bin/cmake.exe \
    -GNinja \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    -DCMAKE_BUILD_TYPE=${_build_type} \
    -DWITH_DOCS=ON \
    -DBUILD_DEVELOPER_DOCS=ON \
    -DBUILD_QBS=OFF \
    -DPython3_ROOT_DIR=${MINGW_PREFIX} \
    ../${_pkgfqn}

  ${MINGW_PREFIX}/bin/cmake --build .
  ${MINGW_PREFIX}/bin/cmake --build . --target docs
}

package() {
  cd ${srcdir}/build-${MSYSTEM}

  DESTDIR="${pkgdir}" ${MINGW_PREFIX}/bin/cmake --install .
  DESTDIR="${pkgdir}" ${MINGW_PREFIX}/bin/cmake --install . --component Devel
  DESTDIR="${pkgdir}" ${MINGW_PREFIX}/bin/cmake --install . --component qch_docs
  DESTDIR="${pkgdir}" ${MINGW_PREFIX}/bin/cmake --install . --component html_docs

  install -d "${pkgdir}${MINGW_PREFIX}"/share/licenses/${_realname}
  install -Dm644 ${srcdir}/${_pkgfqn}/LICENSE* -t "${pkgdir}${MINGW_PREFIX}"/share/licenses/${_realname}
}

# Please leave this block here as I use
# it to quickly make and test changes.
# return 0
# Debugger ProjectExplorer 
# ALLGOOD="yes"
# PLUGINS="Debugger"
# for PLUGIN in $PLUGINS; do
#   PLUGINLC=$(echo ${PLUGIN} | tr 'A-Z' 'a-z')
#   pushd src/build-x86_64-w64-mingw32/src/plugins/${PLUGINLC}
#     PATH=/mingw64/bin:"$PATH" make || ALLGOOD="no"
#   popd
# done
# if [ "${ALLGOOD}" = "yes" ]; then
# (
#   QTCPID=$(ps --windows | grep creator | awk '{ print $1; }')
#   while [ -n "$QTCPID" ]; do
#     cmd.exe /c "taskkill /PID $QTCPID"
#     sleep 1
#     QTCPID=$(ps --windows | grep creator | awk '{ print $1; }')
#   done
#   for PLUGIN in $PLUGINS; do
#     PLUGINLC=$(echo ${PLUGIN} | tr 'A-Z' 'a-z')
#     pushd src/build-x86_64-w64-mingw32/src/plugins/${PLUGINLC}
#       PATH=/mingw64/bin:$PATH make
#       cp ../../../lib/qtcreator/plugins/${PLUGIN}d.dll /mingw64/lib/qtcreator/plugins/
#     popd
#   done
#   PATH=/mingw64/bin:$PATH /mingw64/bin/qtcreator &
#   )
# fi
# 
