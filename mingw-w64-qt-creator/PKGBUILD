# Maintainer: Alexey Pavlov <alexpux@gmail.com>
# Maintainer: Ray Donnelly <mingw.android@gmail.com>

_realname=qt-creator
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-docs"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-devel")
_base_ver=10.0.0
pkgver=${_base_ver/-/}
pkgrel=1
pkgdesc='Lightweight, cross-platform integrated development environment (mingw-w64)'
url='https://www.qt.io/'
install=qt-creator-${MSYSTEM}.install
arch=('any')
mingw_arch=('mingw64' 'ucrt64' 'clang64' 'clangarm64')
license=('spdx:Qt-GPL-exception-1.0')
makedepends=("${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-ninja"
             "${MINGW_PACKAGE_PREFIX}-clang"
             "${MINGW_PACKAGE_PREFIX}-clang-tools-extra"
             "${MINGW_PACKAGE_PREFIX}-python"
             "${MINGW_PACKAGE_PREFIX}-qt6-declarative"
             "${MINGW_PACKAGE_PREFIX}-qt6-tools"
             "${MINGW_PACKAGE_PREFIX}-qt6-svg"
             "${MINGW_PACKAGE_PREFIX}-qt6-quick3d"
             "${MINGW_PACKAGE_PREFIX}-qt6-serialport"
             "${MINGW_PACKAGE_PREFIX}-qt6-translations"
             "${MINGW_PACKAGE_PREFIX}-qt6-5compat"
             "${MINGW_PACKAGE_PREFIX}-qt6-doc"
             "${MINGW_PACKAGE_PREFIX}-qt6-quicktimeline"
             "${MINGW_PACKAGE_PREFIX}-yaml-cpp")
#options=('debug' '!strip')
_pkgfqn="${_realname}-opensource-src-${_base_ver}"
source=(https://download.qt.io/official_releases/qtcreator/${_base_ver%.*}/${_base_ver}/${_pkgfqn}.tar.xz
        qt-creator-3.2.0-Allow-iOS-plugin-on-any-platform.patch
        qt-creator-5.0.1-fix-library-archive-path.patch)
# noextract=(${_pkgfqn}.tar.xz)
sha256sums=('9489829de05893a4628b7b6581af096c48afbd31c932cd8a4db30a90c52197bf'
            '6166817edb9055b98e53f644a41f28a1dbbfc3743931776852753212eee639c3'
            '29d67f88f071abe7a4b589182767b8a697fe4e516d70707bfca88f035883718f')

apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying ${_patch}"
    patch -Nbp1 -i "${srcdir}/${_patch}"
  done
}

prepare() {
  # [[ -d ${srcdir}/${_pkgfqn} ]] && rm -rf ${srcdir}/${_pkgfqn}
  # tar -xJf ${srcdir}/${_pkgfqn}.tar.xz -C "${srcdir}" || true

  cd ${srcdir}/${_pkgfqn}

  apply_patch_with_msg \
    qt-creator-3.2.0-Allow-iOS-plugin-on-any-platform.patch \
    qt-creator-5.0.1-fix-library-archive-path.patch
}

build() {
  mkdir -p ${srcdir}/build-${MSYSTEM} && cd ${srcdir}/build-${MSYSTEM}

  if check_option "debug" "y"; then
    _build_type=Debug
  else
    _build_type=Release
  fi

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  ${MINGW_PREFIX}/bin/cmake.exe \
    -GNinja \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    -DCMAKE_BUILD_TYPE=${_build_type} \
    -DWITH_DOCS=ON \
    -DBUILD_DEVELOPER_DOCS=ON \
    -DBUILD_QBS=OFF \
    -DPython3_EXECUTABLE=${MINGW_PREFIX}/bin/python \
    -DWITH_TESTS=OFF \
    ../${_pkgfqn}

  ${MINGW_PREFIX}/bin/cmake --build .
  ${MINGW_PREFIX}/bin/cmake --build . --target docs
}

package_qt-creator() {
  pkgdesc="Lightweight, cross-platform integrated development environment (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt6-declarative"
           "${MINGW_PACKAGE_PREFIX}-qt6-tools"
           "${MINGW_PACKAGE_PREFIX}-qt6-svg"
           "${MINGW_PACKAGE_PREFIX}-qt6-quick3d"
           "${MINGW_PACKAGE_PREFIX}-qt6-serialport"
           "${MINGW_PACKAGE_PREFIX}-qt6-translations"
           "${MINGW_PACKAGE_PREFIX}-qt6-5compat"
           "${MINGW_PACKAGE_PREFIX}-yaml-cpp"
           "${MINGW_PACKAGE_PREFIX}-make")
  optdepends=("${MINGW_PACKAGE_PREFIX}-gdb: for the debugger"
              "${MINGW_PACKAGE_PREFIX}-cmake: CMake project support"
              "${MINGW_PACKAGE_PREFIX}-ninja: Ninja Generator"
              "${MINGW_PACKAGE_PREFIX}-qbs: QBS project support"
              "${MINGW_PACKAGE_PREFIX}-clang: Clang code model"
              "${MINGW_PACKAGE_PREFIX}-qt6-doc: integrated Qt6 documentation"
              "${MINGW_PACKAGE_PREFIX}-qt6-quicktimeline")

  cd ${srcdir}/build-${MSYSTEM}

  DESTDIR="${pkgdir}" ${MINGW_PREFIX}/bin/cmake --install .

  install -d "${pkgdir}${MINGW_PREFIX}"/share/licenses/${_realname}
  install -Dm644 ${srcdir}/${_pkgfqn}/LICENSE* -t "${pkgdir}${MINGW_PREFIX}"/share/licenses/${_realname}
}

package_qt-creator-docs() {
  pkgdesc="Lightweight, cross-platform integrated development environment (documentation) (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-${_realname}")

  cd ${srcdir}/build-${MSYSTEM}
  DESTDIR="${pkgdir}" ${MINGW_PREFIX}/bin/cmake --install . --component qch_docs
  DESTDIR="${pkgdir}" ${MINGW_PREFIX}/bin/cmake --install . --component html_docs
}

package_qt-creator-devel() {
  pkgdesc="Lightweight, cross-platform integrated development environment (development files) (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-${_realname}")

  cd ${srcdir}/build-${MSYSTEM}
  DESTDIR="${pkgdir}" ${MINGW_PREFIX}/bin/cmake --install . --component Devel
}

# Please leave this block here as I use
# it to quickly make and test changes.
# return 0
# Debugger ProjectExplorer 
# ALLGOOD="yes"
# PLUGINS="Debugger"
# for PLUGIN in $PLUGINS; do
#   PLUGINLC=$(echo ${PLUGIN} | tr 'A-Z' 'a-z')
#   pushd src/build-x86_64-w64-mingw32/src/plugins/${PLUGINLC}
#     PATH=/mingw64/bin:"$PATH" make || ALLGOOD="no"
#   popd
# done
# if [ "${ALLGOOD}" = "yes" ]; then
# (
#   QTCPID=$(ps --windows | grep creator | awk '{ print $1; }')
#   while [ -n "$QTCPID" ]; do
#     cmd.exe /c "taskkill /PID $QTCPID"
#     sleep 1
#     QTCPID=$(ps --windows | grep creator | awk '{ print $1; }')
#   done
#   for PLUGIN in $PLUGINS; do
#     PLUGINLC=$(echo ${PLUGIN} | tr 'A-Z' 'a-z')
#     pushd src/build-x86_64-w64-mingw32/src/plugins/${PLUGINLC}
#       PATH=/mingw64/bin:$PATH make
#       cp ../../../lib/qtcreator/plugins/${PLUGIN}d.dll /mingw64/lib/qtcreator/plugins/
#     popd
#   done
#   PATH=/mingw64/bin:$PATH /mingw64/bin/qtcreator &
#   )
# fi
# 

# template start; name=mingw-w64-splitpkg-wrappers; version=1.0;
# vim: set ft=bash :

# generate wrappers
for _name in "${pkgname[@]}"; do
  _short="package_${_name#${MINGW_PACKAGE_PREFIX}-}"
  _func="$(declare -f "${_short}")"
  eval "${_func/#${_short}/package_${_name}}"
done
# template end;
