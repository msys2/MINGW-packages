--- a/sources/shiboken2/libshiboken/basewrapper.cpp	2018-06-19 10:36:06.304233400 +0300
+++ b/sources/shiboken2/libshiboken/basewrapper.cpp	2018-06-19 10:36:06.304233400 +0300
@@ -823,7 +823,7 @@
 Py_hash_t hash(PyObject* pyObj)
 {
     assert(Shiboken::Object::checkType(pyObj));
-    return reinterpret_cast<Py_hash_t>(pyObj);
+    return reinterpret_cast<uintptr_t>(pyObj);
 }
 
 static void setSequenceOwnership(PyObject* pyObj, bool owner)
--- a/sources/shiboken2/tests/libsample/transform.cpp	2018-06-19 10:36:06.304233400 +0300
+++ b/sources/shiboken2/tests/libsample/transform.cpp	2018-06-19 10:36:06.304233400 +0300
@@ -32,7 +32,9 @@
 #ifdef _WIN32
 #include <math.h>
 #include <float.h>
+#ifndef __MINGW64_VERSION_MAJOR
 static inline bool isfinite(double a) { return _finite(a); }
+#endif
 #else
 #include <cmath>
 #endif
--- a/sources/shiboken2/libshiboken/typespec.cpp	2018-06-19 10:36:06.304233400 +0300
+++ b/sources/shiboken2/libshiboken/typespec.cpp	2018-06-19 10:38:32.154437600 +0300
@@ -46,8 +46,8 @@
 {
 
 // for some reason python 2.7 needs this on Windows
-#ifdef WIN32
-static PyGC_Head *_PyGC_generation0;
+#ifdef _WIN32
+PyGC_Head *_PyGC_generation0;
 #endif
 
 // from pymacro.h
diff -Naur a/sources/shiboken2/ApiExtractor/clangparser/clangparser.cpp b/sources/shiboken2/ApiExtractor/clangparser/clangparser.cpp
--- a/sources/shiboken2/ApiExtractor/clangparser/clangparser.cpp	2018-06-12 00:53:26.000000000 +0300
+++ b/sources/shiboken2/ApiExtractor/clangparser/clangparser.cpp	2018-06-19 16:21:09.415505300 +0300
@@ -196,7 +196,7 @@
         | CXTranslationUnit_Incomplete;
 
     static const QByteArrayList defaultArgs = {
-#if defined(Q_CC_MSVC) && _MSC_VER > 1900
+#if (defined(Q_CC_MSVC) && _MSC_VER > 1900) || defined(__MINGW32__)
         "-std=c++1z", // Fixes constexpr errors in MSVC2017 library headers with Clang 4.1
 #else
         "-std=c++14", // ! otherwise, t.h is parsed as "C"
diff -Naur a/sources/shiboken2/CMakeLists.txt b/sources/shiboken2/CMakeLists.txt
--- a/sources/shiboken2/CMakeLists.txt	2018-06-12 00:53:26.000000000 +0300
+++ b/sources/shiboken2/CMakeLists.txt	2018-06-19 16:21:51.647920900 +0300
@@ -368,7 +368,7 @@
 endif()
 
 # Build with Address sanitizer enabled if requested. This may break things, so use at your own risk.
-if (SANITIZE_ADDRESS AND NOT MSVC)
+if (SANITIZE_ADDRESS AND NOT WIN32)
     # Currently this does not check that the clang / gcc version used supports Address sanitizer,
     # so once again, use at your own risk.
     add_compile_options("-fsanitize=address" "-g" "-fno-omit-frame-pointer")
diff -Naur a/sources/shiboken2/generator/generator.h b/sources/shiboken2/generator/generator.h
--- a/sources/shiboken2/generator/generator.h	2018-06-12 00:53:26.000000000 +0300
+++ b/sources/shiboken2/generator/generator.h	2018-06-19 16:23:02.031946600 +0300
@@ -89,7 +89,7 @@
  * when we can. This might change again when the Clang problem is solved.
  */
 
-#ifdef Q_CC_MSVC
+#if defined(Q_CC_MSVC) || defined(__MINGW32__)
 const int alwaysGenerateDestructor = 1;
 #else
 const int alwaysGenerateDestructor = 0;
