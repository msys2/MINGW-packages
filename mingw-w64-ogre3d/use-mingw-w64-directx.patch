--- ogre3d-1.9.0/RenderSystems/Direct3D9/include/OgreD3D9Prerequisites.h.orig	2013-12-20 22:01:31.257800000 +0400
+++ ogre3d-1.9.0/RenderSystems/Direct3D9/include/OgreD3D9Prerequisites.h	2013-12-20 22:01:52.177400000 +0400
@@ -72,7 +72,7 @@
 #endif
 #include <d3d9.h>
 #include <d3dx9.h>
-#include <DxErr.h>
+#include <DxErr9.h>
 
 
 namespace Ogre
--- ogre3d-1.9.0/CMake/Packages/FindDirectX.cmake.orig	2013-12-20 22:02:56.585400000 +0400
+++ ogre3d-1.9.0/CMake/Packages/FindDirectX.cmake	2013-12-20 22:02:59.674200000 +0400
@@ -55,7 +55,7 @@
   endif(CMAKE_CL_64)
   find_library(DirectX9_LIBRARY NAMES d3d9 HINTS ${DirectX9_LIB_SEARCH_PATH} PATH_SUFFIXES ${DirectX9_LIBPATH_SUFFIX})
   find_library(DirectX9_D3DX9_LIBRARY NAMES d3dx9 HINTS ${DirectX9_LIB_SEARCH_PATH} PATH_SUFFIXES ${DirectX9_LIBPATH_SUFFIX})
-  find_library(DirectX9_DXERR_LIBRARY NAMES DxErr HINTS ${DirectX9_LIB_SEARCH_PATH} PATH_SUFFIXES ${DirectX9_LIBPATH_SUFFIX})
+  find_library(DirectX9_DXERR_LIBRARY NAMES DxErr9 HINTS ${DirectX9_LIB_SEARCH_PATH} PATH_SUFFIXES ${DirectX9_LIBPATH_SUFFIX})
   find_library(DirectX9_DXGUID_LIBRARY NAMES dxguid HINTS ${DirectX9_LIB_SEARCH_PATH} PATH_SUFFIXES ${DirectX9_LIBPATH_SUFFIX})
   
   findpkg_finish(DirectX9)
--- ogre3d-1.9.0/RenderSystems/Direct3D9/src/OgreD3D9HardwareIndexBuffer.cpp.orig	2013-12-21 00:19:04.505600000 +0400
+++ ogre3d-1.9.0/RenderSystems/Direct3D9/src/OgreD3D9HardwareIndexBuffer.cpp	2013-12-21 00:19:43.776800000 +0400
@@ -294,7 +294,7 @@
 
 		if (FAILED(hr))
 		{
-			String msg = DXGetErrorDescription(hr);
+			String msg = DXGetErrorDescription9(hr);
 			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, 
 				"Cannot create D3D9 Index buffer: " + msg, 
 				"D3D9HardwareIndexBuffer::createBuffer");
@@ -303,7 +303,7 @@
 		hr = bufferResources->mBuffer->GetDesc(&mBufferDesc);
 		if (FAILED(hr))
 		{
-			String msg = DXGetErrorDescription(hr);
+			String msg = DXGetErrorDescription9(hr);
 			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, 
 				"Cannot get D3D9 Index buffer desc: " + msg, 
 				"D3D9HardwareIndexBuffer::createBuffer");
@@ -399,7 +399,7 @@
 
 		if (FAILED(hr))
 		{
-			String msg = DXGetErrorDescription(hr);
+			String msg = DXGetErrorDescription9(hr);
 			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, 
 				"Cannot lock D3D9 vertex buffer: " + msg, 
 				"D3D9HardwareVertexBuffer::_lockBuffer");
@@ -417,7 +417,7 @@
 		hr = bufferResources->mBuffer->Unlock();
 		if (FAILED(hr))
 		{
-			String msg = DXGetErrorDescription(hr);
+			String msg = DXGetErrorDescription9(hr);
 			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, 
 				"Cannot unlock D3D9 vertex buffer: " + msg, 
 				"D3D9HardwareVertexBuffer::_unlockBuffer");
--- ogre3d-1.9.0/RenderSystems/Direct3D9/src/OgreD3D9HardwareVertexBuffer.cpp.orig	2013-12-20 19:30:44.000000000 +0400
+++ ogre3d-1.9.0/RenderSystems/Direct3D9/src/OgreD3D9HardwareVertexBuffer.cpp	2013-12-21 00:20:32.651600000 +0400
@@ -290,7 +290,7 @@
 
 		if (FAILED(hr))
 		{
-			String msg = DXGetErrorDescription(hr);
+			String msg = DXGetErrorDescription9(hr);
 			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, 
 				"Cannot restore D3D9 vertex buffer: " + msg, 
 				"D3D9HardwareVertexBuffer::createBuffer");
@@ -299,7 +299,7 @@
 		hr = bufferResources->mBuffer->GetDesc(&mBufferDesc);
 		if (FAILED(hr))
 		{
-			String msg = DXGetErrorDescription(hr);
+			String msg = DXGetErrorDescription9(hr);
 			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, 
 				"Cannot get D3D9 Vertex buffer desc: " + msg, 
 				"D3D9HardwareVertexBuffer::createBuffer");
@@ -396,7 +396,7 @@
 
 		if (FAILED(hr))
 		{
-			String msg = DXGetErrorDescription(hr);
+			String msg = DXGetErrorDescription9(hr);
 			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, 
 				"Cannot lock D3D9 vertex buffer: " + msg, 
 				"D3D9HardwareVertexBuffer::_lockBuffer");
@@ -414,7 +414,7 @@
 		hr = bufferResources->mBuffer->Unlock();
 		if (FAILED(hr))
 		{
-			String msg = DXGetErrorDescription(hr);
+			String msg = DXGetErrorDescription9(hr);
 			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, 
 				"Cannot unlock D3D9 vertex buffer: " + msg, 
 				"D3D9HardwareVertexBuffer::_unlockBuffer");
--- ogre3d-1.9.0/RenderSystems/Direct3D9/src/OgreD3D9RenderSystem.cpp.orig	2013-12-20 19:30:44.000000000 +0400
+++ ogre3d-1.9.0/RenderSystems/Direct3D9/src/OgreD3D9RenderSystem.cpp	2013-12-21 20:02:33.748800000 +0400
@@ -1594,7 +1594,7 @@
 	//---------------------------------------------------------------------
 	String D3D9RenderSystem::getErrorDescription( long errorNumber ) const
 	{
-		const String errMsg = DXGetErrorDescription( errorNumber );
+		const String errMsg = DXGetErrorDescription9( errorNumber );
 		return errMsg;
 	}
 	//---------------------------------------------------------------------
@@ -2923,7 +2923,7 @@
 											&depthBufferSurface, NULL);
 		if( FAILED(hr) )
 		{
-			String msg = DXGetErrorDescription(hr);
+			String msg = DXGetErrorDescription9(hr);
 			OGRE_EXCEPT( Exception::ERR_RENDERINGAPI_ERROR,
 						"Error CreateDepthStencilSurface : " + msg,
 						"D3D9RenderSystem::_createDepthBufferFor" );
@@ -3110,14 +3110,14 @@
 				hr = getActiveD3D9Device()->SetRenderTarget(x, pBack[x]);
 				if (FAILED(hr))
 				{
-					String msg = DXGetErrorDescription(hr);
+					String msg = DXGetErrorDescription9(hr);
 					OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Failed to setRenderTarget : " + msg, "D3D9RenderSystem::_setViewport" );
 				}
 			}
 			hr = getActiveD3D9Device()->SetDepthStencilSurface( depthSurface );
 			if (FAILED(hr))
 			{
-				String msg = DXGetErrorDescription(hr);
+				String msg = DXGetErrorDescription9(hr);
 				OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Failed to setDepthStencil : " + msg, "D3D9RenderSystem::_setViewport" );
 			}
 		}
@@ -3182,7 +3182,7 @@
 
 		if( FAILED( hr = getActiveD3D9Device()->BeginScene() ) )
 		{
-			String msg = DXGetErrorDescription(hr);
+			String msg = DXGetErrorDescription9(hr);
 			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Error beginning frame :" + msg, "D3D9RenderSystem::_beginFrame" );
 		}
 
@@ -3532,7 +3532,7 @@
 
 		if( FAILED( hr ) )
 		{
-			String msg = DXGetErrorDescription(hr);
+			String msg = DXGetErrorDescription9(hr);
 			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Failed to DrawPrimitive : " + msg, "D3D9RenderSystem::_render" );
 		}
 
@@ -3906,7 +3906,7 @@
 			depth, 
 			stencil ) ) )
 		{
-			String msg = DXGetErrorDescription(hr);
+			String msg = DXGetErrorDescription9(hr);
 			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Error clearing frame buffer : " 
 				+ msg, "D3D9RenderSystem::clearFrameBuffer" );
 		}
--- ogre3d-1.9.0/RenderSystems/Direct3D9/src/OgreD3D9Texture.cpp.orig	2013-12-20 19:30:44.000000000 +0400
+++ ogre3d-1.9.0/RenderSystems/Direct3D9/src/OgreD3D9Texture.cpp	2013-12-21 20:07:57.551800000 +0400
@@ -119,7 +119,7 @@
 				IDirect3DSurface9 *pSrcSurface = 0;
 				if( FAILED( hr = srcTextureResource->pNormTex->GetSurfaceLevel(0, &pSrcSurface) ) )
 				{
-					String msg = DXGetErrorDescription(hr);
+					String msg = DXGetErrorDescription9(hr);
 					OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Couldn't blit : " + msg, "D3D9Texture::copyToTexture" );
 				}
 
@@ -127,7 +127,7 @@
 				IDirect3DSurface9 *pDstSurface = 0;			
 				if( FAILED( hr = dstTextureResource->pNormTex->GetSurfaceLevel(0, &pDstSurface) ) )
 				{
-					String msg = DXGetErrorDescription(hr);
+					String msg = DXGetErrorDescription9(hr);
 					SAFE_RELEASE(pSrcSurface);
 					OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Couldn't blit : " + msg, "D3D9Texture::copyToTexture" );
 				}
@@ -135,7 +135,7 @@
 				// do the blit, it's called StretchRect in D3D9 :)
 				if( FAILED( hr = it->first->StretchRect( pSrcSurface, NULL, pDstSurface, &dstRC, D3DTEXF_NONE) ) )
 				{
-					String msg = DXGetErrorDescription(hr);
+					String msg = DXGetErrorDescription9(hr);
 					SAFE_RELEASE(pSrcSurface);
 					SAFE_RELEASE(pDstSurface);
 					OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Couldn't blit : " + msg, "D3D9Texture::copyToTexture" );
@@ -156,7 +156,7 @@
 					IDirect3DSurface9 *pSrcSurface = 0;
 					if( FAILED( hr =srcTextureResource->pCubeTex->GetCubeMapSurface((D3DCUBEMAP_FACES)face, 0, &pSrcSurface) ) )
 					{
-						String msg = DXGetErrorDescription(hr);
+						String msg = DXGetErrorDescription9(hr);
 						OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Couldn't blit : " + msg, "D3D9Texture::copyToTexture" );
 					}
 
@@ -164,7 +164,7 @@
 					IDirect3DSurface9 *pDstSurface = 0;
 					if( FAILED( hr = dstTextureResource->pCubeTex->GetCubeMapSurface((D3DCUBEMAP_FACES)face, 0, &pDstSurface) ) )
 					{
-						String msg = DXGetErrorDescription(hr);
+						String msg = DXGetErrorDescription9(hr);
 						SAFE_RELEASE(pSrcSurface);
 						OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Couldn't blit : " + msg, "D3D9Texture::copyToTexture" );
 					}
@@ -172,7 +172,7 @@
 					// do the blit, it's called StretchRect in D3D9 :)
 					if( FAILED( hr = it->first->StretchRect( pSrcSurface, NULL, pDstSurface, &dstRC, D3DTEXF_NONE) ) )
 					{
-						String msg = DXGetErrorDescription(hr);
+						String msg = DXGetErrorDescription9(hr);
 						SAFE_RELEASE(pSrcSurface);
 						SAFE_RELEASE(pDstSurface);
 						OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Couldn't blit : " + msg, "D3D9Texture::copyToTexture" );
@@ -564,7 +564,7 @@
             if (FAILED(hr))
 		    {
 				freeInternalResources();
-				OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Can't create cube texture: " + String(DXGetErrorDescription(hr)), 
+				OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Can't create cube texture: " + String(DXGetErrorDescription9(hr)), 
 					"D3D9Texture::_loadCubeTex" );
 		    }
 
@@ -573,7 +573,7 @@
             if (FAILED(hr))
 		    {
 				freeInternalResources();
-				OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Can't get base texture: " + String(DXGetErrorDescription(hr)), 
+				OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Can't get base texture: " + String(DXGetErrorDescription9(hr)), 
 					"D3D9Texture::_loadCubeTex" );
 		    }
 
@@ -698,7 +698,7 @@
 			if (FAILED(hr))
 			{
 				OGRE_EXCEPT(Exception::ERR_INTERNAL_ERROR, 
-					"Unable to load volume texture from " + getName() + ": " + String(DXGetErrorDescription(hr)),
+					"Unable to load volume texture from " + getName() + ": " + String(DXGetErrorDescription9(hr)),
 					"D3D9Texture::_loadVolumeTex");
 			}
 	
@@ -707,7 +707,7 @@
 			if (FAILED(hr))
 			{
 				freeInternalResources();
-				OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Can't get base texture: " + String(DXGetErrorDescription(hr)), 
+				OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Can't get base texture: " + String(DXGetErrorDescription9(hr)), 
 					"D3D9Texture::_loadVolumeTex" );
 			}
 	
@@ -860,7 +860,7 @@
 			if (FAILED(hr))
 			{
 				OGRE_EXCEPT(Exception::ERR_INTERNAL_ERROR, 
-					"Unable to load texture from " + getName() + " :" + String(DXGetErrorDescription(hr)),
+					"Unable to load texture from " + getName() + " :" + String(DXGetErrorDescription9(hr)),
 					"D3D9Texture::_loadNormTex");
 			}
 	
@@ -869,7 +869,7 @@
 			if (FAILED(hr))
 			{
 				freeInternalResources();
-				OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Can't get base texture: " + String(DXGetErrorDescription(hr)), 
+				OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Can't get base texture: " + String(DXGetErrorDescription9(hr)), 
 					"D3D9Texture::_loadNormTex" );
 			}
 	
@@ -1107,7 +1107,7 @@
 		if (FAILED(hr))
 		{
 			freeInternalResources();
-			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Error creating texture: " + String(DXGetErrorDescription(hr)), 
+			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Error creating texture: " + String(DXGetErrorDescription9(hr)), 
 				"D3D9Texture::_createNormTex" );
 		}
 		
@@ -1116,7 +1116,7 @@
 		if (FAILED(hr))
 		{
 			freeInternalResources();
-			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Can't get base texture: " + String(DXGetErrorDescription(hr)), 
+			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Can't get base texture: " + String(DXGetErrorDescription9(hr)), 
 				"D3D9Texture::_createNormTex" );
 		}
 		
@@ -1127,7 +1127,7 @@
 		if (FAILED(hr))
 		{
 			freeInternalResources();
-			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Can't get texture description: " + String(DXGetErrorDescription(hr)), 
+			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Can't get texture description: " + String(DXGetErrorDescription9(hr)), 
 				"D3D9Texture::_createNormTex" );
 		}
 
@@ -1143,7 +1143,7 @@
 			if (FAILED(hr))
 			{
 				OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, 
-					"Unable to create AA render target: " + String(DXGetErrorDescription(hr)), 
+					"Unable to create AA render target: " + String(DXGetErrorDescription9(hr)), 
 					"D3D9Texture::_createNormTex");
 			}
 
@@ -1158,7 +1158,7 @@
 			hr = textureResources->pBaseTex->SetAutoGenFilterType(_getBestFilterMethod(d3d9Device));
 			if(FAILED(hr))
 			{
-				OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Could not set best autogen filter type: "  + String(DXGetErrorDescription(hr)), 
+				OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Could not set best autogen filter type: "  + String(DXGetErrorDescription9(hr)), 
 					"D3D9Texture::_createNormTex" );
 			}
 		}
@@ -1264,7 +1264,7 @@
 		if (FAILED(hr))
 		{
 			freeInternalResources();
-			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Error creating texture: " + String(DXGetErrorDescription(hr)), 
+			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Error creating texture: " + String(DXGetErrorDescription9(hr)), 
 				"D3D9Texture::_createCubeTex" );
 		}
 
@@ -1273,7 +1273,7 @@
 		if (FAILED(hr))
 		{
 			freeInternalResources();
-			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Can't get base texture: " + String(DXGetErrorDescription(hr)), 
+			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Can't get base texture: " + String(DXGetErrorDescription9(hr)), 
 				"D3D9Texture::_createCubeTex" );
 		}
 		
@@ -1284,7 +1284,7 @@
 		if (FAILED(hr))
 		{
 			freeInternalResources();
-			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Can't get texture description: " + String(DXGetErrorDescription(hr)), 
+			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Can't get texture description: " + String(DXGetErrorDescription9(hr)), 
 				"D3D9Texture::_createCubeTex" );
 		}
 
@@ -1300,7 +1300,7 @@
 			if (FAILED(hr))
 			{
 				OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, 
-					"Unable to create AA render target: " + String(DXGetErrorDescription(hr)), 
+					"Unable to create AA render target: " + String(DXGetErrorDescription9(hr)), 
 					"D3D9Texture::_createCubeTex");
 			}
 		}
@@ -1314,7 +1314,7 @@
 			hr = textureResources->pBaseTex->SetAutoGenFilterType(_getBestFilterMethod(d3d9Device));
 			if(FAILED(hr))
 			{
-				OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Could not set best autogen filter type: " + String(DXGetErrorDescription(hr)), 
+				OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Could not set best autogen filter type: " + String(DXGetErrorDescription9(hr)), 
 					"D3D9Texture::_createCubeTex" );
 			}
 		}
@@ -1416,7 +1416,7 @@
 		if (FAILED(hr))
 		{
 			freeInternalResources();
-			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Error creating texture: " + String(DXGetErrorDescription(hr)), 
+			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Error creating texture: " + String(DXGetErrorDescription9(hr)), 
 				"D3D9Texture::_createVolumeTex" );
 		}
 
@@ -1425,7 +1425,7 @@
 		if (FAILED(hr))
 		{
 			freeInternalResources();
-			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Can't get base texture: " + String(DXGetErrorDescription(hr)), 
+			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Can't get base texture: " + String(DXGetErrorDescription9(hr)), 
 				"D3D9Texture::_createVolumeTex" );
 		}
 		
@@ -1436,7 +1436,7 @@
 		if (FAILED(hr))
 		{
 			freeInternalResources();
-			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Can't get texture description: " + String(DXGetErrorDescription(hr)), 
+			OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Can't get texture description: " + String(DXGetErrorDescription9(hr)), 
 				"D3D9Texture::_createVolumeTex" );
 		}
 		_setFinalAttributes(d3d9Device, textureResources,
@@ -1448,7 +1448,7 @@
 			hr = textureResources->pBaseTex->SetAutoGenFilterType(_getBestFilterMethod(d3d9Device));
 			if(FAILED(hr))
 			{
-				OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Could not set best autogen filter type: " + String(DXGetErrorDescription(hr)), 
+				OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR, "Could not set best autogen filter type: " + String(DXGetErrorDescription9(hr)), 
 					"D3D9Texture::_createCubeTex" );
 			}
 		}
@@ -2104,7 +2104,7 @@
 					if (FAILED(hr))
 					{
 						OGRE_EXCEPT(Exception::ERR_INTERNAL_ERROR, 
-							"Unable to copy AA buffer to final buffer: " + String(DXGetErrorDescription(hr)), 
+							"Unable to copy AA buffer to final buffer: " + String(DXGetErrorDescription9(hr)), 
 							"D3D9RenderTexture::swapBuffers");
 					}
 				}								
