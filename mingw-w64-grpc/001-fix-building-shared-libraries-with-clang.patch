diff --git a/src/core/lib/gprpp/time.cc b/src/core/lib/gprpp/time.cc
index 2c9e96d421..45d4e0f74d 100644
--- a/src/core/lib/gprpp/time.cc
+++ b/src/core/lib/gprpp/time.cc
@@ -150,9 +150,13 @@ int64_t TimespanToMillisRoundDown(gpr_timespec ts) {
 
 }  // namespace
 
-thread_local Timestamp::Source* Timestamp::thread_local_time_source_{
+thread_local Timestamp::Source* Timestamp::thread_local_time_source_var_{
     NoDestructSingleton<GprNowTimeSource>::Get()};
 
+Timestamp::Source*& Timestamp::thread_local_time_source_() {
+  return thread_local_time_source_var_;
+}
+
 Timestamp ScopedTimeCache::Now() {
   if (!cached_time_.has_value()) {
     previous()->InvalidateCache();
diff --git a/src/core/lib/gprpp/time.h b/src/core/lib/gprpp/time.h
index 557139eb46..dbd2de3f98 100644
--- a/src/core/lib/gprpp/time.h
+++ b/src/core/lib/gprpp/time.h
@@ -100,15 +100,15 @@ class Timestamp {
 
   class ScopedSource : public Source {
    public:
-    ScopedSource() : previous_(thread_local_time_source_) {
-      thread_local_time_source_ = this;
+    ScopedSource() : previous_(thread_local_time_source_()) {
+      thread_local_time_source_() = this;
     }
     ScopedSource(const ScopedSource&) = delete;
     ScopedSource& operator=(const ScopedSource&) = delete;
     void InvalidateCache() override { previous_->InvalidateCache(); }
 
    protected:
-    ~ScopedSource() { thread_local_time_source_ = previous_; }
+    ~ScopedSource() { thread_local_time_source_() = previous_; }
     Source* previous() const { return previous_; }
 
    private:
@@ -124,7 +124,7 @@ class Timestamp {
   static Timestamp FromCycleCounterRoundUp(gpr_cycle_counter c);
   static Timestamp FromCycleCounterRoundDown(gpr_cycle_counter c);
 
-  static Timestamp Now() { return thread_local_time_source_->Now(); }
+  static Timestamp Now() { return thread_local_time_source_()->Now(); }
 
   static constexpr Timestamp FromMillisecondsAfterProcessEpoch(int64_t millis) {
     return Timestamp(millis);
@@ -172,7 +172,8 @@ class Timestamp {
   explicit constexpr Timestamp(int64_t millis) : millis_(millis) {}
 
   int64_t millis_ = 0;
-  static thread_local Timestamp::Source* thread_local_time_source_;
+  static Timestamp::Source*& thread_local_time_source_();
+  static thread_local Timestamp::Source* thread_local_time_source_var_;
 };
 
 class ScopedTimeCache final : public Timestamp::ScopedSource {
