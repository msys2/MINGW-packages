diff --git a/Source/JavaScriptCore/inspector/scripts/codegen/cpp_generator.py b/Source/JavaScriptCore/inspector/scripts/codegen/cpp_generator.py
index 4449bad..1177c6c 100755
--- a/Source/JavaScriptCore/inspector/scripts/codegen/cpp_generator.py
+++ b/Source/JavaScriptCore/inspector/scripts/codegen/cpp_generator.py
@@ -60,11 +60,11 @@ class CppGenerator:
         if isinstance(_type, ArrayType):
             return 'getArray'
         if isinstance(_type, PrimitiveType):
-            if _type.raw_name() is 'integer':
+            if _type.raw_name() == 'integer':
                 return 'getInteger'
-            elif _type.raw_name() is 'number':
+            elif _type.raw_name() == 'number':
                 return 'getDouble'
-            elif _type.raw_name() is 'any':
+            elif _type.raw_name() == 'any':
                 return 'getValue'
             else:
                 return 'get' + ucfirst(_type.raw_name())
@@ -80,11 +80,11 @@ class CppGenerator:
         if isinstance(_type, ArrayType):
             return 'setArray'
         if isinstance(_type, PrimitiveType):
-            if _type.raw_name() is 'integer':
+            if _type.raw_name() == 'integer':
                 return 'setInteger'
-            elif _type.raw_name() is 'number':
+            elif _type.raw_name() == 'number':
                 return 'setDouble'
-            elif _type.raw_name() is 'any':
+            elif _type.raw_name() == 'any':
                 return 'setValue'
             else:
                 return 'set' + ucfirst(_type.raw_name())
@@ -123,7 +123,7 @@ class CppGenerator:
             _type = _type.primitive_type  # Fall through to primitive.
 
         # This handles the 'any' type and objects with defined properties.
-        if isinstance(_type, ObjectType) or _type.qualified_name() is 'object':
+        if isinstance(_type, ObjectType) or _type.qualified_name() == 'object':
             cpp_name = 'Inspector::InspectorObject'
             if parameter.is_optional:
                 return 'const %s*' % cpp_name
diff --git a/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_alternate_backend_dispatcher_header.py b/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_alternate_backend_dispatcher_header.py
index ef42931..2ddab9f 100755
--- a/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_alternate_backend_dispatcher_header.py
+++ b/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_alternate_backend_dispatcher_header.py
@@ -57,7 +57,7 @@ class CppAlternateBackendDispatcherHeaderGenerator(Generator):
         ]
 
         header_args = {
-            'headerGuardString': re.sub('\W+', '_', self.output_filename()),
+            'headerGuardString': re.sub('\\W+', '_', self.output_filename()),
             'includes': '\n'.join(['#include ' + header for header in headers]),
         }
 
diff --git a/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_backend_dispatcher_header.py b/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_backend_dispatcher_header.py
index 0ce1174..ee4d790 100755
--- a/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_backend_dispatcher_header.py
+++ b/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_backend_dispatcher_header.py
@@ -63,7 +63,7 @@ class CppBackendDispatcherHeaderGenerator(Generator):
         typedefs = [('String', 'ErrorString')]
 
         header_args = {
-            'headerGuardString': re.sub('\W+', '_', self.output_filename()),
+            'headerGuardString': re.sub('\\W+', '_', self.output_filename()),
             'includes': '\n'.join(['#include ' + header for header in headers]),
             'typedefs': '\n'.join(['typedef %s %s;' % typedef for typedef in typedefs]),
         }
diff --git a/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_frontend_dispatcher_header.py b/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_frontend_dispatcher_header.py
index c555c9c..968a8a5 100755
--- a/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_frontend_dispatcher_header.py
+++ b/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_frontend_dispatcher_header.py
@@ -61,7 +61,7 @@ class CppFrontendDispatcherHeaderGenerator(Generator):
             '<wtf/text/WTFString.h>']
 
         header_args = {
-            'headerGuardString': re.sub('\W+', '_', self.output_filename()),
+            'headerGuardString': re.sub('\\W+', '_', self.output_filename()),
             'includes': '\n'.join(['#include ' + header for header in headers]),
             'typedefs': 'class FrontendRouter;',
         }
diff --git a/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_protocol_types_header.py b/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_protocol_types_header.py
index 2dbda8b..c77f307 100755
--- a/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_protocol_types_header.py
+++ b/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_protocol_types_header.py
@@ -63,7 +63,7 @@ class CppProtocolTypesHeaderGenerator(Generator):
         export_macro = self.model().framework.setting('export_macro', None)
 
         header_args = {
-            'headerGuardString': re.sub('\W+', '_', self.output_filename()),
+            'headerGuardString': re.sub('\\W+', '_', self.output_filename()),
             'includes': '\n'.join(['#include ' + header for header in sorted(headers)]),
             'typedefs': '',
         }
@@ -245,7 +245,7 @@ class CppProtocolTypesHeaderGenerator(Generator):
 
     def _generate_struct_for_anonymous_enum_member(self, enum_member):
         def apply_indentation(line):
-            if line.startswith(('#', '/*', '*/', '//')) or len(line) is 0:
+            if line.startswith(('#', '/*', '*/', '//')) or len(line) == 0:
                 return line
             else:
                 return '    ' + line
diff --git a/Source/JavaScriptCore/inspector/scripts/codegen/generate_objc_backend_dispatcher_header.py b/Source/JavaScriptCore/inspector/scripts/codegen/generate_objc_backend_dispatcher_header.py
index de63b06..39a9efe 100755
--- a/Source/JavaScriptCore/inspector/scripts/codegen/generate_objc_backend_dispatcher_header.py
+++ b/Source/JavaScriptCore/inspector/scripts/codegen/generate_objc_backend_dispatcher_header.py
@@ -63,7 +63,7 @@ class ObjCBackendDispatcherHeaderGenerator(Generator):
         ]
 
         header_args = {
-            'headerGuardString': re.sub('\W+', '_', self.output_filename()),
+            'headerGuardString': re.sub('\\W+', '_', self.output_filename()),
             'includes': '\n'.join(['#include ' + header for header in headers]),
             'forwardDeclarations': self._generate_objc_forward_declarations(),
         }
diff --git a/Source/JavaScriptCore/inspector/scripts/codegen/objc_generator.py b/Source/JavaScriptCore/inspector/scripts/codegen/objc_generator.py
index 35b2c59..64e84f1 100755
--- a/Source/JavaScriptCore/inspector/scripts/codegen/objc_generator.py
+++ b/Source/JavaScriptCore/inspector/scripts/codegen/objc_generator.py
@@ -66,11 +66,11 @@ class ObjCTypeCategory:
     @staticmethod
     def category_for_type(_type):
         if (isinstance(_type, PrimitiveType)):
-            if _type.raw_name() is 'string':
+            if _type.raw_name() == 'string':
                 return ObjCTypeCategory.String
             if  _type.raw_name() in ['object', 'any']:
                 return ObjCTypeCategory.Object
-            if _type.raw_name() is 'array':
+            if _type.raw_name() == 'array':
                 return ObjCTypeCategory.Array
             return ObjCTypeCategory.Simple
         if (isinstance(_type, ObjectType)):
@@ -196,15 +196,15 @@ class ObjCGenerator:
 
     @staticmethod
     def objc_type_for_raw_name(raw_name):
-        if raw_name is 'string':
+        if raw_name == 'string':
             return 'NSString *'
-        if raw_name is 'array':
+        if raw_name == 'array':
             return 'NSArray *'
-        if raw_name is 'integer':
+        if raw_name == 'integer':
             return 'int'
-        if raw_name is 'number':
+        if raw_name == 'number':
             return 'double'
-        if raw_name is 'boolean':
+        if raw_name == 'boolean':
             return 'BOOL'
         if raw_name in ['any', 'object']:
             return '%s *' % ObjCGenerator.OBJC_JSON_OBJECT_BASE
@@ -212,9 +212,9 @@ class ObjCGenerator:
 
     @staticmethod
     def objc_class_for_raw_name(raw_name):
-        if raw_name is 'string':
+        if raw_name == 'string':
             return 'NSString'
-        if raw_name is 'array':
+        if raw_name == 'array':
             return 'NSArray'
         if raw_name in ['integer', 'number', 'boolean']:
             return 'NSNumber'
@@ -226,13 +226,13 @@ class ObjCGenerator:
 
     @staticmethod
     def protocol_type_for_raw_name(raw_name):
-        if raw_name is 'string':
+        if raw_name == 'string':
             return 'String'
-        if raw_name is 'integer':
+        if raw_name == 'integer':
             return 'int'
-        if raw_name is 'number':
+        if raw_name == 'number':
             return 'double'
-        if raw_name is 'boolean':
+        if raw_name == 'boolean':
             return 'bool'
         if raw_name in ['any', 'object']:
             return 'InspectorObject'
@@ -374,11 +374,11 @@ class ObjCGenerator:
             objc_class = ObjCGenerator.objc_class_for_type(var_type.element_type)
             if protocol_type == 'Inspector::Protocol::Array<String>':
                 return 'inspectorStringArrayArray(%s)' % var_name
-            if protocol_type is 'String' and objc_class is 'NSString':
+            if protocol_type == 'String' and objc_class == 'NSString':
                 return 'inspectorStringArray(%s)' % var_name
-            if protocol_type is 'int' and objc_class is 'NSNumber':
+            if protocol_type == 'int' and objc_class == 'NSNumber':
                 return 'inspectorIntegerArray(%s)' % var_name
-            if protocol_type is 'double' and objc_class is 'NSNumber':
+            if protocol_type == 'double' and objc_class == 'NSNumber':
                 return 'inspectorDoubleArray(%s)' % var_name
             return 'inspectorObjectArray(%s)' % var_name
 
@@ -408,9 +408,9 @@ class ObjCGenerator:
             return '[[[%s alloc] initWithInspectorObject:%s] autorelease]' % (objc_class, var_name)
         if category is ObjCTypeCategory.Array:
             objc_class = ObjCGenerator.objc_class_for_type(var_type.element_type)
-            if objc_class is 'NSString':
+            if objc_class == 'NSString':
                 return 'objcStringArray(%s)' % var_name
-            if objc_class is 'NSNumber':  # FIXME: Integer or Double?
+            if objc_class == 'NSNumber':  # FIXME: Integer or Double?
                 return 'objcIntegerArray(%s)' % var_name
             return 'objcArray<%s>(%s)' % (objc_class, var_name)
 
@@ -429,11 +429,11 @@ class ObjCGenerator:
             return sub_expression
         if category is ObjCTypeCategory.Array:
             objc_class = ObjCGenerator.objc_class_for_type(member.type.element_type)
-            if objc_class is 'NSString':
+            if objc_class == 'NSString':
                 return 'inspectorStringArray(%s)' % sub_expression
-            if objc_class is 'NSNumber':
+            if objc_class == 'NSNumber':
                 protocol_type = ObjCGenerator.protocol_type_for_type(member.type.element_type)
-                if protocol_type is 'double':
+                if protocol_type == 'double':
                     return 'inspectorDoubleArray(%s)' % sub_expression
                 return 'inspectorIntegerArray(%s)' % sub_expression
             return 'inspectorObjectArray(%s)' % sub_expression
@@ -453,11 +453,11 @@ class ObjCGenerator:
         if category is ObjCTypeCategory.Array:
             protocol_type = ObjCGenerator.protocol_type_for_type(member.type.element_type)
             objc_class = ObjCGenerator.objc_class_for_type(member.type.element_type)
-            if objc_class is 'NSString':
+            if objc_class == 'NSString':
                 return 'objcStringArray(%s)' % sub_expression
-            if objc_class is 'NSNumber':
+            if objc_class == 'NSNumber':
                 protocol_type = ObjCGenerator.protocol_type_for_type(member.type.element_type)
-                if protocol_type is 'double':
+                if protocol_type == 'double':
                     return 'objcDoubleArray(%s)' % sub_expression
                 return 'objcIntegerArray(%s)' % sub_expression
             return 'objcArray<%s>(%s)' % (objc_class, sub_expression)
@@ -474,17 +474,17 @@ class ObjCGenerator:
             _type = _type.aliased_type
         if (isinstance(_type, PrimitiveType)):
             raw_name = _type.raw_name()
-            if raw_name is 'boolean':
+            if raw_name == 'boolean':
                 return 'setBool'
-            if raw_name is 'integer':
+            if raw_name == 'integer':
                 return 'setInteger'
-            if raw_name is 'number':
+            if raw_name == 'number':
                 return 'setDouble'
-            if raw_name is 'string':
+            if raw_name == 'string':
                 return 'setString'
             if raw_name in ['any', 'object']:
                 return 'setObject'
-            if raw_name is 'array':
+            if raw_name == 'array':
                 return 'setInspectorArray'
             return None
         if (isinstance(_type, EnumType)):
@@ -505,17 +505,17 @@ class ObjCGenerator:
             _type = _type.aliased_type
         if (isinstance(_type, PrimitiveType)):
             raw_name = _type.raw_name()
-            if raw_name is 'boolean':
+            if raw_name == 'boolean':
                 return 'boolForKey'
-            if raw_name is 'integer':
+            if raw_name == 'integer':
                 return 'integerForKey'
-            if raw_name is 'number':
+            if raw_name == 'number':
                 return 'doubleForKey'
-            if raw_name is 'string':
+            if raw_name == 'string':
                 return 'stringForKey'
             if raw_name in ['any', 'object']:
                 return 'objectForKey'
-            if raw_name is 'array':
+            if raw_name == 'array':
                 return 'inspectorArrayForKey'
             return None
         if (isinstance(_type, EnumType)):
