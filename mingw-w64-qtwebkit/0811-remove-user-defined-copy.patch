diff --git a/Source/JavaScriptCore/bytecode/StructureSet.h b/Source/JavaScriptCore/bytecode/StructureSet.h
index df19ec5..a3a3fd9 100644
--- a/Source/JavaScriptCore/bytecode/StructureSet.h
+++ b/Source/JavaScriptCore/bytecode/StructureSet.h
@@ -57,11 +57,6 @@ public:
     {
     }
     
-    ALWAYS_INLINE StructureSet(const StructureSet& other)
-        : TinyPtrSet(other)
-    {
-    }
-    
     Structure* onlyStructure() const
     {
         return onlyEntry();
diff --git a/Source/JavaScriptCore/debugger/Breakpoint.h b/Source/JavaScriptCore/debugger/Breakpoint.h
index 78d208a..12a565b 100644
--- a/Source/JavaScriptCore/debugger/Breakpoint.h
+++ b/Source/JavaScriptCore/debugger/Breakpoint.h
@@ -48,18 +48,6 @@ struct Breakpoint : public DoublyLinkedListNode<Breakpoint> {
     {
     }
 
-    Breakpoint(const Breakpoint& other)
-        : id(other.id)
-        , sourceID(other.sourceID)
-        , line(other.line)
-        , column(other.column)
-        , condition(other.condition)
-        , autoContinue(other.autoContinue)
-        , ignoreCount(other.ignoreCount)
-        , hitCount(other.hitCount)
-    {
-    }
-
     BreakpointID id { noBreakpointID };
     SourceID sourceID { noSourceID };
     unsigned line { 0 };
diff --git a/Source/JavaScriptCore/parser/ParserTokens.h b/Source/JavaScriptCore/parser/ParserTokens.h
index aff4a30..c82b7a7 100644
--- a/Source/JavaScriptCore/parser/ParserTokens.h
+++ b/Source/JavaScriptCore/parser/ParserTokens.h
@@ -169,7 +169,6 @@ enum JSTokenType {
 struct JSTextPosition {
     JSTextPosition() : line(0), offset(0), lineStartOffset(0) { }
     JSTextPosition(int _line, int _offset, int _lineStartOffset) : line(_line), offset(_offset), lineStartOffset(_lineStartOffset) { }
-    JSTextPosition(const JSTextPosition& other) : line(other.line), offset(other.offset), lineStartOffset(other.lineStartOffset) { }
 
     JSTextPosition operator+(int adjustment) const { return JSTextPosition(line, offset + adjustment, lineStartOffset); }
     JSTextPosition operator+(unsigned adjustment) const { return *this + static_cast<int>(adjustment); }
@@ -200,13 +199,6 @@ union JSTokenData {
 
 struct JSTokenLocation {
     JSTokenLocation() : line(0), lineStartOffset(0), startOffset(0) { }
-    JSTokenLocation(const JSTokenLocation& location)
-    {
-        line = location.line;
-        lineStartOffset = location.lineStartOffset;
-        startOffset = location.startOffset;
-        endOffset = location.endOffset;
-    }
 
     int line;
     unsigned lineStartOffset;
diff --git a/Source/WebCore/dom/RangeBoundaryPoint.h b/Source/WebCore/dom/RangeBoundaryPoint.h
index 28e88c3..7e34a20 100644
--- a/Source/WebCore/dom/RangeBoundaryPoint.h
+++ b/Source/WebCore/dom/RangeBoundaryPoint.h
@@ -35,8 +35,6 @@ class RangeBoundaryPoint {
 public:
     explicit RangeBoundaryPoint(Node* container);
 
-    explicit RangeBoundaryPoint(const RangeBoundaryPoint&);
-
     const Position toPosition() const;
 
     Node* container() const;
@@ -71,13 +69,6 @@ inline RangeBoundaryPoint::RangeBoundaryPoint(Node* container)
     ASSERT(m_containerNode);
 }
 
-inline RangeBoundaryPoint::RangeBoundaryPoint(const RangeBoundaryPoint& other)
-    : m_containerNode(other.container())
-    , m_offsetInContainer(other.offset())
-    , m_childBeforeBoundary(other.childBefore())
-{
-}
-
 inline Node* RangeBoundaryPoint::container() const
 {
     return m_containerNode.get();
diff --git a/Source/WebCore/Modules/indexeddb/shared/IDBError.cpp b/Source/WebCore/Modules/indexeddb/shared/IDBError.cpp
index af510b1..0918cb8 100644
--- a/Source/WebCore/Modules/indexeddb/shared/IDBError.cpp
+++ b/Source/WebCore/Modules/indexeddb/shared/IDBError.cpp
@@ -48,13 +48,6 @@ IDBError IDBError::isolatedCopy() const
     return { m_code, m_message.isolatedCopy() };
 }
 
-IDBError& IDBError::operator=(const IDBError& other)
-{
-    m_code = other.m_code;
-    m_message = other.m_message;
-    return *this;
-}
-
 String IDBError::name() const
 {
     return IDBDatabaseException::getErrorName(m_code);
diff --git a/Source/WebCore/Modules/indexeddb/shared/IDBError.h b/Source/WebCore/Modules/indexeddb/shared/IDBError.h
index 1ee9b5d..5177328 100644
--- a/Source/WebCore/Modules/indexeddb/shared/IDBError.h
+++ b/Source/WebCore/Modules/indexeddb/shared/IDBError.h
@@ -39,8 +39,6 @@ public:
     IDBError(ExceptionCode);
     IDBError(ExceptionCode, const String& message);
 
-    IDBError& operator=(const IDBError&);
-
     ExceptionCode code() const { return m_code; }
     String name() const;
     String message() const;
diff --git a/Source/WebCore/page/scrolling/ScrollingConstraints.h b/Source/WebCore/page/scrolling/ScrollingConstraints.h
index 23b05b8..8486d71 100644
--- a/Source/WebCore/page/scrolling/ScrollingConstraints.h
+++ b/Source/WebCore/page/scrolling/ScrollingConstraints.h
@@ -47,11 +47,6 @@ public:
         AnchorEdgeBottom = 1 << 3
     };
     typedef unsigned AnchorEdges;
-
-    ViewportConstraints(const ViewportConstraints& other)
-        : m_alignmentOffset(other.m_alignmentOffset)
-        , m_anchorEdges(other.m_anchorEdges)
-    { }
     
     virtual ~ViewportConstraints() { }
     
@@ -80,12 +75,6 @@ public:
         : ViewportConstraints()
     { }
 
-    FixedPositionViewportConstraints(const FixedPositionViewportConstraints& other)
-        : ViewportConstraints(other)
-        , m_viewportRectAtLastLayout(other.m_viewportRectAtLastLayout)
-        , m_layerPositionAtLastLayout(other.m_layerPositionAtLastLayout)
-    { }
-    
     WEBCORE_EXPORT FloatPoint layerPositionForViewportRect(const FloatRect& viewportRect) const;
 
     const FloatRect& viewportRectAtLastLayout() const { return m_viewportRectAtLastLayout; }
@@ -120,19 +109,6 @@ public:
         , m_bottomOffset(0)
     { }
 
-    StickyPositionViewportConstraints(const StickyPositionViewportConstraints& other)
-        : ViewportConstraints(other)
-        , m_leftOffset(other.m_leftOffset)
-        , m_rightOffset(other.m_rightOffset)
-        , m_topOffset(other.m_topOffset)
-        , m_bottomOffset(other.m_bottomOffset)
-        , m_constrainingRectAtLastLayout(other.m_constrainingRectAtLastLayout)
-        , m_containingBlockRect(other.m_containingBlockRect)
-        , m_stickyBoxRect(other.m_stickyBoxRect)
-        , m_stickyOffsetAtLastLayout(other.m_stickyOffsetAtLastLayout)
-        , m_layerPositionAtLastLayout(other.m_layerPositionAtLastLayout)
-    { }
-
     FloatSize computeStickyOffset(const FloatRect& constrainingRect) const;
 
     const FloatSize stickyOffsetAtLastLayout() const { return m_stickyOffsetAtLastLayout; }
diff --git a/Source/WebCore/platform/DragData.h b/Source/WebCore/platform/DragData.h
index 5788af4..627b262 100644
--- a/Source/WebCore/platform/DragData.h
+++ b/Source/WebCore/platform/DragData.h
@@ -117,16 +117,6 @@ public:
     // This constructor should used only by WebKit2 IPC because DragData
     // is initialized by the decoder and not in the constructor.
     DragData() { }
-
-    DragData& operator =(const DragData& data)
-    {
-        m_clientPosition = data.m_clientPosition;
-        m_globalPosition = data.m_globalPosition;
-        m_platformDragData = data.m_platformDragData;
-        m_draggingSourceOperationMask = data.m_draggingSourceOperationMask;
-        m_applicationFlags = data.m_applicationFlags;
-        return *this;
-    }
 #endif
 
 private:
diff --git a/Source/WebCore/platform/graphics/FloatPoint3D.h b/Source/WebCore/platform/graphics/FloatPoint3D.h
index 3c6e2a7..97f54b6 100644
--- a/Source/WebCore/platform/graphics/FloatPoint3D.h
+++ b/Source/WebCore/platform/graphics/FloatPoint3D.h
@@ -50,13 +50,6 @@ public:
     {
     }
 
-    FloatPoint3D(const FloatPoint3D& p)
-        : m_x(p.x())
-        , m_y(p.y())
-        , m_z(p.z())
-    {
-    }
-
     float x() const { return m_x; }
     void setX(float x) { m_x = x; }
 
diff --git a/Source/WebCore/platform/graphics/GraphicsContext.cpp b/Source/WebCore/platform/graphics/GraphicsContext.cpp
index b4c6f46..111a2ba 100644
--- a/Source/WebCore/platform/graphics/GraphicsContext.cpp
+++ b/Source/WebCore/platform/graphics/GraphicsContext.cpp
@@ -53,12 +53,6 @@ public:
     {
     }
 
-    TextRunIterator(const TextRunIterator& other)
-        : m_textRun(other.m_textRun)
-        , m_offset(other.m_offset)
-    {
-    }
-
     unsigned offset() const { return m_offset; }
     void increment() { m_offset++; }
     bool atEnd() const { return !m_textRun || m_offset >= m_textRun->length(); }
diff --git a/Source/WebCore/platform/graphics/texmap/TextureMapperAnimation.cpp b/Source/WebCore/platform/graphics/texmap/TextureMapperAnimation.cpp
index 0bedd0a..eb205d6 100644
--- a/Source/WebCore/platform/graphics/texmap/TextureMapperAnimation.cpp
+++ b/Source/WebCore/platform/graphics/texmap/TextureMapperAnimation.cpp
@@ -218,20 +218,6 @@ TextureMapperAnimation::TextureMapperAnimation(const String& name, const Keyfram
 {
 }
 
-TextureMapperAnimation::TextureMapperAnimation(const TextureMapperAnimation& other)
-    : m_name(other.m_name.isSafeToSendToAnotherThread() ? other.m_name : other.m_name.isolatedCopy())
-    , m_keyframes(other.m_keyframes)
-    , m_boxSize(other.m_boxSize)
-    , m_animation(Animation::create(*other.m_animation))
-    , m_listsMatch(other.m_listsMatch)
-    , m_startTime(other.m_startTime)
-    , m_pauseTime(other.m_pauseTime)
-    , m_totalRunningTime(other.m_totalRunningTime)
-    , m_lastRefreshedTime(other.m_lastRefreshedTime)
-    , m_state(other.m_state)
-{
-}
-
 void TextureMapperAnimation::apply(Client& client)
 {
     if (!isActive())
diff --git a/Source/WebCore/platform/graphics/texmap/TextureMapperAnimation.h b/Source/WebCore/platform/graphics/texmap/TextureMapperAnimation.h
index 6a447d7..cecb59a 100644
--- a/Source/WebCore/platform/graphics/texmap/TextureMapperAnimation.h
+++ b/Source/WebCore/platform/graphics/texmap/TextureMapperAnimation.h
@@ -41,7 +41,6 @@ public:
         : m_keyframes(AnimatedPropertyInvalid)
     { }
     TextureMapperAnimation(const String&, const KeyframeValueList&, const FloatSize&, const Animation&, bool, double, double, AnimationState);
-    TextureMapperAnimation(const TextureMapperAnimation&);
 
     void apply(Client&);
     void pause(double);
diff --git a/Source/WebCore/rendering/mathml/RenderMathMLOperator.h b/Source/WebCore/rendering/mathml/RenderMathMLOperator.h
index 7cf1904..9f6839a 100644
--- a/Source/WebCore/rendering/mathml/RenderMathMLOperator.h
+++ b/Source/WebCore/rendering/mathml/RenderMathMLOperator.h
@@ -106,20 +106,6 @@ private:
         }
         StretchyData()
             : m_mode(DrawNormal) { }
-        StretchyData(const StretchyData& data)
-        {
-            switch (data.m_mode) {
-            case DrawNormal:
-                setNormalMode();
-                break;
-            case DrawSizeVariant:
-                setSizeVariantMode(data.variant());
-                break;
-            case DrawGlyphAssembly:
-                setGlyphAssemblyMode(data.top(), data.extension(), data.bottom(), data.middle());
-                break;
-            }
-        }
 
     private:
         DrawMode m_mode;
diff --git a/Source/WebCore/rendering/style/BasicShapes.h b/Source/WebCore/rendering/style/BasicShapes.h
index be1572b..1e3392b 100644
--- a/Source/WebCore/rendering/style/BasicShapes.h
+++ b/Source/WebCore/rendering/style/BasicShapes.h
@@ -90,13 +90,6 @@ public:
         updateComputedLength();
     }
 
-    BasicShapeCenterCoordinate(const BasicShapeCenterCoordinate& other)
-        : m_direction(other.direction())
-        , m_length(other.length())
-        , m_computedLength(other.m_computedLength)
-    {
-    }
-
     Direction direction() const { return m_direction; }
     const Length& length() const { return m_length; }
     const Length& computedLength() const { return m_computedLength; }
@@ -141,10 +134,6 @@ public:
         : m_value(Undefined)
         , m_type(t)
     { }
-    BasicShapeRadius(const BasicShapeRadius& other)
-        : m_value(other.value())
-        , m_type(other.type())
-    { }
 
     const Length& value() const { return m_value; }
     Type type() const { return m_type; }
diff --git a/Source/WebCore/svg/SVGLength.cpp b/Source/WebCore/svg/SVGLength.cpp
index 50c4304..d8a7df1 100644
--- a/Source/WebCore/svg/SVGLength.cpp
+++ b/Source/WebCore/svg/SVGLength.cpp
@@ -133,12 +133,6 @@ SVGLength::SVGLength(const SVGLengthContext& context, float value, SVGLengthMode
     setValue(value, context, ASSERT_NO_EXCEPTION);
 }
 
-SVGLength::SVGLength(const SVGLength& other)
-    : m_valueInSpecifiedUnits(other.m_valueInSpecifiedUnits)
-    , m_unit(other.m_unit)
-{
-}
-
 void SVGLength::setValueAsString(const String& valueAsString, SVGLengthMode mode, ExceptionCode& ec)
 {
     m_valueInSpecifiedUnits = 0;
diff --git a/Source/WebCore/svg/SVGLength.h b/Source/WebCore/svg/SVGLength.h
index bea9649..84ee087 100644
--- a/Source/WebCore/svg/SVGLength.h
+++ b/Source/WebCore/svg/SVGLength.h
@@ -59,7 +59,6 @@ public:
     // FIXME: Once all SVGLength users use Length internally, we make this a wrapper for Length.
     SVGLength(SVGLengthMode = LengthModeOther, const String& valueAsString = String());
     SVGLength(const SVGLengthContext&, float, SVGLengthMode = LengthModeOther, SVGLengthType = LengthTypeNumber);
-    SVGLength(const SVGLength&);
 
     SVGLengthType unitType() const;
     SVGLengthMode unitMode() const;
diff --git a/Source/WTF/wtf/CheckedArithmetic.h b/Source/WTF/wtf/CheckedArithmetic.h
index 798d6f0..0ee7310 100644
--- a/Source/WTF/wtf/CheckedArithmetic.h
+++ b/Source/WTF/wtf/CheckedArithmetic.h
@@ -493,15 +493,6 @@ public:
         m_value = static_cast<T>(rhs.m_value);
     }
     
-    const Checked& operator=(Checked rhs)
-    {
-        this->clearOverflow();
-        if (rhs.hasOverflowed())
-            this->overflowed();
-        m_value = static_cast<T>(rhs.m_value);
-        return *this;
-    }
-    
     template <typename U> const Checked& operator=(U value)
     {
         return *this = Checked(value);
diff --git a/Source/WTF/wtf/PageBlock.h b/Source/WTF/wtf/PageBlock.h
index 372c8b6..647db2d 100644
--- a/Source/WTF/wtf/PageBlock.h
+++ b/Source/WTF/wtf/PageBlock.h
@@ -37,7 +37,6 @@ inline bool isPowerOfTwo(size_t size) { return !(size & (size - 1)); }
 class PageBlock {
 public:
     PageBlock();
-    PageBlock(const PageBlock&);
     PageBlock(void*, size_t, bool hasGuardPages);
     
     void* base() const { return m_base; }
@@ -64,13 +63,6 @@ inline PageBlock::PageBlock()
 {
 }
 
-inline PageBlock::PageBlock(const PageBlock& other)
-    : m_realBase(other.m_realBase)
-    , m_base(other.m_base)
-    , m_size(other.m_size)
-{
-}
-
 inline PageBlock::PageBlock(void* base, size_t size, bool hasGuardPages)
     : m_realBase(base)
     , m_base(static_cast<char*>(base) + ((base && hasGuardPages) ? pageSize() : 0))
