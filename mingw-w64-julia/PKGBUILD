####
#
# Based partly on package(s) or directions found at these URLs
#     https://www.archlinux.org/packages/community/x86_64/julia/
#     https://github.com/JuliaLang/julia/blob/master/doc/src/devdocs/build/build.md
#     https://github.com/JuliaLang/julia/blob/master/doc/src/devdocs/build/windows.md
#     https://github.com/JuliaLang/julia/blob/master/doc/src/devdocs/build/distributing.md
#     https://github.com/JuliaLang/julia/blob/master/CONTRIBUTING.md
#
# Maintainer: gym603 <gui_yuan_miao@163.com>
# Contributor: Tim Stahlhut <stahta01@gmail.com>
#
####
# BB means Binary Build done by Julia server
# SB means System Build done by MSys2 package
# LB means Local Build done by Julia make system running locally
#    Julia team prefers BB over LB and perfers LB over SB
#      Julia team tends to ignore reported problems if SB was used.
#    MSys2 team prefers SB over LB and perfers LB over BB
# SB LLVM will not work because it is wrong version.
# SB GMP and MPFR fails mpfr and numbers checks.
# SB PCRE required libpcre2-8.dll for bootstrap to work
# SB CURL fails Downloads check.
# The Julia BBs use SJLJ under 32 bit; so, MINGW32 needs full BB or no BB;
#   or, weird run-time issues are likely to happen.
# The subfolder deps/patches contains patches applied by Julia.
####
#
# Normal build command
#   makepkg-mingw -sLf --nocheck --install
#
# Added tty and msg2 start and finish messages because of makepkg log
#   lockups. They help to figure out which tee command to kill.
#
####

_make_verbose=0           # 0 or 1    (PR value is 0)
_show_log_lockup_info=0   # 0 or 1    (PR value is 0)
_development_mode=1       # 0 or 1                    Speeds up repeated builds
_do_short_check=0         # 0 or 1                    Reduces tests in check

# Use non-standard location to avoid file conflicts
_PROGRAM_INSTALL_PREFIX=${MSYSTEM_PREFIX}/libexec/julia

_realname=julia
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}")
         #"${MINGW_PACKAGE_PREFIX}-${_realname}-docs")
pkgver=1.9.1
pkgrel=1
_rc= # -rc1
_sourcedir=${_realname}-${pkgver}${_rc}
pkgdesc="High-level, high-performance, dynamic programming language for technical computing (mingw-w64)"
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64')
url="https://julialang.org/"
license=('spdx:MIT' 'LGPL-2.1+' 'GPL-2.0+')
depends=()
makedepends=('git' 'm4' 'make' 'p7zip'
             'patch' 'perl' 'rsync' 'gcc'
             "${MINGW_PACKAGE_PREFIX}-gcc-fortran"
             "${MINGW_PACKAGE_PREFIX}-python"
             "${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-cc")
if [[ "$MSYSTEM" != "MINGW32" ]]; then
makedepends+=("${MINGW_PACKAGE_PREFIX}-pcre2")
fi
source=(${_sourcedir}.tar.gz::https://github.com/JuliaLang/julia/releases/download/v${pkgver}${_rc}/${_realname}-${pkgver}${_rc}.tar.gz
        # Based on https://github.com/JuliaLang/julia/pull/48859
        020-1.9.0-deps-tools-msys2-Fix-tar-file-creation.patch
        # local patch do not try sending upstream
        021-1.9.0-msys2-workaround-copy-bug.patch
        # Part of https://github.com/JuliaLang/julia/pull/48851
        022-1.8.x-deps-tools-MSYS2-Set-CMAKE_C_COMPILER-using-cygpath-.patch
        # local patch do not try sending upstream (for ONLY UCRT64)
        023-1.9.0-msys2-ucrt64-use-ucrtbase.patch
        # Based on MERGED https://github.com/JuliaLang/julia/pull/48793
        024-1.9.0-deps-libgit2-Add-LIBSSH2-paths.patch
        # Based on https://github.com/JuliaLang/julia/pull/49938
        031-1.9.0-deps-blastrampoline-fix-win-hardlink.patch
        # local patches do not try sending upstream
        # Mainly because of timeout error on CI server.
        034-1.9.0-build-Add-target-install-deps.patch
        035-1.9.0-julia-Skip-2nd-build-in-install-target.patch
        julia.sh)
sha256sums=('1989055bd96861c63c6e80162e5465768b217a93d41fb351c3fc3d243d9dd708'
            '129acdffda3c92d1f2bad8c77894cab12374336760d6cebf7dfb61d4abe1e8a3'
            'b401de61afcdaadc0d38936f8d87efb5ed02b243f8a4eaa4bed639cdb13f152a'
            '1f7193725ea64e9c9ff1f16e15bf1ddd4e200a1e8b439f2478dba6700719849f'
            '1ca5562f2f29aa543db3ed539562d9800fb3ab3f579a0de4c4f3792e053db9a7'
            '1ece08ed5d92557ac1c8500381dd2339b3f3057c315238c40c4748e029693045'
            '9591fab01b2b6b6e48874f84bb444f86d39a964a57b4d35426535758b26725ca'
            '8bdfd4c69690a93d9fc7042ef3c42ff930a08f071d12d0c19285351284acee17'
            '021e7eb60b5841a93cc80676db81fdc3ce887ff93a02880d252390ee14e6123e'
            '58fc0af13fa8932c8dcc1a33bfdd9c3fe3bb8dbe704cd3ffb4b3457abb2ea389')
# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    if patch --dry-run -Rbp1 -i "${srcdir}/${_patch}" > /dev/null 2>&1 ; then
      msg2 "Skipping ${_patch} because it likely was already applied"
    else
      msg2 "Applying ${_patch}"
      patch -Nbp1 -i "${srcdir}/${_patch}"
    fi
  done
}

_make_user_config () {
  # Set LB to use git repos if possible building dependacies.
  echo 'DEPS_GIT = 1' > Make.user
  if [[ "$MSYSTEM" != "MINGW32" ]]; then
    # Fix of ERROR: Unable to find compatible target in system image.
    echo 'JULIA_CPU_TARGET=generic;sandybridge,-xsaveopt,clone_all;haswell,-rdrnd,base(1)' >> Make.user
    echo 'USE_SYSTEM_CSL = 1' >> Make.user
    echo 'USE_BINARYBUILDER_LLVM = 0' >> Make.user
    echo 'USE_BINARYBUILDER_GMP = 0' >> Make.user
    echo 'USE_BINARYBUILDER_MPFR = 0' >> Make.user
    echo 'USE_SYSTEM_PCRE = 1' >> Make.user
  fi
  if [[ "$MSYSTEM" == "UCRT64" ]]; then
    echo 'USE_BINARYBUILDER_OPENLIBM = 0' >> Make.user
    echo 'USE_BINARYBUILDER_LIBGIT2 = 0' >> Make.user
    echo 'USE_BINARYBUILDER_LIBBLASTRAMPOLINE = 0' >> Make.user
    echo 'USE_BINARYBUILDER_LIBSUITESPARSE = 0' >> Make.user
  fi
}

prepare() {
  cd "${srcdir}/${_sourcedir}"

  rm -f deps/patches/llvm-8.0.1-D64937-gcc10.patch

  apply_patch_with_msg \
    020-1.9.0-deps-tools-msys2-Fix-tar-file-creation.patch \
    021-1.9.0-msys2-workaround-copy-bug.patch \
    022-1.8.x-deps-tools-MSYS2-Set-CMAKE_C_COMPILER-using-cygpath-.patch \
    024-1.9.0-deps-libgit2-Add-LIBSSH2-paths.patch \
    034-1.9.0-build-Add-target-install-deps.patch \
    035-1.9.0-julia-Skip-2nd-build-in-install-target.patch

  #if [[ "$MSYSTEM" != "MINGW32" ]]; then
    ### Change Msys2 install locations that do not have file conflicts with other packages
    # And, ones that still permit running tests/checks after installation.
    ####
    # Bootstrap like build error
    #sed --in-place 's|libdir := $(prefix)/lib|libdir := $(MSYSTEM_PREFIX)/lib|' Make.inc
    # Run-time error
    #sed --in-place 's|datarootdir := $(prefix)/share|datarootdir := $(MSYSTEM_PREFIX)/share|' Make.inc
    # make install error
    #sed --in-place 's|private_libdir := $(libdir)/julia|private_libdir := ${MSYSTEM_PREFIX}/libexec/julia/private|' Make.inc
    sed --in-place 's|private_libexecdir := $(libexecdir)/julia|private_libexecdir := ${MSYSTEM_PREFIX}/libexec/julia/private|' Make.inc
    sed --in-place 's|libexecdir := $(prefix)/libexec|libexecdir := $(prefix)/lib|' Make.inc
    sed --in-place 's|docdir := $(datarootdir)/doc/julia|docdir := $(MSYSTEM_PREFIX)/share/doc/julia|' Make.inc
    sed --in-place 's|mandir := $(datarootdir)/man|mandir := $(MSYSTEM_PREFIX)/share/man|' Make.inc
    sed --in-place 's|includedir := $(prefix)/include|includedir := $(MSYSTEM_PREFIX)/include|' Make.inc
    sed --in-place 's|sysconfdir := $(prefix)/etc|sysconfdir := $(MSYSTEM_PREFIX)/etc|' Make.inc
  #fi

  # Should likely delete all of "${srcdir}/build-${MSYSTEM}";
  #   but, local testing would take many more hours
  [[ -d "${srcdir}/build-${MSYSTEM}/stdlib" ]] && rm -rf "${srcdir}/build-${MSYSTEM}/stdlib"
  msg2 "directory copy starting"
  cp -rp  "${srcdir}/${_sourcedir}/." "${srcdir}/build-${MSYSTEM}"
  msg2 "directory copy finished"

  cd "${srcdir}/build-${MSYSTEM}"
  _make_user_config; # create Make.user in current directory
  if [[ "$MSYSTEM" == "UCRT64" ]]; then
    apply_patch_with_msg 023-1.9.0-msys2-ucrt64-use-ucrtbase.patch
    apply_patch_with_msg 031-1.9.0-deps-blastrampoline-fix-win-hardlink.patch
  fi
  if [[ "$_show_log_lockup_info" == "1" ]]; then
    tty
    msg2 "prepare finished"
  fi
}

build() {
  if [[ "$_show_log_lockup_info" == "1" ]]; then
    msg2 "build started"
  fi

  cd "${srcdir}/build-${MSYSTEM}"

  echo "Make.user contents"
  cat Make.user

  ####
  # From makepkg_mingw.conf on 2023-02-09
  # CXXFLAGS="-march=pentium4 -mtune=generic -O2 -pipe"
  # CFLAGS="-march=pentium4 -mtune=generic -O2 -pipe -Wp,-D_FORTIFY_SOURCE=2 -fstack-protector-strong"
  ##
  case "${CARCH}" in
    i686)
      export CFLAGS="-march=pentium4 -mtune=generic -pipe"
      export CXXFLAGS="-march=pentium4 -mtune=generic -pipe"
    ;;
  esac

  # Not removing scratch speeds up development by reducing rebulding of deps
  if [[ "$_development_mode" != "1" ]]; then
    [[ -d "${srcdir}/build-${MSYSTEM}/deps/scratch" ]] && rm -rf "${srcdir}/build-${MSYSTEM}/deps/scratch"
  fi
  [[ -d "${srcdir}/build-${MSYSTEM}/deps/scratch/blastrampoline" ]] && rm -rf "${srcdir}/build-${MSYSTEM}/deps/scratch/blastrampoline"
  [[ -d "${srcdir}/build-${MSYSTEM}/usr-staging" ]] && rm -rf "${srcdir}/build-${MSYSTEM}/usr-staging"
  [[ -d "${srcdir}/build-${MSYSTEM}/usr" ]] && rm -rf "${srcdir}/build-${MSYSTEM}/usr"

  # helps to prevent weird make errors when build folder has files from prior build
  make --print-directory clean

  # CSL make install and copy to ./usr
  make -C deps VERBOSE=1 install-csl
  mkdir -p ./usr/lib
  # Needed because of bug https://github.com/JuliaLang/julia/issues/48081
  cp ${MSYSTEM_PREFIX}/lib/libmsvcrt.a         ./usr/lib/libmsvcrt.a
  if [[ "$MSYSTEM" == "UCRT64" ]]; then
    cp ${MSYSTEM_PREFIX}/lib/libucrtbase.a       ./usr/lib/libucrtbase.a
  fi
  if [[ "$MSYSTEM" != "MINGW32" ]]; then
    cp ${MSYSTEM_PREFIX}/lib/libgcc_s.a          ./usr/lib/libgcc_s.a
    cp ${MSYSTEM_PREFIX}/lib/libssp.a            ./usr/lib/libssp.a
    local _GCC_VERSION=`gcc -dumpversion`
    cp ${MSYSTEM_PREFIX}/lib/gcc/${MSYSTEM_CHOST}/${_GCC_VERSION}/libgcc.a ./usr/lib/libgcc.a
    mkdir -p ./usr/bin
    cp ${MSYSTEM_PREFIX}/bin/libgfortran-5.dll   ./usr/bin/
    cp ${MSYSTEM_PREFIX}/bin/libquadmath-0.dll   ./usr/bin/
    cp ${MSYSTEM_PREFIX}/bin/libstdc++-6.dll     ./usr/bin/
    # cp ${MSYSTEM_PREFIX}/bin/libssp-0.dll        ./usr/bin/ # Msys2 Mingw no longer has this DLL
    cp ${MSYSTEM_PREFIX}/bin/libatomic-1.dll     ./usr/bin/
    cp ${MSYSTEM_PREFIX}/bin/libgomp-1.dll       ./usr/bin/
    cp ${MSYSTEM_PREFIX}/bin/libgcc_s_seh-1.dll  ./usr/bin/
    cp ${MSYSTEM_PREFIX}/bin/libwinpthread-1.dll ./usr/bin/
  fi
  if [[ "$MSYSTEM" != "MINGW32" ]]; then
    cp ${MSYSTEM_PREFIX}/bin/libcurl-4.dll       ./usr/bin/
    cp ${MSYSTEM_PREFIX}/bin/libpcre2-8-0.dll    ./usr/bin/
    cp ${MSYSTEM_PREFIX}/bin/libpcre2-8-0.dll    ./usr/bin/libpcre2-8.dll
  fi

  # Random build errors that acted like race condition building LLVM; might have been missing cygwin/msys2 GCC
  make -C deps VERBOSE=1 install-llvm || make --jobs=1 -C deps VERBOSE=1 install-llvm

  make -C deps VERBOSE=1 install-blastrampoline
  # this copy should no longer be needed if patch 031 is working right
  [[ -f ./usr/bin/libblastrampoline-5.dll ]] && \
    cp --no-clobber ./usr/bin/libblastrampoline-5.dll ./usr/bin/libblastrampoline.dll

  # option "-w" disables all warnings
  # env CFLAGS="$CFLAGS -w" CXXFLAGS="$CXXFLAGS -w" "\"
    make VERBOSE=${_make_verbose} \
      LOCALBASE=${MSYSTEM_PREFIX} # -j1

  make install-deps VERBOSE=${_make_verbose} \
    LOCALBASE=${MSYSTEM_PREFIX} \
    prefix=${_PROGRAM_INSTALL_PREFIX}

  if [[ "$_show_log_lockup_info" == "1" ]]; then
    tty
    msg2 "build finished"
  fi
}

check() {
  msg2 "check started"

  cd "${srcdir}/build-${MSYSTEM}/test"

  make print-TESTS # list the tests
  #make -k all || true

  # Since we are using MSys2 built CSL (for UCRT64 at least) test it
  make CompilerSupportLibraries_jll || true
  # Test the ones that seem to always fail
  make InteractiveUtils || true
  make FileWatching || true
  # Test the ones that sometimes fail
  make REPL || true
  make threads || true
  make compiler/codegen || true
  make misc || true
  make Downloads || true
  make LibCURL || true
  make mpfr || true
  make numbers || true
  make subtype || true
  make checked || true
  make Mmap || true
  make file || true
  make Profile || true
  make Distributed || true
  make LazyArtifacts || true
  make TOML || true
  make MPFR_jll || true
  make nghttp2_jll || true
  make vecelement || true

  # sub-tests that sometimes fail and make does not work all the time
  env PATH="${srcdir}/build-${MSYSTEM}/usr/bin:$PATH" \
    ../usr/bin/julia --check-bounds=yes --startup-file=no ./runtests.jl \
      SparseArrays/cholmod Dates/io || true

  # Test the ones that do not fail; but, have sometimes have IOError
  make loading || true
  make precompile || true

if [[ "$_do_short_check" != "1" ]]; then
  env PATH="${srcdir}/build-${MSYSTEM}/usr/bin:$PATH" \
    ../usr/bin/julia --check-bounds=yes --startup-file=no ./runtests.jl \
      --skip REPL InteractiveUtils FileWatching threads \
        compiler/codegen misc Downloads LinearAlgebra \
        numbers subtype checked Mmap loading precompile \
        file SparseArrays/cholmod Dates/io Profile \
        Distributed mpfr vecelement || true

  # LinearAlgebra tests runs a very long time
  env PATH="${srcdir}/build-${MSYSTEM}/usr/bin:$PATH" \
    ../usr/bin/julia --check-bounds=yes --startup-file=no ./runtests.jl \
      LinearAlgebra || true
fi
  find ../stdlib \( -name \*.cov -o -name \*.mem \) -delete

  if [[ "$_show_log_lockup_info" == "1" ]]; then
    tty
    msg2 "check finished"
  fi
}

package_julia() {
  depends=()
  conflicts=()
  if [[ "$MSYSTEM" != "MINGW32" ]]; then
    depends+=("${MINGW_PACKAGE_PREFIX}-gcc-libs")
    depends+=("${MINGW_PACKAGE_PREFIX}-gcc-libgfortran")
    depends+=("${MINGW_PACKAGE_PREFIX}-libwinpthread")
    depends+=("${MINGW_PACKAGE_PREFIX}-pcre2")
  fi
  backup=("${MSYSTEM_PREFIX:1}"/etc/julia/startup.jl)

  cd "${srcdir}/build-${MSYSTEM}"

  make VERBOSE=1 DESTDIR="${pkgdir}" install \
    LOCALBASE=${MSYSTEM_PREFIX} \
    prefix=${_PROGRAM_INSTALL_PREFIX}

  # Documentation is in the julia-docs package.
  rm -rf "$pkgdir${_PROGRAM_INSTALL_PREFIX}/share/"{doc,julia/doc}
  # Man pages in share/man are duplicate.
  #rm -rf "$pkgdir${_PROGRAM_INSTALL_PREFIX}/share/man"

  #cd "$pkgdir${MSYSTEM_PREFIX}/share/julia/stdlib/v${pkgver::-2}"
  #rm -fr ArgTools/.git
  #rm -fr DelimitedFiles/.git
  #rm -fr Downloads/.git
  #rm -fr LibCURL/.git
  #rm -fr NetworkOptions/.git
  #rm -fr Pkg/.git
  #rm -fr SHA/.git
  #rm -fr SparseArrays/.git
  #rm -fr Statistics/.git
  #rm -fr SuiteSparse/.git
  #rm -fr Tar/.git

  install -Dm644 "${srcdir}/julia.sh" "${pkgdir}${MSYSTEM_PREFIX}/bin/julia"

  cd "${srcdir}/build-${MSYSTEM}"
  mkdir -p "${pkgdir}${MSYSTEM_PREFIX}/share/licenses/${_realname}"
  install -Dm644 LICENSE.md "${pkgdir}${MSYSTEM_PREFIX}/share/licenses/${_realname}/LICENSE.md"

  # Remove files not needed by Windows
  rm -f $pkgdir${MSYSTEM_PREFIX}/share/applications/julia.desktop
}

package_julia-docs() {
  pkgdesc='Documentation and examples for Julia (mingw-w64)'
  license=('spdx:MIT')
  optdepends=(${MINGW_PACKAGE_PREFIX}-julia)

  install -d "$pkgdir${MSYSTEM_PREFIX}/share/doc"
  cp -r ${_sourcedir}/doc "$pkgdir${MSYSTEM_PREFIX}/share/doc/${_realname}"
  rm -rf "$pkgdir${MSYSTEM_PREFIX}/share/doc/${_realname}/man"
  install -Dm644 ${_sourcedir}/LICENSE.md \
    "$pkgdir${MSYSTEM_PREFIX}/share/licenses/julia-docs/LICENSE.md"
}

# template start; name=mingw-w64-splitpkg-wrappers; version=1.0;
# vim: set ft=bash :

# generate wrappers
for _name in "${pkgname[@]}"; do
  _short="package_${_name#${MINGW_PACKAGE_PREFIX}-}"
  _func="$(declare -f "${_short}")"
  eval "${_func/#${_short}/package_${_name}}"
done
# template end;
