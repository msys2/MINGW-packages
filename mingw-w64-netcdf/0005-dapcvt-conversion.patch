--- netcdf-4.6.0/libdap2/dapcvt.c.orig	2018-01-25 18:31:50.000000000 +0100
+++ netcdf-4.6.0/libdap2/dapcvt.c	2018-03-08 21:55:02.349612700 +0100
@@ -236,7 +236,7 @@
 	case NC_FLOAT: {
 	    float* p = (float*)dstmem;
 	    ok = sscanf(s,"%g%n",p,&nread);
-#if defined(_MSC_VER) && (_MSC_VER == 1500)
+#ifdef HAVE_WIN_SSCANF
 	    if (!_strnicmp(s, "NaN", 3)) {
 	      ok = 1;
 	      nread = 3;
@@ -246,7 +246,7 @@
 	case NC_DOUBLE: {
 	    double* p = (double*)dstmem;
 	    ok = sscanf(s,"%lg%n",p,&nread);
-#if defined(_MSC_VER) && (_MSC_VER == 1500)
+#ifdef HAVE_WIN_SSCANF
 	    if (!_strnicmp(s, "NaN", 3)) {
 	      ok = 1;
 	      nread = 3;
@@ -255,10 +255,12 @@
 	    } break;
 	case NC_UBYTE: {
 	    unsigned char* p = (unsigned char*)dstmem;
-#ifdef _MSC_VER
+#ifdef HAVE_WIN_SSCANF
 	    unsigned int uval;
 	    ok = sscanf(s,"%u%n",&uval,&nread);
+#ifdef _MSC_VER
 	    _ASSERTE(_CrtCheckMemory());
+#endif
 	    /* For back compatibility, we allow any value, but force conversion */
 	    uval = (uval & 0xFF);
 	    *p = (unsigned char)uval;
@@ -276,7 +278,7 @@
 	    } break;
 	case NC_INT64: {
 	    long long* p = (long long*)dstmem;
-#ifdef _MSC_VER
+#ifdef HAVE_WIN_SSCANF
 		ok = sscanf(s, "%I64d%n", p,&nread);
 #else
 		ok = sscanf(s,"%lld%n",p,&nread);
