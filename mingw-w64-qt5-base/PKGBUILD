# Contibutor: Mehdi Chinoune <mehdi.chinoune@hotmail.com>

# Use the right mkspecs file
if [[ ${MINGW_PACKAGE_PREFIX} == *-clang-* ]]; then
  _platform=win32-clang-g++
else
  _platform=win32-g++
fi

_realname=qt5-base
pkgbase="mingw-w64-${_realname}"
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
_qtver=5.15.2
pkgver=${_qtver/-/}
pkgrel=1
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clang32')
pkgdesc="'A cross-platform application and UI framework (mingw-w64)"
url='https://www.qt.io/'
license=('GPL3' 'LGPL' 'FDL' 'custom')
conflicts=("${MINGW_PACKAGE_PREFIX}-qt5"
           "${MINGW_PACKAGE_PREFIX}-qt5-static"
           "${MINGW_PACKAGE_PREFIX}-qt5-debug")
depends=("${MINGW_PACKAGE_PREFIX}-double-conversion"
         "${MINGW_PACKAGE_PREFIX}-dbus"
         "${MINGW_PACKAGE_PREFIX}-fontconfig"
         "${MINGW_PACKAGE_PREFIX}-freetype"
         "${MINGW_PACKAGE_PREFIX}-harfbuzz"
         "${MINGW_PACKAGE_PREFIX}-icu"
         "${MINGW_PACKAGE_PREFIX}-libjpeg-turbo"
         "${MINGW_PACKAGE_PREFIX}-libpng"
         "${MINGW_PACKAGE_PREFIX}-openssl"
         "${MINGW_PACKAGE_PREFIX}-pcre2"
         "${MINGW_PACKAGE_PREFIX}-sqlite3"
         $([[ ${MINGW_PACKAGE_PREFIX} == *-clang-* ]] || echo "${MINGW_PACKAGE_PREFIX}-vulkan")
         "${MINGW_PACKAGE_PREFIX}-zlib")
optdepends=("${MINGW_PACKAGE_PREFIX}-libmariadbclient"
            "${MINGW_PACKAGE_PREFIX}-firebird2"
            "${MINGW_PACKAGE_PREFIX}-postgresql")
makedepends=("${MINGW_PACKAGE_PREFIX}-pkg-config"
             "${MINGW_PACKAGE_PREFIX}-libmariadbclient"
             $([[ ${MINGW_PACKAGE_PREFIX} == *-clang-* ]] || echo "${MINGW_PACKAGE_PREFIX}-firebird2")
             $([[ ${MINGW_PACKAGE_PREFIX} == *-clang-* ]] || echo "${MINGW_PACKAGE_PREFIX}-postgresql") )
groups=("${MINGW_PACKAGE_PREFIX}-qt5")
options=('!strip' 'staticlibs' 'ccache')
_pkgfn="${_realname/5-/}-everywhere-src-${_qtver}"
source=("https://download.qt.io/official_releases/qt/${pkgver%.*}/$_qtver/submodules/$_pkgfn.tar.xz"
        001-adjust-qmake-conf-mingw.patch
        002-qt-5.8.0-fix-sql-libraries-mingw.patch
        003-qt-5.8.0-configure-gcc-before-clang.patch
        004-fix-linking-again-different-static-libs.patch
        005-qt-5.3.0-win_flex-replace.patch
        006-qt-5.3.0-win32-g-Enable-static-builds.patch
        007-qt-5.3.0-win32-g-Add-QMAKE_EXTENSION_IMPORTLIB-defaulting-to-.patch
        008-qt-5.8.0-mingw-dbus-and-pkg-config.patch
        009-qt-5.8.0-win32-g++-use-qpa-genericunixfontdatabase.patch
        010-qt-5.8.0-force-using-make-on-msys.patch
        011-qt-5.8.0-Revert-untangle-use-of-system-vs.-shell-path-list-se.patch
        012-qt-5.8.0-Revert-fix-quoting-and-path-separators-in-qtPrepareT.patch
        013-qt-5.3.1-workaround-ansidecl-h-PTR-define-conflict.patch
        014-qt-5.3.2-dont-add-resource-files-to-qmake-libs.patch
        015-qt-5.3.2-win32-qt5-static-cmake-link-ws2_32-and--static.patch
        016-qt-5.4.2-win32-Avoid-platformNativeInterface-segfaults-with-minimal-platform.patch
        017-qt-5.8.0-win32-do-not-use-fontconfig.patch
        018-win32-dont-need-flatpack-theme.patch
        019-qt-5.11-static_icu.patch
        020-fix-and-enable-iconv-codec.patch
        021-enable-mingw-schannel-alpn.patch
        022-qt-5.8.0-cast-errors.patch
        023-schannel-fix-incomplete-downloads.patch)

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying ${_patch}"
    patch -Nbp1 -i "${srcdir}/${_patch}"
  done
}

prepare() {
  cd ${srcdir}/${_pkgfn}

  apply_patch_with_msg \
    001-adjust-qmake-conf-mingw.patch \
    002-qt-5.8.0-fix-sql-libraries-mingw.patch \
    003-qt-5.8.0-configure-gcc-before-clang.patch \
    004-fix-linking-again-different-static-libs.patch \
    005-qt-5.3.0-win_flex-replace.patch \
    006-qt-5.3.0-win32-g-Enable-static-builds.patch \
    007-qt-5.3.0-win32-g-Add-QMAKE_EXTENSION_IMPORTLIB-defaulting-to-.patch \
    008-qt-5.8.0-mingw-dbus-and-pkg-config.patch \
    009-qt-5.8.0-win32-g++-use-qpa-genericunixfontdatabase.patch

  apply_patch_with_msg \
    010-qt-5.8.0-force-using-make-on-msys.patch

  # Ossi says we should fix this in qwebkit with a $$(shell_path), but the ' quotes get in the way
  # due to qtPrepareTool adding them with $$shell_quote
  apply_patch_with_msg \
    011-qt-5.8.0-Revert-untangle-use-of-system-vs.-shell-path-list-se.patch \
    012-qt-5.8.0-Revert-fix-quoting-and-path-separators-in-qtPrepareT.patch \
    013-qt-5.3.1-workaround-ansidecl-h-PTR-define-conflict.patch \
    014-qt-5.3.2-dont-add-resource-files-to-qmake-libs.patch

  # Patches so that qt5-static can be used with cmake.
  apply_patch_with_msg \
    015-qt-5.3.2-win32-qt5-static-cmake-link-ws2_32-and--static.patch

  apply_patch_with_msg \
    016-qt-5.4.2-win32-Avoid-platformNativeInterface-segfaults-with-minimal-platform.patch \
    017-qt-5.8.0-win32-do-not-use-fontconfig.patch \
    018-win32-dont-need-flatpack-theme.patch \
    019-qt-5.11-static_icu.patch \
    020-fix-and-enable-iconv-codec.patch \
    021-enable-mingw-schannel-alpn.patch \
    022-qt-5.8.0-cast-errors.patch

  # https://codereview.qt-project.org/c/qt/qtbase/+/333051
  apply_patch_with_msg 023-schannel-fix-incomplete-downloads.patch

  local _ARCH_TUNE=
  local _HARD_FLAGS=
  case ${MINGW_CHOST} in
    i686*)
      _ARCH_TUNE="-march=i686 -mtune=core2"
      _HARD_FLAGS="-Wl,--dynamicbase,--nxcompat,--no-seh"
    ;;
    x86_64*)
      _ARCH_TUNE="-march=nocona -mtune=core2"
      _HARD_FLAGS="-Wl,--dynamicbase,--high-entropy-va,--nxcompat,--default-image-base-high"
    ;;
  esac

  BIGOBJ_FLAGS="-Wa,-mbig-obj"

  # Append these ones ..
  sed -i "s|^QMAKE_CFLAGS .*= \(.*\)$|QMAKE_CFLAGS            = \1 ${_ARCH_TUNE} ${BIGOBJ_FLAGS} ${LTCG_CFLAGS}|g" mkspecs/${_platform}/qmake.conf
  sed -i "s|^QMAKE_LFLAGS           +=\(.*\)$|QMAKE_LFLAGS            += \1 ${LTCG_LFLAGS} ${_HARD_FLAGS}|g" mkspecs/common/gcc-base.conf

  # To keep the build folder name quite small (PATH_MAX limit)
  # the source folder (long) is renamed to build-$MSYSTEM (MINGW64, MINGW32, ...etc)
  cd ${srcdir}
  [[ -d build-${MSYSTEM} ]] && rm -rf build-${MSYSTEM}
  mv ${_pkgfn} build-${MSYSTEM}
}

build() {
  cd ${srcdir}/build-${MSYSTEM}
  local _buildpkgdir=${pkgdirbase}/${pkgname}/${MINGW_PREFIX}
  mkdir -p ${_buildpkgdir}
  local QTDIR_WIN=$(cygpath -am ${_buildpkgdir})

  local -a _sql_config
  _sql_config+=("-plugin-sql-mysql")
  _sql_config+=("-plugin-sql-odbc")
  if [[ ${MINGW_PACKAGE_PREFIX} != *-clang-* ]]; then
    _sql_config+=("-plugin-sql-ibase")
    _sql_config+=("-plugin-sql-psql")
  fi

  # Qt manages the compiler flags for release / debug configs separately, so having our own values (-O2) is harmful here ..
  unset CFLAGS
  unset CXXFLAGS
  unset LDFLAGS
  unset QMAKESPEC
  unset XQMAKESPEC
  unset QMAKEPATH
  unset QMAKEFEATURES

  # https://github.com/msys2/MSYS2-packages/issues/2282
  export MSYS2_ARG_CONV_EXCL='--foreign-types='

  export VULKAN_SDK=${MINGW_PREFIX}

  ./configure.bat \
    -prefix ${QTDIR_WIN} \
    -datadir ${QTDIR_WIN}/share/qt5 \
    -archdatadir ${QTDIR_WIN}/share/qt5 \
    -opensource \
    -confirm-license \
    -release \
    -shared \
    -platform ${_platform} \
    -make-tool make \
    -pkg-config \
    -I${MINGW_PREFIX}/include/mariadb \
    -nomake examples \
    -nomake tests \
    -opengl desktop \
    -dbus \
    -dbus-linked \
    -icu \
    -gif \
    -ico \
    -system-doubleconversion \
    -system-freetype \
    -system-harfbuzz \
    -system-pcre \
    -system-zlib \
    -system-libpng \
    -system-libjpeg \
    -system-sqlite \
    -openssl-linked \
    -no-iconv \
    "${_sql_config[@]}"

  make
}

check() {
  cd build-${MSYSTEM}
  make check -j1 -k
}

package() {
  cd build-${MSYSTEM}

  make install

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_realname}
  install -Dm644 $srcdir/build-${MSYSTEM}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_realname}

  # Workaround for installing empty .pc files
  plain "---> Fix pkgconfig files..."
  local _pc_files=( $(find ${srcdir}/build-${MSYSTEM} -type f -name Qt5*.pc) )
  cp -f ${_pc_files[@]} ${pkgdir}${MINGW_PREFIX}/lib/pkgconfig/

  # Fix paths in qconfig.pri and qmodule.pri:
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local QT_PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"
  local MINGW_PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${QT_PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${QT_PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f -name '*.cmake' \
      -exec sed -i -e "s|${QT_PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

sha256sums=('909fad2591ee367993a75d7e2ea50ad4db332f05e1c38dd7a5a274e156a4e0f8'
            'f7dcfedfb25777c22211208084fed8b62f03ba9c5d5ce387682aeed10f79a654'
            'e0a535278057f42e43952405e567c23cc493ef6badeeb3bbce0154953cd545a5'
            'e7252bdc92fa75f067e4beafbf3c844fca3a4bd16d14ac5344256f022a9214d5'
            '02a3b24c02a6797b706582198ab1177648c2653e8870dcdddc5856d6cd629d49'
            '013401295022dbad73df0355124758d337da71b99253461bb84bc7c9320e27e6'
            '61cb036d39a12abc5f98fc2afdc41694471413171e79debd3cd5f464d74dad32'
            '1ca4be5aefe731af2c9229ed97e8c6231d735a64c655768f6ef677a932ce2019'
            '0fb18899437e86bdbea1750a892b18bef76bdf9b85e504afcb65e7f49f421ff0'
            '3a8de25edb2a4643583ad5fa2743475b60fffad931be25314b4067be2413bca4'
            '49eee16b318f1ac8d5ddf45f294b9f88e05c2f7f7ad2808f281961200d61c6cf'
            '9fafed377f435493dd72b1b8f49ca25580f5b3d4100528a5c4ca18d10627dfd7'
            '69f7b27d7c23731e73500e058ec69e7504740d102244f15959977355814de9c5'
            '41acd8702a33a1d2f5e93c7e940c41aaa335aa728bc5562e799ef6077aa00433'
            '274d24f9cd84a7fae5e2c5836c8a3a6108ef2c04c1b8c8e97a11b70975b98ddf'
            'ce0c7e6dcc5af61c7d7db2bbe8921ab3861fd9380be9af62933f8d29cb577d53'
            '58556b73b3fcbddd5658832f012760e3a86637bdd9e6324596b6ecd69981a985'
            '4b2f54549743864e831e57d45269a7d84182d68cbc5f5277daa29167c046ae52'
            '606e6e4888e2efc8e971258ec3cdf43b32c6dac9bdba22ed89ca9571adeb365d'
            'c88c558f3388ab2fa7df57e403324e92abdfbdf72a87c849af337720f52baa8b'
            'c9bdd0ce5f30c6eb940675e45e14179bbab41b743e88cec4679c20dc2d8c9cbf'
            'fec3f368973c004c3fccea4e9d816eb42c02dcb2355714d5c833c8b74b428f11'
            '5397862593005d9af4b218396c4a3975b0e0f039992562ffef4672c0738c4df0'
            '961090b78b8f586a4d9819b45dcce3db3d54bede3d69ced098e9feaeaab936aa')
