--- a/gettext-runtime/intl/compat.c
+++ b/gettext-runtime/intl/compat.c
@@ -23,3 +23,46 @@
 libintl_set_relocation_prefix (const char *orig_prefix, const char *curr_prefix)
 {
 }
+
+#ifdef _WIN32
+#include <windows.h>
+
+# define HAS_DEVICE(P) \
+    ((((P)[0] >= 'A' && (P)[0] <= 'Z') || ((P)[0] >= 'a' && (P)[0] <= 'z')) \
+     && (P)[1] == ':')
+#define IS_FILE_NAME_WITH_DIR(P) \
+    (strchr (P, '/') != NULL || strchr (P, '\\') != NULL || HAS_DEVICE (P))
+
+static char *shared_library_fullname;
+
+BOOL WINAPI
+DllMain (HINSTANCE module_handle, DWORD event, LPVOID reserved)
+{
+  (void) reserved;
+
+  if (event == DLL_PROCESS_ATTACH)
+    {
+      /* The DLL is being loaded into an application's address range.  */
+      static char location[MAX_PATH];
+
+      if (!GetModuleFileName (module_handle, location, sizeof (location)))
+        /* Shouldn't happen.  */
+        return FALSE;
+
+      if (!IS_FILE_NAME_WITH_DIR (location))
+        /* Shouldn't happen.  */
+        return FALSE;
+
+      /* Avoid a memory leak when the same DLL get attached, detached,
+         attached, detached, and so on.  This happens e.g. when a spell
+         checker DLL is used repeatedly by a mail program.  */
+      if (!(shared_library_fullname != NULL
+            && strcmp (shared_library_fullname, location) == 0))
+        /* Remember the full pathname of the shared library.  */
+        shared_library_fullname = strdup (location);
+    }
+
+  return TRUE;
+}
+
+#endif
