# Maintainer: J. Peter Mugaas <jpmugaas@suddenlink.net>
# We can't use commonmark 0.9.0 because of an API breakage and that
# effects recommonmark 0.4.0.  We can't upgrade to recommonmark 0.5.0
# due to a bug in that version.  I tried.
_realname=commonmark
pkgbase=mingw-w64-python-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-python2-${_realname}"  "${MINGW_PACKAGE_PREFIX}-python3-${_realname}")
pkgver=0.8.0
pkgrel=1
pkgdesc="Python parser for the CommonMark Markdown spec (mingw-w64)"
arch=('any')
url='https://pypi.python.org/pypi/CommonMark'
license=('BSD')
makedepends=("${MINGW_PACKAGE_PREFIX}-python2"
             "${MINGW_PACKAGE_PREFIX}-python2-docutils"
             "${MINGW_PACKAGE_PREFIX}-python2-future"
             "${MINGW_PACKAGE_PREFIX}-python2-setuptools"
             "${MINGW_PACKAGE_PREFIX}-python2-sphinx"
             "${MINGW_PACKAGE_PREFIX}-python3"
             "${MINGW_PACKAGE_PREFIX}-python3-docutils"
             "${MINGW_PACKAGE_PREFIX}-python3-future"
             "${MINGW_PACKAGE_PREFIX}-python3-setuptools"
             "${MINGW_PACKAGE_PREFIX}-python3-sphinx")
checkdepends=("${MINGW_PACKAGE_PREFIX}-python2-hypothesis"
              "${MINGW_PACKAGE_PREFIX}-python3-hypothesis")
options=('staticlibs' 'strip' '!debug')
source=("${_realname}-${pkgver}.tar.gz"::"https://github.com/rtfd/CommonMark-py/archive/${pkgver}.tar.gz")
noextract=("${_realname}-${pkgver}.tar.gz")
sha256sums=('b52fe76749ad856cd52be67e35b548143e7d49d02faef288cf0abf2ee59dabec')
sha512sums=('fcb70913ec2a8693fc667e18c1600a90d6fa26d9516a9cffd2a3d7a7c2bce2167d65d2ecd0940b4d8933b833f1ed6620bc59fd7bc2ae198365043119dced9da3')

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying $_patch"
    patch -Nbp1 -i "${srcdir}/$_patch"
  done
}

del_file_exists() {
  for _fname in "$@"
  do
    if [ -f $_fname ]; then
      rm -rf $_fname
    fi
  done
}
# =========================================== #

prepare() {
  cd "${srcdir}"
  tar -xzf "${_realname}-${pkgver}.tar.gz" -C ${srcdir} 2>> /dev/nul | true
  pushd ${_realname}.py-${pkgver}
  mv "commonmark" "CommonMark"
  popd
  for builddir in python{2,3}-build-${CARCH}; do
    rm -rf ${builddir} | true
    cp -r "${_realname}.py-${pkgver}" "${builddir}"
  done
  # Set version for setuptools_scm
  export SETUPTOOLS_SCM_PRETEND_VERSION=$pkgver
}

# Note that build() is sometimes skipped because it's done in 
# the packages setup.py install for simplicity if you can do so.
# but sometimes, you want to do a check before install which would
# also trigger the build.
build() {
  for pver in {2,3}; do  
    msg "Python ${pver} build for ${CARCH}"  
    cd "${srcdir}/python${pver}-build-${CARCH}"
    ${MINGW_PREFIX}/bin/python${pver} setup.py build
#    if [ "${pver}" -eq "2" ]
#    then
#      make -C docs man text SPHINXBUILD=sphinx-build2
#    else
#      make -C docs man text SPHINXBUILD=sphinx-build
#    fi
  done  
}

#check() {
#  for pver in {2,3}; do
#    msg "Python ${pver} test for ${CARCH}"
#    (cd "${srcdir}/python${pver}-build-${CARCH}"
#      export PYTHONPATH=.
#      export PYTHONIOENCODING=UTF-8
#      ${MINGW_PREFIX}/bin/python${pver} setup.py check
#      ${MINGW_PREFIX}/bin/python${pver} CommonMark/tests/unit_tests.py
#      ${MINGW_PREFIX}/bin/python${pver} setup.py test
#    )
#  done
#}

package_python3-commonmark() {
  depends=("${MINGW_PACKAGE_PREFIX}-python3"
           "${MINGW_PACKAGE_PREFIX}-python3-docutils"
           "${MINGW_PACKAGE_PREFIX}-python3-future")
  #This package install is needed for .fixups with .EXE's 
  #in the bit directory.  The install files "python-exe-installs"
  #and should be renamed to your _realname .
  install=${_realname}3-${CARCH}.install

  cd "${srcdir}/python3-build-${CARCH}"
  MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
  ${MINGW_PREFIX}/bin/python3 setup.py install --prefix=${MINGW_PREFIX} \
    --root="${pkgdir}" --optimize=1 --skip-build

  install -Dm 644 README.rst CHANGELOG.md -t "${pkgdir}${MINGW_PREFIX}/share/doc/python3-${_realname}"
  install -Dm644 LICENSE "${pkgdir}${MINGW_PREFIX}/share/licenses/python3-${_realname}/LICENSE"
#  install -Dm 644 docs/_build/text/* -t "${pkgdir}${MINGW_PREFIX}/share/doc/python3-${_realname}"
#  install -Dm 644 docs/_build/man/commonmark-py.1 "${pkgdir}${MINGW_PREFIX}/share/man/man1/python3-${_realname}.1"

# This entire section should be removed if the package does NOT install
# anything in the /mingw*/bin directory.
### begin section ###
  local PREFIX_WIN=$(cygpath -wm ${MINGW_PREFIX})
  # fix python command in files
  for _f in "${pkgdir}${MINGW_PREFIX}"/bin/*.py; do
    sed -e "s|/usr/bin/env |${MINGW_PREFIX}|g" \
        -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" -i ${_f}
  done
#### end section ####
}

package_python2-commonmark() {
  depends=("${MINGW_PACKAGE_PREFIX}-python2"
           "${MINGW_PACKAGE_PREFIX}-python2-docutils"
           "${MINGW_PACKAGE_PREFIX}-python2-future")

  #This package install is needed for .fixups with .EXE's 
  #in the bit directory.  The install files "python-exe-installs"
  #and should be renamed to your _realname
  install=${_realname}2-${CARCH}.install

  cd "${srcdir}/python2-build-${CARCH}"
  MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
  ${MINGW_PREFIX}/bin/python2 setup.py install --prefix=${MINGW_PREFIX} \
    --root="${pkgdir}" --optimize=1 --skip-build

  install -Dm 644 README.rst CHANGELOG.md -t "${pkgdir}${MINGW_PREFIX}/share/doc/python2-${_realname}"
  install -Dm644 LICENSE "${pkgdir}${MINGW_PREFIX}/share/licenses/python2-${_realname}/LICENSE"
#  install -Dm 644 docs/_build/text/* -t "${pkgdir}${MINGW_PREFIX}/share/doc/python2-${_realname}"
#  install -Dm 644 docs/_build/man/commonmark-py.1 "${pkgdir}${MINGW_PREFIX}/share/man/man1/python2-${_realname}.1"

# This entire section should be removed if the package does NOT install
# anything in the /mingw*/bin directory. 
### begin section ###
  local PREFIX_WIN=$(cygpath -wm ${MINGW_PREFIX})
  # fix python command in files
  for _f in "${pkgdir}${MINGW_PREFIX}"/bin/*.py; do
    sed -e "s|/usr/bin/env |${MINGW_PREFIX}|g" \
        -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" -i ${_f}
  done

# for Python2 packages, you want to rename some stuff from the bin directory 
# with the 2 suffix like in the mingw-w64-python-pygments package to avoid
# conflicts when installing both the Python2 and Python3 packages
  for f in cmark; do
    mv "${pkgdir}${MINGW_PREFIX}"/bin/${f}{,2}.exe
    if [ -f "${pkgdir}${MINGW_PREFIX}"/bin/${f}.exe.manifest ]; then
      mv "${pkgdir}${MINGW_PREFIX}"/bin/${f}{,2}.exe.manifest
      sed -e "s|${f}|${f}2|g" -i "${pkgdir}${MINGW_PREFIX}"/bin/${f}2.exe.manifest
    fi
    mv "${pkgdir}${MINGW_PREFIX}"/bin/${f}{,2}-script.py
  done
#### end section ####
}

package_mingw-w64-i686-python2-commonmark() {
  package_python2-commonmark
}

package_mingw-w64-i686-python3-commonmark() {
  package_python3-commonmark
}

package_mingw-w64-x86_64-python2-commonmark() {
  package_python2-commonmark
}

package_mingw-w64-x86_64-python3-commonmark() {
  package_python3-commonmark
}
