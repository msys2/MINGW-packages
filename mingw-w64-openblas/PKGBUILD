# Maintainer: Alexey Pavlov <alexpux@gmail.com>
# Contributor: JÃ¼rgen Pfeifer <juergen@familiepfeifer.de>

_realname=OpenBLAS
pkgbase=mingw-w64-openblas
pkgname=("${MINGW_PACKAGE_PREFIX}-openblas"
         $([[ "${CARCH}" == "i686" ]] || echo "${MINGW_PACKAGE_PREFIX}-openblas64"))
pkgver=0.3.21
pkgrel=6
pkgdesc="An optimized BLAS library based on GotoBLAS2 1.13 BSD, providing optimized blas, lapack, and cblas (mingw-w64)"
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clang32' 'clangarm64')
url="https://www.openblas.net/"
license=('spdx:BSD-3-Clause')
provides=("${MINGW_PACKAGE_PREFIX}-${_realname}")
conflicts=("${MINGW_PACKAGE_PREFIX}-openblas-git")
replaces=("${MINGW_PACKAGE_PREFIX}-${_realname}"
          "${MINGW_PACKAGE_PREFIX}-${_realname}-git")
depends=("${MINGW_PACKAGE_PREFIX}-gcc-libs"
         "${MINGW_PACKAGE_PREFIX}-libwinpthread"
         $([[ ${MINGW_PACKAGE_PREFIX} == *-clang-* ]] || echo "${MINGW_PACKAGE_PREFIX}-gcc-libgfortran")
         $([[ ${MINGW_PACKAGE_PREFIX} != *-clang-*86* ]] || echo "${MINGW_PACKAGE_PREFIX}-openmp")
         )
makedepends=("${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-ninja"
             "${MINGW_PACKAGE_PREFIX}-cc"
             $([[ ${MINGW_PACKAGE_PREFIX} == *-clang-* ]] || echo "${MINGW_PACKAGE_PREFIX}-gcc-fortran")
             "dos2unix")
options=('!buildflags')
source=(https://github.com/xianyi/OpenBLAS/releases/download/v${pkgver}/${_realname}-${pkgver}.tar.gz
        001-gcc-no-tree-vectorize.patch::https://github.com/xianyi/OpenBLAS/commit/739c3c44a77d87d1b08de59bf868250683c0f755.patch
        002-lgfortran-requires-lquadmath.patch
        004-aarch64-detection.patch
        005-fix-pkgconfig-files.patch
        006-fix-pointer-mismatch-calling-pow.patch::https://github.com/xianyi/OpenBLAS/commit/515cf269291bec0d43651fe7bf99a71fb074a0ad.patch
        007-fix-missing-return-type.patch::https://github.com/xianyi/OpenBLAS/commit/91110f92d218492d0efbdc1fdf34277ca45f4b36.patch)
sha256sums=('f36ba3d7a60e7c8bcc54cd9aaa9b1223dd42eaf02c811791c37e8ca707c241ca'
            'fb27a983cdaf0e46442bc8b39d4afab4fb6bd61526331841a233a1e588d80e0f'
            'fecd847d029f5fa0d48c685e48e1d5efd413ead14452349fe78a66717fbce3e7'
            '70ce007ff4f6c2a127f9835ce9cd85081707cf3bcccddcfaa06817b06f69c941'
            '692131a2784ba8a1855e578fde4799d7bf990b43a620383ded12ed80d47c4a81'
            '5f00674fb2ea6208e4712bddcf995232a9eb59a3b76ade7ecfc7579d54779794'
            '365e537e31098fb17adc4c89177b03299b12fa88e6ed40fb9c8e6ff83eeee736')

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying $_patch"
    patch -Np1 -i "${srcdir}/$_patch"
  done
}

prepare() {
  cd "${srcdir}"/${_realname}-${pkgver}

  apply_patch_with_msg \
    001-gcc-no-tree-vectorize.patch \
    002-lgfortran-requires-lquadmath.patch \
    004-aarch64-detection.patch \
    005-fix-pkgconfig-files.patch \
    006-fix-pointer-mismatch-calling-pow.patch \
    007-fix-missing-return-type.patch
}

_build_openblas() {
  _idx_opt=$1

  declare _build_type
  if check_option "debug" "n"; then
    _build_type="Release"
  else
    _build_type="Debug"
  fi

  declare _c_lapack_opt
  if [[ ${MINGW_PACKAGE_PREFIX} == *-clang-* ]]; then
    _c_lapack_opt="-DC_LAPACK=ON"
  fi

  declare target=CORE2
  declare dynamic_arch="-DDYNAMIC_ARCH=ON"
  if [[ ${MINGW_PACKAGE_PREFIX} == *-aarch64 ]]; then
    target=CORTEXA53
    # clang wasn't able to compile all the kernels inside the arm64 folder,
    # so disable for now
    dynamic_arch="-DDYNAMIC_ARCH=OFF"
  fi

  unset CFLAGS
  unset CXXFLAGS

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  ${MINGW_PREFIX}/bin/cmake \
    -G"Ninja" \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    -DCMAKE_BUILD_TYPE=${_build_type} \
    -DBUILD_SHARED_LIBS=ON \
    -DBUILD_STATIC_LIBS=ON \
    ${dynamic_arch} \
    -DUSE_THREAD=ON \
    -DNUM_THREADS=64 \
    $([[ ${MSYSTEM_CARCH} == aarch64 ]] || echo "-DUSE_OPENMP=ON") \
    -DTARGET=${target} \
    ${_c_lapack_opt} \
    ${_idx_opt} \
    ../${_realname}-${pkgver}

  ${MINGW_PREFIX}/bin/cmake --build .
}

build() {
  [[ -d "${srcdir}/build-${MSYSTEM}-32" ]] && rm -rf "${srcdir}/build-${MSYSTEM}-32"
  mkdir -p "${srcdir}/build-${MSYSTEM}-32" && cd "${srcdir}/build-${MSYSTEM}-32"

  msg2 "Build OpenBLAS with 32-bit indexing"
  _build_openblas ""

  if [ "${CARCH}" != "i686" ]; then
    [[ -d "${srcdir}/build-${MSYSTEM}-64" ]] && rm -rf "${srcdir}/build-${MSYSTEM}-64"
    mkdir -p "${srcdir}/build-${MSYSTEM}-64" && cd "${srcdir}/build-${MSYSTEM}-64"

    msg2 "Build OpenBLAS with 64-bit indexing"
    _build_openblas "-DBINARY=64 -DINTERFACE64=1"
  fi
}

check() {
  cd "${srcdir}"/build-${MSYSTEM}-32
  ctest

  if [ "${CARCH}" != "i686" ]; then
    cd "${srcdir}/build-${MSYSTEM}-64"
    ctest
  fi
}

package_openblas() {
  pkgdesc="An optimized BLAS library based on GotoBLAS2 1.13 BSD, providing optimized blas, lapack, and cblas (mingw-w64)"

  cd "${srcdir}"/build-${MSYSTEM}-32

  DESTDIR=${pkgdir} ${MINGW_PREFIX}/bin/cmake --install .

  # Install License
  install -Dm0644 ${srcdir}/${_realname}-${pkgver}/LICENSE ${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}/LICENSE
  install -Dm0644 ${srcdir}/${_realname}-${pkgver}/lapack-netlib/LICENSE ${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}/LICENSE-lapack
}

package_openblas64() {
  pkgdesc="An optimized BLAS library based on GotoBLAS2 1.13 BSD, providing optimized blas, lapack, and cblas with 64-bit indexing (mingw-w64)"
  provides=()
  conflicts=()
  replaces=()

  cd "${srcdir}"/build-${MSYSTEM}-64

  DESTDIR=${pkgdir} ${MINGW_PREFIX}/bin/cmake --install .

  # Install License
  install -Dm0644 ${srcdir}/${_realname}-${pkgver}/LICENSE ${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}64/LICENSE
  install -Dm0644 ${srcdir}/${_realname}-${pkgver}/lapack-netlib/LICENSE ${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}64/LICENSE-lapack
}

# template start; name=mingw-w64-splitpkg-wrappers; version=1.0;
# vim: set ft=bash :

# generate wrappers
for _name in "${pkgname[@]}"; do
  _short="package_${_name#${MINGW_PACKAGE_PREFIX}-}"
  _func="$(declare -f "${_short}")"
  eval "${_func/#${_short}/package_${_name}}"
done
# template end;
