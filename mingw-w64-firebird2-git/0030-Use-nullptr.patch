From 2adb6fa680b81e7f95429a6041f399d91d2c160a Mon Sep 17 00:00:00 2001
From: Tim S <stahta01@users.sourceforge.net>
Date: Wed, 16 Aug 2017 22:38:24 -0400
Subject: [PATCH] Use nullptr instead of zero.

---
 src/include/fb_blk.h | 12 +++++-------
 1 file changed, 5 insertions(+), 7 deletions(-)

diff --git a/src/include/fb_blk.h b/src/include/fb_blk.h
index 4929c525c4..b2b8a1b6cc 100644
--- a/src/include/fb_blk.h
+++ b/src/include/fb_blk.h
@@ -112,8 +112,6 @@ enum BlockType
 	rem_type_rsr
 };
 
-static void * zero = (void *) 0;
-
 template<BlockType BLOCK_TYPE>
 class TypedHandle
 {
@@ -171,8 +169,8 @@ public:
 
 private:
     // These operators are off-limits
-	void* operator new(size_t s) { return zero; }
-    void* operator new[](size_t s) { return zero; }
+	void* operator new(size_t s) { return nullptr; }
+    void* operator new[](size_t s) { return nullptr; }
 };
 
 template<typename RPT, BlockType BLOCK_TYPE = type_unknown>
@@ -195,15 +193,15 @@ public:
 private:
     // These operations are not supported on static repeat-base objects
     void* operator new[](size_t s, MemoryPool& p)
-        { return zero; }
+        { return nullptr; }
     void operator delete[](void* mem, MemoryPool& p)
         { }
     void operator delete[](void* mem)
 		{ }
 
     // These operators are off-limits
-	void* operator new(size_t s) { return zero; }
-    void* operator new[](size_t s) { return zero; }
+	void* operator new(size_t s) { return nullptr; }
+    void* operator new[](size_t s) { return nullptr; }
 };
 
 #endif	// INCLUDE_FB_BLK
