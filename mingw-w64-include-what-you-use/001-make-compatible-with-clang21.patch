diff --git a/iwyu_ast_util.cc b/iwyu_ast_util.cc
index 968effd..a805907 100644
--- a/iwyu_ast_util.cc
+++ b/iwyu_ast_util.cc
@@ -386,39 +386,6 @@ bool IsAutocastExpr(const ASTNode* ast_node) {
   return ast_node->template HasAncestorOfType<CallExpr>();
 }
 
-template<typename T>
-NestedNameSpecifier* TryGetQualifier(const ASTNode* ast_node) {
-  if (ast_node->IsA<T>())
-    return ast_node->GetAs<T>()->getQualifier();
-  return nullptr;
-}
-
-const NestedNameSpecifier* GetQualifier(const ASTNode* ast_node) {
-  const NestedNameSpecifier* nns = nullptr;
-  if (ast_node->IsA<TemplateName>()) {
-    const TemplateName* tn = ast_node->GetAs<TemplateName>();
-    if (const DependentTemplateName* dtn = tn->getAsDependentTemplateName())
-      nns = dtn->getQualifier();
-    else if (const QualifiedTemplateName* qtn =
-                 tn->getAsQualifiedTemplateName())
-      nns = qtn->getQualifier();
-  }
-  if (!nns) nns = TryGetQualifier<ElaboratedType>(ast_node);
-  if (!nns) nns = TryGetQualifier<DependentNameType>(ast_node);
-  if (!nns)
-    nns = TryGetQualifier<DependentTemplateSpecializationType>(ast_node);
-  if (!nns) nns = TryGetQualifier<UsingDirectiveDecl>(ast_node);
-  if (!nns) nns = TryGetQualifier<EnumDecl>(ast_node);
-  if (!nns) nns = TryGetQualifier<RecordDecl>(ast_node);
-  if (!nns) nns = TryGetQualifier<DeclaratorDecl>(ast_node);
-  if (!nns) nns = TryGetQualifier<FunctionDecl>(ast_node);
-  if (!nns) nns = TryGetQualifier<CXXDependentScopeMemberExpr>(ast_node);
-  if (!nns) nns = TryGetQualifier<DeclRefExpr>(ast_node);
-  if (!nns) nns = TryGetQualifier<DependentScopeDeclRefExpr>(ast_node);
-  if (!nns) nns = TryGetQualifier<MemberExpr>(ast_node);
-  return nns;
-}
-
 const DeclContext* GetDeclContext(const ASTNode* ast_node) {
   for (; ast_node != nullptr; ast_node = ast_node->parent()) {
     if (ast_node->IsA<Decl>())
diff --git a/iwyu_driver.cc b/iwyu_driver.cc
index ac53cb6..cc50d0e 100644
--- a/iwyu_driver.cc
+++ b/iwyu_driver.cc
@@ -330,8 +330,9 @@ bool ExecuteAction(int argc,
   args.insert(extra_pos, extra_args.begin(), extra_args.end());
 
   IntrusiveRefCntPtr<FileSystem> fs = llvm::vfs::getRealFileSystem();
+  DiagnosticOptions diag_opts;
   IntrusiveRefCntPtr<DiagnosticsEngine> diagnostics =
-      CompilerInstance::createDiagnostics(*fs, new DiagnosticOptions);
+      CompilerInstance::createDiagnostics(*fs, diag_opts);
 
   // The Driver constructor sets the resource dir implicitly based on path,
   // which may then be overwritten by BuildCompilation based on any
@@ -388,8 +389,8 @@ bool ExecuteAction(int argc,
   // FIXME: This is copied from cc1_main.cpp; simplify and eliminate.
 
   // Create a compiler instance to handle the actual work.
-  unique_ptr<CompilerInstance> compiler(new CompilerInstance);
-  compiler->setInvocation(invocation);
+  unique_ptr<CompilerInstance> compiler(
+      new CompilerInstance(std::move(invocation)));
   // It's tempting to reuse the DiagnosticsEngine we created above, but we need
   // to create a new one to get the options produced by the compiler invocation.
   compiler->createDiagnostics(*fs);
