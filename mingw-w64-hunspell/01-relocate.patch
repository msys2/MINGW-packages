diff --git a/src/tools/Makefile.am b/src/tools/Makefile.am
index 4c29f1a..cc25476 100644
--- a/src/tools/Makefile.am
+++ b/src/tools/Makefile.am
@@ -12,7 +12,10 @@ unmunch_SOURCES=unmunch.cxx unmunch.h
 example_SOURCES=example.cxx
 example_LDADD = ../hunspell/libhunspell-1.7.la
 
-hunspell_SOURCES=hunspell.cxx
+hunspell_CXXFLAGS = \
+  -DBINDIR=\""$(bindir)"\" \
+  -DDATA_DIR=\""$(datadir)"\"
+hunspell_SOURCES=hunspell.cxx pathtools.cxx pathtools.h
 nodist_hunspell_SOURCES= ../../config.h
 hunspell_LDADD = @LIBINTL@ @LIBICONV@ ../parsers/libparsers.a \
 	../hunspell/libhunspell-1.7.la @CURSESLIB@ @READLINELIB@
diff --git a/src/tools/hunspell.cxx b/src/tools/hunspell.cxx
index 399df86..0599794 100644
--- a/src/tools/hunspell.cxx
+++ b/src/tools/hunspell.cxx
@@ -51,6 +51,7 @@
 #include "../hunspell/hunspell.hxx"
 #include "../hunspell/csutil.hxx"
 #include "../hunspell/hunzip.hxx"
+#include "pathtools.h"
 
 #define HUNSPELL_VERSION VERSION
 #define INPUTLEN 50
@@ -70,6 +71,16 @@
 
 #ifdef WIN32
 
+#ifdef __MINGW32__
+#define LIBDIR \
+    DATA_DIR "/hunspell:" \
+    DATA_DIR "/myspell:" \
+    DATA_DIR "/myspell/dicts:"
+#define OOODIR \
+    DATA_DIR "/dict/ooo"
+#define USEROOODIR {"/Application Data/OpenOffice.org 2/user/wordbook"}
+#define HOME "%USERPROFILE%"
+#else
 #define LIBDIR "C:\\Hunspell\\"
 #define USEROOODIR { "Application Data\\OpenOffice.org 2\\user\\wordbook" }
 #define OOODIR                                                 \
@@ -79,10 +90,16 @@
   "C:\\Program files\\OpenOffice.org 2.1\\share\\dict\\ooo\\;" \
   "C:\\Program files\\OpenOffice.org 2.0\\share\\dict\\ooo\\"
 #define HOME "%USERPROFILE%\\"
+#endif
 #define DICBASENAME "hunspell_"
 #define LOGFILE "C:\\Hunspell\\log"
+#ifdef __MINGW32__
+#define DIRSEPCH '/'
+#define DIRSEP "/"
+#else
 #define DIRSEPCH '\\'
 #define DIRSEP "\\"
+#endif
 #define PATHSEP ";"
 
 #ifdef __MINGW32__
@@ -2042,11 +2064,20 @@ int main(int argc, char** argv) {
   {
     std::string path_std_str = ".";
     path_std_str.append(PATHSEP); // <- check path in local directory
+#ifndef __MINGW32__
     path_std_str.append(PATHSEP); // <- check path in root directory
+#else
+    path_std_str.append(single_path_relocation(BINDIR, BINDIR)).append(PATHSEP);
+#endif    
     if (getenv("DICPATH")) {
       path_std_str.append(getenv("DICPATH")).append(PATHSEP);
     }
+#ifndef __MINGW32__
     path_std_str.append(LIBDIR).append(PATHSEP);
+#else
+  path_std_str.append(pathlist_relocation(BINDIR, LIBDIR)).append(PATHSEP);
+#endif
+
     if (HOME) {
       const char * userooodir[] = USEROOODIR;
       for(size_t i = 0; i < sizeof(userooodir)/sizeof(userooodir[0]); ++i) {
@@ -2056,7 +2087,11 @@ int main(int argc, char** argv) {
 #endif
         path_std_str.append(userooodir[i]).append(PATHSEP);
       }
+#ifndef __MINGW32__
       path_std_str.append(OOODIR);
+#else
+      path_std_str.append(single_path_relocation(BINDIR, OOODIR)).append(PATHSEP);
+#endif 
     }
     path = mystrdup(path_std_str.c_str());
   }
@@ -2152,6 +2187,7 @@ int main(int argc, char** argv) {
   }
 
   if (arg_files == -1) {
+    fflush(stderr);
     pipe_interface(pMS, format, stdin, NULL);
   } else if (filter_mode != NORMAL) {
     for (int i = arg_files; i < argc; i++) {
