# Maintainer: Diego Sogari <diego.sogari@gmail.com>

_realname=gflags
pkgbase=mingw-w64-${_realname}
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
pkgver=2.2.2
pkgrel=6
pkgdesc="Google's Commandline flags module for C++ (mingw-w64)"
arch=('any')
mingw_arch=('mingw64' 'ucrt64' 'clang64' 'clangarm64')
url="https://gflags.github.io/gflags/"
msys2_repository_url="https://github.com/gflags/gflags"
license=('spdx:BSD-3-Clause')
depends=("${MINGW_PACKAGE_PREFIX}-gcc-libs")
makedepends=("${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-ninja")
checkdepends=("${MINGW_PACKAGE_PREFIX}-gtest")
source=("https://github.com/gflags/gflags/archive/v${pkgver}/${_realname}-${pkgver}.tar.gz"
        0001-fix-link-library.patch
        0002-fix-static-libs.patch
        "${_realname}-2.2.2.patch"
        CMakeLists.txt
        gflagsConfig.cmake
        0003-tests-link.patch)
sha256sums=('34af2f15cf7367513b352bdcd2493ab14ce43692d2dcd9dfc499492966c64dcf'
            '1bb0d61f8273ec487012636ca404686cb7589cefb9c57477f2a1e380746d92f7'
            '07dec6f4d117c226c1521de623e17180e9dee1b54e81a242fb8a974cf58726a7'
            '97fadc6add5c5dfab13046930e3470f16abd22f9cf6d33b87c6e8b4616e0d206'
            'eaecfe4e7944270b0352a3ff9c1fcebdae6dac9fd30344d00c2b404b085a1457'
            'd1179c3f5629218b7a532196459e1ea6d190e69bda8e5c22670db8bc3cd388b5'
            'de2dd6d257a3c582833d4d85d4347ebe425dc71c14b29de7eff7b5f85a905d9a')

prepare() {
  cd "${srcdir}/${_realname}-${pkgver}"
  patch -Np1 -i "${srcdir}/0001-fix-link-library.patch"
  patch -Np1 -i "${srcdir}/0002-fix-static-libs.patch"

  # https://github.com/gflags/gflags/pull/334
  patch -Np1 -i "${srcdir}/${_realname}-2.2.2.patch"

  cp -f ${srcdir}/CMakeLists.txt .
  cp -f ${srcdir}/gflagsConfig.cmake .
  patch -Np1 -i "${srcdir}/0003-tests-link.patch"
}

build() {
  if check_option "debug" "n"; then
    extra_config+=("-DCMAKE_BUILD_TYPE=Release")
  else
    extra_config+=("-DCMAKE_BUILD_TYPE=Debug")
  fi

  mkdir -p "${srcdir}/shared-${MSYSTEM}" && cd "${srcdir}/shared-${MSYSTEM}"

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  ${MINGW_PREFIX}/bin/cmake.exe \
    -G"Ninja" \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    ${extra_config} \
    -DBUILD_SHARED_LIBS=ON \
    -DBUILD_WITH_THREADS=ON \
    -DBUILD_TESTING=ON \
    "../${_realname}-${pkgver}"

  cmake --build .
  
    mkdir -p "${srcdir}/static-${MSYSTEM}" && cd "${srcdir}/static-${MSYSTEM}"

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  ${MINGW_PREFIX}/bin/cmake.exe \
    -G"Ninja" \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    ${extra_config} \
    -DBUILD_SHARED_LIBS=OFF \
    -DBUILD_WITH_THREADS=ON \
    -DBUILD_TESTING=ON \
    "../${_realname}-${pkgver}"

  cmake --build .
}

check() {
  cd "${srcdir}/build-${MSYSTEM}"
  ${MINGW_PREFIX}/bin/cmake ../${_realname}-${pkgver} -DBUILD_TESTING=ON
  ${MINGW_PREFIX}/bin/cmake --build .
  ctest || true
}

package() {
  cd "${srcdir}/shared-${MSYSTEM}"
  DESTDIR="${pkgdir}" cmake --install .
  
  cd "${srcdir}/static-${MSYSTEM}"
  DESTDIR="${pkgdir}" cmake --install .

  INSTALL -Dm644 "${srcdir}"/${_realname}-${pkgver}/COPYING.txt "${pkgdir}"${MINGW_PREFIX}/share/licenses/${_realname}/COPYING.txt
}
