--- a/vendor/adb/file_sync_protocol.h
+++ b/vendor/adb/file_sync_protocol.h
@@ -16,6 +16,8 @@
 
 #pragma once
 
+#include <stdint.h>
+
 #define MKID(a, b, c, d) ((a) | ((b) << 8) | ((c) << 16) | ((d) << 24))
 
 #define ID_LSTAT_V1 MKID('S', 'T', 'A', 'T')
--- a/vendor/adb/sysdeps/uio.h
+++ b/vendor/adb/sysdeps/uio.h
@@ -24,7 +24,7 @@
 
 // Layout of this struct must match struct WSABUF (verified via static assert in sysdeps_win32.cpp)
 struct adb_iovec {
-    size_t iov_len;
+    int iov_len;
     void* iov_base;
 };
 
--- a/vendor/boringssl/include/openssl/base.h
+++ b/vendor/boringssl/include/openssl/base.h
@@ -138,8 +138,13 @@
 #endif
 #endif
 
+// Unfortunate workaround to avoid symbol conflict with wincrypt.h
+// See https://github.com/openssl/openssl/issues/9981
 #if defined(_WIN32)
 #define OPENSSL_WINDOWS
+#undef PKCS7_SIGNER_INFO
+#undef X509_EXTENSIONS
+#undef X509_NAME
 #endif
 
 // Trusty isn't Linux but currently defines __linux__. As a workaround, we
--- a/vendor/boringssl/crypto/CMakeLists.txt
+++ b/vendor/boringssl/crypto/CMakeLists.txt
@@ -466,6 +466,9 @@
 
 SET_TARGET_PROPERTIES(crypto PROPERTIES LINKER_LANGUAGE C)
 
+if(WIN32)
+  target_link_libraries(crypto ws2_32)
+endif()
 if(NOT WIN32 AND NOT ANDROID)
   target_link_libraries(crypto pthread)
 endif()
