diff --git a/src/fpm_filesystem.F90 b/src/fpm_filesystem.F90
index a0066708d..0e7e221b7 100644
--- a/src/fpm_filesystem.F90
+++ b/src/fpm_filesystem.F90
@@ -7,7 +7,7 @@ module fpm_filesystem
                                OS_UNKNOWN, OS_LINUX, OS_MACOS, OS_WINDOWS, &
                                OS_CYGWIN, OS_SOLARIS, OS_FREEBSD, OS_OPENBSD
     use fpm_environment, only: separator, get_env, os_is_unix
-    use fpm_strings, only: f_string, replace, string_t, split, split_first_last, dilate, str_begins_with_str
+    use fpm_strings, only: f_string, replace, string_t, split, split_lines_first_last, dilate, str_begins_with_str
     use iso_c_binding, only: c_char, c_ptr, c_int, c_null_char, c_associated, c_f_pointer
     use fpm_error, only : fpm_stop, error_t, fatal_error
     implicit none
@@ -51,8 +51,6 @@ module fpm_filesystem
     end interface
 #endif
 
-    character(*), parameter :: eol = new_line('a')    !! End of line
-
 contains
 
 !> Extract filename from path with/without suffix
@@ -319,7 +317,7 @@ function read_lines_expanded(filename) result(lines)
         return
     end if
 
-    call split_first_last(content, eol, first, last)  ! TODO: \r (< macOS X), \n (>=macOS X/Linux/Unix), \r\n (Windows)
+    call split_lines_first_last(content, first, last)  
 
     ! allocate lines from file content string
     allocate (lines(size(first)))
@@ -344,7 +342,7 @@ function read_lines(filename) result(lines)
         return
     end if
 
-    call split_first_last(content, eol, first, last)  ! TODO: \r (< macOS X), \n (>=macOS X/Linux/Unix), \r\n (Windows)
+    call split_lines_first_last(content, first, last) 
 
     ! allocate lines from file content string
     allocate (lines(size(first)))
diff --git a/src/fpm_strings.f90 b/src/fpm_strings.f90
index bf43a4b53..b03927199 100644
--- a/src/fpm_strings.f90
+++ b/src/fpm_strings.f90
@@ -42,7 +42,7 @@ use iso_c_binding, only: c_char, c_ptr, c_int, c_null_char, c_associated, c_f_po
 implicit none
 
 private
-public :: f_string, lower, upper, split, split_first_last, str_ends_with, string_t, str_begins_with_str
+public :: f_string, lower, upper, split, split_first_last, split_lines_first_last, str_ends_with, string_t, str_begins_with_str
 public :: to_fortran_name, is_fortran_name
 public :: string_array_contains, string_cat, len_trim, operator(.in.), fnv_1a
 public :: replace, resize, str, join, glob
@@ -551,6 +551,51 @@ pure subroutine split_first_last(string, set, first, last)
 
 end subroutine split_first_last
 
+!! Author: Federico Perini
+!! Computes the first and last indices of lines in input string, delimited
+!! by either CR, LF, or CRLF, and stores them into first and last output
+!! arrays.
+pure subroutine split_lines_first_last(string, first, last)
+    character(*), intent(in) :: string
+    integer, allocatable, intent(out) :: first(:)
+    integer, allocatable, intent(out) :: last(:)
+
+    integer, dimension(len(string) + 1) :: istart, iend
+    integer :: p, n, slen
+    character, parameter :: CR = achar(13)
+    character, parameter :: LF = new_line('A')
+
+    slen = len(string)
+
+    n = 0
+    if (slen > 0) then
+        p = 1
+        do while (p <= slen)
+            
+            if (index(CR//LF, string(p:p)) == 0) then
+                n = n + 1
+                istart(n) = p
+                do while (p <= slen)
+                    if (index(CR//LF, string(p:p)) /= 0) exit
+                    p = p + 1
+                end do
+                iend(n) = p - 1
+            end if
+            
+            ! Handle Windows CRLF by skipping LF after CR
+            if (p < slen) then 
+               if (string(p:p) == CR .and. string(p+1:p+1) == LF) p = p + 1
+            endif
+            
+            p = p + 1
+        end do
+    end if
+
+    first = istart(:n)
+    last = iend(:n)
+
+end subroutine split_lines_first_last
+
 !! Author: Milan Curcic
 !! If back is absent, computes the leftmost token delimiter in string whose
 !! position is > pos. If back is present and true, computes the rightmost
