diff -ur a/src/3rdparty/chromium/services/device/compute_pressure/BUILD.gn b/src/3rdparty/chromium/services/device/compute_pressure/BUILD.gn
--- a/src/3rdparty/chromium/services/device/compute_pressure/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/services/device/compute_pressure/BUILD.gn	2023-12-14 20:15:54.818763000 +0800
@@ -8,8 +8,10 @@
   # This is in a separate config so the flags can be applied to dependents.
   # ldflags in GN aren't automatically inherited.
   config("compute_pressure_win_linker_flags") {
-    libs = [ "pdh.lib" ]
-    ldflags = [ "/DELAYLOAD:pdh.dll" ]
+    libs = [ "pdh" ]
+    if (!is_mingw) {
+      ldflags = [ "/DELAYLOAD:pdh.dll" ]
+    }
   }
 }
 
diff -ur a/src/3rdparty/chromium/services/device/generic_sensor/BUILD.gn b/src/3rdparty/chromium/services/device/generic_sensor/BUILD.gn
--- a/src/3rdparty/chromium/services/device/generic_sensor/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/services/device/generic_sensor/BUILD.gn	2023-12-14 20:15:54.881312900 +0800
@@ -146,10 +146,18 @@
       "platform_sensor_win.cc",
       "platform_sensor_win.h",
     ]
+    if (is_mingw) {
+      sources -= [
+        "platform_sensor_provider_winrt.cc",
+        "platform_sensor_provider_winrt.h",
+        "platform_sensor_reader_winrt.cc",
+        "platform_sensor_reader_winrt.h",
+      ]
+    }
 
     libs = [
-      "portabledeviceguids.lib",
-      "sensorsapi.lib",
+      "portabledeviceguids",
+      "sensorsapi",
     ]
   }
 }
diff -ur a/src/3rdparty/chromium/services/device/generic_sensor/platform_sensor_reader_win.cc b/src/3rdparty/chromium/services/device/generic_sensor/platform_sensor_reader_win.cc
--- a/src/3rdparty/chromium/services/device/generic_sensor/platform_sensor_reader_win.cc	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/services/device/generic_sensor/platform_sensor_reader_win.cc	2023-12-14 20:15:54.928101400 +0800
@@ -7,7 +7,9 @@
 #include <Sensors.h>
 #include <comdef.h>
 #include <objbase.h>
+#if defined(COMPILER_MSVC)
 #include <wrl/implements.h>
+#endif
 
 #include <iomanip>
 
@@ -249,6 +251,7 @@
 
 }  // namespace
 
+#if defined(COMPILER_MSVC)
 // Class that implements ISensorEvents used by the ISensor interface to dispatch
 // state and data change events.
 class EventListener
@@ -352,6 +355,7 @@
   const raw_ptr<PlatformSensorReaderWin32> platform_sensor_reader_;
   SensorReading last_sensor_reading_;
 };
+#endif
 
 // static
 std::unique_ptr<PlatformSensorReaderWinBase> PlatformSensorReaderWin32::Create(
@@ -402,6 +406,7 @@
   return sensor;
 }
 
+#if defined(COMPILER_MSVC)
 PlatformSensorReaderWin32::PlatformSensorReaderWin32(
     Microsoft::WRL::ComPtr<ISensor> sensor,
     std::unique_ptr<ReaderInitParams> params)
@@ -415,6 +420,7 @@
   DCHECK(init_params_->reader_func);
   DCHECK(sensor_);
 }
+#endif
 
 void PlatformSensorReaderWin32::SetClient(Client* client) {
   base::AutoLock autolock(lock_);
diff -ur a/src/3rdparty/chromium/services/device/geolocation/BUILD.gn b/src/3rdparty/chromium/services/device/geolocation/BUILD.gn
--- a/src/3rdparty/chromium/services/device/geolocation/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/services/device/geolocation/BUILD.gn	2023-12-14 20:15:54.959369500 +0800
@@ -90,7 +90,7 @@
     ]
   }
 
-  if (is_win) {
+  if (is_win && !is_mingw) {
     sources += [
       "win/location_provider_winrt.cc",
       "win/location_provider_winrt.h",
diff -ur a/src/3rdparty/chromium/services/device/hid/BUILD.gn b/src/3rdparty/chromium/services/device/hid/BUILD.gn
--- a/src/3rdparty/chromium/services/device/hid/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/services/device/hid/BUILD.gn	2023-12-14 20:15:55.006243100 +0800
@@ -61,8 +61,8 @@
       "hid_service_win.h",
     ]
     libs = [
-      "hid.lib",
-      "setupapi.lib",
+      "hid",
+      "setupapi",
     ]
   }
 
diff -ur a/src/3rdparty/chromium/services/device/hid/hid_service_win.cc b/src/3rdparty/chromium/services/device/hid/hid_service_win.cc
--- a/src/3rdparty/chromium/services/device/hid/hid_service_win.cc	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/services/device/hid/hid_service_win.cc	2023-12-14 20:15:55.021894600 +0800
@@ -10,7 +10,9 @@
 #include <devpkey.h>
 #include <setupapi.h>
 #include <stddef.h>
+#if defined(COMPILER_MSVC)
 #include <wdmguid.h>
+#endif
 #include <winioctl.h>
 
 #include <algorithm>
@@ -78,7 +80,7 @@
     const DEVPROPKEY& property_key) {
   DEVPROPTYPE property_type;
   DWORD required_size;
-  if (SetupDiGetDeviceProperty(device_info_set, &device_info_data,
+  if (SetupDiGetDevicePropertyW(device_info_set, &device_info_data,
                                &property_key, &property_type,
                                /*PropertyBuffer=*/nullptr,
                                /*PropertyBufferSize=*/0, &required_size,
@@ -100,7 +102,7 @@
     return absl::nullopt;
 
   std::wstring property_buffer;
-  if (!SetupDiGetDeviceProperty(
+  if (!SetupDiGetDevicePropertyW(
           device_info_set, &device_info_data, &property_key, &property_type,
           reinterpret_cast<PBYTE>(
               base::WriteInto(&property_buffer, required_size)),
@@ -122,7 +124,7 @@
     const DEVPROPKEY& property_key) {
   DEVPROPTYPE property_type;
   GUID property_buffer;
-  if (!SetupDiGetDeviceProperty(
+  if (!SetupDiGetDevicePropertyW(
           device_info_set, &device_info_data, &property_key, &property_type,
           reinterpret_cast<PBYTE>(&property_buffer), sizeof(property_buffer),
           /*RequiredSize=*/nullptr, /*Flags=*/0)) {
diff -ur a/src/3rdparty/chromium/services/device/serial/BUILD.gn b/src/3rdparty/chromium/services/device/serial/BUILD.gn
--- a/src/3rdparty/chromium/services/device/serial/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/services/device/serial/BUILD.gn	2023-12-14 20:15:55.131265300 +0800
@@ -9,8 +9,10 @@
   config("platform_support") {
     visibility = [ ":serial" ]
     if (is_win) {
-      libs = [ "setupapi.lib" ]
-      ldflags = [ "/DELAYLOAD:setupapi.dll" ]
+      libs = [ "setupapi" ]
+      if (!is_mingw) {
+        ldflags = [ "/DELAYLOAD:setupapi.dll" ]
+      }
     }
   }
 
diff -ur a/src/3rdparty/chromium/services/device/serial/serial_device_enumerator_win.cc b/src/3rdparty/chromium/services/device/serial/serial_device_enumerator_win.cc
--- a/src/3rdparty/chromium/services/device/serial/serial_device_enumerator_win.cc	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/services/device/serial/serial_device_enumerator_win.cc	2023-12-14 20:15:55.162520100 +0800
@@ -9,6 +9,7 @@
 #define INITGUID
 #include <devguid.h>
 #include <devpkey.h>
+#include <ntdef.h>
 #include <ntddser.h>
 #include <setupapi.h>
 #include <stdint.h>
@@ -50,7 +51,7 @@
 
   DEVPROPTYPE property_type;
   DWORD required_size;
-  if (SetupDiGetDeviceProperty(dev_info, dev_info_data, &property,
+  if (SetupDiGetDevicePropertyW(dev_info, dev_info_data, &property,
                                &property_type, /*PropertyBuffer=*/nullptr,
                                /*PropertyBufferSize=*/0, &required_size,
                                /*Flags=*/0) ||
@@ -60,7 +61,7 @@
   }
 
   std::wstring buffer;
-  if (!SetupDiGetDeviceProperty(
+  if (!SetupDiGetDevicePropertyW(
           dev_info, dev_info_data, &property, &property_type,
           reinterpret_cast<PBYTE>(base::WriteInto(&buffer, required_size)),
           required_size, /*RequiredSize=*/nullptr, /*Flags=*/0)) {
diff -ur a/src/3rdparty/chromium/services/device/usb/BUILD.gn b/src/3rdparty/chromium/services/device/usb/BUILD.gn
--- a/src/3rdparty/chromium/services/device/usb/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/services/device/usb/BUILD.gn	2023-12-14 20:15:55.224974300 +0800
@@ -14,13 +14,15 @@
 
 if (is_win) {
   config("usb_linker_flags") {
-    ldflags = [
-      "/DELAYLOAD:advapi32.dll",
-      "/DELAYLOAD:cfgmgr32.dll",
-      "/DELAYLOAD:ole32.dll",
-      "/DELAYLOAD:setupapi.dll",
-      "/DELAYLOAD:winusb.dll",
-    ]
+    if (!is_mingw) {
+      ldflags = [
+        "/DELAYLOAD:advapi32.dll",
+        "/DELAYLOAD:cfgmgr32.dll",
+        "/DELAYLOAD:ole32.dll",
+        "/DELAYLOAD:setupapi.dll",
+        "/DELAYLOAD:winusb.dll",
+      ]
+    }
   }
 }
 
@@ -92,10 +94,10 @@
     ]
 
     libs = [
-      "advapi32.lib",
-      "ole32.lib",
-      "setupapi.lib",
-      "winusb.lib",
+      "advapi32",
+      "ole32",
+      "setupapi",
+      "winusb",
     ]
 
     all_dependent_configs = [ ":usb_linker_flags" ]
diff -ur a/src/3rdparty/chromium/services/device/usb/usb_service_win.cc b/src/3rdparty/chromium/services/device/usb/usb_service_win.cc
--- a/src/3rdparty/chromium/services/device/usb/usb_service_win.cc	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/services/device/usb/usb_service_win.cc	2023-12-14 20:15:55.240603600 +0800
@@ -66,7 +66,7 @@
 
   DEVPROPTYPE property_type;
   uint32_t buffer;
-  if (!SetupDiGetDeviceProperty(
+  if (!SetupDiGetDevicePropertyW(
           dev_info, dev_info_data, &property, &property_type,
           reinterpret_cast<PBYTE>(&buffer), sizeof(buffer), nullptr, 0)) {
     USB_PLOG(ERROR) << "SetupDiGetDeviceProperty(" << property << ") failed";
@@ -93,7 +93,7 @@
 
   DEVPROPTYPE property_type;
   DWORD required_size;
-  if (SetupDiGetDeviceProperty(dev_info, dev_info_data, &property,
+  if (SetupDiGetDevicePropertyW(dev_info, dev_info_data, &property,
                                &property_type, nullptr, 0, &required_size, 0)) {
     USB_LOG(ERROR) << "SetupDiGetDeviceProperty(" << property
                    << ") unexpectedly succeeded";
@@ -113,7 +113,7 @@
   }
 
   std::wstring buffer;
-  if (!SetupDiGetDeviceProperty(
+  if (!SetupDiGetDevicePropertyW(
           dev_info, dev_info_data, &property, &property_type,
           reinterpret_cast<PBYTE>(base::WriteInto(&buffer, required_size)),
           required_size, nullptr, 0)) {
@@ -134,7 +134,7 @@
 
   DEVPROPTYPE property_type;
   DWORD required_size;
-  if (SetupDiGetDeviceProperty(dev_info, dev_info_data, &property,
+  if (SetupDiGetDevicePropertyW(dev_info, dev_info_data, &property,
                                &property_type, nullptr, 0, &required_size, 0)) {
     USB_LOG(ERROR) << "SetupDiGetDeviceProperty(" << property
                    << ") unexpectedly succeeded";
@@ -159,7 +159,7 @@
   }
 
   std::wstring buffer;
-  if (!SetupDiGetDeviceProperty(
+  if (!SetupDiGetDevicePropertyW(
           dev_info, dev_info_data, &property, &property_type,
           reinterpret_cast<PBYTE>(base::WriteInto(&buffer, required_size)),
           required_size, nullptr, 0)) {
diff -ur a/src/3rdparty/chromium/services/proxy_resolver_win/BUILD.gn b/src/3rdparty/chromium/services/proxy_resolver_win/BUILD.gn
--- a/src/3rdparty/chromium/services/proxy_resolver_win/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/services/proxy_resolver_win/BUILD.gn	2023-12-14 20:15:55.287570000 +0800
@@ -13,7 +13,7 @@
     "winhttp_api_wrapper_impl.h",
   ]
 
-  libs = [ "winhttp.lib" ]
+  libs = [ "winhttp" ]
 
   deps = [
     "//base",
diff -ur a/src/3rdparty/chromium/services/shape_detection/BUILD.gn b/src/3rdparty/chromium/services/shape_detection/BUILD.gn
--- a/src/3rdparty/chromium/services/shape_detection/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/services/shape_detection/BUILD.gn	2023-12-14 20:15:55.334418200 +0800
@@ -37,7 +37,7 @@
     ]
     frameworks = [ "QuartzCore.framework" ]
     weak_frameworks = [ "Vision.framework" ]
-  } else if (is_win) {
+  } else if (is_win && !is_mingw) {
     sources += [
       "detection_utils_win.cc",
       "detection_utils_win.h",
diff -ur a/src/3rdparty/chromium/services/shape_detection/face_detection_provider_win.h b/src/3rdparty/chromium/services/shape_detection/face_detection_provider_win.h
--- a/src/3rdparty/chromium/services/shape_detection/face_detection_provider_win.h	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/services/shape_detection/face_detection_provider_win.h	2023-12-14 20:15:55.365602900 +0800
@@ -6,7 +6,9 @@
 #define SERVICES_SHAPE_DETECTION_FACE_DETECTION_PROVIDER_WIN_H_
 
 #include <windows.foundation.h>
+#if defined(COMPILER_MSVC)
 #include <windows.graphics.imaging.h>
+#endif
 #include <wrl/client.h>
 #include <memory>
 #include <utility>
@@ -14,7 +16,9 @@
 #include "base/memory/weak_ptr.h"
 #include "mojo/public/cpp/bindings/pending_receiver.h"
 #include "mojo/public/cpp/bindings/self_owned_receiver.h"
+#if defined(COMPILER_MSVC)
 #include "services/shape_detection/face_detection_impl_win.h"
+#endif
 #include "services/shape_detection/public/mojom/facedetection_provider.mojom.h"
 
 namespace shape_detection {
@@ -43,11 +47,13 @@
       shape_detection::mojom::FaceDetectorOptionsPtr options) override;
 
  private:
+#if defined(COMPILER_MSVC)
   void OnFaceDetectorCreated(
       mojo::PendingReceiver<shape_detection::mojom::FaceDetection> receiver,
       ABI::Windows::Graphics::Imaging::BitmapPixelFormat pixel_format,
       Microsoft::WRL::ComPtr<ABI::Windows::Media::FaceAnalysis::IFaceDetector>
           face_detector);
+#endif
 
   mojo::SelfOwnedReceiverRef<mojom::FaceDetectionProvider> receiver_;
   base::WeakPtrFactory<FaceDetectionProviderWin> weak_factory_{this};
