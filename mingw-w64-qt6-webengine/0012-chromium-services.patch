diff --git a/src/3rdparty/chromium/services/device/compute_pressure/BUILD.gn b/src/3rdparty/chromium/services/device/compute_pressure/BUILD.gn
index 8fe1101..7d98854 100644
--- a/src/3rdparty/chromium/services/device/compute_pressure/BUILD.gn
+++ b/src/3rdparty/chromium/services/device/compute_pressure/BUILD.gn
@@ -44,7 +44,7 @@ source_set("compute_pressure") {
       "cpu_probe_win.h",
     ]
 
-    libs += [ "pdh.lib" ]
+    libs += [ "pdh" ]
   }
 
   if (is_mac) {
diff --git a/src/3rdparty/chromium/services/device/generic_sensor/BUILD.gn b/src/3rdparty/chromium/services/device/generic_sensor/BUILD.gn
index 6b81097..87a9cd4 100644
--- a/src/3rdparty/chromium/services/device/generic_sensor/BUILD.gn
+++ b/src/3rdparty/chromium/services/device/generic_sensor/BUILD.gn
@@ -140,10 +140,18 @@ source_set("generic_sensor") {
       "platform_sensor_win.cc",
       "platform_sensor_win.h",
     ]
+    if (is_mingw) {
+      sources -= [
+        "platform_sensor_provider_winrt.cc",
+        "platform_sensor_provider_winrt.h",
+        "platform_sensor_reader_winrt.cc",
+        "platform_sensor_reader_winrt.h",
+      ]
+    }
 
     libs = [
-      "portabledeviceguids.lib",
-      "sensorsapi.lib",
+      "portabledeviceguids",
+      "sensorsapi",
     ]
   }
 }
diff --git a/src/3rdparty/chromium/services/device/generic_sensor/platform_sensor_provider.cc b/src/3rdparty/chromium/services/device/generic_sensor/platform_sensor_provider.cc
index 1abcaf0..1701a6d 100644
--- a/src/3rdparty/chromium/services/device/generic_sensor/platform_sensor_provider.cc
+++ b/src/3rdparty/chromium/services/device/generic_sensor/platform_sensor_provider.cc
@@ -50,7 +50,9 @@ std::unique_ptr<PlatformSensorProvider> PlatformSensorProvider::Create() {
   return std::make_unique<PlatformSensorProviderMac>();
 #elif BUILDFLAG(IS_ANDROID)
   return std::make_unique<PlatformSensorProviderAndroid>();
-#elif BUILDFLAG(IS_WIN)
+#elif BUILDFLAG(IS_MINGW)
+  return std::make_unique<PlatformSensorProviderWin>();
+#elif BUILDFLAG(IS_MSVC)
   if (PlatformSensorProvider::UseWindowsWinrt()) {
     return std::make_unique<PlatformSensorProviderWinrt>();
   } else {
diff --git a/src/3rdparty/chromium/services/device/generic_sensor/platform_sensor_reader_win.cc b/src/3rdparty/chromium/services/device/generic_sensor/platform_sensor_reader_win.cc
index 6f580e7..db7084e 100644
--- a/src/3rdparty/chromium/services/device/generic_sensor/platform_sensor_reader_win.cc
+++ b/src/3rdparty/chromium/services/device/generic_sensor/platform_sensor_reader_win.cc
@@ -7,7 +7,9 @@
 #include <Sensors.h>
 #include <comdef.h>
 #include <objbase.h>
+#if defined(COMPILER_MSVC)
 #include <wrl/implements.h>
+#endif
 
 #include <iomanip>
 
@@ -249,6 +251,7 @@ std::unique_ptr<ReaderInitParams> CreateReaderInitParamsForSensor(
 
 }  // namespace
 
+#if defined(COMPILER_MSVC)
 // Class that implements ISensorEvents used by the ISensor interface to dispatch
 // state and data change events.
 class EventListener
@@ -352,6 +355,7 @@ class EventListener
   const raw_ptr<PlatformSensorReaderWin32> platform_sensor_reader_;
   SensorReading last_sensor_reading_;
 };
+#endif
 
 // static
 std::unique_ptr<PlatformSensorReaderWinBase> PlatformSensorReaderWin32::Create(
@@ -380,8 +384,12 @@ std::unique_ptr<PlatformSensorReaderWinBase> PlatformSensorReaderWin32::Create(
   if (FAILED(hr))
     return nullptr;
 
+#if defined(COMPILER_MSVC)
   return base::WrapUnique(
       new PlatformSensorReaderWin32(sensor, std::move(params)));
+#else
+  return nullptr;
+#endif
 }
 
 // static
@@ -402,6 +410,7 @@ Microsoft::WRL::ComPtr<ISensor> PlatformSensorReaderWin32::GetSensorForType(
   return sensor;
 }
 
+#if defined(COMPILER_MSVC)
 PlatformSensorReaderWin32::PlatformSensorReaderWin32(
     Microsoft::WRL::ComPtr<ISensor> sensor,
     std::unique_ptr<ReaderInitParams> params)
@@ -415,6 +424,7 @@ PlatformSensorReaderWin32::PlatformSensorReaderWin32(
   DCHECK(init_params_->reader_func);
   DCHECK(sensor_);
 }
+#endif
 
 void PlatformSensorReaderWin32::SetClient(Client* client) {
   base::AutoLock autolock(lock_);
diff --git a/src/3rdparty/chromium/services/device/geolocation/BUILD.gn b/src/3rdparty/chromium/services/device/geolocation/BUILD.gn
index ea4c903..6fca46f 100644
--- a/src/3rdparty/chromium/services/device/geolocation/BUILD.gn
+++ b/src/3rdparty/chromium/services/device/geolocation/BUILD.gn
@@ -94,7 +94,7 @@ source_set("geolocation") {
     ]
   }
 
-  if (is_win) {
+  if (is_msvc) {
     sources += [
       "win/location_provider_winrt.cc",
       "win/location_provider_winrt.h",
diff --git a/src/3rdparty/chromium/services/device/geolocation/location_arbitrator.cc b/src/3rdparty/chromium/services/device/geolocation/location_arbitrator.cc
index 40fa300..809b2ca 100644
--- a/src/3rdparty/chromium/services/device/geolocation/location_arbitrator.cc
+++ b/src/3rdparty/chromium/services/device/geolocation/location_arbitrator.cc
@@ -196,7 +196,7 @@ LocationArbitrator::NewNetworkLocationProvider(
 
 std::unique_ptr<LocationProvider>
 LocationArbitrator::NewSystemLocationProvider() {
-#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_FUCHSIA)
+#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_FUCHSIA) || BUILDFLAG(IS_MINGW)
   return nullptr;
 #else
   return device::NewSystemLocationProvider(main_task_runner_,
diff --git a/src/3rdparty/chromium/services/device/hid/BUILD.gn b/src/3rdparty/chromium/services/device/hid/BUILD.gn
index 7421fac..3fb98d8 100644
--- a/src/3rdparty/chromium/services/device/hid/BUILD.gn
+++ b/src/3rdparty/chromium/services/device/hid/BUILD.gn
@@ -62,8 +62,8 @@ source_set("hid") {
       "hid_service_win.h",
     ]
     libs = [
-      "hid.lib",
-      "setupapi.lib",
+      "hid",
+      "setupapi",
     ]
   }
 
diff --git a/src/3rdparty/chromium/services/device/hid/hid_service_win.cc b/src/3rdparty/chromium/services/device/hid/hid_service_win.cc
index 0a3437d..84ea6ae 100644
--- a/src/3rdparty/chromium/services/device/hid/hid_service_win.cc
+++ b/src/3rdparty/chromium/services/device/hid/hid_service_win.cc
@@ -12,7 +12,9 @@
 #include <devpkey.h>
 #include <setupapi.h>
 #include <stddef.h>
+#if defined(COMPILER_MSVC)
 #include <wdmguid.h>
+#endif
 #include <winioctl.h>
 
 #include <algorithm>
@@ -80,7 +82,7 @@ absl::optional<std::wstring> GetDeviceStringProperty(
     const DEVPROPKEY& property_key) {
   DEVPROPTYPE property_type;
   DWORD required_size;
-  if (SetupDiGetDeviceProperty(device_info_set, &device_info_data,
+  if (SetupDiGetDevicePropertyW(device_info_set, &device_info_data,
                                &property_key, &property_type,
                                /*PropertyBuffer=*/nullptr,
                                /*PropertyBufferSize=*/0, &required_size,
@@ -102,7 +104,7 @@ absl::optional<std::wstring> GetDeviceStringProperty(
     return absl::nullopt;
 
   std::wstring property_buffer;
-  if (!SetupDiGetDeviceProperty(
+  if (!SetupDiGetDevicePropertyW(
           device_info_set, &device_info_data, &property_key, &property_type,
           reinterpret_cast<PBYTE>(
               base::WriteInto(&property_buffer, required_size)),
@@ -124,7 +126,7 @@ absl::optional<std::string> GetDeviceGuidProperty(
     const DEVPROPKEY& property_key) {
   DEVPROPTYPE property_type;
   GUID property_buffer;
-  if (!SetupDiGetDeviceProperty(
+  if (!SetupDiGetDevicePropertyW(
           device_info_set, &device_info_data, &property_key, &property_type,
           reinterpret_cast<PBYTE>(&property_buffer), sizeof(property_buffer),
           /*RequiredSize=*/nullptr, /*Flags=*/0)) {
diff --git a/src/3rdparty/chromium/services/device/serial/BUILD.gn b/src/3rdparty/chromium/services/device/serial/BUILD.gn
index af6d4e0..4ed01bc 100644
--- a/src/3rdparty/chromium/services/device/serial/BUILD.gn
+++ b/src/3rdparty/chromium/services/device/serial/BUILD.gn
@@ -9,8 +9,10 @@ if (is_win || ((is_linux || is_chromeos) && use_udev) || is_mac) {
   config("platform_support") {
     visibility = [ ":serial" ]
     if (is_win) {
-      libs = [ "setupapi.lib" ]
-      ldflags = [ "/DELAYLOAD:setupapi.dll" ]
+      libs = [ "setupapi" ]
+      if (is_msvc) {
+        ldflags = [ "/DELAYLOAD:setupapi.dll" ]
+      }
     }
   }
 
diff --git a/src/3rdparty/chromium/services/device/serial/serial_device_enumerator_win.cc b/src/3rdparty/chromium/services/device/serial/serial_device_enumerator_win.cc
index c12fbb6..9674580 100644
--- a/src/3rdparty/chromium/services/device/serial/serial_device_enumerator_win.cc
+++ b/src/3rdparty/chromium/services/device/serial/serial_device_enumerator_win.cc
@@ -9,6 +9,7 @@
 #define INITGUID
 #include <devguid.h>
 #include <devpkey.h>
+#include <ntdef.h>
 #include <ntddser.h>
 #include <setupapi.h>
 #include <stdint.h>
@@ -50,7 +51,7 @@ absl::optional<std::string> GetProperty(HDEVINFO dev_info,
 
   DEVPROPTYPE property_type;
   DWORD required_size;
-  if (SetupDiGetDeviceProperty(dev_info, dev_info_data, &property,
+  if (SetupDiGetDevicePropertyW(dev_info, dev_info_data, &property,
                                &property_type, /*PropertyBuffer=*/nullptr,
                                /*PropertyBufferSize=*/0, &required_size,
                                /*Flags=*/0) ||
@@ -60,7 +61,7 @@ absl::optional<std::string> GetProperty(HDEVINFO dev_info,
   }
 
   std::wstring buffer;
-  if (!SetupDiGetDeviceProperty(
+  if (!SetupDiGetDevicePropertyW(
           dev_info, dev_info_data, &property, &property_type,
           reinterpret_cast<PBYTE>(base::WriteInto(&buffer, required_size)),
           required_size, /*RequiredSize=*/nullptr, /*Flags=*/0)) {
diff --git a/src/3rdparty/chromium/services/device/usb/BUILD.gn b/src/3rdparty/chromium/services/device/usb/BUILD.gn
index 4fba8f7..93cf1a4 100644
--- a/src/3rdparty/chromium/services/device/usb/BUILD.gn
+++ b/src/3rdparty/chromium/services/device/usb/BUILD.gn
@@ -83,10 +83,10 @@ static_library("usb") {
     ]
 
     libs = [
-      "advapi32.lib",
-      "ole32.lib",
-      "setupapi.lib",
-      "winusb.lib",
+      "advapi32",
+      "ole32",
+      "setupapi",
+      "winusb",
     ]
 
     deps += [ "//third_party/re2" ]
diff --git a/src/3rdparty/chromium/services/device/usb/usb_service_win.cc b/src/3rdparty/chromium/services/device/usb/usb_service_win.cc
index 52298df..41cb5ba 100644
--- a/src/3rdparty/chromium/services/device/usb/usb_service_win.cc
+++ b/src/3rdparty/chromium/services/device/usb/usb_service_win.cc
@@ -67,7 +67,7 @@ absl::optional<uint32_t> GetDeviceUint32Property(HDEVINFO dev_info,
 
   DEVPROPTYPE property_type;
   uint32_t buffer;
-  if (!SetupDiGetDeviceProperty(
+  if (!SetupDiGetDevicePropertyW(
           dev_info, dev_info_data, &property, &property_type,
           reinterpret_cast<PBYTE>(&buffer), sizeof(buffer), nullptr, 0)) {
     USB_PLOG(ERROR) << "SetupDiGetDeviceProperty(" << property << ") failed";
@@ -94,7 +94,7 @@ absl::optional<std::wstring> GetDeviceStringProperty(
 
   DEVPROPTYPE property_type;
   DWORD required_size;
-  if (SetupDiGetDeviceProperty(dev_info, dev_info_data, &property,
+  if (SetupDiGetDevicePropertyW(dev_info, dev_info_data, &property,
                                &property_type, nullptr, 0, &required_size, 0)) {
     USB_LOG(ERROR) << "SetupDiGetDeviceProperty(" << property
                    << ") unexpectedly succeeded";
@@ -114,7 +114,7 @@ absl::optional<std::wstring> GetDeviceStringProperty(
   }
 
   std::wstring buffer;
-  if (!SetupDiGetDeviceProperty(
+  if (!SetupDiGetDevicePropertyW(
           dev_info, dev_info_data, &property, &property_type,
           reinterpret_cast<PBYTE>(base::WriteInto(&buffer, required_size)),
           required_size, nullptr, 0)) {
@@ -135,7 +135,7 @@ absl::optional<std::vector<std::wstring>> GetDeviceStringListProperty(
 
   DEVPROPTYPE property_type;
   DWORD required_size;
-  if (SetupDiGetDeviceProperty(dev_info, dev_info_data, &property,
+  if (SetupDiGetDevicePropertyW(dev_info, dev_info_data, &property,
                                &property_type, nullptr, 0, &required_size, 0)) {
     USB_LOG(ERROR) << "SetupDiGetDeviceProperty(" << property
                    << ") unexpectedly succeeded";
@@ -160,7 +160,7 @@ absl::optional<std::vector<std::wstring>> GetDeviceStringListProperty(
   }
 
   std::wstring buffer;
-  if (!SetupDiGetDeviceProperty(
+  if (!SetupDiGetDevicePropertyW(
           dev_info, dev_info_data, &property, &property_type,
           reinterpret_cast<PBYTE>(base::WriteInto(&buffer, required_size)),
           required_size, nullptr, 0)) {
diff --git a/src/3rdparty/chromium/services/proxy_resolver_win/BUILD.gn b/src/3rdparty/chromium/services/proxy_resolver_win/BUILD.gn
index ed4b004..8d89018 100644
--- a/src/3rdparty/chromium/services/proxy_resolver_win/BUILD.gn
+++ b/src/3rdparty/chromium/services/proxy_resolver_win/BUILD.gn
@@ -13,7 +13,7 @@ component("proxy_resolver_win") {
     "winhttp_api_wrapper_impl.h",
   ]
 
-  libs = [ "winhttp.lib" ]
+  libs = [ "winhttp" ]
 
   deps = [
     "//base",
diff --git a/src/3rdparty/chromium/services/shape_detection/BUILD.gn b/src/3rdparty/chromium/services/shape_detection/BUILD.gn
index 17edf62..170a946 100644
--- a/src/3rdparty/chromium/services/shape_detection/BUILD.gn
+++ b/src/3rdparty/chromium/services/shape_detection/BUILD.gn
@@ -40,7 +40,7 @@ source_set("lib") {
       "QuartzCore.framework",
       "Vision.framework",
     ]
-  } else if (is_win) {
+  } else if (is_msvc) {
     sources += [
       "detection_utils_win.cc",
       "detection_utils_win.h",
diff --git a/src/3rdparty/chromium/services/shape_detection/face_detection_provider_win.h b/src/3rdparty/chromium/services/shape_detection/face_detection_provider_win.h
index f6b3823..53e5206 100644
--- a/src/3rdparty/chromium/services/shape_detection/face_detection_provider_win.h
+++ b/src/3rdparty/chromium/services/shape_detection/face_detection_provider_win.h
@@ -14,7 +14,9 @@
 #include "base/memory/weak_ptr.h"
 #include "mojo/public/cpp/bindings/pending_receiver.h"
 #include "mojo/public/cpp/bindings/self_owned_receiver.h"
+#if defined(COMPILER_MSVC)
 #include "services/shape_detection/face_detection_impl_win.h"
+#endif
 #include "services/shape_detection/public/mojom/facedetection_provider.mojom.h"
 
 namespace shape_detection {
@@ -43,11 +45,13 @@ class FaceDetectionProviderWin
       shape_detection::mojom::FaceDetectorOptionsPtr options) override;
 
  private:
+#if defined(COMPILER_MSVC)
   void OnFaceDetectorCreated(
       mojo::PendingReceiver<shape_detection::mojom::FaceDetection> receiver,
       ABI::Windows::Graphics::Imaging::BitmapPixelFormat pixel_format,
       Microsoft::WRL::ComPtr<ABI::Windows::Media::FaceAnalysis::IFaceDetector>
           face_detector);
+#endif
 
   mojo::SelfOwnedReceiverRef<mojom::FaceDetectionProvider> receiver_;
   base::WeakPtrFactory<FaceDetectionProviderWin> weak_factory_{this};
diff --git a/src/3rdparty/chromium/services/shape_detection/shape_detection_service.cc b/src/3rdparty/chromium/services/shape_detection/shape_detection_service.cc
index ad24ba9..1a75a04 100644
--- a/src/3rdparty/chromium/services/shape_detection/shape_detection_service.cc
+++ b/src/3rdparty/chromium/services/shape_detection/shape_detection_service.cc
@@ -27,7 +27,7 @@
 #include "services/shape_detection/barcode_detection_provider_impl.h"
 #endif
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 #include "services/shape_detection/face_detection_provider_win.h"
 #elif BUILDFLAG(IS_MAC)
 #include "services/shape_detection/face_detection_provider_mac.h"
@@ -69,7 +69,7 @@ void ShapeDetectionService::BindFaceDetectionProvider(
       receiver.PassPipe().release().value());
 #elif BUILDFLAG(IS_MAC)
   FaceDetectionProviderMac::Create(std::move(receiver));
-#elif BUILDFLAG(IS_WIN)
+#elif BUILDFLAG(IS_MSVC)
   FaceDetectionProviderWin::Create(std::move(receiver));
 #else
   FaceDetectionProviderImpl::Create(std::move(receiver));
diff --git a/src/3rdparty/chromium/services/video_capture/device_media_to_mojo_adapter.cc b/src/3rdparty/chromium/services/video_capture/device_media_to_mojo_adapter.cc
index 29e6e9b..cfb7919 100644
--- a/src/3rdparty/chromium/services/video_capture/device_media_to_mojo_adapter.cc
+++ b/src/3rdparty/chromium/services/video_capture/device_media_to_mojo_adapter.cc
@@ -164,15 +164,15 @@ void DeviceMediaToMojoAdapter::StartInternal(
     TRACE_EVENT0(TRACE_DISABLED_BY_DEFAULT("video_and_image_capture"),
                  "CreateVideoCaptureBufferPoolImpl");
     // Create a dedicated buffer pool for the device usage session.
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
     buffer_pool = base::MakeRefCounted<media::VideoCaptureBufferPoolImpl>(
         requested_settings.buffer_type, max_buffer_pool_buffer_count(),
         std::make_unique<media::VideoCaptureBufferTrackerFactoryImpl>(
             dxgi_device_manager_));
-#else   // BUILDFLAG(IS_WIN)
+#else   // BUILDFLAG(IS_MSVC)
     buffer_pool = base::MakeRefCounted<media::VideoCaptureBufferPoolImpl>(
         requested_settings.buffer_type, max_buffer_pool_buffer_count());
-#endif  // !BUILDFLAG(IS_WIN)
+#endif  // !BUILDFLAG(IS_MSVC)
   }
 
 #if BUILDFLAG(IS_CHROMEOS_ASH)
diff --git a/src/3rdparty/chromium/services/video_capture/video_capture_service_impl.cc b/src/3rdparty/chromium/services/video_capture/video_capture_service_impl.cc
index 52abbd5..f348650 100644
--- a/src/3rdparty/chromium/services/video_capture/video_capture_service_impl.cc
+++ b/src/3rdparty/chromium/services/video_capture/video_capture_service_impl.cc
@@ -327,6 +327,7 @@ void VideoCaptureServiceImpl::LazyInitializeDeviceFactory() {
 
   LazyInitializeGpuDependenciesContext();
 
+#if !BUILDFLAG(IS_MINGW)
   // Create the platform-specific device factory.
   // The task runner passed to CreateFactory is used for things that need to
   // happen on a "UI thread equivalent", e.g. obtaining screen rotation on
@@ -336,6 +337,7 @@ void VideoCaptureServiceImpl::LazyInitializeDeviceFactory() {
 
   auto video_capture_system = std::make_unique<media::VideoCaptureSystemImpl>(
       std::move(media_device_factory));
+#endif
 
 #if BUILDFLAG(IS_CHROMEOS_ASH)
   device_factory_ = std::make_unique<VirtualDeviceEnabledDeviceFactory>(
@@ -378,7 +380,7 @@ void VideoCaptureServiceImpl::LazyInitializeDeviceFactory() {
     device_factory_ = std::make_unique<VirtualDeviceEnabledDeviceFactory>(
         std::make_unique<DeviceFactoryImpl>(std::move(video_capture_system)));
   }
-#else
+#elif !BUILDFLAG(IS_MINGW)
   device_factory_ = std::make_unique<VirtualDeviceEnabledDeviceFactory>(
       std::make_unique<DeviceFactoryImpl>(std::move(video_capture_system)));
 #endif  // BUILDFLAG(IS_CHROMEOS_ASH)
diff --git a/src/3rdparty/chromium/services/webnn/BUILD.gn b/src/3rdparty/chromium/services/webnn/BUILD.gn
index 7b46d32..820ae06 100644
--- a/src/3rdparty/chromium/services/webnn/BUILD.gn
+++ b/src/3rdparty/chromium/services/webnn/BUILD.gn
@@ -17,7 +17,7 @@ component("webnn_service") {
     "webnn_utils.h",
   ]
 
-  if (is_win) {
+  if (is_msvc) {
     sources += [
       "dml/adapter.cc",
       "dml/adapter.h",
@@ -68,7 +68,7 @@ source_set("tests") {
     "webnn_test_utils.h",
   ]
 
-  if (is_win) {
+  if (is_msvc) {
     sources += [
       "dml/adapter_test.cc",
       "dml/command_queue_test.cc",
diff --git a/src/3rdparty/chromium/services/webnn/webnn_context_provider_impl.cc b/src/3rdparty/chromium/services/webnn/webnn_context_provider_impl.cc
index 05f0758..73ad93a 100644
--- a/src/3rdparty/chromium/services/webnn/webnn_context_provider_impl.cc
+++ b/src/3rdparty/chromium/services/webnn/webnn_context_provider_impl.cc
@@ -12,7 +12,7 @@
 #include "services/webnn/public/mojom/webnn_error.mojom.h"
 #include "services/webnn/webnn_context_impl.h"
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 #include "services/webnn/dml/adapter.h"
 #include "services/webnn/dml/context_impl.h"
 #endif
@@ -61,7 +61,7 @@ void WebNNContextProviderImpl::CreateWebNNContext(
     return;
   }
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   // Get the default `Adapter` instance which is created for the adapter queried
   // from ANGLE. At the current stage, all `ContextImpl` share this instance.
   //
diff --git a/src/3rdparty/chromium/services/webnn/webnn_graph_impl.cc b/src/3rdparty/chromium/services/webnn/webnn_graph_impl.cc
index a684e16..dda63c7 100644
--- a/src/3rdparty/chromium/services/webnn/webnn_graph_impl.cc
+++ b/src/3rdparty/chromium/services/webnn/webnn_graph_impl.cc
@@ -16,7 +16,7 @@
 #include "third_party/abseil-cpp/absl/types/optional.h"
 #include "third_party/abseil-cpp/absl/types/variant.h"
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 #include "services/webnn/dml/graph_impl.h"
 #endif
 
