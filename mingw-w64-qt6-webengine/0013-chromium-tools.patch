diff --git a/src/3rdparty/chromium/tools/grit/grit/tool/build.py b/src/3rdparty/chromium/tools/grit/grit/tool/build.py
index f3f61c4..f96be61 100644
--- a/src/3rdparty/chromium/tools/grit/grit/tool/build.py
+++ b/src/3rdparty/chromium/tools/grit/grit/tool/build.py
@@ -362,6 +362,10 @@ are exported to translation interchange files (e.g. XMB files), etc.
                        'chrome_messages_json_gzip', 'policy_templates'):
       return 'utf_8'
     # TODO(gfeher) modify here to set utf-8 encoding for admx/adml
+    if sys.platform == 'win32' and 'GCC' in sys.version:
+      # windres cannot handle utf-16 encoding
+      if output_type in ('rc_all'):
+        return 'utf_8'
     return 'utf_16'
 
   def Process(self):
diff --git a/src/3rdparty/chromium/tools/perf/chrome_telemetry_build/BUILD.gn b/src/3rdparty/chromium/tools/perf/chrome_telemetry_build/BUILD.gn
index 8a33f5d..c6558e9 100644
--- a/src/3rdparty/chromium/tools/perf/chrome_telemetry_build/BUILD.gn
+++ b/src/3rdparty/chromium/tools/perf/chrome_telemetry_build/BUILD.gn
@@ -85,6 +85,9 @@ group("telemetry_chrome_test") {
       "//build/win:copy_cdb_to_output",
       "//third_party/crashpad/crashpad/tools:crashpad_database_util",
     ]
+    if (is_mingw) {
+      data_deps -= [ "//build/win:copy_cdb_to_output", ]
+    }
   }
 }
 
diff --git a/b/src/3rdparty/chromium/tools/typescript/ts_library.py.rej b/src/3rdparty/chromium/tools/typescript/ts_library.py.rej
new file mode 100644
index 0000000..6262b1c
--- /dev/null
+++ b/src/3rdparty/chromium/tools/typescript/ts_library.py.rej
@@ -0,0 +1,15 @@
+--- src/3rdparty/chromium/tools/typescript/ts_library.py
++++ src/3rdparty/chromium/tools/typescript/ts_library.py
+@@ -185,8 +185,11 @@ def main(argv):
+   if args.path_mappings is not None:
+     for m in args.path_mappings:
+       mapping = m.split('|')
+-      path_mappings[mapping[0]].append(os.path.join('./', mapping[1]))
++      # Avoid 'IndexError: list out of range' error
++      if len(mapping) > 1:
++        path_mappings[mapping[0]].append(os.path.join('./', mapping[1]))
+ 
++  tsconfig['compilerOptions']['baseUrl'] = '.'
+   tsconfig['compilerOptions']['paths'] = path_mappings
+ 
+   tsconfig_file = f'tsconfig_{args.output_suffix}.json'
diff --git a/src/3rdparty/chromium/tools/v8_context_snapshot/BUILD.gn b/src/3rdparty/chromium/tools/v8_context_snapshot/BUILD.gn
index f2ac9fc..1a310ed 100644
--- a/src/3rdparty/chromium/tools/v8_context_snapshot/BUILD.gn
+++ b/src/3rdparty/chromium/tools/v8_context_snapshot/BUILD.gn
@@ -112,7 +112,7 @@ if (use_v8_context_snapshot) {
   # disable it while taking a V8 snapshot.
   config("disable_icf") {
     visibility = [ ":*" ]  # Only targets in this file can depend on this.
-    if (is_win) {
+    if (is_msvc) {
       ldflags = [ "/OPT:NOICF" ]  # link.exe, but also lld-link.exe.
     } else if (is_apple && !use_lld) {
       ldflags = [ "-Wl,-no_deduplicate" ]  # ld64.
diff --git a/src/3rdparty/chromium/tools/win/DebugVisualizers/BUILD.gn b/src/3rdparty/chromium/tools/win/DebugVisualizers/BUILD.gn
index 5f08ee6..b94d5c9 100644
--- a/src/3rdparty/chromium/tools/win/DebugVisualizers/BUILD.gn
+++ b/src/3rdparty/chromium/tools/win/DebugVisualizers/BUILD.gn
@@ -20,11 +20,15 @@ assert(is_win)
 config("chrome") {
   # chrome.natvis listed as an input in //base:base to guarantee relinking on
   # changes.
-  ldflags = [ "/NATVIS:" + rebase_path(get_path_info("chrome.natvis", "abspath")) ]
+  if (is_msvc) {
+    ldflags = [ "/NATVIS:" + rebase_path(get_path_info("chrome.natvis", "abspath")) ]
+  }
 }
 
 config("blink") {
   # blink.natvis listed as an input in
   # //third_party/blink/renderer/platform/wtf to guarantee relinking on changes.
-  ldflags = [ "/NATVIS:" + rebase_path(get_path_info("blink.natvis", "abspath")) ]
+  if (is_msvc) {
+    ldflags = [ "/NATVIS:" + rebase_path(get_path_info("blink.natvis", "abspath")) ]
+  }
 }
