diff -ur a/src/3rdparty/chromium/tools/grit/grit/tool/build.py b/src/3rdparty/chromium/tools/grit/grit/tool/build.py
--- a/src/3rdparty/chromium/tools/grit/grit/tool/build.py	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/tools/grit/grit/tool/build.py	2023-12-14 20:21:55.896938500 +0800
@@ -362,6 +362,10 @@
                        'chrome_messages_json_gzip', 'policy_templates'):
       return 'utf_8'
     # TODO(gfeher) modify here to set utf-8 encoding for admx/adml
+    if sys.platform == 'win32' and 'GCC' in sys.version:
+      if output_type in ('rc_all'):
+        # windres cannot handle utf-16 encoding
+        return 'utf_8'
     return 'utf_16'
 
   def Process(self):
diff -ur a/src/3rdparty/chromium/tools/perf/chrome_telemetry_build/BUILD.gn b/src/3rdparty/chromium/tools/perf/chrome_telemetry_build/BUILD.gn
--- a/src/3rdparty/chromium/tools/perf/chrome_telemetry_build/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/tools/perf/chrome_telemetry_build/BUILD.gn	2023-12-14 20:21:55.974983900 +0800
@@ -83,6 +83,9 @@
       "//build/win:copy_cdb_to_output",
       "//third_party/crashpad/crashpad/tools:crashpad_database_util",
     ]
+    if (is_mingw) {
+      data_deps -= [ "//build/win:copy_cdb_to_output", ]
+    }
   }
 }
 
diff -ur a/src/3rdparty/chromium/tools/typescript/ts_library.gni b/src/3rdparty/chromium/tools/typescript/ts_library.gni
--- a/src/3rdparty/chromium/tools/typescript/ts_library.gni	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/tools/typescript/ts_library.gni	2023-12-14 20:21:56.021940100 +0800
@@ -158,6 +158,15 @@
       "//resources/polymer/v3_0/polymer/polymer_bundled.min.js|" + rebase_path(
               "//third_party/polymer/v3_0/components-chromium/polymer/polymer.d.ts",
               target_gen_dir),
+      "chrome://resources/polymer/v3_0/polymer/lib/elements/dom-repeat.js|" + rebase_path(
+              "//third_party/polymer/v3_0/components-chromium/polymer/lib/elements/dom-repeat.d.ts",
+              target_gen_dir),
+      "chrome://resources/polymer/v3_0/iron-list/iron-list.js|" + rebase_path(
+              "//third_party/polymer/v3_0/components-chromium/iron-list/iron-list.d.ts",
+              target_gen_dir),
+      "chrome://resources/polymer/v3_0/iron-scroll-threshold/iron-scroll-threshold.js|" + rebase_path(
+              "//third_party/polymer/v3_0/components-chromium/iron-scroll-threshold/iron-scroll-threshold.d.ts",
+              target_gen_dir),
       "/tools/typescript/definitions/*|" +
           rebase_path("//tools/typescript/definitions/*", target_gen_dir),
 
diff -ur a/src/3rdparty/chromium/tools/typescript/ts_library.py b/src/3rdparty/chromium/tools/typescript/ts_library.py
--- a/src/3rdparty/chromium/tools/typescript/ts_library.py	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/tools/typescript/ts_library.py	2023-12-14 20:28:54.349980000 +0800
@@ -169,8 +169,11 @@
   if args.path_mappings is not None:
     for m in args.path_mappings:
       mapping = m.split('|')
-      path_mappings[mapping[0]].append(os.path.join('./', mapping[1]))
+      # Avoid 'IndexError: list out of range' error
+      if len(mapping) > 1:
+        path_mappings[mapping[0]].append(os.path.join('./', mapping[1]))
 
+  tsconfig['compilerOptions']['baseUrl'] = '.'
   tsconfig['compilerOptions']['paths'] = path_mappings
 
   tsconfig_file = f'tsconfig_{args.output_suffix}.json'
diff -ur a/src/3rdparty/chromium/tools/v8_context_snapshot/BUILD.gn b/src/3rdparty/chromium/tools/v8_context_snapshot/BUILD.gn
--- a/src/3rdparty/chromium/tools/v8_context_snapshot/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/tools/v8_context_snapshot/BUILD.gn	2023-12-25 13:25:52.274007500 +0800
@@ -108,7 +108,7 @@
   # disable it while taking a V8 snapshot.
   config("disable_icf") {
     visibility = [ ":*" ]  # Only targets in this file can depend on this.
-    if (is_win) {
+    if (is_win && !is_mingw) {
       ldflags = [ "/OPT:NOICF" ]  # link.exe, but also lld-link.exe.
     } else if (is_apple && !use_lld) {
       ldflags = [ "-Wl,-no_deduplicate" ]  # ld64.
diff -ur a/src/3rdparty/chromium/tools/win/DebugVisualizers/BUILD.gn b/src/3rdparty/chromium/tools/win/DebugVisualizers/BUILD.gn
--- a/src/3rdparty/chromium/tools/win/DebugVisualizers/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/tools/win/DebugVisualizers/BUILD.gn	2023-12-14 20:21:56.115686400 +0800
@@ -20,11 +20,15 @@
 config("chrome") {
   # chrome.natvis listed as an input in //base:base to guarantee relinking on
   # changes.
-  ldflags = [ "/NATVIS:" + rebase_path(get_path_info("chrome.natvis", "abspath")) ]
+  if (!is_mingw) {
+    ldflags = [ "/NATVIS:" + rebase_path(get_path_info("chrome.natvis", "abspath")) ]
+  }
 }
 
 config("blink") {
   # blink.natvis listed as an input in
   # //third_party/blink/renderer/platform/wtf to guarantee relinking on changes.
-  ldflags = [ "/NATVIS:" + rebase_path(get_path_info("blink.natvis", "abspath")) ]
+  if (!is_mingw) {
+    ldflags = [ "/NATVIS:" + rebase_path(get_path_info("blink.natvis", "abspath")) ]
+  }
 }
