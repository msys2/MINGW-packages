diff --git a/src/3rdparty/chromium/gpu/command_buffer/client/shared_image_interface.cc b/src/3rdparty/chromium/gpu/command_buffer/client/shared_image_interface.cc
index a07e390..b8fa510 100644
--- a/src/3rdparty/chromium/gpu/command_buffer/client/shared_image_interface.cc
+++ b/src/3rdparty/chromium/gpu/command_buffer/client/shared_image_interface.cc
@@ -9,7 +9,7 @@
 #include "components/viz/common/resources/shared_image_format_utils.h"
 #include "gpu/command_buffer/client/client_shared_image.h"
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 #include "ui/gfx/win/d3d_shared_fence.h"
 #endif
 
@@ -53,13 +53,13 @@ void SharedImageInterface::CopyToGpuMemoryBuffer(const SyncToken& sync_token,
   NOTREACHED();
 }
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 void SharedImageInterface::UpdateSharedImage(
     const SyncToken& sync_token,
     scoped_refptr<gfx::D3DSharedFence> d3d_shared_fence,
     const Mailbox& mailbox) {
   NOTIMPLEMENTED_LOG_ONCE();
 }
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 
 }  // namespace gpu
diff --git a/src/3rdparty/chromium/gpu/command_buffer/client/shared_image_interface.h b/src/3rdparty/chromium/gpu/command_buffer/client/shared_image_interface.h
index 3a8f9d9..d3904d5 100644
--- a/src/3rdparty/chromium/gpu/command_buffer/client/shared_image_interface.h
+++ b/src/3rdparty/chromium/gpu/command_buffer/client/shared_image_interface.h
@@ -35,7 +35,7 @@ class ColorSpace;
 class GpuFence;
 class Size;
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 class D3DSharedFence;
 #endif
 }  // namespace gfx
@@ -298,7 +298,7 @@ class GPU_EXPORT SharedImageInterface {
       bool register_with_image_pipe) = 0;
 #endif  // BUILDFLAG(IS_FUCHSIA)
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   // Update fence between processes. Register D3DSharedFence in GPU process
   // first and then use DXGIHandleToken to identify the fence between processes
   // and pass signaled fence value from current process to GPU process.
@@ -306,7 +306,7 @@ class GPU_EXPORT SharedImageInterface {
       const SyncToken& sync_token,
       scoped_refptr<gfx::D3DSharedFence> d3d_shared_fence,
       const Mailbox& mailbox);
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 
   // Generates an unverified SyncToken that is released after all previous
   // commands on this interface have executed on the service side.
diff --git a/src/3rdparty/chromium/gpu/command_buffer/service/BUILD.gn b/src/3rdparty/chromium/gpu/command_buffer/service/BUILD.gn
index 72eab27..776326a 100644
--- a/src/3rdparty/chromium/gpu/command_buffer/service/BUILD.gn
+++ b/src/3rdparty/chromium/gpu/command_buffer/service/BUILD.gn
@@ -613,7 +613,7 @@ target(link_target_type, "gles2_sources") {
     }
   }
 
-  if (is_win) {
+  if (is_msvc) {
     sources += [
       "dxgi_shared_handle_manager.cc",
       "dxgi_shared_handle_manager.h",
@@ -642,6 +642,16 @@ target(link_target_type, "gles2_sources") {
     ]
     all_dependent_configs = [ ":service_win_linker_flags" ]
   }
+
+  if (is_mingw) {
+    sources += [
+      "shared_image/d3d_image_representation.cc",
+      "shared_image/d3d_image_representation.h",
+      "shared_image/d3d_image_utils.cc",
+      "shared_image/d3d_image_utils.h",
+    ]
+    libs = [ "dxguid" ]
+  }
 }
 
 proto_library("disk_cache_proto") {
diff --git a/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/d3d_image_backing.h b/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/d3d_image_backing.h
index 9ffeeba..0020e0e 100644
--- a/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/d3d_image_backing.h
+++ b/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/d3d_image_backing.h
@@ -108,8 +108,10 @@ class GPU_GLES2_EXPORT D3DImageBacking final
       std::vector<wgpu::TextureFormat> view_formats,
       scoped_refptr<SharedContextState> context_state) override;
 #endif  // BUILDFLAG(USE_DAWN)
+#if BUILDFLAG(IS_MSVC)
   void UpdateExternalFence(
       scoped_refptr<gfx::D3DSharedFence> external_fence) override;
+#endif
 
   bool BeginAccessD3D11(Microsoft::WRL::ComPtr<ID3D11Device> d3d11_device,
                         bool write_access);
diff --git a/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_backing.cc b/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_backing.cc
index 6b059be..87f6c62 100644
--- a/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_backing.cc
+++ b/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_backing.cc
@@ -18,7 +18,7 @@
 #include "gpu/command_buffer/service/shared_image/shared_image_representation.h"
 #include "third_party/skia/include/core/SkColorSpace.h"
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 #include "ui/gfx/win/d3d_shared_fence.h"
 #endif
 
@@ -259,7 +259,7 @@ SharedImageBacking::ProduceLegacyOverlay(SharedImageManager* manager,
 }
 #endif
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 void SharedImageBacking::UpdateExternalFence(
     scoped_refptr<gfx::D3DSharedFence> external_fence) {
   NOTIMPLEMENTED_LOG_ONCE();
diff --git a/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_backing.h b/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_backing.h
index 37134c8..8994546 100644
--- a/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_backing.h
+++ b/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_backing.h
@@ -340,7 +340,7 @@ class GPU_GLES2_EXPORT SharedImageBacking {
   ProduceLegacyOverlay(SharedImageManager* manager, MemoryTypeTracker* tracker);
 #endif
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   virtual void UpdateExternalFence(
       scoped_refptr<gfx::D3DSharedFence> external_fence);
 #endif
diff --git a/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_factory.cc b/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_factory.cc
index b633727..5995ce0 100644
--- a/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_factory.cc
+++ b/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_factory.cc
@@ -278,7 +278,7 @@ SharedImageFactory::SharedImageFactory(
     factories_.push_back(std::move(gl_texture_backing_factory));
   }
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   if (gl::DirectCompositionSupported()) {
     factories_.push_back(std::make_unique<DCompImageBackingFactory>(
         shared_context_state_.get()));
@@ -291,7 +291,7 @@ SharedImageFactory::SharedImageFactory(
     d3d_backing_factory_ = d3d_factory.get();
     factories_.push_back(std::move(d3d_factory));
   }
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 
 #if !BUILDFLAG(IS_ANDROID)
   if (use_gl) {
@@ -792,7 +792,7 @@ void SharedImageFactory::DestroyAllSharedImages(bool have_context) {
   shared_images_.clear();
 }
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 bool SharedImageFactory::CreateSwapChain(const Mailbox& front_buffer_mailbox,
                                          const Mailbox& back_buffer_mailbox,
                                          viz::SharedImageFormat format,
@@ -824,7 +824,7 @@ bool SharedImageFactory::PresentSwapChain(const Mailbox& mailbox) {
   (*it)->PresentSwapChain();
   return true;
 }
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 
 #if BUILDFLAG(IS_FUCHSIA)
 void SharedImageFactory::RegisterSysmemBufferCollection(
@@ -843,7 +843,7 @@ void SharedImageFactory::RegisterSysmemBufferCollection(
 }
 #endif  // BUILDFLAG(IS_FUCHSIA)
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 bool SharedImageFactory::CopyToGpuMemoryBuffer(const Mailbox& mailbox) {
   auto it = shared_images_.find(mailbox);
   if (it == shared_images_.end()) {
@@ -894,13 +894,13 @@ gpu::SharedImageCapabilities SharedImageFactory::MakeCapabilities() {
   shared_image_caps.disable_webgpu_shared_images =
       workarounds_.disable_webgpu_shared_images;
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   shared_image_caps.shared_image_d3d =
       D3DImageBackingFactory::IsD3DSharedImageSupported(gpu_preferences_);
   shared_image_caps.shared_image_swap_chain =
       shared_image_caps.shared_image_d3d &&
       D3DImageBackingFactory::IsSwapChainSupported(gpu_preferences_);
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 
   return shared_image_caps;
 }
diff --git a/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_factory.h b/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_factory.h
index a0fb994..ee9aaaa 100644
--- a/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_factory.h
+++ b/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_factory.h
@@ -106,7 +106,7 @@ class GPU_GLES2_EXPORT SharedImageFactory {
   bool HasImages() const { return !shared_images_.empty(); }
   void DestroyAllSharedImages(bool have_context);
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   bool CreateSwapChain(const Mailbox& front_buffer_mailbox,
                        const Mailbox& back_buffer_mailbox,
                        viz::SharedImageFormat format,
@@ -116,7 +116,7 @@ class GPU_GLES2_EXPORT SharedImageFactory {
                        SkAlphaType alpha_type,
                        uint32_t usage);
   bool PresentSwapChain(const Mailbox& mailbox);
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 
 #if BUILDFLAG(IS_FUCHSIA)
   void RegisterSysmemBufferCollection(zx::eventpair service_handle,
@@ -137,7 +137,7 @@ class GPU_GLES2_EXPORT SharedImageFactory {
     return shared_context_state_;
   }
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   bool CopyToGpuMemoryBuffer(const Mailbox& mailbox);
 #endif
 
diff --git a/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_manager.cc b/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_manager.cc
index 2cede63..6c2a136 100644
--- a/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_manager.cc
+++ b/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_manager.cc
@@ -23,7 +23,7 @@
 #include "gpu/command_buffer/service/shared_image/shared_image_representation.h"
 #include "ui/gl/trace_util.h"
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 #include "gpu/command_buffer/service/dxgi_shared_handle_manager.h"
 #include "ui/gfx/win/d3d_shared_fence.h"
 #include "ui/gl/gl_angle_util_win.h"
@@ -83,7 +83,7 @@ class SCOPED_LOCKABLE SharedImageManager::AutoLock {
 SharedImageManager::SharedImageManager(bool thread_safe,
                                        bool display_context_on_another_thread)
     : display_context_on_another_thread_(display_context_on_another_thread)
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
       ,
       dxgi_shared_handle_manager_(
           base::MakeRefCounted<DXGISharedHandleManager>())
@@ -419,7 +419,7 @@ SharedImageManager::ProduceLegacyOverlay(const Mailbox& mailbox,
 }
 #endif
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 void SharedImageManager::UpdateExternalFence(
     const Mailbox& mailbox,
     scoped_refptr<gfx::D3DSharedFence> external_fence) {
diff --git a/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_manager.h b/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_manager.h
index d7f2d88..bb092db 100644
--- a/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_manager.h
+++ b/src/3rdparty/chromium/gpu/command_buffer/service/shared_image/shared_image_manager.h
@@ -17,7 +17,7 @@
 #include "gpu/gpu_gles2_export.h"
 #include "gpu/vulkan/buildflags.h"
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 namespace gfx {
 class D3DSharedFence;
 }
@@ -119,7 +119,7 @@ class GPU_GLES2_EXPORT SharedImageManager
       MemoryTypeTracker* ref);
 #endif
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   void UpdateExternalFence(const Mailbox& mailbox,
                            scoped_refptr<gfx::D3DSharedFence> external_fence);
 #endif
@@ -145,7 +145,7 @@ class GPU_GLES2_EXPORT SharedImageManager
   // method is to facilitate pageflip testing on the viz thread.
   scoped_refptr<gfx::NativePixmap> GetNativePixmap(const gpu::Mailbox& mailbox);
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   const scoped_refptr<DXGISharedHandleManager>& dxgi_shared_handle_manager()
       const {
     return dxgi_shared_handle_manager_;
@@ -163,7 +163,7 @@ class GPU_GLES2_EXPORT SharedImageManager
 
   bool is_registered_as_memory_dump_provider_ = false;
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   scoped_refptr<DXGISharedHandleManager> dxgi_shared_handle_manager_;
 #endif
 
diff --git a/src/3rdparty/chromium/gpu/config/BUILD.gn b/src/3rdparty/chromium/gpu/config/BUILD.gn
index 4ff377c..c710526 100644
--- a/src/3rdparty/chromium/gpu/config/BUILD.gn
+++ b/src/3rdparty/chromium/gpu/config/BUILD.gn
@@ -239,8 +239,8 @@ source_set("config_sources") {
       "gpu_info_collector_win.cc",
     ]
     libs = [
-      "dxgi.lib",
-      "dxguid.lib",
+      "dxgi",
+      "dxguid",
     ]
 
     if (is_chrome_branded && is_official_build) {
diff --git a/src/3rdparty/chromium/gpu/config/gpu_driver_bug_workarounds.h b/src/3rdparty/chromium/gpu/config/gpu_driver_bug_workarounds.h
index 1951c8b..befb28a 100644
--- a/src/3rdparty/chromium/gpu/config/gpu_driver_bug_workarounds.h
+++ b/src/3rdparty/chromium/gpu/config/gpu_driver_bug_workarounds.h
@@ -5,6 +5,7 @@
 #ifndef GPU_CONFIG_GPU_DRIVER_BUG_WORKAROUNDS_H_
 #define GPU_CONFIG_GPU_DRIVER_BUG_WORKAROUNDS_H_
 
+#include <cstdint>
 #include <vector>
 
 #include "build/build_config.h"
diff --git a/src/3rdparty/chromium/gpu/config/gpu_info_collector_win.cc b/src/3rdparty/chromium/gpu/config/gpu_info_collector_win.cc
index b3fc392..d1dc2d4 100644
--- a/src/3rdparty/chromium/gpu/config/gpu_info_collector_win.cc
+++ b/src/3rdparty/chromium/gpu/config/gpu_info_collector_win.cc
@@ -333,7 +333,7 @@ void GetGpuSupportedD3D12Version(uint32_t& d3d12_feature_level,
     // Check to see if the adapter supports Direct3D 12.
     for (auto level : feature_levels) {
       if (SUCCEEDED(D3D12CreateDevice(dxgi_adapter.Get(), level,
-                                      _uuidof(ID3D12Device), &d3d12_device))) {
+                                      __uuidof(ID3D12Device), &d3d12_device))) {
         d3d12_feature_level = level;
         break;
       }
diff --git a/src/3rdparty/chromium/gpu/ipc/client/client_shared_image_interface.cc b/src/3rdparty/chromium/gpu/ipc/client/client_shared_image_interface.cc
index cc9da09..0ee3a28 100644
--- a/src/3rdparty/chromium/gpu/ipc/client/client_shared_image_interface.cc
+++ b/src/3rdparty/chromium/gpu/ipc/client/client_shared_image_interface.cc
@@ -17,7 +17,7 @@
 #include "ui/gfx/gpu_fence.h"
 #include "ui/gfx/gpu_memory_buffer.h"
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 #include "ui/gfx/win/d3d_shared_fence.h"
 #endif
 
@@ -265,7 +265,7 @@ scoped_refptr<ClientSharedImage> ClientSharedImageInterface::CreateSharedImage(
           gpu_memory_buffer->CloneHandle())));
 }
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 void ClientSharedImageInterface::CopyToGpuMemoryBuffer(
     const SyncToken& sync_token,
     const Mailbox& mailbox) {
diff --git a/src/3rdparty/chromium/gpu/ipc/client/client_shared_image_interface.h b/src/3rdparty/chromium/gpu/ipc/client/client_shared_image_interface.h
index 67274b2..e119219 100644
--- a/src/3rdparty/chromium/gpu/ipc/client/client_shared_image_interface.h
+++ b/src/3rdparty/chromium/gpu/ipc/client/client_shared_image_interface.h
@@ -121,7 +121,7 @@ class GPU_EXPORT ClientSharedImageInterface : public SharedImageInterface {
       SkAlphaType alpha_type,
       uint32_t usage,
       base::StringPiece debug_label) override;
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   void CopyToGpuMemoryBuffer(const SyncToken& sync_token,
                              const Mailbox& mailbox) override;
   void UpdateSharedImage(const SyncToken& sync_token,
diff --git a/src/3rdparty/chromium/gpu/ipc/client/shared_image_interface_proxy.cc b/src/3rdparty/chromium/gpu/ipc/client/shared_image_interface_proxy.cc
index fac38ef..9469d6b 100644
--- a/src/3rdparty/chromium/gpu/ipc/client/shared_image_interface_proxy.cc
+++ b/src/3rdparty/chromium/gpu/ipc/client/shared_image_interface_proxy.cc
@@ -17,7 +17,7 @@
 #include "ui/gfx/buffer_types.h"
 #include "ui/gfx/gpu_fence.h"
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 #include "ui/gfx/win/d3d_shared_fence.h"
 #endif
 
@@ -284,7 +284,7 @@ Mailbox SharedImageInterfaceProxy::CreateSharedImage(
   return mailbox;
 }
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 void SharedImageInterfaceProxy::CopyToGpuMemoryBuffer(
     const SyncToken& sync_token,
     const Mailbox& mailbox) {
@@ -333,7 +333,7 @@ void SharedImageInterfaceProxy::UpdateSharedImage(
                   d3d_shared_fence->GetFenceValue()))),
       std::move(dependencies));
 }
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 
 void SharedImageInterfaceProxy::UpdateSharedImage(const SyncToken& sync_token,
                                                   const Mailbox& mailbox) {
@@ -521,7 +521,7 @@ SharedImageInterfaceProxy::CreateSwapChain(viz::SharedImageFormat format,
                                            GrSurfaceOrigin surface_origin,
                                            SkAlphaType alpha_type,
                                            uint32_t usage) {
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   const SwapChainMailboxes mailboxes = {Mailbox::GenerateForSharedImage(),
                                         Mailbox::GenerateForSharedImage()};
   auto params = mojom::CreateSwapChainParams::New();
@@ -549,12 +549,12 @@ SharedImageInterfaceProxy::CreateSwapChain(viz::SharedImageFormat format,
 #else
   NOTREACHED();
   return {};
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 }
 
 void SharedImageInterfaceProxy::PresentSwapChain(const SyncToken& sync_token,
                                                  const Mailbox& mailbox) {
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   std::vector<SyncToken> dependencies =
       GenerateDependenciesFromSyncToken(std::move(sync_token), host_);
   {
@@ -569,7 +569,7 @@ void SharedImageInterfaceProxy::PresentSwapChain(const SyncToken& sync_token,
   }
 #else
   NOTREACHED();
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 }
 
 #if BUILDFLAG(IS_FUCHSIA)
diff --git a/src/3rdparty/chromium/gpu/ipc/common/BUILD.gn b/src/3rdparty/chromium/gpu/ipc/common/BUILD.gn
index 02b2718..6e7a009 100644
--- a/src/3rdparty/chromium/gpu/ipc/common/BUILD.gn
+++ b/src/3rdparty/chromium/gpu/ipc/common/BUILD.gn
@@ -102,7 +102,7 @@ source_set("ipc_common_sources") {
       "gpu_memory_buffer_impl_dxgi.cc",
       "gpu_memory_buffer_impl_dxgi.h",
     ]
-    libs = [ "d3d11.lib" ]
+    libs = [ "d3d11" ]
   }
   if (use_ozone) {
     sources += [
diff --git a/src/3rdparty/chromium/gpu/ipc/service/BUILD.gn b/src/3rdparty/chromium/gpu/ipc/service/BUILD.gn
index e321b40..6c36011 100644
--- a/src/3rdparty/chromium/gpu/ipc/service/BUILD.gn
+++ b/src/3rdparty/chromium/gpu/ipc/service/BUILD.gn
@@ -99,9 +99,9 @@ component("service") {
       "image_transport_surface_win.cc",
     ]
     libs += [
-      "d3d11.lib",
-      "dcomp.lib",
-      "dxguid.lib",
+      "d3d11",
+      "dcomp",
+      "dxguid",
     ]
   }
   if (is_apple) {
diff --git a/src/3rdparty/chromium/gpu/ipc/service/shared_image_stub.cc b/src/3rdparty/chromium/gpu/ipc/service/shared_image_stub.cc
index ebb7eb9..a3efee6 100644
--- a/src/3rdparty/chromium/gpu/ipc/service/shared_image_stub.cc
+++ b/src/3rdparty/chromium/gpu/ipc/service/shared_image_stub.cc
@@ -27,7 +27,7 @@
 #include "ui/gfx/gpu_memory_buffer.h"
 #include "ui/gl/gl_context.h"
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 #include "ui/gfx/win/d3d_shared_fence.h"
 #endif
 
@@ -41,7 +41,7 @@ constexpr char kSICreationFailureError[] =
 
 }  // namespace
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 namespace base {
 bool operator<(const scoped_refptr<gfx::D3DSharedFence>& lhs,
                const scoped_refptr<gfx::D3DSharedFence>& rhs) {
@@ -148,7 +148,7 @@ void SharedImageStub::ExecuteDeferredRequest(
       OnDestroySharedImage(request->get_destroy_shared_image());
       break;
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
     case mojom::DeferredSharedImageRequest::Tag::kCopyToGpuMemoryBuffer: {
       auto& params = *request->get_copy_to_gpu_memory_buffer();
       OnCopyToGpuMemoryBuffer(params.mailbox, params.release_id);
@@ -179,7 +179,7 @@ void SharedImageStub::ExecuteDeferredRequest(
       OnUnregisterDxgiFence(unregister.mailbox, unregister.dxgi_token);
       break;
     }
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
   }
 }
 
@@ -489,12 +489,12 @@ void SharedImageStub::OnDestroySharedImage(const Mailbox& mailbox) {
     return;
   }
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   registered_dxgi_fences_.erase(mailbox);
 #endif
 }
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 void SharedImageStub::OnCopyToGpuMemoryBuffer(const Mailbox& mailbox,
                                               uint32_t release_id) {
   if (!mailbox.IsSharedImage()) {
@@ -665,7 +665,7 @@ void SharedImageStub::OnUnregisterDxgiFence(const Mailbox& mailbox,
   mailbox_fences.erase(fence_it);
 }
 
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 
 #if BUILDFLAG(IS_FUCHSIA)
 void SharedImageStub::RegisterSysmemBufferCollection(
diff --git a/src/3rdparty/chromium/gpu/ipc/service/shared_image_stub.h b/src/3rdparty/chromium/gpu/ipc/service/shared_image_stub.h
index 7057823..8016807 100644
--- a/src/3rdparty/chromium/gpu/ipc/service/shared_image_stub.h
+++ b/src/3rdparty/chromium/gpu/ipc/service/shared_image_stub.h
@@ -17,7 +17,7 @@
 #include "ui/gfx/gpu_extra_info.h"
 
 namespace gfx {
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 class D3DSharedFence;
 #endif
 
@@ -116,7 +116,7 @@ class GPU_IPC_SERVICE_EXPORT SharedImageStub : public MemoryTracker {
 
   void OnDestroySharedImage(const Mailbox& mailbox);
   void OnRegisterSharedImageUploadBuffer(base::ReadOnlySharedMemoryRegion shm);
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   void OnCopyToGpuMemoryBuffer(const Mailbox& mailbox, uint32_t release_id);
   void OnCreateSwapChain(mojom::CreateSwapChainParamsPtr params);
   void OnPresentSwapChain(const Mailbox& mailbox, uint32_t release_id);
@@ -128,7 +128,7 @@ class GPU_IPC_SERVICE_EXPORT SharedImageStub : public MemoryTracker {
                          uint64_t fence_value);
   void OnUnregisterDxgiFence(const Mailbox& mailbox,
                              gfx::DXGIHandleToken dxgi_token);
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 
   bool MakeContextCurrent(bool needs_gl = false);
   ContextResult MakeContextCurrentAndCreateFactory();
@@ -156,7 +156,7 @@ class GPU_IPC_SERVICE_EXPORT SharedImageStub : public MemoryTracker {
   base::ReadOnlySharedMemoryRegion upload_memory_;
   base::ReadOnlySharedMemoryMapping upload_memory_mapping_;
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   // Fences held by external processes. Registered and signaled from ipc
   // channel. Using DXGIHandleToken to identify the fence.
   base::flat_map<Mailbox, base::flat_set<scoped_refptr<gfx::D3DSharedFence>>>
