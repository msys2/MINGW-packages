diff -ur a/src/3rdparty/chromium/gpu/command_buffer/service/BUILD.gn b/src/3rdparty/chromium/gpu/command_buffer/service/BUILD.gn
--- a/src/3rdparty/chromium/gpu/command_buffer/service/BUILD.gn	2023-11-21 00:08:07.000000000 +0800
+++ b/src/3rdparty/chromium/gpu/command_buffer/service/BUILD.gn	2024-01-02 19:33:29.595605100 +0800
@@ -593,7 +593,25 @@
       "shared_image/pbuffer_image_backing.cc",
       "shared_image/pbuffer_image_backing.h",
     ]
-    libs = [ "dxguid.lib" ]
+    if (is_mingw) {
+      sources -= [
+        "shared_image/d3d_image_backing.cc",
+        "shared_image/d3d_image_backing.h",
+        "shared_image/d3d_shared_fence.cc",
+        "shared_image/d3d_shared_fence.h",
+        "shared_image/dcomp_image_backing_factory.cc",
+        "shared_image/dcomp_image_backing_factory.h",
+        "shared_image/dcomp_surface_image_backing.cc",
+        "shared_image/dcomp_surface_image_backing.h",
+        "shared_image/dcomp_surface_image_representation.cc",
+        "shared_image/dcomp_surface_image_representation.h",
+        "shared_image/dxgi_swap_chain_image_backing.cc",
+        "shared_image/dxgi_swap_chain_image_backing.h",
+        "shared_image/dxgi_swap_chain_image_representation.cc",
+        "shared_image/dxgi_swap_chain_image_representation.h",
+      ]
+    }
+    libs = [ "dxguid" ]
   }
 }
 
diff -ur a/src/3rdparty/chromium/gpu/config/BUILD.gn b/src/3rdparty/chromium/gpu/config/BUILD.gn
--- a/src/3rdparty/chromium/gpu/config/BUILD.gn	2023-11-21 00:08:07.000000000 +0800
+++ b/src/3rdparty/chromium/gpu/config/BUILD.gn	2024-01-02 19:33:29.673769300 +0800
@@ -221,8 +221,8 @@
       "gpu_info_collector_win.cc",
     ]
     libs = [
-      "dxgi.lib",
-      "dxguid.lib",
+      "dxgi",
+      "dxguid",
     ]
 
     if (is_chrome_branded && is_official_build) {
diff -ur a/src/3rdparty/chromium/gpu/config/device_perf_info.h b/src/3rdparty/chromium/gpu/config/device_perf_info.h
--- a/src/3rdparty/chromium/gpu/config/device_perf_info.h	2023-11-21 00:08:07.000000000 +0800
+++ b/src/3rdparty/chromium/gpu/config/device_perf_info.h	2024-01-02 19:33:29.705022000 +0800
@@ -46,7 +46,7 @@
   uint32_t total_physical_memory_mb = 0u;
   uint32_t total_disk_space_mb = 0u;
   uint32_t hardware_concurrency = 0u;
-#if BUILDFLAG(IS_WIN)
+#if defined(COMPILER_MSVC)
   // system commit limit (n pages) x page size.
   uint32_t system_commit_limit_mb = 0u;
   // If multiple GPUs are detected, this holds the highest feature level.
diff -ur a/src/3rdparty/chromium/gpu/config/gpu_driver_bug_workarounds.h b/src/3rdparty/chromium/gpu/config/gpu_driver_bug_workarounds.h
--- a/src/3rdparty/chromium/gpu/config/gpu_driver_bug_workarounds.h	2023-11-21 00:08:07.000000000 +0800
+++ b/src/3rdparty/chromium/gpu/config/gpu_driver_bug_workarounds.h	2024-01-02 19:33:29.736303800 +0800
@@ -5,6 +5,7 @@
 #ifndef GPU_CONFIG_GPU_DRIVER_BUG_WORKAROUNDS_H_
 #define GPU_CONFIG_GPU_DRIVER_BUG_WORKAROUNDS_H_
 
+#include <cstdint>
 #include <vector>
 
 #include "build/build_config.h"
diff -ur a/src/3rdparty/chromium/gpu/config/gpu_info_collector_win.cc b/src/3rdparty/chromium/gpu/config/gpu_info_collector_win.cc
--- a/src/3rdparty/chromium/gpu/config/gpu_info_collector_win.cc	2023-11-21 00:08:07.000000000 +0800
+++ b/src/3rdparty/chromium/gpu/config/gpu_info_collector_win.cc	2024-01-02 19:33:29.751855800 +0800
@@ -63,8 +63,10 @@
       return D3D12FeatureLevel::kD3DFeatureLevel_12_0;
     case D3D_FEATURE_LEVEL_12_1:
       return D3D12FeatureLevel::kD3DFeatureLevel_12_1;
+#if defined(COMPILER_MSVC)
     case D3D_FEATURE_LEVEL_12_2:
       return D3D12FeatureLevel::kD3DFeatureLevel_12_2;
+#endif
     case D3D_FEATURE_LEVEL_11_0:
       return D3D12FeatureLevel::kD3DFeatureLevel_11_0;
     case D3D_FEATURE_LEVEL_11_1:
@@ -99,6 +101,7 @@
       return D3D12ShaderModel::kD3DShaderModel_5_1;
     case D3D_SHADER_MODEL_6_0:
       return D3D12ShaderModel::kD3DShaderModel_6_0;
+#if defined(COMPILER_MSVC)
     case D3D_SHADER_MODEL_6_1:
       return D3D12ShaderModel::kD3DShaderModel_6_1;
     case D3D_SHADER_MODEL_6_2:
@@ -113,6 +116,7 @@
       return D3D12ShaderModel::kD3DShaderModel_6_6;
     case D3D_SHADER_MODEL_6_7:
       return D3D12ShaderModel::kD3DShaderModel_6_7;
+#endif
 
     default:
       NOTREACHED();
@@ -303,10 +307,12 @@
   if (!d3d12_library.is_valid())
     return;
 
+#if defined(COMPILER_MSVC)
   // The order of feature levels to attempt to create in D3D CreateDevice
   const D3D_FEATURE_LEVEL feature_levels[] = {
       D3D_FEATURE_LEVEL_12_2, D3D_FEATURE_LEVEL_12_1, D3D_FEATURE_LEVEL_12_0,
       D3D_FEATURE_LEVEL_11_1, D3D_FEATURE_LEVEL_11_0};
+#endif
 
   PFN_D3D12_CREATE_DEVICE D3D12CreateDevice =
       reinterpret_cast<PFN_D3D12_CREATE_DEVICE>(
@@ -329,6 +335,7 @@
       return;
     }
 
+#if defined(COMPILER_MSVC)
     // For the default adapter only: EnumAdapters(0, ...).
     // Check to see if the adapter supports Direct3D 12.
     for (auto level : feature_levels) {
@@ -338,8 +345,10 @@
         break;
       }
     }
+#endif
   }
 
+#if defined(COMPILER_MSVC)
   // Query the maximum supported shader model version.
   if (d3d12_device) {
     // As per the documentation, CheckFeatureSupport will return E_INVALIDARG if
@@ -363,6 +372,7 @@
       }
     }
   }
+#endif
 }
 
 // The old graphics drivers are installed to the Windows system directory
@@ -596,6 +606,7 @@
       ConvertToHistogramShaderVersion(highest_shader_model_version));
 }
 
+#if defined(COMPILER_MSVC)
 bool CollectD3D11FeatureInfo(D3D_FEATURE_LEVEL* d3d11_feature_level,
                              bool* has_discrete_gpu) {
   Microsoft::WRL::ComPtr<IDXGIFactory1> dxgi_factory;
@@ -662,6 +673,7 @@
   }
   return false;
 }
+#endif
 
 bool CollectContextGraphicsInfo(GPUInfo* gpu_info) {
   TRACE_EVENT0("gpu", "CollectGraphicsInfo");
diff -ur a/src/3rdparty/chromium/gpu/config/gpu_util.cc b/src/3rdparty/chromium/gpu/config/gpu_util.cc
--- a/src/3rdparty/chromium/gpu/config/gpu_util.cc	2023-11-21 00:08:07.000000000 +0800
+++ b/src/3rdparty/chromium/gpu/config/gpu_util.cc	2024-01-02 19:33:29.908185900 +0800
@@ -63,7 +63,7 @@
 
 namespace {
 
-#if BUILDFLAG(IS_WIN)
+#if defined(COMPILER_MSVC)
 // These values are persistent to logs. Entries should not be renumbered and
 // numeric values should never be reused.
 // This should match enum D3D11FeatureLevel in
@@ -113,7 +113,7 @@
       return D3D11FeatureLevel::kUnknown;
   }
 }
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // defined(COMPILER_MSVC)
 
 GpuFeatureStatus GetAndroidSurfaceControlFeatureStatus(
     const std::set<int>& blocklisted_features,
@@ -401,7 +401,7 @@
   }
 }
 
-#if BUILDFLAG(IS_WIN)
+#if defined(COMPILER_MSVC)
 uint32_t GetSystemCommitLimitMb() {
   PERFORMANCE_INFORMATION perf_info = {sizeof(perf_info)};
   if (::GetPerformanceInfo(&perf_info, sizeof(perf_info))) {
@@ -412,7 +412,7 @@
   }
   return 0u;
 }
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // defined(COMPILER_MSVC)
 
 GPUInfo* g_gpu_info_cache = nullptr;
 GpuFeatureInfo* g_gpu_feature_info_cache = nullptr;
@@ -1002,7 +1002,7 @@
   device_perf_info->hardware_concurrency =
       static_cast<uint32_t>(std::thread::hardware_concurrency());
 
-#if BUILDFLAG(IS_WIN)
+#if defined(COMPILER_MSVC)
   device_perf_info->system_commit_limit_mb = GetSystemCommitLimitMb();
   if (!in_browser_process) {
     D3D_FEATURE_LEVEL d3d11_feature_level = D3D_FEATURE_LEVEL_1_0_CORE;
@@ -1024,7 +1024,7 @@
                             device_perf_info->total_disk_space_mb / 1024);
   UMA_HISTOGRAM_COUNTS_100("Hardware.Concurrency",
                            device_perf_info->hardware_concurrency);
-#if BUILDFLAG(IS_WIN)
+#if defined(COMPILER_MSVC)
   UMA_HISTOGRAM_COUNTS_100("Memory.Total.SystemCommitLimit",
                            device_perf_info->system_commit_limit_mb / 1024);
   UMA_HISTOGRAM_ENUMERATION("GPU.D3D11FeatureLevel",
@@ -1032,7 +1032,7 @@
                                 device_perf_info->d3d11_feature_level));
   UMA_HISTOGRAM_ENUMERATION("GPU.HasDiscreteGpu",
                             device_perf_info->has_discrete_gpu);
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // defined(COMPILER_MSVC)
   UMA_HISTOGRAM_ENUMERATION("GPU.IntelGpuGeneration",
                             device_perf_info->intel_gpu_generation);
   UMA_HISTOGRAM_BOOLEAN("GPU.SoftwareRendering",
diff -ur a/src/3rdparty/chromium/gpu/ipc/common/BUILD.gn b/src/3rdparty/chromium/gpu/ipc/common/BUILD.gn
--- a/src/3rdparty/chromium/gpu/ipc/common/BUILD.gn	2023-11-21 00:08:07.000000000 +0800
+++ b/src/3rdparty/chromium/gpu/ipc/common/BUILD.gn	2024-01-02 19:33:29.986271100 +0800
@@ -101,7 +101,7 @@
       "gpu_memory_buffer_impl_dxgi.cc",
       "gpu_memory_buffer_impl_dxgi.h",
     ]
-    libs = [ "d3d11.lib" ]
+    libs = [ "d3d11" ]
   }
   if (use_ozone) {
     sources += [
diff -ur a/src/3rdparty/chromium/gpu/ipc/common/device_perf_info.mojom b/src/3rdparty/chromium/gpu/ipc/common/device_perf_info.mojom
--- a/src/3rdparty/chromium/gpu/ipc/common/device_perf_info.mojom	2023-11-21 00:08:07.000000000 +0800
+++ b/src/3rdparty/chromium/gpu/ipc/common/device_perf_info.mojom	2024-01-02 19:33:29.986271100 +0800
@@ -32,10 +32,10 @@
   uint32 total_disk_space_mb;
   uint32 hardware_concurrency;
 
-  [EnableIf=is_win]
+  [EnableIf=is_msvc]
   uint32 system_commit_limit_mb;
-  [EnableIf=is_win]
+  [EnableIf=is_msvc]
   Direct3DFeatureLevel d3d11_feature_level;
-  [EnableIf=is_win]
+  [EnableIf=is_msvc]
   HasDiscreteGpu has_discrete_gpu;
 };
diff -ur a/src/3rdparty/chromium/gpu/ipc/common/device_perf_info_mojom_traits.cc b/src/3rdparty/chromium/gpu/ipc/common/device_perf_info_mojom_traits.cc
--- a/src/3rdparty/chromium/gpu/ipc/common/device_perf_info_mojom_traits.cc	2023-11-21 00:08:07.000000000 +0800
+++ b/src/3rdparty/chromium/gpu/ipc/common/device_perf_info_mojom_traits.cc	2024-01-02 19:33:30.001866000 +0800
@@ -14,8 +14,10 @@
 EnumTraits<gpu::mojom::Direct3DFeatureLevel, D3D_FEATURE_LEVEL>::ToMojom(
     D3D_FEATURE_LEVEL d3d_feature_level) {
   switch (d3d_feature_level) {
+#if defined(COMPILER_MSVC)
     case D3D_FEATURE_LEVEL_1_0_CORE:
       return gpu::mojom::Direct3DFeatureLevel::k1_0_Core;
+#endif
     case D3D_FEATURE_LEVEL_9_1:
       return gpu::mojom::Direct3DFeatureLevel::k9_1;
     case D3D_FEATURE_LEVEL_9_2:
@@ -34,8 +36,10 @@
       return gpu::mojom::Direct3DFeatureLevel::k12_0;
     case D3D_FEATURE_LEVEL_12_1:
       return gpu::mojom::Direct3DFeatureLevel::k12_1;
+#if defined(COMPILER_MSVC)
     case D3D_FEATURE_LEVEL_12_2:
       return gpu::mojom::Direct3DFeatureLevel::k12_2;
+#endif
   }
   NOTREACHED() << "Invalid D3D_FEATURE_LEVEL:" << d3d_feature_level;
   return gpu::mojom::Direct3DFeatureLevel::k1_0_Core;
@@ -46,9 +50,11 @@
     gpu::mojom::Direct3DFeatureLevel input,
     D3D_FEATURE_LEVEL* out) {
   switch (input) {
+#if defined(COMPILER_MSVC)
     case gpu::mojom::Direct3DFeatureLevel::k1_0_Core:
       *out = D3D_FEATURE_LEVEL_1_0_CORE;
       return true;
+#endif
     case gpu::mojom::Direct3DFeatureLevel::k9_1:
       *out = D3D_FEATURE_LEVEL_9_1;
       return true;
@@ -76,9 +82,11 @@
     case gpu::mojom::Direct3DFeatureLevel::k12_1:
       *out = D3D_FEATURE_LEVEL_12_1;
       return true;
+#if defined(COMPILER_MSVC)
     case gpu::mojom::Direct3DFeatureLevel::k12_2:
       *out = D3D_FEATURE_LEVEL_12_2;
       return true;
+#endif
   }
   NOTREACHED() << "Invalid D3D_FEATURE_LEVEL: " << input;
   return false;
@@ -127,11 +135,11 @@
   out->total_disk_space_mb = data.total_disk_space_mb();
   out->hardware_concurrency = data.hardware_concurrency();
   bool rt = true;
-#if BUILDFLAG(IS_WIN)
+#if defined(COMPILER_MSVC)
   out->system_commit_limit_mb = data.system_commit_limit_mb();
   rt &= data.ReadD3d11FeatureLevel(&out->d3d11_feature_level);
   rt &= data.ReadHasDiscreteGpu(&out->has_discrete_gpu);
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // defined(COMPILER_MSVC)
   return rt;
 }
 
diff -ur a/src/3rdparty/chromium/gpu/ipc/common/device_perf_info_mojom_traits.h b/src/3rdparty/chromium/gpu/ipc/common/device_perf_info_mojom_traits.h
--- a/src/3rdparty/chromium/gpu/ipc/common/device_perf_info_mojom_traits.h	2023-11-21 00:08:07.000000000 +0800
+++ b/src/3rdparty/chromium/gpu/ipc/common/device_perf_info_mojom_traits.h	2024-01-02 19:33:30.001866000 +0800
@@ -50,7 +50,7 @@
     return info.hardware_concurrency;
   }
 
-#if BUILDFLAG(IS_WIN)
+#if defined(COMPILER_MSVC)
   static uint32_t system_commit_limit_mb(const gpu::DevicePerfInfo& info) {
     return info.system_commit_limit_mb;
   }
diff -ur a/src/3rdparty/chromium/gpu/ipc/service/BUILD.gn b/src/3rdparty/chromium/gpu/ipc/service/BUILD.gn
--- a/src/3rdparty/chromium/gpu/ipc/service/BUILD.gn	2023-11-21 00:08:07.000000000 +0800
+++ b/src/3rdparty/chromium/gpu/ipc/service/BUILD.gn	2024-01-02 19:33:30.048720300 +0800
@@ -98,9 +98,9 @@
       "image_transport_surface_win.cc",
     ]
     libs += [
-      "d3d11.lib",
-      "dcomp.lib",
-      "dxguid.lib",
+      "d3d11",
+      "dcomp",
+      "dxguid",
     ]
   }
   if (is_mac) {
