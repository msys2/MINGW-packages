diff -ur a/src/3rdparty/chromium/BUILD.gn b/src/3rdparty/chromium/BUILD.gn
--- a/src/3rdparty/chromium/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/BUILD.gn	2023-12-22 00:57:16.676595800 +0800
@@ -1692,7 +1692,7 @@
     data_deps += [ "//tools/perf/clear_system_cache" ]
   }
 
-  if (is_win) {
+  if (is_win && !is_qtwebengine) {
     data_deps += [
       "//chrome/installer/mini_installer:mini_installer",
       "//components:components_perftests",
diff -ur a/src/3rdparty/chromium/crypto/BUILD.gn b/src/3rdparty/chromium/crypto/BUILD.gn
--- a/src/3rdparty/chromium/crypto/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/crypto/BUILD.gn	2023-12-14 20:51:40.553105400 +0800
@@ -117,7 +117,7 @@
       "scoped_cng_types.h",
       "unexportable_key_win.cc",
     ]
-    libs = [ "ncrypt.lib" ]
+    libs = [ "ncrypt" ]
   }
 
   # Some files are built when NSS is used for the platform certificate library.
diff -ur a/src/3rdparty/chromium/crypto/unexportable_key_win.cc b/src/3rdparty/chromium/crypto/unexportable_key_win.cc
--- a/src/3rdparty/chromium/crypto/unexportable_key_win.cc	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/crypto/unexportable_key_win.cc	2023-12-18 23:52:52.585135400 +0800
@@ -141,6 +141,7 @@
     return absl::nullopt;
   }
 
+#ifdef _MSC_VER
   // Sometimes NCrypt will return a generic dwMagic even when asked for a P-256
   // key. In that case, do extra validation to make sure that `key` is in fact
   // a P-256 key.
@@ -157,6 +158,7 @@
       return absl::nullopt;
     }
   }
+#endif
 
   uint8_t x962[1 + 32 + 32];
   x962[0] = POINT_CONVERSION_UNCOMPRESSED;
diff -ur a/src/3rdparty/chromium/skia/BUILD.gn b/src/3rdparty/chromium/skia/BUILD.gn
--- a/src/3rdparty/chromium/skia/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/skia/BUILD.gn	2023-12-30 20:05:49.575817000 +0800
@@ -195,7 +195,7 @@
 
 source_set("skcms") {
   cflags = []
-  if (!is_win || is_clang) {
+  if (!is_msvc || is_clang) {
     cflags += [
       "-w",
       "-std=c11",
@@ -363,7 +363,7 @@
   sources -= [ "//third_party/skia/src/utils/SkParsePath.cpp" ]
 
   if (is_win) {
-    libs = [ "fontsub.lib" ]
+    libs = [ "fontsub" ]
   }
 
   # need separate win section to handle chromes auto gn filter
@@ -630,7 +630,7 @@
     if (using_mismatched_sample_profile) {
       configs -= [ "//build/config/compiler:afdo_optimize_size" ]
     }
-    if (is_win) {
+    if (is_msvc) {
       cflags_cc = [
         "/wd5041",  # out-of-line definition for constexpr static data member is
                     # not needed and is deprecated in C++17
@@ -666,7 +666,7 @@
 if (current_cpu == "x86" || current_cpu == "x64") {
   skia_source_set("skia_opts_sse3") {
     sources = skia_opts.ssse3_sources
-    if (!is_win || is_clang) {
+    if (!is_msvc || is_clang) {
       cflags = [ "-mssse3" ]
     }
     if (is_win) {
@@ -676,7 +676,7 @@
   }
   skia_source_set("skia_opts_sse42") {
     sources = skia_opts.sse42_sources
-    if (!is_win || is_clang) {
+    if (!is_msvc || is_clang) {
       cflags = [ "-msse4.2" ]
     }
     if (is_win) {
@@ -686,17 +686,17 @@
   }
   skia_source_set("skia_opts_avx") {
     sources = skia_opts.avx_sources
-    if (!is_win) {
+    if (!is_msvc) {
       cflags = [ "-mavx" ]
     }
-    if (is_win) {
+    if (is_msvc) {
       cflags = [ "/arch:AVX" ]
     }
     visibility = [ ":skia_opts" ]
   }
   skia_source_set("skia_opts_hsw") {
     sources = skia_opts.hsw_sources
-    if (!is_win) {
+    if (!is_msvc) {
       cflags = [
         "-mavx2",
         "-mbmi",
@@ -705,17 +705,17 @@
         "-mfma",
       ]
     }
-    if (is_win) {
+    if (is_msvc) {
       cflags = [ "/arch:AVX2" ]
     }
     visibility = [ ":skia_opts" ]
   }
   skia_source_set("skia_opts_skx") {
     sources = skia_opts.skx_sources
-    if (!is_win) {
+    if (!is_msvc) {
       cflags = [ "-march=skylake-avx512" ]
     }
-    if (is_win) {
+    if (is_msvc) {
       cflags = [ "/arch:AVX512" ]
     }
     visibility = [ ":skia_opts" ]
diff -ur a/src/3rdparty/chromium/sql/sqlite_result_code.cc b/src/3rdparty/chromium/sql/sqlite_result_code.cc
--- a/src/3rdparty/chromium/sql/sqlite_result_code.cc	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/sql/sqlite_result_code.cc	2023-12-14 20:57:46.578188500 +0800
@@ -154,15 +154,15 @@
     {SQLITE_ERROR_SNAPSHOT,
      static_cast<int>(SqliteLoggedResultCode::kUnusedChrome)},
 #ifdef SQLITE_ENABLE_SNAPSHOT
-#error "This code assumes that Chrome does not use sqlite3_snapshot_open()"
+#error This code assumes that Chrome does not use sqlite3_snapshot_open()
 #endif
 
     // Chrome does not use blocking Posix advisory file lock requests.
     {SQLITE_BUSY_TIMEOUT,
      static_cast<int>(SqliteLoggedResultCode::kUnusedChrome)},
 #ifdef SQLITE_ENABLE_SETLK_TIMEOUT
-#error "This code assumes that Chrome does not use blocking Posix advisory \
-file lock requests"
+#error This code assumes that Chrome does not use blocking Posix advisory \
+file lock requests
 #endif
 
     {SQLITE_READONLY_ROLLBACK,
diff -ur a/src/3rdparty/chromium/sql/vfs_wrapper.cc b/src/3rdparty/chromium/sql/vfs_wrapper.cc
--- a/src/3rdparty/chromium/sql/vfs_wrapper.cc	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/sql/vfs_wrapper.cc	2023-12-14 20:51:40.678103900 +0800
@@ -5,6 +5,7 @@
 #include "sql/vfs_wrapper.h"
 
 #include <algorithm>
+#include <cstring>
 #include <string>
 #include <vector>
 
