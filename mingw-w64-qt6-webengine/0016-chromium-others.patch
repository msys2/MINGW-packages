diff --git a/src/3rdparty/chromium/BUILD.gn b/src/3rdparty/chromium/BUILD.gn
index 8c2d1fc..9162e02 100644
--- a/src/3rdparty/chromium/BUILD.gn
+++ b/src/3rdparty/chromium/BUILD.gn
@@ -1226,7 +1226,9 @@ if (use_blink && !is_cronet_build) {
         "//third_party/apache-windows-arm64/",
         "//third_party/perl/perl/",
       ]
-      data_deps += [ "//build/win:copy_cdb_to_output" ]
+      if (is_msvc) {
+        data_deps += [ "//build/win:copy_cdb_to_output" ]
+      }
     }
 
     if (is_mac) {
diff --git a/src/3rdparty/chromium/crypto/BUILD.gn b/src/3rdparty/chromium/crypto/BUILD.gn
index 37b8658..639abcc 100644
--- a/src/3rdparty/chromium/crypto/BUILD.gn
+++ b/src/3rdparty/chromium/crypto/BUILD.gn
@@ -94,7 +94,7 @@ component("crypto") {
       "scoped_cng_types.h",
       "unexportable_key_win.cc",
     ]
-    libs = [ "ncrypt.lib" ]
+    libs = [ "ncrypt" ]
   }
 
   # Some files are built when NSS is used for the platform certificate library.
diff --git a/src/3rdparty/chromium/crypto/unexportable_key_win.cc b/src/3rdparty/chromium/crypto/unexportable_key_win.cc
index 7e39e10..c383c04 100644
--- a/src/3rdparty/chromium/crypto/unexportable_key_win.cc
+++ b/src/3rdparty/chromium/crypto/unexportable_key_win.cc
@@ -148,6 +148,7 @@ std::optional<std::vector<uint8_t>> GetP256ECDSASPKI(NCRYPT_KEY_HANDLE key) {
     return std::nullopt;
   }
 
+#if !defined(COMPILER_GCC) // missing NCRYPT_ECC_CURVE_NAME_PROPERTY
   // Sometimes NCrypt will return a generic dwMagic even when asked for a P-256
   // key. In that case, do extra validation to make sure that `key` is in fact
   // a P-256 key.
@@ -164,6 +165,7 @@ std::optional<std::vector<uint8_t>> GetP256ECDSASPKI(NCRYPT_KEY_HANDLE key) {
       return std::nullopt;
     }
   }
+#endif
 
   uint8_t x962[1 + 32 + 32];
   x962[0] = POINT_CONVERSION_UNCOMPRESSED;
@@ -649,6 +651,7 @@ class VirtualUnexportableKeyProviderWin
       return nullptr;
     }
 
+#if !defined(COMPILER_GCC) // missing NCRYPT_USE_VIRTUAL_ISOLATION_FLAG
     ScopedNCryptKey key;
     {
       SCOPED_MAY_LOAD_LIBRARY_AT_BACKGROUND_PRIORITY();
@@ -690,6 +693,7 @@ class VirtualUnexportableKeyProviderWin
       default:
         return nullptr;
     }
+#endif
   }
 
   std::unique_ptr<VirtualUnexportableSigningKey> FromKeyName(
diff --git a/src/3rdparty/chromium/skia/BUILD.gn b/src/3rdparty/chromium/skia/BUILD.gn
index 6e9849d..8c81d69 100644
--- a/src/3rdparty/chromium/skia/BUILD.gn
+++ b/src/3rdparty/chromium/skia/BUILD.gn
@@ -412,7 +412,7 @@ component("skia") {
   sources -= [ "//third_party/skia/src/utils/SkParsePath.cpp" ]
 
   if (is_win) {
-    libs = [ "fontsub.lib" ]
+    libs = [ "fontsub" ]
   }
 
   # Select Skia ports.
@@ -668,10 +668,16 @@ template("skia_source_set") {
       configs -= [ "//build/config/compiler:afdo_optimize_size" ]
     }
     if (is_win) {
-      cflags_cc = [
-        "/wd5041",  # out-of-line definition for constexpr static data member is
-                    # not needed and is deprecated in C++17
-      ]
+      if (is_mingw) {
+        cflags_cc = [
+          "-Wno-missing-field-initializers",
+        ]
+      } else {
+        cflags_cc = [
+          "/wd5041",  # out-of-line definition for constexpr static data member is
+                      # not needed and is deprecated in C++17
+        ]
+      }
     }
   }
 }
@@ -702,7 +708,7 @@ skia_source_set("skia_core_and_effects") {
 if (current_cpu == "x86" || current_cpu == "x64") {
   skia_source_set("skia_opts_hsw") {
     sources = skia_opts.hsw_sources
-    if (!is_win) {
+    if (!is_msvc) {
       cflags = [
         "-mavx2",
         "-mbmi",
@@ -764,7 +770,7 @@ skia_source_set("skia_opts") {
 if (current_cpu == "x64") {
   skia_source_set("skcms_TransformHsw") {
     sources = skcms_TransformHsw
-    if (!is_win) {
+    if (!is_msvc) {
       cflags = [
         "-w",
         "-mavx2",
@@ -778,7 +784,7 @@ if (current_cpu == "x64") {
   }
   skia_source_set("skcms_TransformSkx") {
     sources = skcms_TransformSkx
-    if (!is_win) {
+    if (!is_msvc) {
       cflags = [
         "-w",
         "-mavx512f",
@@ -805,7 +811,7 @@ if (current_cpu == "x64") {
 }
 
 source_set("skcms_TransformBaseline_and_public") {
-  if (!is_win || is_clang) {
+  if (!is_msvc || is_clang) {
     cflags = [
       "-w",
       "-std=c11",
diff --git a/src/3rdparty/chromium/sql/sqlite_result_code.cc b/src/3rdparty/chromium/sql/sqlite_result_code.cc
index 57fce23..5a2cd49 100644
--- a/src/3rdparty/chromium/sql/sqlite_result_code.cc
+++ b/src/3rdparty/chromium/sql/sqlite_result_code.cc
@@ -155,15 +155,15 @@ constexpr SqliteResultCodeMappingEntry kResultCodeMapping[] = {
     {SQLITE_ERROR_SNAPSHOT,
      static_cast<int>(SqliteLoggedResultCode::kUnusedChrome)},
 #ifdef SQLITE_ENABLE_SNAPSHOT
-#error "This code assumes that Chrome does not use sqlite3_snapshot_open()"
+#error This code assumes that Chrome does not use sqlite3_snapshot_open()
 #endif
 
     // Chrome does not use blocking Posix advisory file lock requests.
     {SQLITE_BUSY_TIMEOUT,
      static_cast<int>(SqliteLoggedResultCode::kUnusedChrome)},
 #ifdef SQLITE_ENABLE_SETLK_TIMEOUT
-#error "This code assumes that Chrome does not use blocking Posix advisory \
-file lock requests"
+#error This code assumes that Chrome does not use blocking Posix advisory \
+file lock requests
 #endif
 
     {SQLITE_READONLY_ROLLBACK,
diff --git a/src/3rdparty/chromium/sql/vfs_wrapper.cc b/src/3rdparty/chromium/sql/vfs_wrapper.cc
index 2db19f5..3066d93 100644
--- a/src/3rdparty/chromium/sql/vfs_wrapper.cc
+++ b/src/3rdparty/chromium/sql/vfs_wrapper.cc
@@ -5,6 +5,7 @@
 #include "sql/vfs_wrapper.h"
 
 #include <algorithm>
+#include <cstring>
 #include <string>
 #include <vector>
 
