diff -ur a/src/3rdparty/chromium/third_party/dawn/scripts/dawn_features.gni b/src/3rdparty/chromium/third_party/dawn/scripts/dawn_features.gni
--- a/src/3rdparty/chromium/third_party/dawn/scripts/dawn_features.gni	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/dawn/scripts/dawn_features.gni	2023-12-14 21:24:59.419838000 +0800
@@ -55,7 +55,7 @@
   dawn_complete_static_libs = false
 
   # Enables the compilation of Dawn's D3D12 backend
-  dawn_enable_d3d12 = is_win
+  dawn_enable_d3d12 = is_msvc
 
   # Enables the compilation of Dawn's Metal backend
   dawn_enable_metal = is_mac
diff -ur a/src/3rdparty/chromium/third_party/dawn/src/dawn/common/BUILD.gn b/src/3rdparty/chromium/third_party/dawn/src/dawn/common/BUILD.gn
--- a/src/3rdparty/chromium/third_party/dawn/src/dawn/common/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/dawn/src/dawn/common/BUILD.gn	2023-12-14 21:24:59.451160300 +0800
@@ -142,7 +142,7 @@
       "-Wunused-macros",
     ]
 
-    if (is_win) {
+    if (is_msvc) {
       cflags += [
         # clang-cl doesn't know -pedantic, pass it explicitly to the clang driver
         "/clang:-pedantic",
@@ -155,7 +155,7 @@
     }
   }
 
-  if (!is_clang && is_win) {
+  if (!is_clang && is_msvc) {
     # Dawn extends wgpu enums with internal enums.
     # MSVC considers these invalid switch values. crbug.com/dawn/397.
     cflags += [ "/wd4063" ]
diff -ur a/src/3rdparty/chromium/third_party/dawn/src/dawn/native/BUILD.gn b/src/3rdparty/chromium/third_party/dawn/src/dawn/native/BUILD.gn
--- a/src/3rdparty/chromium/third_party/dawn/src/dawn/native/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/dawn/src/dawn/native/BUILD.gn	2023-12-14 21:24:59.497960600 +0800
@@ -374,7 +374,7 @@
   # Only win32 app needs to link with user32.lib
   # In UWP, all availiable APIs are defined in WindowsApp.lib
   if (is_win && !dawn_is_winuwp) {
-    libs += [ "user32.lib" ]
+    libs += [ "user32" ]
   }
 
   if (dawn_is_winuwp && is_debug) {
@@ -394,7 +394,7 @@
   # WinPIX should be added as third party tools and linked statically
 
   if (dawn_enable_d3d12) {
-    libs += [ "dxguid.lib" ]
+    libs += [ "dxguid" ]
     sources += [
       "d3d12/AdapterD3D12.cpp",
       "d3d12/AdapterD3D12.h",
diff -ur a/src/3rdparty/chromium/third_party/dawn/src/dawn/native/Surface.cpp b/src/3rdparty/chromium/third_party/dawn/src/dawn/native/Surface.cpp
--- a/src/3rdparty/chromium/third_party/dawn/src/dawn/native/Surface.cpp	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/dawn/src/dawn/native/Surface.cpp	2023-12-14 21:24:59.544827500 +0800
@@ -19,7 +19,7 @@
 #include "dawn/native/Instance.h"
 #include "dawn/native/SwapChain.h"
 
-#if DAWN_PLATFORM_IS(WINDOWS)
+#if DAWN_PLATFORM_IS(WINDOWS) && defined(_MSC_VER)
 #include <windows.ui.core.h>
 #include <windows.ui.xaml.controls.h>
 #endif  // DAWN_PLATFORM_IS(WINDOWS)
@@ -99,7 +99,7 @@
     }
 #endif  // DAWN_PLATFORM_IS(ANDROID)
 
-#if DAWN_PLATFORM_IS(WINDOWS)
+#if DAWN_PLATFORM_IS(WINDOWS) && defined(_MSC_VER)
 #if DAWN_PLATFORM_IS(WIN32)
     const SurfaceDescriptorFromWindowsHWND* hwndDesc = nullptr;
     FindInChain(descriptor->nextInChain, &hwndDesc);
@@ -205,12 +205,12 @@
         mHInstance = hwndDesc->hinstance;
         mHWND = hwndDesc->hwnd;
     } else if (coreWindowDesc) {
-#if DAWN_PLATFORM_IS(WINDOWS)
+#if DAWN_PLATFORM_IS(WINDOWS) && defined(_MSC_VER)
         mType = Type::WindowsCoreWindow;
         mCoreWindow = static_cast<IUnknown*>(coreWindowDesc->coreWindow);
 #endif  // DAWN_PLATFORM_IS(WINDOWS)
     } else if (swapChainPanelDesc) {
-#if DAWN_PLATFORM_IS(WINDOWS)
+#if DAWN_PLATFORM_IS(WINDOWS) && defined(_MSC_VER)
         mType = Type::WindowsSwapChainPanel;
         mSwapChainPanel = static_cast<IUnknown*>(swapChainPanelDesc->swapChainPanel);
 #endif  // DAWN_PLATFORM_IS(WINDOWS)
@@ -285,7 +285,7 @@
 IUnknown* Surface::GetCoreWindow() const {
     ASSERT(!IsError());
     ASSERT(mType == Type::WindowsCoreWindow);
-#if DAWN_PLATFORM_IS(WINDOWS)
+#if DAWN_PLATFORM_IS(WINDOWS) && defined(_MSC_VER)
     return mCoreWindow.Get();
 #else
     return nullptr;
@@ -295,7 +295,7 @@
 IUnknown* Surface::GetSwapChainPanel() const {
     ASSERT(!IsError());
     ASSERT(mType == Type::WindowsSwapChainPanel);
-#if DAWN_PLATFORM_IS(WINDOWS)
+#if DAWN_PLATFORM_IS(WINDOWS) && defined(_MSC_VER)
     return mSwapChainPanel.Get();
 #else
     return nullptr;
diff -ur a/src/3rdparty/chromium/third_party/dawn/src/dawn/native/d3d12/BackendD3D12.cpp b/src/3rdparty/chromium/third_party/dawn/src/dawn/native/d3d12/BackendD3D12.cpp
--- a/src/3rdparty/chromium/third_party/dawn/src/dawn/native/d3d12/BackendD3D12.cpp	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/dawn/src/dawn/native/d3d12/BackendD3D12.cpp	2023-12-14 21:24:59.576072200 +0800
@@ -51,6 +51,7 @@
             }
         }
 
+#ifdef _MSC_VER
         if (beginCaptureOnStartup) {
             ComPtr<IDXGraphicsAnalysis> graphicsAnalysis;
             if (functions->dxgiGetDebugInterface1 != nullptr &&
@@ -58,6 +59,7 @@
                 graphicsAnalysis->BeginCapture();
             }
         }
+#endif
     }
 
     if (FAILED(functions->createDxgiFactory2(dxgiFactoryFlags, IID_PPV_ARGS(&factory)))) {
diff -ur a/src/3rdparty/chromium/third_party/dawn/src/dawn/native/d3d12/d3d12_platform.h b/src/3rdparty/chromium/third_party/dawn/src/dawn/native/d3d12/d3d12_platform.h
--- a/src/3rdparty/chromium/third_party/dawn/src/dawn/native/d3d12/d3d12_platform.h	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/dawn/src/dawn/native/d3d12/d3d12_platform.h	2023-12-14 21:24:59.591702300 +0800
@@ -30,7 +30,9 @@
 
 // DXProgrammableCapture.h takes a dependency on other platform header
 // files, so it must be defined after them.
+#ifdef _MSC_VER
 #include <DXProgrammableCapture.h>  // NOLINT(build/include_order)
+#endif
 #include <dxgidebug.h>              // NOLINT(build/include_order)
 
 using Microsoft::WRL::ComPtr;
