diff -ur a/src/3rdparty/chromium/third_party/skia/BUILD.gn b/src/3rdparty/chromium/third_party/skia/BUILD.gn
--- a/src/3rdparty/chromium/third_party/skia/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/skia/BUILD.gn	2023-12-14 21:35:44.631245500 +0800
@@ -186,7 +186,7 @@
 opts("ssse3") {
   enabled = is_x86
   sources = skia_opts.ssse3_sources
-  if (!is_clang && is_win) {
+  if (!is_clang && is_win && !is_mingw) {
     defines = [ "SK_CPU_SSE_LEVEL=SK_CPU_SSE_LEVEL_SSSE3" ]
   } else {
     cflags = [ "-mssse3" ]
@@ -204,7 +204,7 @@
 opts("sse42") {
   enabled = is_x86
   sources = skia_opts.sse42_sources
-  if (!is_clang && is_win) {
+  if (!is_clang && is_win && !is_mingw) {
     defines = [ "SK_CPU_SSE_LEVEL=SK_CPU_SSE_LEVEL_SSE42" ]
   } else {
     cflags = [ "-msse4.2" ]
@@ -222,7 +222,7 @@
 opts("avx") {
   enabled = is_x86
   sources = skia_opts.avx_sources
-  if (is_win) {
+  if (is_win && !is_mingw) {
     cflags = [ "/arch:AVX" ]
   } else {
     cflags = [ "-mavx" ]
@@ -243,7 +243,7 @@
 opts("hsw") {
   enabled = is_x86
   sources = skia_opts.hsw_sources
-  if (is_win) {
+  if (is_win && !is_mingw) {
     cflags = [ "/arch:AVX2" ]
   } else {
     cflags = [ "-march=haswell" ]
@@ -264,7 +264,7 @@
 opts("skx") {
   enabled = is_x86
   sources = skia_opts.skx_sources
-  if (is_win) {
+  if (is_win && !is_mingw) {
     cflags = [ "/arch:AVX512" ]
   } else {
     cflags = [ "-march=skylake-avx512" ]
@@ -605,7 +605,7 @@
 
   public = [ "include/ports/SkTypeface_win.h" ]
   sources = [ "src/ports/SkFontHost_win.cpp" ]
-  libs = [ "Gdi32.lib" ]
+  libs = [ "gdi32" ]
 }
 
 if (skia_lex) {
@@ -1108,7 +1108,7 @@
     } else if (is_win && !skia_enable_winuwp) {
       sources += [ "src/gpu/ganesh/gl/win/GrGLMakeNativeInterface_win.cpp" ]
       if (target_cpu != "arm64") {
-        libs += [ "OpenGL32.lib" ]
+        libs += [ "opengl32" ]
       }
     } else {
       sources += [ "src/gpu/ganesh/gl/GrGLMakeNativeInterface_none.cpp" ]
@@ -1149,9 +1149,9 @@
       public_defines += [ "SK_ENABLE_D3D_DEBUG_LAYER" ]
     }
     libs += [
-      "d3d12.lib",
-      "dxgi.lib",
-      "d3dcompiler.lib",
+      "d3d12",
+      "dxgi",
+      "d3dcompiler",
     ]
   }
 
@@ -1564,15 +1564,15 @@
       "src/ports/SkOSLibrary_win.cpp",
     ]
     libs += [
-      "Ole32.lib",
-      "OleAut32.lib",
+      "ole32",
+      "oleaut32",
     ]
 
     if (!skia_enable_winuwp) {
       libs += [
-        "FontSub.lib",
-        "User32.lib",
-        "Usp10.lib",
+        "fontsub",
+        "user32",
+        "usp10",
       ]
     }
   } else {
@@ -1832,7 +1832,7 @@
   }
 
   config("cpp17") {
-    if (is_win) {
+    if (is_win && !is_mingw) {
       cflags_cc = [ "/std:c++17" ]
     } else {
       cflags_cc = [ "-std=c++17" ]
@@ -2018,9 +2018,9 @@
         ]
       } else if (is_win) {
         sources += [ "tools/gpu/gl/win/CreatePlatformGLTestContext_win.cpp" ]
-        libs += [ "Gdi32.lib" ]
+        libs += [ "gdi32" ]
         if (target_cpu != "arm64") {
-          libs += [ "OpenGL32.lib" ]
+          libs += [ "opengl32" ]
         }
       }
     }
@@ -2188,7 +2188,7 @@
       sources += [ "tools/AutoreleasePool.mm" ]
       frameworks += [ "Foundation.framework" ]
     } else if (is_win && !skia_enable_winuwp) {
-      libs += [ "DbgHelp.lib" ]
+      libs += [ "dbghelp" ]
     }
 
     defines = []
@@ -2961,7 +2961,7 @@
         "tools/fiddle/examples.cpp",
         "tools/fiddle/examples.h",
       ]
-      if (is_win) {
+      if (is_win && !is_mingw) {
         cflags = [
           "/wd4756",  # Overflow in constant arithmetic
           "/wd4305",  # truncation from 'double' to 'float'
diff -ur a/src/3rdparty/chromium/third_party/skia/gn/BUILDCONFIG.gn b/src/3rdparty/chromium/third_party/skia/gn/BUILDCONFIG.gn
--- a/src/3rdparty/chromium/third_party/skia/gn/BUILDCONFIG.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/skia/gn/BUILDCONFIG.gn	2023-12-14 21:35:44.693751600 +0800
@@ -66,6 +66,8 @@
 is_mac = current_os == "mac"
 is_wasm = current_os == "wasm"
 is_win = current_os == "win"
+is_mingw = is_win && (cxx == "g++" || cxx == "clang++" || cxx == "c++")
+is_msvc = is_win && !is_mingw
 
 # This is just to make the Dawn build files happy. Skia itself uses target_os = "linux"
 # for ChromeOS, so this variable will not affect Skia proper.
@@ -126,7 +128,7 @@
   }
 }
 
-if (target_os == "win") {
+if (is_msvc) {
   # By default we look for 2017 (Enterprise, Pro, and Community), then 2015. If MSVC is installed in a
   # non-default location, you can set win_vc to inform us where it is.
 
@@ -137,7 +139,7 @@
                         # directory.
 }
 
-if (target_os == "win") {
+if (is_msvc) {
   if (win_toolchain_version == "") {
     win_toolchain_version = exec_script("//gn/highest_version_dir.py",
                                         [
@@ -230,7 +232,7 @@
       [ "//gn/skia:warnings_for_public_headers" ]
 }
 
-if (is_win) {
+if (is_msvc) {
   # Windows tool chain
   set_default_toolchain("//gn/toolchain:msvc")
   default_toolchain_name = "msvc"
diff -ur a/src/3rdparty/chromium/third_party/skia/gn/skia/BUILD.gn b/src/3rdparty/chromium/third_party/skia/gn/skia/BUILD.gn
--- a/src/3rdparty/chromium/third_party/skia/gn/skia/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/skia/gn/skia/BUILD.gn	2023-12-14 21:38:17.021941200 +0800
@@ -62,7 +62,7 @@
   # Disable warnings about unknown attributes.
   # (These unknown attribute warnings are on by default, so we don't make
   # disabling them part of :warnings, as some targets remove :warnings.)
-  if (is_win && !is_clang) {
+  if (is_win && !is_mingw && !is_clang) {
     cflags += [
       "/wd5030",
       "/wd5051",
@@ -97,7 +97,7 @@
     asmflags += [ target_triple ]
   }
 
-  if (is_win) {
+  if (is_win && !is_mingw) {
     if (is_clang && target_cpu == "arm64") {
       cflags += [ "--target=arm64-windows" ]
     }
@@ -137,6 +137,13 @@
       "$win_sdk/Lib/$win_sdk_version/um/$target_cpu",
       "$win_vc/Tools/MSVC/$win_toolchain_version/lib/$target_cpu",
     ]
+  } else if (is_mingw) {
+    cflags_cc += [ "-std=gnu++17" ]
+    defines += [
+      "_CRT_SECURE_NO_WARNINGS",  # Disables warnings about sscanf().
+      "WIN32_LEAN_AND_MEAN",
+      "NOMINMAX",
+    ]
   } else {
     cflags += [
       "-fstrict-aliasing",
@@ -155,7 +162,7 @@
       "-mfpu=neon",
       "-mthumb",
     ]
-  } else if (current_cpu == "x86" && !is_win) {
+  } else if (current_cpu == "x86" && !is_msvc) {
     asmflags += [ "-m32" ]
     cflags += [
       "-m32",
@@ -165,7 +172,7 @@
     ldflags += [ "-m32" ]
   }
 
-  if (malloc != "" && !is_win) {
+  if (malloc != "" && !is_msvc) {
     cflags += [
       "-fno-builtin-malloc",
       "-fno-builtin-calloc",
@@ -319,7 +326,7 @@
       "-fsanitize-blacklist=$_suppressions",
     ]
 
-    if (is_win) {
+    if (is_win && !is_mingw) {
       cflags += [
         # On Release builds, we get strange warnings about string literals.
         "/GF-",
@@ -371,14 +378,14 @@
   cflags_objcc = []
 
   if (werror) {
-    if (is_win) {
+    if (is_win && !is_mingw) {
       cflags += [ "/WX" ]
     } else {
       cflags += [ "-Werror" ]
     }
   }
 
-  if (is_win) {
+  if (is_win && !is_mingw) {
     cflags += [
       "/W3",  # Turn on lots of warnings.
 
@@ -601,7 +608,7 @@
       "-gline-tables-only",
       "-funwind-tables",  # Helps make in-process backtraces fuller.
     ]
-  } else if (is_win) {
+  } else if (is_win && !is_mingw) {
     cflags = [ "/Z7" ]
     if (is_clang) {
       cflags += [ "-gcodeview-ghash" ]
@@ -619,7 +626,7 @@
 
 config("no_rtti") {
   if (sanitize != "ASAN") {  # -fsanitize=vptr requires RTTI
-    if (is_win) {
+    if (is_win && !is_mingw) {
       cflags_cc = [ "/GR-" ]
     } else {
       cflags_cc = [ "-fno-rtti" ]
@@ -630,7 +637,7 @@
 
 config("optimize") {
   ldflags = []
-  if (is_win) {
+  if (is_win && !is_mingw) {
     cflags = [
       "/O2",
       "/Zc:inline",
@@ -697,11 +704,13 @@
       "-rdynamic",
       "-Wl,-rpath,\$ORIGIN",
     ]
-  } else if (is_win) {
+  } else if (is_win && !is_mingw) {
     ldflags = [
       "/SUBSYSTEM:CONSOLE",  # Quiet "no subsystem specified; CONSOLE assumed".
       "/INCREMENTAL:NO",  # Quiet warnings about failing to incrementally link
                           # by never trying to.
     ]
+  } else if (is_mingw) {
+    ldflags = [ "-mconsole" ]
   }
 }
diff -ur a/src/3rdparty/chromium/third_party/skia/gn/toolchain/BUILD.gn b/src/3rdparty/chromium/third_party/skia/gn/toolchain/BUILD.gn
--- a/src/3rdparty/chromium/third_party/skia/gn/toolchain/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/skia/gn/toolchain/BUILD.gn	2023-12-14 21:35:44.740640100 +0800
@@ -321,6 +321,8 @@
       rpath = "-Wl,-soname,$soname"
       if (is_mac || is_ios) {
         rpath = "-Wl,-install_name,@rpath/$soname"
+      } else if (is_mingw) {
+        rpath =""
       }
 
       rspfile = "{{output}}.rsp"
@@ -344,6 +346,8 @@
       output_prefix = "lib"
       if (is_mac || is_ios) {
         default_output_extension = ".dylib"
+      } else if (is_mingw) {
+        default_output_extension = ".dll"
       } else {
         default_output_extension = ".so"
       }
@@ -373,6 +377,7 @@
       command = "$link {{ldflags}} $_start_group @$rspfile {{frameworks}} {{solibs}} $_end_group {{libs}} -o $exe_name"
 
       outputs = [ "$exe_name" ]
+      output_extension = ".exe"
       description = "link {{output}}"
       if (0 <= link_pool_depth) {
         pool = ":link_pool($default_toolchain)"
diff -ur a/src/3rdparty/chromium/third_party/skia/src/ports/SkFontHost_FreeType.cpp b/src/3rdparty/chromium/third_party/skia/src/ports/SkFontHost_FreeType.cpp
--- a/src/3rdparty/chromium/third_party/skia/src/ports/SkFontHost_FreeType.cpp	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/skia/src/ports/SkFontHost_FreeType.cpp	2023-12-14 21:35:44.834370200 +0800
@@ -71,7 +71,9 @@
 
 // SK_FREETYPE_MINIMUM_RUNTIME_VERSION 0x<major><minor><patch><flags>
 // Flag SK_FREETYPE_DLOPEN: also try dlopen to get newer features.
+#ifndef _WIN32
 #define SK_FREETYPE_DLOPEN (0x1)
+#endif
 #ifndef SK_FREETYPE_MINIMUM_RUNTIME_VERSION
 #  if defined(SK_BUILD_FOR_ANDROID_FRAMEWORK) || defined (SK_BUILD_FOR_GOOGLE3)
 #    define SK_FREETYPE_MINIMUM_RUNTIME_VERSION (((FREETYPE_MAJOR) << 24) | ((FREETYPE_MINOR) << 16) | ((FREETYPE_PATCH) << 8))
diff -ur a/src/3rdparty/chromium/third_party/skia/src/ports/SkScalerContext_win_dw.cpp b/src/3rdparty/chromium/third_party/skia/src/ports/SkScalerContext_win_dw.cpp
--- a/src/3rdparty/chromium/third_party/skia/src/ports/SkScalerContext_win_dw.cpp	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/skia/src/ports/SkScalerContext_win_dw.cpp	2023-12-14 21:35:44.959370300 +0800
@@ -566,7 +566,7 @@
 
     DWRITE_GLYPH_IMAGE_FORMATS f;
     IDWriteFontFace4* fontFace4 = this->getDWriteTypeface()->fDWriteFontFace4.get();
-    HRBM(fontFace4->GetGlyphImageFormats(glyph.getGlyphID(), 0, UINT32_MAX, &f),
+    HRBM(fontFace4->GetGlyphImageFormats_(glyph.getGlyphID(), 0, UINT32_MAX, &f),
          "Cannot get glyph image formats.");
     return f & DWRITE_GLYPH_IMAGE_FORMATS_PNG;
 }
@@ -580,7 +580,7 @@
 
     DWRITE_GLYPH_IMAGE_FORMATS f;
     IDWriteFontFace4* fontFace4 = this->getDWriteTypeface()->fDWriteFontFace4.get();
-    HRBM(fontFace4->GetGlyphImageFormats(glyph.getGlyphID(), 0, UINT32_MAX, &f),
+    HRBM(fontFace4->GetGlyphImageFormats_(glyph.getGlyphID(), 0, UINT32_MAX, &f),
          "Cannot get glyph image formats.");
     return f & DWRITE_GLYPH_IMAGE_FORMATS_SVG;
 }
diff -ur a/src/3rdparty/chromium/third_party/skia/src/xps/SkXPSDevice.cpp b/src/3rdparty/chromium/third_party/skia/src/xps/SkXPSDevice.cpp
--- a/src/3rdparty/chromium/third_party/skia/src/xps/SkXPSDevice.cpp	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/skia/src/xps/SkXPSDevice.cpp	2023-12-14 21:35:45.146858100 +0800
@@ -322,7 +322,7 @@
     return true;
 }
 
-static HRESULT subset_typeface(const SkXPSDevice::TypefaceUse& current) {
+HRESULT subset_typeface(const SkXPSDevice::TypefaceUse& current) {
     //The CreateFontPackage API is only supported on desktop, not in UWP
     #if defined(SK_WINUWP)
     return E_NOTIMPL;
