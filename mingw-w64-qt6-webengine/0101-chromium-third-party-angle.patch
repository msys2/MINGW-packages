diff -ur a/src/3rdparty/chromium/third_party/angle/BUILD.gn b/src/3rdparty/chromium/third_party/angle/BUILD.gn
--- a/src/3rdparty/chromium/third_party/angle/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/angle/BUILD.gn	2023-12-14 21:12:31.466703100 +0800
@@ -252,7 +252,7 @@
   }
 
   # Enable more default warnings on Windows.
-  if (is_win) {
+  if (is_msvc) {
     cflags += [
       "/we4244",  # Conversion: possible loss of data.
       "/we4312",  # Conversion: greater size.
@@ -315,7 +315,7 @@
   ldflags = [ "-Wl,--build-id" ]
 }
 
-_use_copy_compiler_dll = angle_has_build && is_win
+_use_copy_compiler_dll = angle_has_build && is_msvc
 
 if (_use_copy_compiler_dll) {
   copy("copy_compiler_dll") {
@@ -589,9 +589,9 @@
   if (is_win) {
     sources += libangle_gpu_info_util_win_sources
     if (!angle_is_winuwp) {
-      libs += [ "setupapi.lib" ]
+      libs += [ "setupapi" ]
     }
-    libs += [ "dxgi.lib" ]
+    libs += [ "dxgi" ]
   }
 
   if (is_linux || is_chromeos) {
@@ -740,7 +740,7 @@
       ":angle_version_info",
     ]
 
-    if (is_win) {
+    if (is_msvc) {
       # Necessary to suppress some system header xtree warnings in Release.
       # For some reason this warning doesn't get triggered in Chromium
       cflags = [ "/wd4718" ]
@@ -927,7 +927,7 @@
   ldflags = []
   defines += [ "LIBANGLE_IMPLEMENTATION" ]
 
-  if (is_win) {
+  if (is_msvc) {
     cflags += [ "/wd4530" ]  # C++ exception handler used, but unwind semantics
                              # are not enabled.
   }
@@ -1024,8 +1024,8 @@
 
   if (is_win && !angle_is_winuwp) {
     libs += [
-      "gdi32.lib",
-      "user32.lib",
+      "gdi32",
+      "user32",
     ]
   }
 
@@ -1050,7 +1050,7 @@
   }
 
   if (angle_enable_d3d11) {
-    libs += [ "dxguid.lib" ]
+    libs += [ "dxguid" ]
   }
 
   if (angle_enable_metal) {
diff -ur a/src/3rdparty/chromium/third_party/angle/src/common/mathutil.h b/src/3rdparty/chromium/third_party/angle/src/common/mathutil.h
--- a/src/3rdparty/chromium/third_party/angle/src/common/mathutil.h	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/angle/src/common/mathutil.h	2023-12-14 21:07:33.171926100 +0800
@@ -1039,8 +1039,8 @@
 }
 
 // Count the 1 bits.
-#if defined(_MSC_VER) && !defined(__clang__)
-#    if defined(_M_IX86) || defined(_M_X64)
+#if defined(ANGLE_PLATFORM_WINDOWS) && !defined(__clang__)
+#    if defined(_M_IX86) || defined(_M_X64) || defined(__i386__) || defined(__x86_64__)
 namespace priv
 {
 // Check POPCNT instruction support and cache the result.
@@ -1083,7 +1083,7 @@
 {
     if (priv::kHasPopcnt)
     {
-#        if defined(_M_X64)
+#        if defined(_M_X64) || defined(__x86_64__)
         return static_cast<int>(__popcnt64(bits));
 #        else   // x86
         return static_cast<int>(__popcnt(static_cast<uint32_t>(bits >> 32)) +
@@ -1116,7 +1116,7 @@
     return static_cast<int>(vget_lane_u64(vpaddl_u32(vpaddl_u16(vpaddl_u8(vsum))), 0));
 }
 #    endif  // defined(_M_IX86) || defined(_M_X64)
-#endif      // defined(_MSC_VER) && !defined(__clang__)
+#endif      // defined(ANGLE_PLATFORM_WINDOWS) && !defined(__clang__)
 
 #if defined(ANGLE_PLATFORM_POSIX) || defined(__clang__)
 inline int BitCount(uint32_t bits)
diff -ur a/src/3rdparty/chromium/third_party/angle/src/libANGLE/BlobCache.cpp b/src/3rdparty/chromium/third_party/angle/src/libANGLE/BlobCache.cpp
--- a/src/3rdparty/chromium/third_party/angle/src/libANGLE/BlobCache.cpp	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/angle/src/libANGLE/BlobCache.cpp	2023-12-14 21:07:33.234445900 +0800
@@ -14,7 +14,9 @@
 #include "libANGLE/histogram_macros.h"
 #include "platform/PlatformMethods.h"
 
+#ifndef USE_SYSTEM_ZLIB
 #define USE_SYSTEM_ZLIB
+#endif
 #include "compression_utils_portable.h"
 
 namespace egl
diff -ur a/src/3rdparty/chromium/third_party/angle/src/libANGLE/MemoryProgramCache.cpp b/src/3rdparty/chromium/third_party/angle/src/libANGLE/MemoryProgramCache.cpp
--- a/src/3rdparty/chromium/third_party/angle/src/libANGLE/MemoryProgramCache.cpp	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/angle/src/libANGLE/MemoryProgramCache.cpp	2023-12-14 21:07:33.265659400 +0800
@@ -8,7 +8,9 @@
 //   layer to warm up the cache from disk.
 
 // Include zlib first, otherwise FAR gets defined elsewhere.
+#ifndef USE_SYSTEM_ZLIB
 #define USE_SYSTEM_ZLIB
+#endif
 #include "compression_utils_portable.h"
 
 #include "libANGLE/MemoryProgramCache.h"
diff -ur a/src/3rdparty/chromium/third_party/angle/src/libANGLE/renderer/d3d/BUILD.gn b/src/3rdparty/chromium/third_party/angle/src/libANGLE/renderer/d3d/BUILD.gn
--- a/src/3rdparty/chromium/third_party/angle/src/libANGLE/renderer/d3d/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/angle/src/libANGLE/renderer/d3d/BUILD.gn	2023-12-14 21:11:34.169911200 +0800
@@ -27,14 +27,16 @@
 if (angle_enable_d3d9) {
   config("angle_d3d9_backend_config") {
     defines = [ "ANGLE_ENABLE_D3D9" ]
-    ldflags = [ "/DELAYLOAD:d3d9.dll" ]
+    if (!is_mingw) {
+      ldflags = [ "/DELAYLOAD:d3d9.dll" ]
+    }
   }
 
   angle_source_set("angle_d3d9_backend") {
     sources = d3d9_backend_sources
     libs = [
-      "d3d9.lib",
-      "delayimp.lib",
+      "d3d9",
+      "delayimp",
     ]
     public_deps = [ ":angle_d3d_shared" ]
     public_configs = [ ":angle_d3d9_backend_config" ]
@@ -52,7 +54,7 @@
   angle_source_set("angle_d3d11_backend") {
     sources = d3d11_backend_sources
 
-    libs = [ "dxguid.lib" ]
+    libs = [ "dxguid" ]
 
     public_deps = [ ":angle_d3d_shared" ]
     public_configs = [ ":angle_d3d11_backend_config" ]
diff -ur a/src/3rdparty/chromium/third_party/angle/util/capture/traces_export.h b/src/3rdparty/chromium/third_party/angle/util/capture/traces_export.h
--- a/src/3rdparty/chromium/third_party/angle/util/capture/traces_export.h	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/angle/util/capture/traces_export.h	2023-12-14 21:07:33.359440000 +0800
@@ -13,7 +13,7 @@
 
 // See util/util_export.h for details on import/export labels.
 #if !defined(ANGLE_TRACE_EXPORT)
-#    if defined(_WIN32)
+#    if defined(COMPILER_MSVC)
 #        if defined(ANGLE_TRACE_IMPLEMENTATION)
 #            define ANGLE_TRACE_EXPORT __declspec(dllexport)
 #        else
@@ -27,7 +27,7 @@
 #endif  // !defined(ANGLE_TRACE_EXPORT)
 
 #if !defined(ANGLE_TRACE_LOADER_EXPORT)
-#    if defined(_WIN32)
+#    if defined(COMPILER_MSVC)
 #        if defined(ANGLE_TRACE_LOADER_IMPLEMENTATION)
 #            define ANGLE_TRACE_LOADER_EXPORT __declspec(dllexport)
 #        else
diff -ur a/src/3rdparty/chromium/third_party/angle/util/util_export.h b/src/3rdparty/chromium/third_party/angle/util/util_export.h
--- a/src/3rdparty/chromium/third_party/angle/util/util_export.h	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/angle/util/util_export.h	2023-12-14 21:07:33.406228400 +0800
@@ -12,7 +12,7 @@
 // We define "IMPLEMENTATION" to get the dllexport label when compiling the
 // util library. Consumers get the dllimport label by default.
 #if !defined(ANGLE_UTIL_EXPORT)
-#    if defined(_WIN32)
+#    if defined(COMPILER_MSVC)
 #        if defined(LIBANGLE_UTIL_IMPLEMENTATION)
 #            define ANGLE_UTIL_EXPORT __declspec(dllexport)
 #        else
