diff --git a/src/3rdparty/chromium/third_party/angle/BUILD.gn b/src/3rdparty/chromium/third_party/angle/BUILD.gn
index 9a2144a..46017fd 100644
--- a/src/3rdparty/chromium/third_party/angle/BUILD.gn
+++ b/src/3rdparty/chromium/third_party/angle/BUILD.gn
@@ -288,7 +288,7 @@ config("extra_warnings") {
   }
 
   # Enable more default warnings on Windows.
-  if (is_win) {
+  if (is_msvc) {
     cflags += [
       "/we4244",  # Conversion: possible loss of data.
       "/we4312",  # Conversion: greater size.
@@ -351,7 +351,7 @@ config("build_id_config") {
   ldflags = [ "-Wl,--build-id" ]
 }
 
-_use_copy_compiler_dll = angle_has_build && is_win
+_use_copy_compiler_dll = angle_has_build && is_msvc
 
 if (_use_copy_compiler_dll) {
   copy("copy_compiler_dll") {
@@ -625,9 +625,9 @@ angle_static_library("angle_gpu_info_util") {
   if (is_win) {
     sources += libangle_gpu_info_util_win_sources
     if (!angle_is_winuwp) {
-      libs += [ "setupapi.lib" ]
+      libs += [ "setupapi" ]
     }
-    libs += [ "dxgi.lib" ]
+    libs += [ "dxgi" ]
   }
 
   if (is_linux || is_chromeos) {
@@ -770,7 +770,7 @@ template("translator_lib") {
       ":angle_version_info",
     ]
 
-    if (is_win) {
+    if (is_msvc) {
       # Necessary to suppress some system header xtree warnings in Release.
       # For some reason this warning doesn't get triggered in Chromium
       cflags = [ "/wd4718" ]
@@ -962,7 +962,7 @@ config("libANGLE_config") {
   ldflags = []
   defines += [ "LIBANGLE_IMPLEMENTATION" ]
 
-  if (is_win) {
+  if (is_msvc) {
     cflags += [ "/wd4530" ]  # C++ exception handler used, but unwind semantics
                              # are not enabled.
   }
@@ -1067,8 +1067,8 @@ angle_source_set("libANGLE_no_vulkan") {
 
   if (is_win && !angle_is_winuwp) {
     libs += [
-      "gdi32.lib",
-      "user32.lib",
+      "gdi32",
+      "user32",
     ]
   }
 
@@ -1097,7 +1097,7 @@ angle_source_set("libANGLE_no_vulkan") {
   }
 
   if (angle_enable_d3d11) {
-    libs += [ "dxguid.lib" ]
+    libs += [ "dxguid" ]
   }
 
   if (angle_enable_metal) {
@@ -1487,6 +1487,7 @@ if (angle_enable_gl_desktop_frontend) {
 
 angle_static_library("libGLESv2_static") {
   sources = libglesv2_sources
+  output_name = "libGLESv2"
   if (angle_enable_gl_desktop_frontend) {
     sources += libglesv2_gl_sources
     defines = [ "ANGLE_ENABLE_GL_DESKTOP_FRONTEND" ]
@@ -1632,6 +1633,7 @@ if (angle_enable_vulkan) {
 }
 
 libEGL_template("libEGL_static") {
+  output_name = "libEGL"
   target_type = "angle_static_library"
   public_configs = [ ":angle_static_config" ]
   deps = [ ":libGLESv2_static" ]
diff --git a/src/3rdparty/chromium/third_party/angle/src/compiler/translator/Compiler.cpp b/src/3rdparty/chromium/third_party/angle/src/compiler/translator/Compiler.cpp
index 5aa5e12..6aca147 100644
--- a/src/3rdparty/chromium/third_party/angle/src/compiler/translator/Compiler.cpp
+++ b/src/3rdparty/chromium/third_party/angle/src/compiler/translator/Compiler.cpp
@@ -1262,7 +1262,7 @@ bool TCompiler::checkAndSimplifyAST(TIntermBlock *root,
 
 bool TCompiler::resizeClipAndCullDistanceBuiltins(TIntermBlock *root)
 {
-    auto resizeVariable = [=](const ImmutableString &name, uint32_t size, uint32_t maxSize) {
+    auto resizeVariable = [=, this](const ImmutableString &name, uint32_t size, uint32_t maxSize) {
         // Skip if the variable is not used or implicitly has the maximum size
         if (size == 0 || size == maxSize)
             return true;
diff --git a/src/3rdparty/chromium/third_party/angle/src/libANGLE/BlobCache.cpp b/src/3rdparty/chromium/third_party/angle/src/libANGLE/BlobCache.cpp
index 9d147c6..0882e4b 100644
--- a/src/3rdparty/chromium/third_party/angle/src/libANGLE/BlobCache.cpp
+++ b/src/3rdparty/chromium/third_party/angle/src/libANGLE/BlobCache.cpp
@@ -14,7 +14,9 @@
 #include "libANGLE/histogram_macros.h"
 #include "platform/PlatformMethods.h"
 
+#ifndef USE_SYSTEM_ZLIB
 #define USE_SYSTEM_ZLIB
+#endif
 #include "compression_utils_portable.h"
 
 namespace egl
diff --git a/src/3rdparty/chromium/third_party/angle/src/libANGLE/MemoryProgramCache.cpp b/src/3rdparty/chromium/third_party/angle/src/libANGLE/MemoryProgramCache.cpp
index 7589a18..a04f272 100644
--- a/src/3rdparty/chromium/third_party/angle/src/libANGLE/MemoryProgramCache.cpp
+++ b/src/3rdparty/chromium/third_party/angle/src/libANGLE/MemoryProgramCache.cpp
@@ -8,7 +8,9 @@
 //   layer to warm up the cache from disk.
 
 // Include zlib first, otherwise FAR gets defined elsewhere.
+#ifndef USE_SYSTEM_ZLIB
 #define USE_SYSTEM_ZLIB
+#endif
 #include "compression_utils_portable.h"
 
 #include "libANGLE/MemoryProgramCache.h"
diff --git a/src/3rdparty/chromium/third_party/angle/src/libANGLE/renderer/d3d/BUILD.gn b/src/3rdparty/chromium/third_party/angle/src/libANGLE/renderer/d3d/BUILD.gn
index b5cbea8..ade290b 100644
--- a/src/3rdparty/chromium/third_party/angle/src/libANGLE/renderer/d3d/BUILD.gn
+++ b/src/3rdparty/chromium/third_party/angle/src/libANGLE/renderer/d3d/BUILD.gn
@@ -27,14 +27,16 @@ angle_source_set("angle_d3d_shared") {
 if (angle_enable_d3d9) {
   config("angle_d3d9_backend_config") {
     defines = [ "ANGLE_ENABLE_D3D9" ]
-    ldflags = [ "/DELAYLOAD:d3d9.dll" ]
+    if (is_msvc) {
+      ldflags = [ "/DELAYLOAD:d3d9.dll" ]
+    }
   }
 
   angle_source_set("angle_d3d9_backend") {
     sources = d3d9_backend_sources
     libs = [
-      "d3d9.lib",
-      "delayimp.lib",
+      "d3d9",
+      "delayimp",
     ]
     public_deps = [ ":angle_d3d_shared" ]
     public_configs = [ ":angle_d3d9_backend_config" ]
@@ -52,7 +54,7 @@ if (angle_enable_d3d11) {
   angle_source_set("angle_d3d11_backend") {
     sources = d3d11_backend_sources
 
-    libs = [ "dxguid.lib" ]
+    libs = [ "dxguid" ]
 
     public_deps = [ ":angle_d3d_shared" ]
     public_configs = [ ":angle_d3d11_backend_config" ]
diff --git a/src/3rdparty/chromium/third_party/angle/util/capture/traces_export.h b/src/3rdparty/chromium/third_party/angle/util/capture/traces_export.h
index 95a888c..048508d 100644
--- a/src/3rdparty/chromium/third_party/angle/util/capture/traces_export.h
+++ b/src/3rdparty/chromium/third_party/angle/util/capture/traces_export.h
@@ -13,7 +13,7 @@
 
 // See util/util_export.h for details on import/export labels.
 #if !defined(ANGLE_TRACE_EXPORT)
-#    if defined(_WIN32)
+#    if defined(_MSC_VER)
 #        if defined(ANGLE_TRACE_IMPLEMENTATION)
 #            define ANGLE_TRACE_EXPORT __declspec(dllexport)
 #        else
@@ -27,7 +27,7 @@
 #endif  // !defined(ANGLE_TRACE_EXPORT)
 
 #if !defined(ANGLE_TRACE_LOADER_EXPORT)
-#    if defined(_WIN32)
+#    if defined(_MSC_VER)
 #        if defined(ANGLE_TRACE_LOADER_IMPLEMENTATION)
 #            define ANGLE_TRACE_LOADER_EXPORT __declspec(dllexport)
 #        else
@@ -41,7 +41,7 @@
 #endif  // !defined(ANGLE_TRACE_LOADER_EXPORT)
 
 #if !defined(ANGLE_REPLAY_EXPORT)
-#    if defined(_WIN32)
+#    if defined(_MSC_VER)
 #        if defined(ANGLE_REPLAY_IMPLEMENTATION)
 #            define ANGLE_REPLAY_EXPORT __declspec(dllexport)
 #        else
diff --git a/src/3rdparty/chromium/third_party/angle/util/util_export.h b/src/3rdparty/chromium/third_party/angle/util/util_export.h
index 36fb6b7..8cd58b4 100644
--- a/src/3rdparty/chromium/third_party/angle/util/util_export.h
+++ b/src/3rdparty/chromium/third_party/angle/util/util_export.h
@@ -12,7 +12,7 @@
 // We define "IMPLEMENTATION" to get the dllexport label when compiling the
 // util library. Consumers get the dllimport label by default.
 #if !defined(ANGLE_UTIL_EXPORT)
-#    if defined(_WIN32)
+#    if defined(_MSC_VER)
 #        if defined(LIBANGLE_UTIL_IMPLEMENTATION)
 #            define ANGLE_UTIL_EXPORT __declspec(dllexport)
 #        else
