diff --git a/src/3rdparty/chromium/chrome/BUILD.gn b/src/3rdparty/chromium/chrome/BUILD.gn
index f5dea7b..de9bd79 100644
--- a/src/3rdparty/chromium/chrome/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/BUILD.gn
@@ -457,9 +457,11 @@ if (is_win) {
     }
   }
 
-  copy("copy_first_run") {
-    sources = [ "app/FirstRun" ]
-    outputs = [ "$root_out_dir/First Run" ]
+  if (is_msvc) {
+    copy("copy_first_run") {
+      sources = [ "app/FirstRun" ]
+      outputs = [ "$root_out_dir/First Run" ]
+    }
   }
 } else if (is_mac) {
   chrome_helper_name = chrome_product_full_name + " Helper"
diff --git a/src/3rdparty/chromium/chrome/browser/BUILD.gn b/src/3rdparty/chromium/chrome/browser/BUILD.gn
index 5ddca99..6c37fa9 100644
--- a/src/3rdparty/chromium/chrome/browser/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/browser/BUILD.gn
@@ -78,16 +78,18 @@ if (is_win) {
   # ldflags in GN aren't automatically inherited.
   config("browser_win_linker_flags") {
     libs = [
-      "credui.lib",
-      "cryptui.lib",
-      "dwmapi.lib",
-      "imm32.lib",  # chrome_elf_init.cc
-      "netapi32.lib",
-      "ndfapi.lib",  # For browser/net/net_error_diagnostics_dialog_win.h
-      "wbemuuid.lib",  # For browser/metrics /
-                       # antivirus_metrics_provider_win.cc
-    ]
-    ldflags = [ "/DELAYLOAD:ndfapi.dll" ]
+      "credui",
+      "cryptui",
+      "dwmapi",
+      "imm32",  # chrome_elf_init.cc
+      "netapi32",
+      "ndfapi",  # For browser/net/net_error_diagnostics_dialog_win.h
+      "wbemuuid",  # For browser/metrics /
+                   # antivirus_metrics_provider_win.cc
+    ]
+    if (is_msvc) {
+      ldflags = [ "/DELAYLOAD:ndfapi.dll" ]
+    }
   }
 }
 
@@ -6204,7 +6206,7 @@ static_library("browser") {
     ]
   }
 
-  if (is_mac || is_win) {
+  if (is_mac || is_msvc) {
     # Support for the recovery improved component.
     sources += [
       "component_updater/updater_state.cc",
@@ -6514,7 +6516,7 @@ static_library("browser") {
     ]
   }
 
-  if (is_win || is_mac) {
+  if (is_msvc || is_mac) {
     # Sources(generally "desktop OS importers") used only on Mac & Windows.
     sources += [
       "recovery/recovery_install_global_error.cc",
diff --git a/src/3rdparty/chromium/chrome/browser/media/router/discovery/BUILD.gn b/src/3rdparty/chromium/chrome/browser/media/router/discovery/BUILD.gn
index e2440c0..946a6c6 100644
--- a/src/3rdparty/chromium/chrome/browser/media/router/discovery/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/browser/media/router/discovery/BUILD.gn
@@ -104,6 +104,6 @@ static_library("discovery") {
 
   if (is_win) {
     sources += [ "discovery_network_list_win.cc" ]
-    libs = [ "iphlpapi.lib" ]
+    libs = [ "iphlpapi" ]
   }
 }
diff --git a/src/3rdparty/chromium/chrome/browser/win/conflicts/BUILD.gn b/src/3rdparty/chromium/chrome/browser/win/conflicts/BUILD.gn
index daf7e5b..5dd143f 100644
--- a/src/3rdparty/chromium/chrome/browser/win/conflicts/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/browser/win/conflicts/BUILD.gn
@@ -30,7 +30,7 @@ source_set("module_info") {
 
   deps = [ "//base:i18n" ]
 
-  libs = [ "crypt32.lib" ]
+  libs = [ "crypt32" ]
 
   if (safe_browsing_mode == 1) {
     deps += [
diff --git a/src/3rdparty/chromium/chrome/chrome_elf/BUILD.gn b/src/3rdparty/chromium/chrome/chrome_elf/BUILD.gn
index 37e2d2a..8ab1a03 100644
--- a/src/3rdparty/chromium/chrome/chrome_elf/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/chrome_elf/BUILD.gn
@@ -85,7 +85,7 @@ shared_library("chrome_elf") {
     "//build/config/win:delayloads_not_for_child_dll",
   ]
 
-  if (current_cpu == "x86") {
+  if (is_msvc && current_cpu == "x86") {
     # Don"t set an x64 base address (to avoid breaking HE-ASLR).
     ldflags = [ "/BASE:0x01c20000" ]
   }
@@ -162,8 +162,8 @@ static_library("nt_registry") {
   ]
 
   libs = [
-    "kernel32.lib",
-    "ntdll.lib",
+    "kernel32",
+    "ntdll",
   ]
 }
 
diff --git a/src/3rdparty/chromium/chrome/elevation_service/BUILD.gn b/src/3rdparty/chromium/chrome/elevation_service/BUILD.gn
index 6ae8694..89ef8cf 100644
--- a/src/3rdparty/chromium/chrome/elevation_service/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/elevation_service/BUILD.gn
@@ -94,8 +94,8 @@ source_set("lib") {
   public_deps = [ ":public_headers" ]
 
   libs = [
-    "crypt32.lib",
-    "rpcrt4.lib",
+    "crypt32",
+    "rpcrt4",
   ]
 }
 
diff --git a/src/3rdparty/chromium/chrome/installer/setup/BUILD.gn b/src/3rdparty/chromium/chrome/installer/setup/BUILD.gn
index b1ee7a7..7074a57 100644
--- a/src/3rdparty/chromium/chrome/installer/setup/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/installer/setup/BUILD.gn
@@ -13,7 +13,7 @@ buildflag_header("buildflags") {
   flags = [ "ZUCCHINI=$use_zucchini" ]
 }
 
-if (is_win) {
+if (is_msvc) {
   executable("setup") {
     sources = [
       "setup.ico",
diff --git a/src/3rdparty/chromium/chrome/installer/util/BUILD.gn b/src/3rdparty/chromium/chrome/installer/util/BUILD.gn
index 25f58f5..c7bd09d 100644
--- a/src/3rdparty/chromium/chrome/installer/util/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/installer/util/BUILD.gn
@@ -7,7 +7,7 @@ import("//build/config/chrome_build.gni")
 
 import("//testing/test.gni")
 
-if (is_win) {
+if (is_msvc) {
   source_set("metainstaller_utils") {
     sources = [
       "delete_after_reboot_helper.cc",
@@ -112,7 +112,7 @@ static_library("with_no_strings") {
   # targets have to be linked together in practice.
   allow_circular_includes_from = [ "//chrome/common:constants" ]
 
-  if (is_win) {
+  if (is_msvc) {
     sources = [
       "additional_parameters.cc",
       "additional_parameters.h",
@@ -257,7 +257,7 @@ source_set("constants") {
   }
 }
 
-if (is_win) {
+if (is_msvc) {
   source_set("did_run_support") {
     public = [ "update_did_run_state.h" ]
 
diff --git a/src/3rdparty/chromium/chrome/notification_helper/BUILD.gn b/src/3rdparty/chromium/chrome/notification_helper/BUILD.gn
index 0244dc3..fd4a85d 100644
--- a/src/3rdparty/chromium/chrome/notification_helper/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/notification_helper/BUILD.gn
@@ -8,6 +8,7 @@ import("//chrome/process_version_rc_template.gni")
 import("//testing/test.gni")
 
 executable("notification_helper") {
+  if (is_msvc) {
   sources = [
     "notification_helper.cc",
     "notification_helper.rc",
@@ -36,6 +37,7 @@ executable("notification_helper") {
   ]
 
   libs = [ "runtimeobject.lib" ]
+  }
 }
 
 source_set("lib") {
@@ -71,6 +73,7 @@ process_version_rc_template("version_resources") {
 }
 
 test("notification_helper_unittests") {
+  if (is_msvc) {
   use_xvfb = use_xvfb_in_this_config
 
   sources = [
@@ -93,4 +96,5 @@ test("notification_helper_unittests") {
   data_deps = [ ":notification_helper" ]
 
   libs = [ "runtimeobject.lib" ]
+  }
 }
diff --git a/src/3rdparty/chromium/chrome/test/BUILD.gn b/src/3rdparty/chromium/chrome/test/BUILD.gn
index 21cc17b..4a2078a 100644
--- a/src/3rdparty/chromium/chrome/test/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/test/BUILD.gn
@@ -715,7 +715,7 @@ static_library("test_support") {
     deps += [ "//ui/events:test_support" ]
   }
 
-  if (is_win) {
+  if (is_msvc) {
     sources += [
       "../browser/webshare/win/fake_buffer.cc",
       "../browser/webshare/win/fake_buffer.h",
@@ -5886,7 +5886,7 @@ if (is_linux || is_chromeos || is_mac || is_win || is_android) {
 
   sizes_test("chrome_sizes") {
     data_deps = [ "//chrome" ]
-    if (is_win) {
+    if (is_msvc) {
       data_deps += [ "//chrome/installer/mini_installer" ]
     }
     if (is_android) {
@@ -10633,7 +10633,7 @@ if (!is_android) {
       deps += [ "//chrome/browser/apps/app_shim:app_shim" ]
     }
 
-    if (is_win) {
+    if (is_msvc) {
       sources += [
         "base/always_on_top_window_killer_win.cc",
         "base/always_on_top_window_killer_win.h",
@@ -11444,7 +11444,7 @@ if (!is_android && !is_chromeos_device && !is_fuchsia && !is_qtwebengine) {
       deps += [ ":lacros_test_support_ui" ]
     }
 
-    if (is_win) {
+    if (is_msvc) {
       sources += [
         "../browser/downgrade/user_data_downgrade_browsertest.cc",
         "../browser/net/sandboxed_network_change_notifier_win_browsertest.cc",
diff --git a/src/3rdparty/chromium/chrome/tools/convert_dict/BUILD.gn b/src/3rdparty/chromium/chrome/tools/convert_dict/BUILD.gn
index caef30a..f70a1d7 100644
--- a/src/3rdparty/chromium/chrome/tools/convert_dict/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/tools/convert_dict/BUILD.gn
@@ -32,6 +32,9 @@ executable("convert_dict") {
 
   sources = [ "convert_dict.cc" ]
   configs += [ "//build/config/compiler:wexit_time_destructors" ]
+  if (is_mingw) {
+    ldflags = [ "-municode" ]
+  }
   deps = [
     ":lib",
     "//base",
diff --git a/src/3rdparty/chromium/chrome/updater/BUILD.gn b/src/3rdparty/chromium/chrome/updater/BUILD.gn
index 53ff82f..89a541a 100644
--- a/src/3rdparty/chromium/chrome/updater/BUILD.gn
+++ b/src/3rdparty/chromium/chrome/updater/BUILD.gn
@@ -15,7 +15,7 @@ import("//testing/test.gni")
 # check that the C++ includes match the build dependency graph.
 
 group("updater") {
-  if (is_win) {
+  if (is_msvc) {
     deps = [ "//chrome/updater/win" ]
   }
   if (is_mac) {
@@ -25,7 +25,7 @@ group("updater") {
     deps = [ "//chrome/updater/linux" ]
   }
 
-  if (is_win || is_mac || is_linux) {
+  if (is_msvc || is_mac || is_linux) {
     deps += [
       "//chrome/updater/test/qualification_app",
       "//chrome/updater/tools",
@@ -36,7 +36,7 @@ group("updater") {
 group("all") {
   testonly = true
 
-  if (is_win || is_mac || is_linux) {
+  if (is_msvc || is_mac || is_linux) {
     deps = [
       ":updater",
       ":updater_tests",
@@ -50,7 +50,7 @@ group("all") {
 
 # Conditional build is needed, otherwise the analyze script on Linux
 # requires all targets and it is going to include the targets below.
-if (is_win || is_mac || is_linux) {
+if (is_msvc || is_mac || is_linux) {
   source_set("base") {
     sources = [
       "action_handler.h",
@@ -225,7 +225,7 @@ if (is_win || is_mac || is_linux) {
       ]
     }
 
-    if (is_win) {
+    if (is_msvc) {
       sources += [
         "activity_impl_win.cc",
         "app/app_install_util_win.cc",
@@ -691,7 +691,7 @@ if (is_win || is_mac || is_linux) {
         }
       }
 
-      if (is_win) {
+      if (is_msvc) {
         inputs = [ "$root_build_dir/UpdaterSetup_test.exe" ]
         deps = [ "//chrome/updater/win/installer:installer_test" ]
 
@@ -841,7 +841,7 @@ if (is_win || is_mac || is_linux) {
       "//chrome/updater/test/test_installer:app_installers",
     ]
 
-    if (is_win) {
+    if (is_msvc) {
       sources += [
         "activity_impl_win_unittest.cc",
         "app/app_install_win_unittest.cc",
@@ -1038,7 +1038,7 @@ if (is_win || is_mac || is_linux) {
     }
   }
 
-  if (is_win) {
+  if (is_msvc) {
     copy("test_service_files") {
       testonly = true
       sources = [
@@ -1084,7 +1084,7 @@ if (is_win || is_mac || is_linux) {
         "//third_party/updater:old_updater",
       ]
     }
-    if (is_win) {
+    if (is_msvc) {
       deps += [ "//chrome/installer/util:with_no_strings" ]
       data_deps = [
         ":test_service_files",
@@ -1123,7 +1123,7 @@ if (is_win || is_mac || is_linux) {
         "//third_party/updater:old_updater",
       ]
     }
-    if (is_win) {
+    if (is_msvc) {
       deps += [ "//chrome/installer/util:with_no_strings" ]
       data_deps += [
         ":test_service_files",
@@ -1136,7 +1136,7 @@ if (is_win || is_mac || is_linux) {
     }
   }
 
-  if (is_win) {
+  if (is_msvc) {
     group("updater_tests_win_uac") {
       testonly = true
       data = [ "//testing/scripts/run_telemetry_as_googletest.py" ]
