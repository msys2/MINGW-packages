diff -ur a/src/3rdparty/chromium/chrome/BUILD.gn b/src/3rdparty/chromium/chrome/BUILD.gn
--- a/src/3rdparty/chromium/chrome/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/chrome/BUILD.gn	2023-12-14 02:09:19.038237700 +0800
@@ -432,9 +432,11 @@
     }
   }
 
-  copy("copy_first_run") {
-    sources = [ "app/FirstRun" ]
-    outputs = [ "$root_out_dir/First Run" ]
+  if (!is_mingw) {
+    copy("copy_first_run") {
+      sources = [ "app/FirstRun" ]
+      outputs = [ "$root_out_dir/First Run" ]
+    }
   }
 } else if (is_mac) {
   chrome_helper_name = chrome_product_full_name + " Helper"
diff -ur a/src/3rdparty/chromium/chrome/browser/BUILD.gn b/src/3rdparty/chromium/chrome/browser/BUILD.gn
--- a/src/3rdparty/chromium/chrome/browser/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/chrome/browser/BUILD.gn	2023-12-14 02:03:08.210141200 +0800
@@ -77,20 +77,22 @@
   # ldflags in GN aren't automatically inherited.
   config("browser_win_linker_flags") {
     libs = [
-      "credui.lib",
-      "cryptui.lib",
-      "dwmapi.lib",
-      "imm32.lib",  # chrome_elf_init.cc
-      "netapi32.lib",
-      "ndfapi.lib",  # For browser/net/net_error_diagnostics_dialog_win.h
-      "pdh.lib",  # For browser/private_working_set_snapshot.h
-      "wbemuuid.lib",  # For browser/metrics /
+      "credui",
+      "cryptui",
+      "dwmapi",
+      "imm32",         # chrome_elf_init.cc
+      "netapi32",
+      "ndfapi",        # For browser/net/net_error_diagnostics_dialog_win.h
+      "pdh",           # For browser/private_working_set_snapshot.h
+      "wbemuuid",      # For browser/metrics /
                        # antivirus_metrics_provider_win.cc
     ]
-    ldflags = [
-      "/DELAYLOAD:ndfapi.dll",
-      "/DELAYLOAD:pdh.dll",  # The task manager is rarely used.
-    ]
+    if (!is_mingw) {
+      ldflags = [
+        "/DELAYLOAD:ndfapi.dll",
+        "/DELAYLOAD:pdh.dll",  # The task manager is rarely used.
+      ]
+    }
   }
 }
 
@@ -5536,10 +5538,10 @@
   }
   if (is_win && toolkit_views) {
     libs += [
-      "secur32.lib",
+      "secur32",
 
       # Needed for _variant_t used in browser_dm_token_storage_win.cc
-      "comsuppw.lib",
+      "comsuppw",
     ]
     sources += [
       "accessibility/caption_settings_dialog.h",
@@ -5964,7 +5966,7 @@
     ]
   }
 
-  if (is_mac || is_win) {
+  if (is_mac || (is_win && !is_mingw)) {
     # Support for the recovery improved component.
     sources += [
       "component_updater/updater_state.cc",
@@ -6234,7 +6236,7 @@
     ]
   }
 
-  if (is_win || is_mac) {
+  if ((is_win && !is_mingw) || is_mac) {
     # Sources(generally "desktop OS importers") used only on Mac & Windows.
     sources += [
       "recovery/recovery_install_global_error.cc",
diff -ur a/src/3rdparty/chromium/chrome/browser/media/router/discovery/BUILD.gn b/src/3rdparty/chromium/chrome/browser/media/router/discovery/BUILD.gn
--- a/src/3rdparty/chromium/chrome/browser/media/router/discovery/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/chrome/browser/media/router/discovery/BUILD.gn	2023-12-14 02:03:10.522700100 +0800
@@ -103,6 +103,6 @@
 
   if (is_win) {
     sources += [ "discovery_network_list_win.cc" ]
-    libs = [ "iphlpapi.lib" ]
+    libs = [ "iphlpapi" ]
   }
 }
diff -ur a/src/3rdparty/chromium/chrome/browser/ui/BUILD.gn b/src/3rdparty/chromium/chrome/browser/ui/BUILD.gn
--- a/src/3rdparty/chromium/chrome/browser/ui/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/chrome/browser/ui/BUILD.gn	2023-12-14 02:03:10.866447200 +0800
@@ -4076,7 +4076,7 @@
       "//ui/base/ime",
       "//ui/events:dom_keycode_converter",
     ]
-    libs += [ "crypt32.lib" ]
+    libs += [ "crypt32" ]
 
     if (is_chrome_branded) {
       sources += [
diff -ur a/src/3rdparty/chromium/chrome/browser/win/conflicts/BUILD.gn b/src/3rdparty/chromium/chrome/browser/win/conflicts/BUILD.gn
--- a/src/3rdparty/chromium/chrome/browser/win/conflicts/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/chrome/browser/win/conflicts/BUILD.gn	2023-12-14 02:03:11.178953200 +0800
@@ -30,7 +30,7 @@
 
   deps = [ "//base:i18n" ]
 
-  libs = [ "crypt32.lib" ]
+  libs = [ "crypt32" ]
 
   if (safe_browsing_mode == 1) {
     deps += [
diff -ur a/src/3rdparty/chromium/chrome/chrome_cleaner/executables/BUILD.gn b/src/3rdparty/chromium/chrome/chrome_cleaner/executables/BUILD.gn
--- a/src/3rdparty/chromium/chrome/chrome_cleaner/executables/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/chrome/chrome_cleaner/executables/BUILD.gn	2023-12-14 02:03:11.319499900 +0800
@@ -47,11 +47,11 @@
     }
 
     libs = [
-      "crypt32.lib",
-      "mstask.lib",
-      "ntdll.lib",
-      "taskschd.lib",
-      "wintrust.lib",
+      "crypt32",
+      "mstask",
+      "ntdll",
+      "taskschd",
+      "wintrust",
     ]
     if (defined(invoker.libs)) {
       libs += invoker.libs
@@ -105,7 +105,7 @@
 chrome_cleaner_executable("chrome_cleanup_tool") {
   sources = [ "chrome_cleaner_main.cc" ]
 
-  libs = [ "comctl32.lib" ]
+  libs = [ "comctl32" ]
 
   deps = [
     "//chrome/chrome_cleaner/cleaner:cleaner_headers",
diff -ur a/src/3rdparty/chromium/chrome/chrome_cleaner/http/BUILD.gn b/src/3rdparty/chromium/chrome/chrome_cleaner/http/BUILD.gn
--- a/src/3rdparty/chromium/chrome/chrome_cleaner/http/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/chrome/chrome_cleaner/http/BUILD.gn	2023-12-14 02:03:11.475752100 +0800
@@ -25,7 +25,7 @@
     "user_agent.h",
   ]
 
-  libs = [ "Winhttp.lib" ]
+  libs = [ "winhttp" ]
 
   deps = [
     "//base",
diff -ur a/src/3rdparty/chromium/chrome/chrome_elf/BUILD.gn b/src/3rdparty/chromium/chrome/chrome_elf/BUILD.gn
--- a/src/3rdparty/chromium/chrome/chrome_elf/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/chrome/chrome_elf/BUILD.gn	2023-12-14 02:07:23.147605900 +0800
@@ -85,7 +85,7 @@
     "//build/config/win:delayloads_not_for_child_dll",
   ]
 
-  if (current_cpu == "x86") {
+  if (current_cpu == "x86" && !is_mingw) {
     # Don"t set an x64 base address (to avoid breaking HE-ASLR).
     ldflags = [ "/BASE:0x01c20000" ]
   }
@@ -164,8 +164,8 @@
   ]
 
   libs = [
-    "kernel32.lib",
-    "ntdll.lib",
+    "kernel32",
+    "ntdll",
   ]
 }
 
diff -ur a/src/3rdparty/chromium/chrome/elevation_service/BUILD.gn b/src/3rdparty/chromium/chrome/elevation_service/BUILD.gn
--- a/src/3rdparty/chromium/chrome/elevation_service/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/chrome/elevation_service/BUILD.gn	2023-12-14 02:03:12.757036500 +0800
@@ -94,8 +94,8 @@
   public_deps = [ ":public_headers" ]
 
   libs = [
-    "crypt32.lib",
-    "rpcrt4.lib",
+    "crypt32",
+    "rpcrt4",
   ]
 }
 
diff -ur a/src/3rdparty/chromium/chrome/installer/setup/BUILD.gn b/src/3rdparty/chromium/chrome/installer/setup/BUILD.gn
--- a/src/3rdparty/chromium/chrome/installer/setup/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/chrome/installer/setup/BUILD.gn	2023-12-16 20:03:29.783985300 +0800
@@ -14,7 +14,7 @@
   flags = [ "ZUCCHINI=$use_zucchini" ]
 }
 
-if (is_win) {
+if (is_win && !is_mingw) {
   executable("setup") {
     sources = [
       "setup.ico",
diff -ur a/src/3rdparty/chromium/chrome/installer/util/BUILD.gn b/src/3rdparty/chromium/chrome/installer/util/BUILD.gn
--- a/src/3rdparty/chromium/chrome/installer/util/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/chrome/installer/util/BUILD.gn	2023-12-16 20:41:47.705952800 +0800
@@ -7,7 +7,7 @@
 
 import("//testing/test.gni")
 
-if (is_win) {
+if (is_win && !is_mingw) {
   source_set("metainstaller_utils") {
     sources = [
       "delete_after_reboot_helper.cc",
@@ -112,7 +112,7 @@
   # targets have to be linked together in practice.
   allow_circular_includes_from = [ "//chrome/common:constants" ]
 
-  if (is_win) {
+  if (is_win && !is_mingw) {
     sources = [
       "additional_parameters.cc",
       "additional_parameters.h",
@@ -270,7 +270,7 @@
   }
 }
 
-if (is_win) {
+if (is_win && !is_mingw) {
   source_set("did_run_support") {
     public = [ "update_did_run_state.h" ]
 
diff -ur a/src/3rdparty/chromium/chrome/notification_helper/BUILD.gn b/src/3rdparty/chromium/chrome/notification_helper/BUILD.gn
--- a/src/3rdparty/chromium/chrome/notification_helper/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/chrome/notification_helper/BUILD.gn	2023-12-21 08:25:53.376705900 +0800
@@ -8,6 +8,7 @@
 import("//testing/test.gni")
 
 executable("notification_helper") {
+  if (!is_mingw) {
   sources = [
     "notification_helper.cc",
     "notification_helper.rc",
@@ -36,6 +37,7 @@
   ]
 
   libs = [ "runtimeobject.lib" ]
+  }
 }
 
 source_set("lib") {
@@ -71,6 +73,7 @@
 }
 
 test("notification_helper_unittests") {
+  if (!is_mingw) {
   use_xvfb = use_xvfb_in_this_config
 
   sources = [
@@ -93,4 +96,5 @@
   data_deps = [ ":notification_helper" ]
 
   libs = [ "runtimeobject.lib" ]
+  }
 }
diff -ur a/src/3rdparty/chromium/chrome/test/BUILD.gn b/src/3rdparty/chromium/chrome/test/BUILD.gn
--- a/src/3rdparty/chromium/chrome/test/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/chrome/test/BUILD.gn	2023-12-21 08:25:50.579842000 +0800
@@ -522,7 +522,7 @@
     ]
   }
 
-  if (is_win) {
+  if (is_win && !is_mingw) {
     sources += [
       "../browser/webshare/win/fake_buffer.cc",
       "../browser/webshare/win/fake_buffer.h",
@@ -5099,7 +5099,7 @@
 
   sizes_test("chrome_sizes") {
     data_deps = [ "//chrome" ]
-    if (is_win) {
+    if (is_win && !is_mingw) {
       data_deps += [ "//chrome/installer/mini_installer" ]
     }
     if (is_android) {
@@ -6261,7 +6261,7 @@
 
   public_deps = []
 
-  if (is_win && toolkit_views) {
+  if (is_win && !is_mingw && toolkit_views) {
     assert(toolkit_views)
     sources += [
       "../browser/accessibility/live_caption/live_caption_unavailability_notifier_unittest.cc",
@@ -7781,7 +7781,7 @@
       sources += [ "../browser/notifications/notification_platform_bridge_linux_unittest.cc" ]
     }
 
-    if (is_win) {
+    if (is_win && !is_mingw) {
       sources += [
         "../browser/notifications/notification_platform_bridge_win_unittest.cc",
         "../browser/notifications/win/notification_helper_launches_chrome_unittest.cc",
@@ -10023,7 +10023,7 @@
       deps += [ ":lacros_test_support_ui" ]
     }
 
-    if (is_win) {
+    if (is_win && !is_mingw) {
       sources += [
         "../browser/downgrade/user_data_downgrade_browsertest.cc",
         "../browser/notifications/notification_platform_bridge_win_interactive_uitest.cc",
diff -ur a/src/3rdparty/chromium/chrome/tools/convert_dict/BUILD.gn b/src/3rdparty/chromium/chrome/tools/convert_dict/BUILD.gn
--- a/src/3rdparty/chromium/chrome/tools/convert_dict/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/chrome/tools/convert_dict/BUILD.gn	2023-12-14 02:03:14.350747100 +0800
@@ -32,6 +32,9 @@
 
   sources = [ "convert_dict.cc" ]
   configs += [ "//build/config/compiler:wexit_time_destructors" ]
+  if (is_mingw) {
+    ldflags = [ "-municode" ]
+  }
   deps = [
     ":lib",
     "//base",
diff -ur a/src/3rdparty/chromium/chrome/updater/BUILD.gn b/src/3rdparty/chromium/chrome/updater/BUILD.gn
--- a/src/3rdparty/chromium/chrome/updater/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/chrome/updater/BUILD.gn	2023-12-16 19:19:09.182101700 +0800
@@ -15,7 +15,7 @@
 # check that the C++ includes match the build dependency graph.
 
 group("updater") {
-  if (is_win) {
+  if (is_win && !is_mingw) {
     deps = [ "//chrome/updater/win" ]
   }
   if (is_mac) {
@@ -25,7 +25,7 @@
     deps = [ "//chrome/updater/linux" ]
   }
 
-  if (is_win || is_mac || is_linux) {
+  if ((is_win && !is_mingw) || is_mac || is_linux) {
     deps += [
       "//chrome/updater/test/qualification_app",
       "//chrome/updater/tools",
@@ -36,7 +36,7 @@
 group("all") {
   testonly = true
 
-  if (is_win || is_mac || is_linux) {
+  if ((is_win && !is_mingw) || is_mac || is_linux) {
     deps = [
       ":updater",
       ":updater_tests",
@@ -47,7 +47,7 @@
 
 # Conditional build is needed, otherwise the analyze script on Linux
 # requires all targets and it is going to include the targets below.
-if (is_win || is_mac || is_linux) {
+if ((is_win && !is_mingw) || is_mac || is_linux) {
   source_set("base") {
     sources = [
       "action_handler.h",
@@ -211,7 +211,7 @@
       ]
     }
 
-    if (is_win) {
+    if (is_win && !is_mingw) {
       sources += [
         "activity_impl_win.cc",
         "app/app_install_win.cc",
@@ -636,7 +636,7 @@
         }
       }
 
-      if (is_win) {
+      if (is_win && !is_mingw) {
         inputs = [ "$root_build_dir/UpdaterSetup_test.exe" ]
         deps = [ "//chrome/updater/win/installer:installer_test" ]
 
@@ -724,7 +724,7 @@
       "test/data/signed.exe",  # Payload used by network tests.
     ]
 
-    if (is_win) {
+    if (is_win && !is_mingw) {
       sources += [
         # TODO(crbug.com/1402743) - eliminate the dependency on //chrome/test.
         "//chrome/test/base/process_inspector_win.cc",
@@ -907,7 +907,7 @@
     }
   }
 
-  if (is_win) {
+  if (is_win && !is_mingw) {
     copy("test_service_files") {
       testonly = true
       sources = [
@@ -951,7 +951,7 @@
         "//third_party/updater:old_updater",
       ]
     }
-    if (is_win) {
+    if (is_win && !is_mingw) {
       deps += [ "//chrome/installer/util:with_no_strings" ]
       data_deps = [
         ":test_service_files",
@@ -988,7 +988,7 @@
         "//third_party/updater:old_updater",
       ]
     }
-    if (is_win) {
+    if (is_win && !is_mingw) {
       deps += [ "//chrome/installer/util:with_no_strings" ]
       data_deps += [
         ":test_service_files",
@@ -1001,7 +1001,7 @@
     }
   }
 
-  if (is_win) {
+  if (is_win && !is_mingw) {
     group("updater_tests_win_uac") {
       testonly = true
       data = [ "//testing/scripts/run_telemetry_as_googletest.py" ]
