diff --git a/src/3rdparty/chromium/media/audio/BUILD.gn b/src/3rdparty/chromium/media/audio/BUILD.gn
index 22818e4..ba49252 100644
--- a/src/3rdparty/chromium/media/audio/BUILD.gn
+++ b/src/3rdparty/chromium/media/audio/BUILD.gn
@@ -233,13 +233,26 @@ jumbo_source_set("audio") {
       "win/waveout_output_win.cc",
       "win/waveout_output_win.h",
     ]
+    if (is_mingw) {
+      sources -= [
+        "win/audio_low_latency_input_win.cc",
+        "win/audio_low_latency_input_win.h",
+        "win/audio_low_latency_output_win.cc",
+        "win/audio_low_latency_output_win.h",
+        "win/audio_manager_win.cc",
+        "win/audio_manager_win.h",
+        "win/audio_session_event_listener_win.cc",
+        "win/audio_session_event_listener_win.h",
+      ]
+    }
 
     deps += [ "//media/base/win:media_foundation_util" ]
 
     libs += [
-      "dxguid.lib",
-      "setupapi.lib",
-      "winmm.lib",
+      "dxguid",
+      "ksuser",
+      "setupapi",
+      "winmm",
     ]
   }
 
diff --git a/src/3rdparty/chromium/media/audio/audio_manager.cc b/src/3rdparty/chromium/media/audio/audio_manager.cc
index d5db493..d3f41fc 100644
--- a/src/3rdparty/chromium/media/audio/audio_manager.cc
+++ b/src/3rdparty/chromium/media/audio/audio_manager.cc
@@ -112,12 +112,16 @@ AudioManager::~AudioManager() {
 std::unique_ptr<AudioManager> AudioManager::Create(
     std::unique_ptr<AudioThread> audio_thread,
     AudioLogFactory* audio_log_factory) {
+#if BUILDFLAG(IS_MINGW) // missing CreateAudioManager
+  return nullptr;
+#else
   std::unique_ptr<AudioManager> manager =
       CreateAudioManager(std::move(audio_thread), audio_log_factory);
 #if BUILDFLAG(ENABLE_WEBRTC)
   manager->InitializeDebugRecording();
 #endif
   return manager;
+#endif
 }
 
 // static
diff --git a/src/3rdparty/chromium/media/audio/simple_sources.cc b/src/3rdparty/chromium/media/audio/simple_sources.cc
index 8866b22..9b4d6c3 100644
--- a/src/3rdparty/chromium/media/audio/simple_sources.cc
+++ b/src/3rdparty/chromium/media/audio/simple_sources.cc
@@ -7,6 +7,7 @@
 #include <stddef.h>
 
 #include <algorithm>
+#include <cstring>
 #include <memory>
 #include <string_view>
 
diff --git a/src/3rdparty/chromium/media/audio/win/core_audio_util_win.cc b/src/3rdparty/chromium/media/audio/win/core_audio_util_win.cc
index 2117947..7563819 100644
--- a/src/3rdparty/chromium/media/audio/win/core_audio_util_win.cc
+++ b/src/3rdparty/chromium/media/audio/win/core_audio_util_win.cc
@@ -183,21 +183,21 @@ ChannelConfig GuessChannelConfig(WORD channels) {
     case 2:
       DVLOG(2) << "KSAUDIO_SPEAKER_STEREO";
       return KSAUDIO_SPEAKER_STEREO;
-    case 3:
-      DVLOG(2) << "KSAUDIO_SPEAKER_2POINT1";
-      return KSAUDIO_SPEAKER_2POINT1;
+//    case 3:
+//      DVLOG(2) << "KSAUDIO_SPEAKER_2POINT1";
+//      return KSAUDIO_SPEAKER_2POINT1;
     case 4:
       DVLOG(2) << "KSAUDIO_SPEAKER_QUAD";
       return KSAUDIO_SPEAKER_QUAD;
-    case 5:
-      DVLOG(2) << "KSAUDIO_SPEAKER_5POINT0";
-      return KSAUDIO_SPEAKER_5POINT0;
+//    case 5:
+//      DVLOG(2) << "KSAUDIO_SPEAKER_5POINT0";
+//      return KSAUDIO_SPEAKER_5POINT0;
     case 6:
       DVLOG(2) << "KSAUDIO_SPEAKER_5POINT1";
       return KSAUDIO_SPEAKER_5POINT1;
-    case 7:
-      DVLOG(2) << "KSAUDIO_SPEAKER_7POINT0";
-      return KSAUDIO_SPEAKER_7POINT0;
+//    case 7:
+//      DVLOG(2) << "KSAUDIO_SPEAKER_7POINT0";
+//      return KSAUDIO_SPEAKER_7POINT0;
     case 8:
       DVLOG(2) << "KSAUDIO_SPEAKER_7POINT1";
       return KSAUDIO_SPEAKER_7POINT1;
diff --git a/src/3rdparty/chromium/media/audio/win/device_enumeration_win.cc b/src/3rdparty/chromium/media/audio/win/device_enumeration_win.cc
index 11b1678..08da9a7 100644
--- a/src/3rdparty/chromium/media/audio/win/device_enumeration_win.cc
+++ b/src/3rdparty/chromium/media/audio/win/device_enumeration_win.cc
@@ -74,6 +74,7 @@ static bool GetDeviceNamesWinImpl(EDataFlow data_flow,
     device.unique_id =
         base::WideToUTF8(static_cast<WCHAR*>(endpoint_device_id));
 
+#if !defined(COMPILER_GCC) // missing Microsoft::WRL::ComPtr<IPropertyStore>
     // Retrieve user-friendly name of endpoint device.
     // Example: "Microphone (Realtek High Definition Audio)".
     Microsoft::WRL::ComPtr<IPropertyStore> properties;
@@ -96,6 +97,7 @@ static bool GetDeviceNamesWinImpl(EDataFlow data_flow,
       if (!suffix.empty())
         device.device_name += suffix;
     }
+#endif
 
     // Add combination of user-friendly and unique name to the output list.
     device_names->push_back(device);
diff --git a/src/3rdparty/chromium/media/base/audio_bus.cc b/src/3rdparty/chromium/media/base/audio_bus.cc
index dd24d58..f0352bf 100644
--- a/src/3rdparty/chromium/media/base/audio_bus.cc
+++ b/src/3rdparty/chromium/media/base/audio_bus.cc
@@ -7,6 +7,7 @@
 #include <stddef.h>
 #include <stdint.h>
 
+#include <cstring>
 #include <limits>
 #include <utility>
 
diff --git a/src/3rdparty/chromium/media/base/audio_parameters.h b/src/3rdparty/chromium/media/base/audio_parameters.h
index 30b47cc..eca253a 100644
--- a/src/3rdparty/chromium/media/base/audio_parameters.h
+++ b/src/3rdparty/chromium/media/base/audio_parameters.h
@@ -28,7 +28,7 @@ namespace media {
 // instead of in Audio{Input,Output}Buffer to be able to calculate size like so.
 // Use a constexpr for the alignment value that's the same as
 // AudioBus::kChannelAlignment, since MSVC doesn't accept the latter to be used.
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 #pragma warning(push)
 #pragma warning(disable : 4324)  // Disable warning for added padding.
 #endif
@@ -56,7 +56,7 @@ struct MEDIA_SHMEM_EXPORT ALIGNAS(kParametersAlignment)
   uint32_t bitstream_data_size;
   uint32_t bitstream_frames;
 };
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 #pragma warning(pop)
 #endif
 
diff --git a/src/3rdparty/chromium/media/base/win/BUILD.gn b/src/3rdparty/chromium/media/base/win/BUILD.gn
index ada8856..54569c4 100644
--- a/src/3rdparty/chromium/media/base/win/BUILD.gn
+++ b/src/3rdparty/chromium/media/base/win/BUILD.gn
@@ -7,12 +7,14 @@ import("//build/config/jumbo.gni")
 assert(is_win)
 
 config("delay_load_mf") {
-  ldflags = [
-    "/DELAYLOAD:d3d11.dll",
-    "/DELAYLOAD:mf.dll",
-    "/DELAYLOAD:mfplat.dll",
-    "/DELAYLOAD:mfreadwrite.dll",
-  ]
+  if (is_msvc) {
+    ldflags = [
+      "/DELAYLOAD:d3d11.dll",
+      "/DELAYLOAD:mf.dll",
+      "/DELAYLOAD:mfplat.dll",
+      "/DELAYLOAD:mfreadwrite.dll",
+    ]
+  }
 }
 
 jumbo_component("media_foundation_util") {
@@ -32,12 +34,12 @@ jumbo_component("media_foundation_util") {
     "//media/base",
   ]
   libs = [
-    "d3d11.lib",
-    "mf.lib",
-    "mfplat.lib",
-    "mfreadwrite.lib",
-    "dxguid.lib",
-    "dxgi.lib",
+    "d3d11",
+    "mf",
+    "mfplat",
+    "mfreadwrite",
+    "dxguid",
+    "dxgi",
   ]
 
   # MediaFoundation is not available on Windows N, so must be delay loaded.
@@ -57,9 +59,9 @@ component("color_space_util_win") {
     "//ui/gfx:color_space",
   ]
   libs = [
-    "mf.lib",
-    "mfplat.lib",
-    "mfreadwrite.lib",
+    "mf",
+    "mfplat",
+    "mfreadwrite",
   ]
 
   # MediaFoundation is not available on Windows N, so must be delay loaded.
diff --git a/src/3rdparty/chromium/media/base/win/mf_helpers.cc b/src/3rdparty/chromium/media/base/win/mf_helpers.cc
index 2648082..28e3804 100644
--- a/src/3rdparty/chromium/media/base/win/mf_helpers.cc
+++ b/src/3rdparty/chromium/media/base/win/mf_helpers.cc
@@ -28,7 +28,9 @@
 namespace media {
 
 using Microsoft::WRL::ComPtr;
+#if !defined(COMPILER_GCC)
 using Microsoft::WRL::MakeAndInitialize;
+#endif
 
 namespace {
 
@@ -134,6 +136,7 @@ HRESULT AddEncryptAttributes(const DecryptConfig& decrypt_config,
                              GUID* last_key_id) {
   DVLOG(3) << __func__;
 
+#if !defined(COMPILER_GCC) // missing MFSampleEncryptionProtectionScheme
   MFSampleEncryptionProtectionScheme mf_protection_scheme;
   if (decrypt_config.encryption_scheme() == EncryptionScheme::kCenc) {
     mf_protection_scheme = MFSampleEncryptionProtectionScheme::
@@ -190,6 +193,7 @@ HRESULT AddEncryptAttributes(const DecryptConfig& decrypt_config,
   GUID key_id = GetGUIDFromString(decrypt_config.key_id());
   RETURN_IF_FAILED(mf_sample->SetGUID(MFSampleExtension_Content_KeyID, key_id));
   *last_key_id = key_id;
+#endif
 
   // IV
   size_t iv_length = decrypt_config.iv().length();
@@ -205,6 +209,7 @@ HRESULT AddEncryptAttributes(const DecryptConfig& decrypt_config,
       reinterpret_cast<const uint8_t*>(decrypt_config.iv().c_str()),
       iv_length));
 
+#if !defined(COMPILER_GCC) // missing MFSampleExtension_Encryption_SubSample_Mapping
   // Handle subsample entries.
   const auto& subsample_entries = decrypt_config.subsamples();
   if (subsample_entries.empty()) {
@@ -223,6 +228,7 @@ HRESULT AddEncryptAttributes(const DecryptConfig& decrypt_config,
       MFSampleExtension_Encryption_SubSample_Mapping,
       reinterpret_cast<const uint8_t*>(mf_subsample_entries.data()),
       mf_sample_entries_size));
+#endif
 
   return S_OK;
 }
@@ -610,6 +616,7 @@ HRESULT CreateDecryptConfigFromSample(
 
   EncryptionScheme encryption_scheme = EncryptionScheme::kUnencrypted;
   UINT32 mf_protection_scheme = 0;
+#if !defined(COMPILER_GCC) // missing MFSampleExtension_Encryption_ProtectionScheme
   RETURN_IF_FAILED(mf_sample->GetUINT32(
       MFSampleExtension_Encryption_ProtectionScheme, &mf_protection_scheme));
   switch (mf_protection_scheme) {
@@ -628,6 +635,7 @@ HRESULT CreateDecryptConfigFromSample(
                   << mf_protection_scheme;
       return MF_E_UNEXPECTED;
   }
+#endif
 
   // IV
   UINT32 iv_length = 0;
@@ -654,6 +662,7 @@ HRESULT CreateDecryptConfigFromSample(
   base::win::ScopedCoMem<MediaFoundationSubsampleEntry> subsample_mappings;
   uint32_t subsample_mappings_size = 0;
 
+#if !defined(COMPILER_GCC) // missing MFSampleExtension_Encryption_SubSample_Mapping
   // If `MFSampleExtension_Encryption_SubSample_Mapping` attribute doesn't
   // exist, we should not fail the call. i.e., Encrypted audio content.
   if (SUCCEEDED(mf_sample->GetAllocatedBlob(
@@ -672,6 +681,7 @@ HRESULT CreateDecryptConfigFromSample(
       }
     }
   }
+#endif
 
   // Key ID
   const auto key_id_string = GetStringFromGUID(key_id);
@@ -683,6 +693,7 @@ HRESULT CreateDecryptConfigFromSample(
   if (encryption_scheme == EncryptionScheme::kCenc) {
     *decrypt_config =
         DecryptConfig::CreateCencConfig(key_id_string, iv_string, subsamples);
+#if !defined(COMPILER_GCC) // missing MFSampleExtension_Encryption_*
   } else {
     EncryptionPattern encryption_pattern;
 
@@ -702,6 +713,7 @@ HRESULT CreateDecryptConfigFromSample(
     DVLOG(3) << __func__ << ": encryption_pattern=" << encryption_pattern;
     *decrypt_config = DecryptConfig::CreateCbcsConfig(
         key_id_string, iv_string, subsamples, encryption_pattern);
+#endif
   }
 
   return S_OK;
diff --git a/src/3rdparty/chromium/media/capture/video/create_video_capture_device_factory.cc b/src/3rdparty/chromium/media/capture/video/create_video_capture_device_factory.cc
index f00517a..8a7c1c8 100644
--- a/src/3rdparty/chromium/media/capture/video/create_video_capture_device_factory.cc
+++ b/src/3rdparty/chromium/media/capture/video/create_video_capture_device_factory.cc
@@ -19,7 +19,7 @@
 #include "media/capture/video/chromeos/public/cros_features.h"
 #include "media/capture/video/chromeos/video_capture_device_factory_chromeos.h"
 #include "media/capture/video/linux/video_capture_device_factory_linux.h"
-#elif BUILDFLAG(IS_WIN)
+#elif BUILDFLAG(IS_MSVC)
 #include "media/capture/video/win/video_capture_device_factory_win.h"
 #elif BUILDFLAG(IS_APPLE)
 #include "media/capture/video/apple/video_capture_device_factory_apple.h"
@@ -62,7 +62,7 @@ CreatePlatformSpecificVideoCaptureDeviceFactory(
   if (base::SysInfo::IsRunningOnChromeOS())
     return std::make_unique<VideoCaptureDeviceFactoryChromeOS>(ui_task_runner);
   return std::make_unique<VideoCaptureDeviceFactoryLinux>(ui_task_runner);
-#elif BUILDFLAG(IS_WIN)
+#elif BUILDFLAG(IS_MSVC)
   return std::make_unique<VideoCaptureDeviceFactoryWin>();
 #elif BUILDFLAG(IS_APPLE)
   return std::make_unique<VideoCaptureDeviceFactoryApple>();
diff --git a/src/3rdparty/chromium/media/capture/video/video_capture_buffer_tracker_factory_impl.cc b/src/3rdparty/chromium/media/capture/video/video_capture_buffer_tracker_factory_impl.cc
index a6c9565..9842145 100644
--- a/src/3rdparty/chromium/media/capture/video/video_capture_buffer_tracker_factory_impl.cc
+++ b/src/3rdparty/chromium/media/capture/video/video_capture_buffer_tracker_factory_impl.cc
@@ -24,7 +24,7 @@ namespace media {
 
 VideoCaptureBufferTrackerFactoryImpl::VideoCaptureBufferTrackerFactoryImpl() {}
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 VideoCaptureBufferTrackerFactoryImpl::VideoCaptureBufferTrackerFactoryImpl(
     scoped_refptr<DXGIDeviceManager> dxgi_device_manager)
     : dxgi_device_manager_(std::move(dxgi_device_manager)) {}
@@ -44,7 +44,7 @@ VideoCaptureBufferTrackerFactoryImpl::CreateTracker(
       return std::make_unique<GpuMemoryBufferTrackerApple>();
 #elif BUILDFLAG(IS_LINUX)
       return std::make_unique<V4L2GpuMemoryBufferTracker>();
-#elif BUILDFLAG(IS_WIN)
+#elif BUILDFLAG(IS_MSVC)
       if (!dxgi_device_manager_) {
         return nullptr;
       }
@@ -53,7 +53,7 @@ VideoCaptureBufferTrackerFactoryImpl::CreateTracker(
       return nullptr;
 #endif
     default:
-#if BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC)
+#if BUILDFLAG(IS_MSVC) || BUILDFLAG(IS_MAC)
       // Since Windows and macOS capturer outputs NV12 only for GMBs and I420
       // for software frames, the pixel format is used to choose between shmem
       // and gmb trackers. Therefore I420 shmem trackers must not be reusable
@@ -71,7 +71,7 @@ VideoCaptureBufferTrackerFactoryImpl::CreateTrackerForExternalGpuMemoryBuffer(
     gfx::GpuMemoryBufferHandle handle) {
 #if BUILDFLAG(IS_APPLE)
   return std::make_unique<GpuMemoryBufferTrackerApple>(handle.io_surface);
-#elif BUILDFLAG(IS_WIN)
+#elif BUILDFLAG(IS_MSVC)
   if (handle.type != gfx::DXGI_SHARED_HANDLE) {
     return nullptr;
   }
diff --git a/src/3rdparty/chromium/media/capture/video/win/BUILD.gn b/src/3rdparty/chromium/media/capture/video/win/BUILD.gn
index a06417b..ae4a334 100644
--- a/src/3rdparty/chromium/media/capture/video/win/BUILD.gn
+++ b/src/3rdparty/chromium/media/capture/video/win/BUILD.gn
@@ -34,6 +34,22 @@ source_set("win") {
     "video_capture_device_win.cc",
     "video_capture_device_win.h",
   ]
+  if (is_mingw) {
+    sources -= [
+      "gpu_memory_buffer_tracker_win.cc",
+      "gpu_memory_buffer_tracker_win.h",
+      "sink_filter_win.cc",
+      "sink_filter_win.h",
+      "sink_input_pin_win.cc",
+      "sink_input_pin_win.h",
+      "video_capture_device_factory_win.cc",
+      "video_capture_device_factory_win.h",
+      "video_capture_device_mf_win.cc",
+      "video_capture_device_mf_win.h",
+      "video_capture_device_win.cc",
+      "video_capture_device_win.h",
+    ]
+  }
 
   public_deps = [
     "//media/capture:capture_base",
@@ -59,17 +75,19 @@ source_set("win") {
   ]
 
   libs = [
-    "mf.lib",
-    "mfplat.lib",
-    "mfreadwrite.lib",
-    "mfuuid.lib",
+    "mf",
+    "mfplat",
+    "mfreadwrite",
+    "mfuuid",
   ]
 
-  ldflags = [
-    "/DELAYLOAD:mf.dll",
-    "/DELAYLOAD:mfplat.dll",
-    "/DELAYLOAD:mfreadwrite.dll",
-  ]
+  if (is_msvc) {
+    ldflags = [
+      "/DELAYLOAD:mf.dll",
+      "/DELAYLOAD:mfplat.dll",
+      "/DELAYLOAD:mfreadwrite.dll",
+    ]
+  }
 }
 
 source_set("win_unittests") {
@@ -100,17 +118,19 @@ source_set("win_unittests") {
   ]
 
   libs = [
-    "mf.lib",
-    "mfplat.lib",
-    "mfreadwrite.lib",
-    "mfuuid.lib",
-    "dxguid.lib",
-  ]
-  ldflags = [
-    "/DELAYLOAD:mf.dll",
-    "/DELAYLOAD:mfplat.dll",
-    "/DELAYLOAD:mfreadwrite.dll",
+    "mf",
+    "mfplat",
+    "mfreadwrite",
+    "mfuuid",
+    "dxguid",
   ]
+  if (is_msvc) {
+    ldflags = [
+      "/DELAYLOAD:mf.dll",
+      "/DELAYLOAD:mfplat.dll",
+      "/DELAYLOAD:mfreadwrite.dll",
+    ]
+  }
 
   testonly = true
 }
diff --git a/src/3rdparty/chromium/media/capture/video/win/video_capture_device_factory_win.h b/src/3rdparty/chromium/media/capture/video/win/video_capture_device_factory_win.h
index b637a3b..0d48ae8 100644
--- a/src/3rdparty/chromium/media/capture/video/win/video_capture_device_factory_win.h
+++ b/src/3rdparty/chromium/media/capture/video/win/video_capture_device_factory_win.h
@@ -132,7 +132,9 @@ class CAPTURE_EXPORT VideoCaptureDeviceFactoryWin
 
   class UsageReportHandler;
   scoped_refptr<UsageReportHandler> report_handler_;
+#if !defined(COMPILER_GCC) // missing Microsoft::WRL::ComPtr<IMFSensorActivityMonitor>
   Microsoft::WRL::ComPtr<IMFSensorActivityMonitor> monitor_;
+#endif
 
   base::WeakPtrFactory<VideoCaptureDeviceFactoryWin> weak_ptr_factory_{this};
 };
diff --git a/src/3rdparty/chromium/media/cdm/BUILD.gn b/src/3rdparty/chromium/media/cdm/BUILD.gn
index a6a4378..ce09be0 100644
--- a/src/3rdparty/chromium/media/cdm/BUILD.gn
+++ b/src/3rdparty/chromium/media/cdm/BUILD.gn
@@ -129,7 +129,7 @@ source_set("cdm") {
     public_deps += [ "//components/crash/core/common:crash_key" ]
   }
 
-  if (is_win) {
+  if (is_msvc) {
     sources += [
       "media_foundation_cdm_data.cc",
       "media_foundation_cdm_data.h",
diff --git a/src/3rdparty/chromium/media/cdm/api/content_decryption_module_export.h b/src/3rdparty/chromium/media/cdm/api/content_decryption_module_export.h
index 932708d..daea1c8 100644
--- a/src/3rdparty/chromium/media/cdm/api/content_decryption_module_export.h
+++ b/src/3rdparty/chromium/media/cdm/api/content_decryption_module_export.h
@@ -7,7 +7,7 @@
 
 // Define CDM_API so that functionality implemented by the CDM module
 // can be exported to consumers.
-#if defined(_WIN32)
+#if defined(_MSC_VER)
 
 #if defined(CDM_IMPLEMENTATION)
 #define CDM_API __declspec(dllexport)
@@ -15,9 +15,9 @@
 #define CDM_API __declspec(dllimport)
 #endif  // defined(CDM_IMPLEMENTATION)
 
-#else  // defined(_WIN32)
+#else  // defined(_MSC_VER)
 #define CDM_API __attribute__((visibility("default")))
-#endif  // defined(_WIN32)
+#endif  // defined(_MSC_VER)
 
 // Define CDM_CLASS_API to export class types. We have to add visibility
 // attributes to make sure virtual tables in CDM consumer and CDM implementation
@@ -25,14 +25,14 @@
 // about that for the internal symbols, but it has only become a practical issue
 // after introduction of LTO devirtualization. See more details on
 // https://crbug.com/609564#c35
-#if defined(_WIN32)
+#if defined(_MSC_VER)
 #if defined(__clang__)
 #define CDM_CLASS_API [[clang::lto_visibility_public]]
 #else
 #define CDM_CLASS_API
 #endif
-#else  // defined(_WIN32)
+#else  // defined(_MSC_VER)
 #define CDM_CLASS_API __attribute__((visibility("default")))
-#endif  // defined(_WIN32)
+#endif  // defined(_MSC_VER)
 
 #endif  // CDM_CONTENT_DECRYPTION_MODULE_EXPORT_H_
diff --git a/src/3rdparty/chromium/media/cdm/cdm_auxiliary_helper.cc b/src/3rdparty/chromium/media/cdm/cdm_auxiliary_helper.cc
index 8440bc8..65f10cd 100644
--- a/src/3rdparty/chromium/media/cdm/cdm_auxiliary_helper.cc
+++ b/src/3rdparty/chromium/media/cdm/cdm_auxiliary_helper.cc
@@ -8,10 +8,10 @@
 #include "media/base/cdm_context.h"
 #include "media/cdm/cdm_helpers.h"
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 #include "media/cdm/media_foundation_cdm_data.h"
 #include "third_party/abseil-cpp/absl/types/optional.h"
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 
 namespace media {
 
@@ -55,7 +55,7 @@ void CdmAuxiliaryHelper::GetStorageId(uint32_t version, StorageIdCB callback) {
   std::move(callback).Run(version, std::vector<uint8_t>());
 }
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 void CdmAuxiliaryHelper::GetMediaFoundationCdmData(
     GetMediaFoundationCdmDataCB callback) {
   std::move(callback).Run(std::make_unique<MediaFoundationCdmData>(
@@ -66,6 +66,6 @@ void CdmAuxiliaryHelper::SetCdmClientToken(
     const std::vector<uint8_t>& client_token) {}
 
 void CdmAuxiliaryHelper::OnCdmEvent(CdmEvent event, HRESULT hresult) {}
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 
 }  // namespace media
diff --git a/src/3rdparty/chromium/media/cdm/cdm_auxiliary_helper.h b/src/3rdparty/chromium/media/cdm/cdm_auxiliary_helper.h
index 30628a6..af77389 100644
--- a/src/3rdparty/chromium/media/cdm/cdm_auxiliary_helper.h
+++ b/src/3rdparty/chromium/media/cdm/cdm_auxiliary_helper.h
@@ -69,11 +69,11 @@ class MEDIA_EXPORT CdmAuxiliaryHelper : public CdmAllocator,
                          ChallengePlatformCB callback) override;
   void GetStorageId(uint32_t version, StorageIdCB callback) override;
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   void GetMediaFoundationCdmData(GetMediaFoundationCdmDataCB callback) override;
   void SetCdmClientToken(const std::vector<uint8_t>& client_token) override;
   void OnCdmEvent(CdmEvent event, HRESULT hresult) override;
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 };
 
 }  // namespace media
diff --git a/src/3rdparty/chromium/media/cdm/cdm_document_service.h b/src/3rdparty/chromium/media/cdm/cdm_document_service.h
index 4daf875..e8d8119 100644
--- a/src/3rdparty/chromium/media/cdm/cdm_document_service.h
+++ b/src/3rdparty/chromium/media/cdm/cdm_document_service.h
@@ -52,10 +52,10 @@ class MEDIA_EXPORT CdmDocumentService {
       base::OnceCallback<void(uint32_t version,
                               const std::vector<uint8_t>& storage_id)>;
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   using GetMediaFoundationCdmDataCB =
       base::OnceCallback<void(std::unique_ptr<MediaFoundationCdmData>)>;
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 
   // Allows authorized services to verify that the underlying platform is
   // trusted. An example of a trusted platform is a Chrome OS device in
@@ -82,7 +82,7 @@ class MEDIA_EXPORT CdmDocumentService {
   //                 version does not exist.
   virtual void GetStorageId(uint32_t version, StorageIdCB callback) = 0;
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   // Gets the Media Foundation cdm data for the origin associated with the CDM.
   virtual void GetMediaFoundationCdmData(
       GetMediaFoundationCdmDataCB callback) = 0;
@@ -97,7 +97,7 @@ class MEDIA_EXPORT CdmDocumentService {
   // logic, e.g. disable the CDM in the current robustness level. For error
   // events, the `hresult` provides more details about the error.
   virtual void OnCdmEvent(CdmEvent event, HRESULT hresult) = 0;
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 };
 
 }  // namespace media
diff --git a/src/3rdparty/chromium/media/cdm/mock_helpers.h b/src/3rdparty/chromium/media/cdm/mock_helpers.h
index 06b1a34..874b13f 100644
--- a/src/3rdparty/chromium/media/cdm/mock_helpers.h
+++ b/src/3rdparty/chromium/media/cdm/mock_helpers.h
@@ -55,12 +55,12 @@ class MockCdmAuxiliaryHelper : public CdmAuxiliaryHelper {
   MOCK_METHOD1(GetStorageIdCalled, std::vector<uint8_t>(uint32_t version));
   void GetStorageId(uint32_t version, StorageIdCB callback) override;
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   MOCK_METHOD(void,
               GetMediaFoundationCdmData,
               (GetMediaFoundationCdmDataCB callback),
               (override));
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 
  private:
   std::unique_ptr<CdmAllocator> allocator_;
diff --git a/src/3rdparty/chromium/media/cdm/win/media_foundation_cdm.h b/src/3rdparty/chromium/media/cdm/win/media_foundation_cdm.h
index 0d17455..71b10f3 100644
--- a/src/3rdparty/chromium/media/cdm/win/media_foundation_cdm.h
+++ b/src/3rdparty/chromium/media/cdm/win/media_foundation_cdm.h
@@ -5,6 +5,8 @@
 #ifndef MEDIA_CDM_WIN_MEDIA_FOUNDATION_CDM_H_
 #define MEDIA_CDM_WIN_MEDIA_FOUNDATION_CDM_H_
 
+#if defined(COMPILER_MSVC)
+
 #include <mfcontentdecryptionmodule.h>
 #include <wrl.h>
 
@@ -187,4 +189,6 @@ class MEDIA_EXPORT MediaFoundationCdm final : public ContentDecryptionModule,
 
 }  // namespace media
 
+#endif
+
 #endif  // MEDIA_CDM_WIN_MEDIA_FOUNDATION_CDM_H_
diff --git a/src/3rdparty/chromium/media/device_monitors/BUILD.gn b/src/3rdparty/chromium/media/device_monitors/BUILD.gn
index 8be9855..b637491 100644
--- a/src/3rdparty/chromium/media/device_monitors/BUILD.gn
+++ b/src/3rdparty/chromium/media/device_monitors/BUILD.gn
@@ -37,7 +37,7 @@ source_set("device_monitors") {
     frameworks = [ "Foundation.framework" ]
   }
 
-  if (is_win) {
+  if (is_msvc) {
     sources += [
       "system_message_window_win.cc",
       "system_message_window_win.h",
diff --git a/src/3rdparty/chromium/media/filters/BUILD.gn b/src/3rdparty/chromium/media/filters/BUILD.gn
index 5c289dc..dfc6da4 100644
--- a/src/3rdparty/chromium/media/filters/BUILD.gn
+++ b/src/3rdparty/chromium/media/filters/BUILD.gn
@@ -214,7 +214,7 @@ jumbo_source_set("filters") {
       "passthrough_dts_audio_decoder.h",
     ]
   }
-  if (is_win) {
+  if (is_msvc) {
     sources += [
       "win/media_foundation_audio_decoder.cc",
       "win/media_foundation_audio_decoder.h",
diff --git a/src/3rdparty/chromium/media/filters/ffmpeg_demuxer.cc b/src/3rdparty/chromium/media/filters/ffmpeg_demuxer.cc
index d96d4cb..4565586 100644
--- a/src/3rdparty/chromium/media/filters/ffmpeg_demuxer.cc
+++ b/src/3rdparty/chromium/media/filters/ffmpeg_demuxer.cc
@@ -120,6 +120,7 @@ static base::TimeDelta ExtractStartTime(AVStream* stream) {
   if (stream->start_time != kNoFFmpegTimestamp)
     start_time = ConvertFromTimeBase(stream->time_base, stream->start_time);
 
+#if LIBAVFORMAT_VERSION_MAJOR < 60
   // Next try to use the first DTS value, for codecs where we know PTS == DTS
   // (excludes all H26x codecs). The start time must be returned in PTS.
   if (av_stream_get_first_dts(stream) != kInvalidPTSMarker &&
@@ -131,6 +132,7 @@ static base::TimeDelta ExtractStartTime(AVStream* stream) {
     if (first_pts < start_time)
       start_time = first_pts;
   }
+#endif
 
   return start_time;
 }
@@ -1655,8 +1657,10 @@ FFmpegDemuxerStream* FFmpegDemuxer::FindStreamWithLowestStartTimestamp(
   for (const auto& stream : streams_) {
     if (!stream || stream->IsEnabled() != enabled)
       continue;
+#if LIBAVFORMAT_VERSION_MAJOR < 60
     if (av_stream_get_first_dts(stream->av_stream()) == kInvalidPTSMarker)
       continue;
+#endif
     if (!lowest_start_time_stream ||
         stream->start_time() < lowest_start_time_stream->start_time()) {
       lowest_start_time_stream = stream.get();
@@ -1676,8 +1680,10 @@ FFmpegDemuxerStream* FFmpegDemuxer::FindPreferredStreamForSeeking(
     if (stream->type() != DemuxerStream::VIDEO)
       continue;
 
+#if LIBAVFORMAT_VERSION_MAJOR < 60
     if (av_stream_get_first_dts(stream->av_stream()) == kInvalidPTSMarker)
       continue;
+#endif
 
     if (!stream->IsEnabled())
       continue;
diff --git a/src/3rdparty/chromium/media/gpu/BUILD.gn b/src/3rdparty/chromium/media/gpu/BUILD.gn
index d8b14b1..d78cb3e 100644
--- a/src/3rdparty/chromium/media/gpu/BUILD.gn
+++ b/src/3rdparty/chromium/media/gpu/BUILD.gn
@@ -258,6 +258,12 @@ component("gpu") {
       "windows/vp9_video_rate_control_wrapper.cc",
       "windows/vp9_video_rate_control_wrapper.h",
     ]
+    if (is_mingw) {
+      sources -= [
+        "windows/media_foundation_video_encode_accelerator_win.cc",
+        "windows/media_foundation_video_encode_accelerator_win.h",
+      ]
+    }
     if (enable_hevc_parser_and_hw_decoder) {
       sources += [
         "windows/d3d11_h265_accelerator.cc",
@@ -285,21 +291,23 @@ component("gpu") {
       "//ui/display",
     ]
     libs += [
-      "d3d9.lib",
-      "d3d11.lib",
-      "dxva2.lib",
-      "strmiids.lib",
-      "mf.lib",
-      "mfplat.lib",
-      "mfuuid.lib",
-    ]
-    ldflags += [
-      "/DELAYLOAD:d3d9.dll",
-      "/DELAYLOAD:d3d11.dll",
-      "/DELAYLOAD:dxva2.dll",
-      "/DELAYLOAD:mf.dll",
-      "/DELAYLOAD:mfplat.dll",
+      "d3d9",
+      "d3d11",
+      "dxva2",
+      "strmiids",
+      "mf",
+      "mfplat",
+      "mfuuid",
     ]
+    if (is_msvc) {
+      ldflags += [
+        "/DELAYLOAD:d3d9.dll",
+        "/DELAYLOAD:d3d11.dll",
+        "/DELAYLOAD:dxva2.dll",
+        "/DELAYLOAD:mf.dll",
+        "/DELAYLOAD:mfplat.dll",
+      ]
+    }
   }
 
   if (use_ozone) {
@@ -379,7 +387,7 @@ source_set("common") {
     "//ui/gfx/geometry",
   ]
 
-  if (is_win || use_vaapi) {
+  if (is_msvc || use_vaapi) {
     sources += [
       "vp9_svc_layers.cc",
       "vp9_svc_layers.h",
diff --git a/src/3rdparty/chromium/media/gpu/command_buffer_helper.cc b/src/3rdparty/chromium/media/gpu/command_buffer_helper.cc
index 072a29c..81e3aa4 100644
--- a/src/3rdparty/chromium/media/gpu/command_buffer_helper.cc
+++ b/src/3rdparty/chromium/media/gpu/command_buffer_helper.cc
@@ -118,7 +118,7 @@ class CommandBufferHelperImpl
     return stub_->channel()->gpu_channel_manager()->shared_image_manager();
   }
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   gpu::DXGISharedHandleManager* GetDXGISharedHandleManager() override {
     if (!stub_)
       return nullptr;
diff --git a/src/3rdparty/chromium/media/gpu/command_buffer_helper.h b/src/3rdparty/chromium/media/gpu/command_buffer_helper.h
index a2f7fa5..240daaa 100644
--- a/src/3rdparty/chromium/media/gpu/command_buffer_helper.h
+++ b/src/3rdparty/chromium/media/gpu/command_buffer_helper.h
@@ -81,7 +81,7 @@ class MEDIA_GPU_EXPORT CommandBufferHelper
 
   virtual gpu::SharedImageManager* GetSharedImageManager() = 0;
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   virtual gpu::DXGISharedHandleManager* GetDXGISharedHandleManager() = 0;
 #endif
 
diff --git a/src/3rdparty/chromium/media/gpu/gpu_video_encode_accelerator_factory.cc b/src/3rdparty/chromium/media/gpu/gpu_video_encode_accelerator_factory.cc
index 75f1fae..402d78e 100644
--- a/src/3rdparty/chromium/media/gpu/gpu_video_encode_accelerator_factory.cc
+++ b/src/3rdparty/chromium/media/gpu/gpu_video_encode_accelerator_factory.cc
@@ -84,7 +84,7 @@ std::unique_ptr<VideoEncodeAccelerator> CreateVTVEA() {
 }
 #endif
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 std::unique_ptr<VideoEncodeAccelerator> CreateMediaFoundationVEA(
     const gpu::GpuPreferences& gpu_preferences,
     const gpu::GpuDriverBugWorkarounds& gpu_workarounds,
@@ -135,7 +135,7 @@ std::vector<VEAFactoryFunction> GetVEAFactoryFunctions(
 #if BUILDFLAG(IS_MAC)
   vea_factory_functions.push_back(base::BindRepeating(&CreateVTVEA));
 #endif
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   vea_factory_functions.push_back(base::BindRepeating(
       &CreateMediaFoundationVEA, gpu_preferences, gpu_workarounds, gpu_device));
 #endif
diff --git a/src/3rdparty/chromium/media/gpu/windows/d3d11_decoder_configurator.cc b/src/3rdparty/chromium/media/gpu/windows/d3d11_decoder_configurator.cc
index 9363bab..606221d 100644
--- a/src/3rdparty/chromium/media/gpu/windows/d3d11_decoder_configurator.cc
+++ b/src/3rdparty/chromium/media/gpu/windows/d3d11_decoder_configurator.cc
@@ -187,9 +187,11 @@ D3D11DecoderConfigurator::CreateOutputTexture(ComD3D11Device device,
       device->CreateTexture2D(&output_texture_desc_, nullptr, &texture);
   if (FAILED(hr))
     return {D3D11Status::Codes::kCreateDecoderOutputTextureFailed, hr};
+#if defined(COMPILER_MSVC)
   hr = SetDebugName(texture.Get(), "D3D11Decoder_ConfiguratorOutput");
   if (FAILED(hr))
     return {D3D11Status::Codes::kCreateDecoderOutputTextureFailed, hr};
+#endif
   return texture;
 }
 
diff --git a/src/3rdparty/chromium/media/gpu/windows/d3d11_texture_selector.cc b/src/3rdparty/chromium/media/gpu/windows/d3d11_texture_selector.cc
index 0c4d836..e0c2904 100644
--- a/src/3rdparty/chromium/media/gpu/windows/d3d11_texture_selector.cc
+++ b/src/3rdparty/chromium/media/gpu/windows/d3d11_texture_selector.cc
@@ -250,9 +250,11 @@ std::unique_ptr<Texture2DWrapper> CopyTextureSelector::CreateTextureWrapper(
   if (FAILED(device->CreateTexture2D(&texture_desc, nullptr, &out_texture)))
     return nullptr;
 
+#if defined(COMPILER_MSVC)
   if (FAILED(
           SetDebugName(out_texture.Get(), "D3D11Decoder_CopyTextureSelector")))
     return nullptr;
+#endif
 
   return std::make_unique<CopyingTexture2DWrapper>(
       size,
diff --git a/src/3rdparty/chromium/media/gpu/windows/d3d11_texture_wrapper.cc b/src/3rdparty/chromium/media/gpu/windows/d3d11_texture_wrapper.cc
index 9a101f0..789712f 100644
--- a/src/3rdparty/chromium/media/gpu/windows/d3d11_texture_wrapper.cc
+++ b/src/3rdparty/chromium/media/gpu/windows/d3d11_texture_wrapper.cc
@@ -161,6 +161,7 @@ D3D11Status DefaultTexture2DWrapper::Init(
   if (!SupportsFormat(dxgi_format_))
     return D3D11Status::Codes::kUnsupportedTextureFormatForBind;
 
+#if defined(COMPILER_MSVC)
   // Generate mailboxes and holders.
   // TODO(liberato): Verify that this is really okay off the GPU main thread.
   // The current implementation is.
@@ -191,6 +192,7 @@ D3D11Status DefaultTexture2DWrapper::Init(
       dxgi_format_, video_device_, texture, array_slice,
       std::move(picture_buffer), std::move(gpu_resource_init_cb));
   return D3D11Status::Codes::kOk;
+#endif
 }
 
 void DefaultTexture2DWrapper::OnError(D3D11Status status) {
@@ -234,6 +236,7 @@ DefaultTexture2DWrapper::GpuResources::GpuResources(
     return;
   }
 
+#if defined(COMPILER_MSVC)
   // Usage flags to allow the display compositor to draw from it, video to
   // decode, and allow webgl/canvas access to read from it.
   uint32_t usage =
@@ -327,6 +330,7 @@ DefaultTexture2DWrapper::GpuResources::GpuResources(
 
   std::move(gpu_resource_init_cb)
       .Run(std::move(picture_buffer), std::move(shared_image_rep));
+#endif
 }
 
 DefaultTexture2DWrapper::GpuResources::~GpuResources() = default;
diff --git a/src/3rdparty/chromium/media/gpu/windows/mf_audio_encoder.cc b/src/3rdparty/chromium/media/gpu/windows/mf_audio_encoder.cc
index 3d4bf15..f2674d9 100644
--- a/src/3rdparty/chromium/media/gpu/windows/mf_audio_encoder.cc
+++ b/src/3rdparty/chromium/media/gpu/windows/mf_audio_encoder.cc
@@ -402,6 +402,7 @@ void MFAudioEncoder::Initialize(const Options& options,
     return;
   }
 
+#if !defined(COMPILER_GCC) // missing CODECAPI_AVEncAACEnableVBR
   if (options_.bitrate_mode.has_value() &&
       options_.bitrate_mode.value() == AudioEncoder::BitrateMode::kVariable &&
       options.codec == AudioCodec::kAAC) {
@@ -420,6 +421,7 @@ void MFAudioEncoder::Initialize(const Options& options,
       }
     }
   }
+#endif
 
   // We skip getting the stream counts and IDs because encoders only have one
   // input and output stream, and the ID of each is always 0.
diff --git a/src/3rdparty/chromium/media/learning/common/media_learning_tasks.cc b/src/3rdparty/chromium/media/learning/common/media_learning_tasks.cc
index 5527a29..cadfaa8 100644
--- a/src/3rdparty/chromium/media/learning/common/media_learning_tasks.cc
+++ b/src/3rdparty/chromium/media/learning/common/media_learning_tasks.cc
@@ -4,6 +4,8 @@
 
 #include "media/learning/common/media_learning_tasks.h"
 
+#include <cstring>
+
 #include "base/no_destructor.h"
 #include "base/notreached.h"
 
diff --git a/src/3rdparty/chromium/media/midi/BUILD.gn b/src/3rdparty/chromium/media/midi/BUILD.gn
index f5be74f..f64424d 100644
--- a/src/3rdparty/chromium/media/midi/BUILD.gn
+++ b/src/3rdparty/chromium/media/midi/BUILD.gn
@@ -148,12 +148,18 @@ component("midi") {
       "midi_manager_winrt.cc",
       "midi_manager_winrt.h",
     ]
+    if (is_mingw) {
+      sources -= [
+        "midi_manager_winrt.cc",
+        "midi_manager_winrt.h",
+      ]
+    }
 
-    libs += [ "setupapi.lib" ]
+    libs += [ "setupapi" ]
 
     # This library is included in base in static builds.
     if (is_component_build) {
-      libs += [ "cfgmgr32.lib" ]
+      libs += [ "cfgmgr32" ]
     }
   }
 
diff --git a/src/3rdparty/chromium/media/midi/midi_manager_win.cc b/src/3rdparty/chromium/media/midi/midi_manager_win.cc
index b11d74c..b35a585 100644
--- a/src/3rdparty/chromium/media/midi/midi_manager_win.cc
+++ b/src/3rdparty/chromium/media/midi/midi_manager_win.cc
@@ -892,9 +892,11 @@ void MidiManagerWin::SendOnTaskRunner(MidiManagerClient* client,
 }
 
 MidiManager* MidiManager::Create(MidiService* service) {
+#if defined(COMPILER_MSVC)
   if (base::FeatureList::IsEnabled(features::kMidiManagerWinrt)) {
     return new MidiManagerWinrt(service);
   }
+#endif
   return new MidiManagerWin(service);
 }
 
diff --git a/src/3rdparty/chromium/media/mojo/clients/BUILD.gn b/src/3rdparty/chromium/media/mojo/clients/BUILD.gn
index 6287096..2d97b0c 100644
--- a/src/3rdparty/chromium/media/mojo/clients/BUILD.gn
+++ b/src/3rdparty/chromium/media/mojo/clients/BUILD.gn
@@ -91,7 +91,7 @@ jumbo_source_set("clients") {
       "//ui/gl:gl",
     ]
   }
-  if (is_win) {
+  if (is_msvc) {
     sources += [
       "win/media_foundation_renderer_client.cc",
       "win/media_foundation_renderer_client.h",
diff --git a/src/3rdparty/chromium/media/mojo/mojom/BUILD.gn b/src/3rdparty/chromium/media/mojo/mojom/BUILD.gn
index c094662..15d467b 100644
--- a/src/3rdparty/chromium/media/mojo/mojom/BUILD.gn
+++ b/src/3rdparty/chromium/media/mojo/mojom/BUILD.gn
@@ -654,7 +654,7 @@ mojom("mojom") {
     },
   ]
 
-  if (is_win) {
+  if (is_msvc) {
     cpp_typemaps += [
       {
         types = [
diff --git a/src/3rdparty/chromium/media/mojo/mojom/cdm_document_service.mojom b/src/3rdparty/chromium/media/mojo/mojom/cdm_document_service.mojom
index 4775950..08680f6 100644
--- a/src/3rdparty/chromium/media/mojo/mojom/cdm_document_service.mojom
+++ b/src/3rdparty/chromium/media/mojo/mojom/cdm_document_service.mojom
@@ -63,18 +63,18 @@ interface CdmDocumentService {
   // Gets the Media FoundationCDM data for the origin associated with the CDM.
   // - `media_foundation_cdm_data`: The CDM data for the origin associated with
   //                                the CDM.
-  [EnableIf=is_win]
+  [EnableIf=is_msvc]
   GetMediaFoundationCdmData() => (MediaFoundationCdmData cdm_data);
 
   // Sets the client token for the origin associated with the CDM. The token is
   // set by the CDM. The token is then saved in the Pref Service so that it can
   // be reused by the CDM for that same origin in the future.
-  [EnableIf=is_win]
+  [EnableIf=is_msvc]
   SetCdmClientToken(array<uint8> client_token);
 
   // Reports a CDM event, which can facilitate metrics reporting or fallback
   // logic.  For error events, the `hresult` provides more details about the
   // error.
-  [EnableIf=is_win]
+  [EnableIf=is_msvc]
   OnCdmEvent(CdmEvent event, uint32 hresult);
 };
diff --git a/src/3rdparty/chromium/media/mojo/services/BUILD.gn b/src/3rdparty/chromium/media/mojo/services/BUILD.gn
index b0dc095..1d8f270 100644
--- a/src/3rdparty/chromium/media/mojo/services/BUILD.gn
+++ b/src/3rdparty/chromium/media/mojo/services/BUILD.gn
@@ -185,7 +185,7 @@ jumbo_component("services") {
     deps += [ "//media/cdm:cdm_api" ]
   }
 
-  if (is_win) {
+  if (is_msvc) {
     sources += [
       "media_foundation_gpu_info_monitor.cc",
       "media_foundation_gpu_info_monitor.h",
diff --git a/src/3rdparty/chromium/media/mojo/services/gpu_mojo_media_client_win.cc b/src/3rdparty/chromium/media/mojo/services/gpu_mojo_media_client_win.cc
index ea7c9cb..a28623e 100644
--- a/src/3rdparty/chromium/media/mojo/services/gpu_mojo_media_client_win.cc
+++ b/src/3rdparty/chromium/media/mojo/services/gpu_mojo_media_client_win.cc
@@ -96,7 +96,11 @@ GetPlatformSupportedVideoDecoderConfigs(
 std::unique_ptr<AudioDecoder> CreatePlatformAudioDecoder(
     scoped_refptr<base::SequencedTaskRunner> task_runner,
     std::unique_ptr<MediaLog> media_log) {
+#if BUILDFLAG(IS_MSVC)
   return MediaFoundationAudioDecoder::Create();
+#else
+  return nullptr;
+#endif
 }
 
 VideoDecoderType GetPlatformDecoderImplementationType(
diff --git a/src/3rdparty/chromium/media/mojo/services/media_service_factory.cc b/src/3rdparty/chromium/media/mojo/services/media_service_factory.cc
index 72f264a..ac01863 100644
--- a/src/3rdparty/chromium/media/mojo/services/media_service_factory.cc
+++ b/src/3rdparty/chromium/media/mojo/services/media_service_factory.cc
@@ -18,7 +18,7 @@
 #include "media/mojo/services/android_mojo_media_client.h"  // nogncheck
 #endif
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 #include "media/mojo/services/media_foundation_mojo_media_client.h"
 #endif
 
@@ -29,7 +29,7 @@ std::unique_ptr<MediaService> CreateMediaService(
 #if BUILDFLAG(IS_ANDROID)
   return std::make_unique<MediaService>(
       std::make_unique<AndroidMojoMediaClient>(), std::move(receiver));
-#elif BUILDFLAG(IS_WIN)
+#elif BUILDFLAG(IS_MSVC)
   return std::make_unique<MediaService>(
       std::make_unique<MediaFoundationMojoMediaClient>(), std::move(receiver));
 #else
diff --git a/src/3rdparty/chromium/media/mojo/services/mojo_cdm_helper.cc b/src/3rdparty/chromium/media/mojo/services/mojo_cdm_helper.cc
index bd1fd8d..565819f 100644
--- a/src/3rdparty/chromium/media/mojo/services/mojo_cdm_helper.cc
+++ b/src/3rdparty/chromium/media/mojo/services/mojo_cdm_helper.cc
@@ -51,7 +51,7 @@ url::Origin MojoCdmHelper::GetCdmOrigin() {
   return cdm_origin;
 }
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 void MojoCdmHelper::GetMediaFoundationCdmData(
     GetMediaFoundationCdmDataCB callback) {
   ConnectToCdmDocumentService();
@@ -68,7 +68,7 @@ void MojoCdmHelper::OnCdmEvent(CdmEvent event, HRESULT hresult) {
   ConnectToCdmDocumentService();
   cdm_document_service_->OnCdmEvent(event, hresult);
 }
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 
 cdm::Buffer* MojoCdmHelper::CreateCdmBuffer(size_t capacity) {
   return GetAllocator()->CreateCdmBuffer(capacity);
diff --git a/src/3rdparty/chromium/media/mojo/services/mojo_cdm_helper.h b/src/3rdparty/chromium/media/mojo/services/mojo_cdm_helper.h
index 5904f5e..fe1adec 100644
--- a/src/3rdparty/chromium/media/mojo/services/mojo_cdm_helper.h
+++ b/src/3rdparty/chromium/media/mojo/services/mojo_cdm_helper.h
@@ -48,11 +48,11 @@ class MEDIA_MOJO_EXPORT MojoCdmHelper final : public CdmAuxiliaryHelper,
                          const std::string& challenge,
                          ChallengePlatformCB callback) final;
   void GetStorageId(uint32_t version, StorageIdCB callback) final;
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   void GetMediaFoundationCdmData(GetMediaFoundationCdmDataCB callback) final;
   void SetCdmClientToken(const std::vector<uint8_t>& client_token) final;
   void OnCdmEvent(CdmEvent event, HRESULT hresult) final;
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 
   // MojoCdmFileIO::Delegate implementation.
   void CloseCdmFileIO(MojoCdmFileIO* cdm_file_io) final;
diff --git a/src/3rdparty/chromium/media/renderers/BUILD.gn b/src/3rdparty/chromium/media/renderers/BUILD.gn
index 1f27325..39a2266 100644
--- a/src/3rdparty/chromium/media/renderers/BUILD.gn
+++ b/src/3rdparty/chromium/media/renderers/BUILD.gn
@@ -63,7 +63,7 @@ source_set("renderers") {
     "//ui/gl",
   ]
 
-  if (is_win) {
+  if (is_msvc) {
     sources += [
       "win/media_engine_extension.cc",
       "win/media_engine_extension.h",
