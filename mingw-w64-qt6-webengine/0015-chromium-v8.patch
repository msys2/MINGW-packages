diff -ur a/src/3rdparty/chromium/v8/BUILD.gn b/src/3rdparty/chromium/v8/BUILD.gn
--- a/src/3rdparty/chromium/v8/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/v8/BUILD.gn	2023-12-14 20:41:33.396897800 +0800
@@ -38,10 +38,10 @@
   v8_enable_future = false
 
   # Sets -DENABLE_SYSTEM_INSTRUMENTATION. Enables OS-dependent event tracing
-  v8_enable_system_instrumentation = (is_win || is_mac) && !v8_use_perfetto
+  v8_enable_system_instrumentation = (is_msvc || is_mac) && !v8_use_perfetto
 
   # Sets -DV8_ENABLE_ETW_STACK_WALKING. Enables ETW Stack Walking
-  v8_enable_etw_stack_walking = is_win
+  v8_enable_etw_stack_walking = is_msvc
 
   # Sets the GUID for the ETW provider
   v8_etw_guid = ""
@@ -1262,18 +1262,22 @@
 
   if (v8_current_cpu == "x86") {
     defines += [ "V8_TARGET_ARCH_IA32" ]
-    if (is_win) {
+    if (is_msvc) {
       # Ensure no surprising artifacts from 80bit double math with x86.
       cflags += [ "/arch:SSE2" ]
+    } else {
+      cflags += [ "-msse2" ]
     }
   }
   if (v8_current_cpu == "x64") {
     defines += [ "V8_TARGET_ARCH_X64" ]
-    if (is_win) {
+    if (is_msvc) {
       # Increase the initial stack size. The default is 1MB, this is 2MB. This
       # applies only to executables and shared libraries produced by V8 since
       # ldflags are not pushed to dependants.
       ldflags += [ "/STACK:2097152" ]
+    } else {
+      ldflags += [ "-Wl,--stack,2097152" ]
     }
   }
   if (is_android && v8_android_log_stdout) {
@@ -1331,7 +1335,7 @@
   }
 
   if (v8_no_inline) {
-    if (is_win) {
+    if (is_msvc) {
       cflags += [ "/Ob0" ]
     } else {
       cflags += [
@@ -1361,7 +1365,7 @@
     }
   }
 
-  if (is_win) {
+  if (is_msvc) {
     cflags += [
       "/wd4245",  # Conversion with signed/unsigned mismatch.
       "/wd4267",  # Conversion with possible loss of data.
@@ -1385,7 +1389,7 @@
     ]
   }
 
-  if (!is_clang && is_win) {
+  if (!is_clang && is_msvc) {
     cflags += [
       "/wd4506",  # Benign "no definition for inline function"
 
@@ -1530,7 +1534,7 @@
     cflags_cc = [ "/std:c++17" ]
   }
 
-  if (!is_clang && !is_win) {
+  if (!is_clang && !is_msvc) {
     cflags += [
       # Disable gcc warnings for optimizations based on the assumption that
       # signed overflow does not occur. Generates false positives (see
@@ -5425,7 +5429,7 @@
   if (v8_enable_i18n_support) {
     deps += [ ":run_gen-regexp-special-case" ]
     sources += [ "$target_gen_dir/src/regexp/special-case.cc" ]
-    if (is_win) {
+    if (is_msvc) {
       deps += [ "//third_party/icu:icudata" ]
     }
   } else {
@@ -5849,13 +5853,13 @@
     defines += [ "_CRT_RAND_S" ]  # for rand_s()
 
     libs = [
-      "dbghelp.lib",
-      "winmm.lib",
-      "ws2_32.lib",
+      "dbghelp",
+      "winmm",
+      "ws2_32",
     ]
 
     if (v8_enable_etw_stack_walking) {
-      libs += [ "advapi32.lib" ]  # Needed for TraceLoggingProvider.h
+      libs += [ "advapi32" ]  # Needed for TraceLoggingProvider.h
     }
 
     data_deps += [ "//build/win:runtime_libs" ]
@@ -6063,7 +6067,7 @@
     "src/heap/base/worklist.cc",
   ]
 
-  if (is_clang || !is_win) {
+  if (is_clang || !is_msvc) {
     if (current_cpu == "x64") {
       sources += [ "src/heap/base/asm/x64/push_registers_asm.cc" ]
     } else if (current_cpu == "x86") {
@@ -6083,7 +6087,7 @@
     } else if (current_cpu == "riscv64" || current_cpu == "riscv32") {
       sources += [ "src/heap/base/asm/riscv/push_registers_asm.cc" ]
     }
-  } else if (is_win) {
+  } else if (is_msvc) {
     if (current_cpu == "x64") {
       sources += [ "src/heap/base/asm/x64/push_registers_masm.asm" ]
     } else if (current_cpu == "x86") {
diff -ur a/src/3rdparty/chromium/v8/include/v8-fast-api-calls.h b/src/3rdparty/chromium/v8/include/v8-fast-api-calls.h
--- a/src/3rdparty/chromium/v8/include/v8-fast-api-calls.h	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/v8/include/v8-fast-api-calls.h	2023-12-14 20:41:33.428167400 +0800
@@ -328,7 +328,7 @@
 struct FastApiTypedArrayBase {
  public:
   // Returns the length in number of elements.
-  size_t V8_EXPORT length() const { return length_; }
+  size_t length() const { return length_; }
   // Checks whether the given index is within the bounds of the collection.
   void V8_EXPORT ValidateIndex(size_t index) const;
 
diff -ur a/src/3rdparty/chromium/v8/include/v8config.h b/src/3rdparty/chromium/v8/include/v8config.h
--- a/src/3rdparty/chromium/v8/include/v8config.h	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/v8/include/v8config.h	2023-12-14 20:41:33.459364200 +0800
@@ -340,6 +340,13 @@
 
 #if defined(__GNUC__)  // Clang in gcc mode.
 # define V8_CC_GNU 1
+# if defined(__MINGW32__)
+#  define V8_CC_MINGW32 1
+# endif
+# if defined(__MINGW64__)
+#  define V8_CC_MINGW64 1
+# endif
+# define V8_CC_MINGW (V8_CC_MINGW32 || V8_CC_MINGW64)
 #endif
 
 # define V8_HAS_ATTRIBUTE_ALWAYS_INLINE (__has_attribute(always_inline))
diff -ur a/src/3rdparty/chromium/v8/src/base/bits.h b/src/3rdparty/chromium/v8/src/base/bits.h
--- a/src/3rdparty/chromium/v8/src/base/bits.h	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/v8/src/base/bits.h	2023-12-14 20:41:33.646859500 +0800
@@ -17,6 +17,13 @@
 #include "src/base/win32-headers.h"
 #endif
 
+#if V8_CC_MINGW
+#undef RotateLeft32
+#undef RotateLeft64
+#undef RotateRight32
+#undef RotateRight64
+#endif
+
 namespace v8 {
 namespace base {
 namespace bits {
diff -ur a/src/3rdparty/chromium/v8/src/base/debug/stack_trace_win.cc b/src/3rdparty/chromium/v8/src/base/debug/stack_trace_win.cc
--- a/src/3rdparty/chromium/v8/src/base/debug/stack_trace_win.cc	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/v8/src/base/debug/stack_trace_win.cc	2023-12-14 20:41:33.740609000 +0800
@@ -81,7 +81,7 @@
   }
 
   wchar_t exe_path[MAX_PATH];
-  GetModuleFileName(nullptr, exe_path, MAX_PATH);
+  GetModuleFileNameW(nullptr, exe_path, MAX_PATH);
   std::wstring exe_path_wstring(exe_path);
   // To get the path without the filename, we just need to remove the final
   // slash and everything after it.
diff -ur a/src/3rdparty/chromium/v8/src/base/export-template.h b/src/3rdparty/chromium/v8/src/base/export-template.h
--- a/src/3rdparty/chromium/v8/src/base/export-template.h	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/v8/src/base/export-template.h	2023-12-14 20:41:33.756243900 +0800
@@ -153,8 +153,10 @@
 
 EXPORT_TEMPLATE_TEST(DEFAULT, );
 EXPORT_TEMPLATE_TEST(DEFAULT, __attribute__((visibility("default"))));
+#ifdef _MSC_VER
 EXPORT_TEMPLATE_TEST(MSVC_HACK, __declspec(dllexport));
 EXPORT_TEMPLATE_TEST(DEFAULT, __declspec(dllimport));
+#endif
 
 #undef EXPORT_TEMPLATE_TEST
 #undef EXPORT_TEMPLATE_TEST_DEFAULT_DEFAULT
diff -ur a/src/3rdparty/chromium/v8/src/base/macros.h b/src/3rdparty/chromium/v8/src/base/macros.h
--- a/src/3rdparty/chromium/v8/src/base/macros.h	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/v8/src/base/macros.h	2023-12-14 20:41:33.803187200 +0800
@@ -180,7 +180,7 @@
 
 // DISABLE_CFI_ICALL -- Disable Control Flow Integrity indirect call checks,
 // useful because calls into JITed code can not be CFI verified.
-#ifdef V8_OS_WIN
+#ifdef V8_CC_MSVC
 // On Windows, also needs __declspec(guard(nocf)) for CFG.
 #define DISABLE_CFI_ICALL           \
   V8_CLANG_NO_SANITIZE("cfi-icall") \
@@ -267,8 +267,12 @@
 # else
 #  define V8_PTR_PREFIX   ""
 # endif  // V8_HOST_ARCH_64_BIT
-#elif V8_CC_MINGW64
-# define V8_PTR_PREFIX    "I64"
+#elif V8_CC_MINGW
+# if V8_TARGET_ARCH_X64
+#  define V8_PTR_PREFIX   "I64"
+# else
+#  define V8_PTR_PREFIX   ""
+# endif
 #elif V8_HOST_ARCH_64_BIT
 # define V8_PTR_PREFIX    "l"
 #else
diff -ur a/src/3rdparty/chromium/v8/src/base/platform/platform-win32.cc b/src/3rdparty/chromium/v8/src/base/platform/platform-win32.cc
--- a/src/3rdparty/chromium/v8/src/base/platform/platform-win32.cc	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/v8/src/base/platform/platform-win32.cc	2023-12-14 20:41:33.834436500 +0800
@@ -76,7 +76,6 @@
   __asm__ __volatile__("xchgl %%eax,%0 ":"=r" (barrier));
 }
 
-#endif  // __MINGW64_VERSION_MAJOR
 
 
 int localtime_s(tm* out_tm, const time_t* time) {
@@ -129,6 +128,7 @@
   return 0;
 }
 
+#endif  // __MINGW64_VERSION_MAJOR
 #endif  // __MINGW32__
 
 namespace v8 {
@@ -759,13 +759,13 @@
   static bool loaded = false;
   if (!loaded) {
     VirtualAlloc2 = (VirtualAlloc2_t)GetProcAddress(
-        GetModuleHandle(L"kernelbase.dll"), "VirtualAlloc2");
+        GetModuleHandleW(L"kernelbase.dll"), "VirtualAlloc2");
 
     MapViewOfFile3 = (MapViewOfFile3_t)GetProcAddress(
-        GetModuleHandle(L"kernelbase.dll"), "MapViewOfFile3");
+        GetModuleHandleW(L"kernelbase.dll"), "MapViewOfFile3");
 
     UnmapViewOfFile2 = (UnmapViewOfFile2_t)GetProcAddress(
-        GetModuleHandle(L"kernelbase.dll"), "UnmapViewOfFile2");
+        GetModuleHandleW(L"kernelbase.dll"), "UnmapViewOfFile2");
 
     loaded = true;
   }
@@ -1042,7 +1042,7 @@
       reinterpret_cast<DiscardVirtualMemoryFunction>(-1))
     discard_virtual_memory =
         reinterpret_cast<DiscardVirtualMemoryFunction>(GetProcAddress(
-            GetModuleHandle(L"Kernel32.dll"), "DiscardVirtualMemory"));
+            GetModuleHandleW(L"Kernel32.dll"), "DiscardVirtualMemory"));
   // Use DiscardVirtualMemory when available because it releases faster than
   // MEM_RESET.
   DiscardVirtualMemoryFunction discard_function = discard_virtual_memory.load();
diff -ur a/src/3rdparty/chromium/v8/src/base/platform/time.cc b/src/3rdparty/chromium/v8/src/base/platform/time.cc
--- a/src/3rdparty/chromium/v8/src/base/platform/time.cc	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/v8/src/base/platform/time.cc	2023-12-14 20:41:33.865691600 +0800
@@ -805,13 +805,13 @@
   return ThreadTicks(ComputeThreadTicks());
 #elif V8_OS_FUCHSIA
   return ThreadTicks(GetFuchsiaThreadTicks());
+#elif V8_OS_WIN
+  return ThreadTicks::GetForThread(::GetCurrentThread());
 #elif(defined(_POSIX_THREAD_CPUTIME) && (_POSIX_THREAD_CPUTIME >= 0)) || \
   defined(V8_OS_ANDROID)
   return ThreadTicks(ClockNow(CLOCK_THREAD_CPUTIME_ID));
 #elif V8_OS_SOLARIS
   return ThreadTicks(gethrvtime() / Time::kNanosecondsPerMicrosecond);
-#elif V8_OS_WIN
-  return ThreadTicks::GetForThread(::GetCurrentThread());
 #else
   UNREACHABLE();
 #endif
@@ -849,6 +849,12 @@
     ::Sleep(10);
 }
 
+#ifdef __MINGW64_VERSION_MAJOR
+extern "C" {
+  extern uint64_t __rdtsc(void);
+}
+#endif
+
 #ifdef V8_HOST_ARCH_ARM64
 #define ReadCycleCounter() _ReadStatusReg(ARM64_PMCCNTR_EL0)
 #else
diff -ur a/src/3rdparty/chromium/v8/src/common/assert-scope.h b/src/3rdparty/chromium/v8/src/common/assert-scope.h
--- a/src/3rdparty/chromium/v8/src/common/assert-scope.h	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/v8/src/common/assert-scope.h	2023-12-14 20:41:33.912492800 +0800
@@ -152,7 +152,7 @@
 template <typename Scope>
 class V8_NODISCARD CombinationAssertScope<Scope> : public Scope {
  public:
-  V8_EXPORT_PRIVATE static bool IsAllowed() {
+  static bool IsAllowed() {
     // Define IsAllowed() explicitly rather than with using Scope::IsAllowed, to
     // allow SFINAE removal of IsAllowed() when it's not defined (under debug).
     return Scope::IsAllowed();
@@ -169,12 +169,12 @@
 
  public:
   // Constructor for per-thread scopes.
-  V8_EXPORT_PRIVATE CombinationAssertScope() : Scope(), NextScopes() {}
+  CombinationAssertScope() : Scope(), NextScopes() {}
   // Constructor for per-isolate scopes.
-  V8_EXPORT_PRIVATE explicit CombinationAssertScope(Isolate* isolate)
+  explicit CombinationAssertScope(Isolate* isolate)
       : Scope(isolate), NextScopes(isolate) {}
 
-  V8_EXPORT_PRIVATE static bool IsAllowed() {
+  static bool IsAllowed() {
     return Scope::IsAllowed() && NextScopes::IsAllowed();
   }
 
diff -ur a/src/3rdparty/chromium/v8/src/diagnostics/unwinding-info-win64.cc b/src/3rdparty/chromium/v8/src/diagnostics/unwinding-info-win64.cc
--- a/src/3rdparty/chromium/v8/src/diagnostics/unwinding-info-win64.cc	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/v8/src/diagnostics/unwinding-info-win64.cc	2023-12-14 20:41:34.053185700 +0800
@@ -471,7 +471,7 @@
 void LoadNtdllUnwindingFunctionsOnce() {
   // Load functions from the ntdll.dll module.
   HMODULE ntdll_module =
-      LoadLibraryEx(L"ntdll.dll", nullptr, LOAD_LIBRARY_SEARCH_SYSTEM32);
+      LoadLibraryExW(L"ntdll.dll", nullptr, LOAD_LIBRARY_SEARCH_SYSTEM32);
   DCHECK_NOT_NULL(ntdll_module);
 
   // This fails on Windows 7.
diff -ur a/src/3rdparty/chromium/v8/src/profiler/heap-snapshot-generator.cc b/src/3rdparty/chromium/v8/src/profiler/heap-snapshot-generator.cc
--- a/src/3rdparty/chromium/v8/src/profiler/heap-snapshot-generator.cc	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/v8/src/profiler/heap-snapshot-generator.cc	2023-12-14 20:41:34.131273500 +0800
@@ -408,11 +408,11 @@
   static_assert(kSystemPointerSize != 4 || sizeof(HeapGraphEdge) == 12);
   static_assert(kSystemPointerSize != 8 || sizeof(HeapGraphEdge) == 24);
   static_assert(kSystemPointerSize != 4 || sizeof(HeapEntry) == 32);
-#if V8_CC_MSVC
+#if V8_OS_WIN
   static_assert(kSystemPointerSize != 8 || sizeof(HeapEntry) == 48);
-#else   // !V8_CC_MSVC
+#else   // !V8_OS_WIN
   static_assert(kSystemPointerSize != 8 || sizeof(HeapEntry) == 40);
-#endif  // !V8_CC_MSVC
+#endif  // !V8_OS_WIN
   memset(&gc_subroot_entries_, 0, sizeof(gc_subroot_entries_));
 }
 
diff -ur a/src/3rdparty/chromium/v8/src/snapshot/snapshot-utils.cc b/src/3rdparty/chromium/v8/src/snapshot/snapshot-utils.cc
--- a/src/3rdparty/chromium/v8/src/snapshot/snapshot-utils.cc	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/v8/src/snapshot/snapshot-utils.cc	2023-12-14 20:41:34.209392700 +0800
@@ -7,7 +7,7 @@
 #include "src/base/sanitizer/msan.h"
 
 #ifdef V8_USE_ZLIB
-#include "third_party/zlib/zlib.h"
+#include <zlib.h>
 #endif
 
 namespace v8 {
