diff --git a/src/3rdparty/chromium/third_party/webrtc/BUILD.gn b/src/3rdparty/chromium/third_party/webrtc/BUILD.gn
index 571049f..7a105bb 100644
--- a/src/3rdparty/chromium/third_party/webrtc/BUILD.gn
+++ b/src/3rdparty/chromium/third_party/webrtc/BUILD.gn
@@ -410,7 +410,7 @@ config("common_config") {
       }
     }
 
-    if (is_win && !is_clang) {
+    if (is_msvc && !is_clang) {
       # MSVC warning suppressions (needed to use Abseil).
       # TODO(bugs.webrtc.org/9274): Remove these warnings as soon as MSVC allows
       # external headers warning suppression (or fix them upstream).
@@ -474,8 +474,8 @@ config("common_config") {
 
   if (!build_with_chromium && rtc_win_undef_unicode) {
     cflags += [
-      "/UUNICODE",
-      "/U_UNICODE",
+      "-UUNICODE",
+      "-U_UNICODE",
     ]
   }
 }
diff --git a/src/3rdparty/chromium/third_party/webrtc/common_audio/BUILD.gn b/src/3rdparty/chromium/third_party/webrtc/common_audio/BUILD.gn
index 2ae6d32..d4b4201 100644
--- a/src/3rdparty/chromium/third_party/webrtc/common_audio/BUILD.gn
+++ b/src/3rdparty/chromium/third_party/webrtc/common_audio/BUILD.gn
@@ -248,7 +248,7 @@ if (current_cpu == "x86" || current_cpu == "x64") {
       "resampler/sinc_resampler_sse.cc",
     ]
 
-    if (is_posix || is_fuchsia) {
+    if (is_posix || is_fuchsia || is_mingw) {
       cflags = [ "-msse2" ]
     }
 
@@ -267,7 +267,7 @@ if (current_cpu == "x86" || current_cpu == "x64") {
       "resampler/sinc_resampler_avx2.cc",
     ]
 
-    if (is_win) {
+    if (is_msvc) {
       cflags = [ "/arch:AVX2" ]
     } else {
       cflags = [
diff --git a/src/3rdparty/chromium/third_party/webrtc/modules/audio_processing/aec3/BUILD.gn b/src/3rdparty/chromium/third_party/webrtc/modules/audio_processing/aec3/BUILD.gn
index f5eb5d5..799b8ad 100644
--- a/src/3rdparty/chromium/third_party/webrtc/modules/audio_processing/aec3/BUILD.gn
+++ b/src/3rdparty/chromium/third_party/webrtc/modules/audio_processing/aec3/BUILD.gn
@@ -264,7 +264,7 @@ if (current_cpu == "x86" || current_cpu == "x64") {
       "vector_math_avx2.cc",
     ]
 
-    if (is_win) {
+    if (is_msvc) {
       cflags = [ "/arch:AVX2" ]
     } else {
       cflags = [
diff --git a/src/3rdparty/chromium/third_party/webrtc/modules/audio_processing/agc2/rnn_vad/BUILD.gn b/src/3rdparty/chromium/third_party/webrtc/modules/audio_processing/agc2/rnn_vad/BUILD.gn
index 9093a68..83c1892 100644
--- a/src/3rdparty/chromium/third_party/webrtc/modules/audio_processing/agc2/rnn_vad/BUILD.gn
+++ b/src/3rdparty/chromium/third_party/webrtc/modules/audio_processing/agc2/rnn_vad/BUILD.gn
@@ -122,7 +122,7 @@ rtc_source_set("vector_math") {
 if (current_cpu == "x86" || current_cpu == "x64") {
   rtc_library("vector_math_avx2") {
     sources = [ "vector_math_avx2.cc" ]
-    if (is_win) {
+    if (is_msvc) {
       cflags = [ "/arch:AVX2" ]
     } else {
       cflags = [
diff --git a/src/3rdparty/chromium/third_party/webrtc/modules/desktop_capture/BUILD.gn b/src/3rdparty/chromium/third_party/webrtc/modules/desktop_capture/BUILD.gn
index d60418d..99e7243 100644
--- a/src/3rdparty/chromium/third_party/webrtc/modules/desktop_capture/BUILD.gn
+++ b/src/3rdparty/chromium/third_party/webrtc/modules/desktop_capture/BUILD.gn
@@ -526,9 +526,9 @@ rtc_library("desktop_capture") {
       "window_finder_win.h",
     ]
     libs = [
-      "d3d11.lib",
-      "dxgi.lib",
-      "shcore.lib",
+      "d3d11",
+      "dxgi",
+      "shcore",
     ]
     deps += [
       "../../rtc_base:win32",
@@ -685,7 +685,7 @@ if (use_desktop_capture_differ_sse2) {
       "differ_vector_sse2.h",
     ]
 
-    if (is_posix || is_fuchsia) {
+    if (is_posix || is_fuchsia || is_mingw) {
       cflags = [ "-msse2" ]
     }
   }
diff --git a/src/3rdparty/chromium/third_party/webrtc/modules/desktop_capture/win/desktop_capture_utils.cc b/src/3rdparty/chromium/third_party/webrtc/modules/desktop_capture/win/desktop_capture_utils.cc
index 476ddc4..80a3ded 100644
--- a/src/3rdparty/chromium/third_party/webrtc/modules/desktop_capture/win/desktop_capture_utils.cc
+++ b/src/3rdparty/chromium/third_party/webrtc/modules/desktop_capture/win/desktop_capture_utils.cc
@@ -10,7 +10,12 @@
 
 #include "modules/desktop_capture/win/desktop_capture_utils.h"
 
+#ifdef _MSC_VER
 #include "rtc_base/strings/string_builder.h"
+#else
+#include <cstdio>
+#include <cstdlib>
+#endif
 
 namespace webrtc {
 namespace desktop_capture {
@@ -19,12 +24,24 @@ namespace utils {
 // Generates a human-readable string from a COM error.
 std::string ComErrorToString(const _com_error& error) {
   char buffer[1024];
+#ifdef _MSC_VER
   rtc::SimpleStringBuilder string_builder(buffer);
   // Use _bstr_t to simplify the wchar to char conversion for ErrorMessage().
   _bstr_t error_message(error.ErrorMessage());
   string_builder.AppendFormat("HRESULT: 0x%08X, Message: %s", error.Error(),
                               static_cast<const char*>(error_message));
   return string_builder.str();
+#else
+  int offset = snprintf(buffer, sizeof(buffer),
+                        "HRESULT: 0x%08lX, Message: ", error.Error());
+#ifdef _UNICODE
+  wcstombs(buffer + offset, error.ErrorMessage(), sizeof(buffer) - offset);
+#else
+  strcpy(buffer + offset, error.ErrorMessage(), sizeof(buffer) - offset);
+#endif
+  buffer[sizeof(buffer) - 1] = 0;
+  return buffer;
+#endif
 }
 
 }  // namespace utils
diff --git a/src/3rdparty/chromium/third_party/webrtc/rtc_base/BUILD.gn b/src/3rdparty/chromium/third_party/webrtc/rtc_base/BUILD.gn
index ac30d87..9f5cddd 100644
--- a/src/3rdparty/chromium/third_party/webrtc/rtc_base/BUILD.gn
+++ b/src/3rdparty/chromium/third_party/webrtc/rtc_base/BUILD.gn
@@ -597,7 +597,7 @@ rtc_library("timeutils") {
 
   libs = []
   if (is_win) {
-    libs += [ "winmm.lib" ]
+    libs += [ "winmm" ]
     deps += [ ":win32" ]
   }
 }
@@ -1156,9 +1156,9 @@ if (is_win) {
     ]
 
     libs = [
-      "crypt32.lib",
-      "iphlpapi.lib",
-      "secur32.lib",
+      "crypt32",
+      "iphlpapi",
+      "secur32",
     ]
 
     defines = [ "_CRT_NONSTDC_NO_DEPRECATE" ]
diff --git a/src/3rdparty/chromium/third_party/webrtc/rtc_base/platform_thread_types.cc b/src/3rdparty/chromium/third_party/webrtc/rtc_base/platform_thread_types.cc
index d64ea68..9c45dd4 100644
--- a/src/3rdparty/chromium/third_party/webrtc/rtc_base/platform_thread_types.cc
+++ b/src/3rdparty/chromium/third_party/webrtc/rtc_base/platform_thread_types.cc
@@ -32,6 +32,13 @@ typedef HRESULT(WINAPI* RTC_SetThreadDescription)(HANDLE hThread,
 #include "rtc_base/checks.h"
 #endif
 
+#if defined(__MINGW32__)
+#undef __try
+#define __try try
+#undef __except
+#define __except(x) catch(...)
+#endif
+
 namespace rtc {
 
 PlatformThreadId CurrentThreadId() {
diff --git a/src/3rdparty/chromium/third_party/webrtc/rtc_base/system/rtc_export_template.h b/src/3rdparty/chromium/third_party/webrtc/rtc_base/system/rtc_export_template.h
index 4ac7043..ed35645 100644
--- a/src/3rdparty/chromium/third_party/webrtc/rtc_base/system/rtc_export_template.h
+++ b/src/3rdparty/chromium/third_party/webrtc/rtc_base/system/rtc_export_template.h
@@ -185,7 +185,9 @@
 
 RTC_EXPORT_TEMPLATE_TEST(DEFAULT, );  // NOLINT
 RTC_EXPORT_TEMPLATE_TEST(DEFAULT, __attribute__((visibility("default"))));
+#ifdef _MSC_VER
 RTC_EXPORT_TEMPLATE_TEST(MSVC_HACK, __declspec(dllexport));
+#endif
 RTC_EXPORT_TEMPLATE_TEST(DEFAULT, __declspec(dllimport));
 
 #undef RTC_EXPORT_TEMPLATE_TEST
diff --git a/src/3rdparty/chromium/third_party/webrtc/rtc_base/win/create_direct3d_device.h b/src/3rdparty/chromium/third_party/webrtc/rtc_base/win/create_direct3d_device.h
index 7c21f87..66bc9a3 100644
--- a/src/3rdparty/chromium/third_party/webrtc/rtc_base/win/create_direct3d_device.h
+++ b/src/3rdparty/chromium/third_party/webrtc/rtc_base/win/create_direct3d_device.h
@@ -11,8 +11,20 @@
 #ifndef RTC_BASE_WIN_CREATE_DIRECT3D_DEVICE_H_
 #define RTC_BASE_WIN_CREATE_DIRECT3D_DEVICE_H_
 
+#ifdef _MSC_VER
 #include <windows.graphics.directX.direct3d11.h>
 #include <windows.graphics.directX.direct3d11.interop.h>
+#else
+#include <windows.graphics.directx.direct3d11.h>
+#include <dxgi.h>
+#include <inspectable.h>
+
+extern "C" {
+// This function is only used in decltype(..)
+HRESULT __stdcall CreateDirect3D11DeviceFromDXGIDevice(
+    ::IDXGIDevice* dxgiDevice, ::IInspectable** graphicsDevice);
+}
+#endif
 #include <winerror.h>
 #include <wrl/client.h>
 
diff --git a/src/3rdparty/chromium/third_party/webrtc/rtc_base/win/windows_version.cc b/src/3rdparty/chromium/third_party/webrtc/rtc_base/win/windows_version.cc
index 93af137..6914722 100644
--- a/src/3rdparty/chromium/third_party/webrtc/rtc_base/win/windows_version.cc
+++ b/src/3rdparty/chromium/third_party/webrtc/rtc_base/win/windows_version.cc
@@ -17,7 +17,7 @@
 #include "rtc_base/checks.h"
 #include "rtc_base/string_utils.h"
 
-#if !defined(__clang__) && _MSC_FULL_VER < 191125507
+#if !defined(__clang__) && defined(_MSC_VER) && _MSC_FULL_VER < 191125507
 #error VS 2017 Update 3.2 or higher is required
 #endif
 
diff --git a/src/3rdparty/chromium/third_party/webrtc/system_wrappers/BUILD.gn b/src/3rdparty/chromium/third_party/webrtc/system_wrappers/BUILD.gn
index 2576d4e..5004713 100644
--- a/src/3rdparty/chromium/third_party/webrtc/system_wrappers/BUILD.gn
+++ b/src/3rdparty/chromium/third_party/webrtc/system_wrappers/BUILD.gn
@@ -69,7 +69,7 @@ rtc_library("system_wrappers") {
   }
 
   if (is_win) {
-    libs += [ "winmm.lib" ]
+    libs += [ "winmm" ]
 
     # Windows needs ../rtc_base due to include of
     # webrtc/rtc_base/win32.h in source/clock.cc.
diff --git a/src/3rdparty/chromium/third_party/webrtc/webrtc.gni b/src/3rdparty/chromium/third_party/webrtc/webrtc.gni
index 447aae4..5a3825f 100644
--- a/src/3rdparty/chromium/third_party/webrtc/webrtc.gni
+++ b/src/3rdparty/chromium/third_party/webrtc/webrtc.gni
@@ -187,7 +187,7 @@ declare_args() {
   # Enabling H264 when building with MSVC is currently not supported, see
   # bugs.webrtc.org/9213#c13 for more info.
   rtc_use_h264 =
-      proprietary_codecs && !is_android && !is_ios && !(is_win && !is_clang)
+      proprietary_codecs && !is_android && !is_ios && !(is_msvc && !is_clang) && !is_mingw
 
   # Enable to use H265
   rtc_use_h265 = proprietary_codecs
@@ -231,7 +231,7 @@ declare_args() {
   # When set to true, a capturer implementation that uses the
   # Windows.Graphics.Capture APIs will be available for use. This introduces a
   # dependency on the Win 10 SDK v10.0.17763.0.
-  rtc_enable_win_wgc = is_win
+  rtc_enable_win_wgc = is_msvc
 
   # Includes the dav1d decoder in the internal decoder factory when set to true.
   rtc_include_dav1d_in_internal_decoder_factory = true
