diff -ur a/src/3rdparty/chromium/third_party/webrtc/BUILD.gn b/src/3rdparty/chromium/third_party/webrtc/BUILD.gn
--- a/src/3rdparty/chromium/third_party/webrtc/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/webrtc/BUILD.gn	2023-12-14 21:44:12.421409900 +0800
@@ -390,7 +390,7 @@
       }
     }
 
-    if (is_win && !is_clang) {
+    if (is_win && !is_mingw && !is_clang) {
       # MSVC warning suppressions (needed to use Abseil).
       # TODO(bugs.webrtc.org/9274): Remove these warnings as soon as MSVC allows
       # external headers warning suppression (or fix them upstream).
@@ -454,8 +454,8 @@
 
   if (!build_with_chromium && rtc_win_undef_unicode) {
     cflags += [
-      "/UUNICODE",
-      "/U_UNICODE",
+      "-UUNICODE",
+      "-U_UNICODE",
     ]
   }
 }
diff -ur a/src/3rdparty/chromium/third_party/webrtc/common_audio/BUILD.gn b/src/3rdparty/chromium/third_party/webrtc/common_audio/BUILD.gn
--- a/src/3rdparty/chromium/third_party/webrtc/common_audio/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/webrtc/common_audio/BUILD.gn	2023-12-14 21:44:12.483820100 +0800
@@ -248,7 +248,7 @@
       "resampler/sinc_resampler_sse.cc",
     ]
 
-    if (is_posix || is_fuchsia) {
+    if (is_posix || is_fuchsia || is_mingw) {
       cflags = [ "-msse2" ]
     }
 
@@ -267,7 +267,7 @@
       "resampler/sinc_resampler_avx2.cc",
     ]
 
-    if (is_win) {
+    if (is_win && !is_mingw) {
       cflags = [ "/arch:AVX2" ]
     } else {
       cflags = [
diff -ur a/src/3rdparty/chromium/third_party/webrtc/modules/audio_processing/aec3/BUILD.gn b/src/3rdparty/chromium/third_party/webrtc/modules/audio_processing/aec3/BUILD.gn
--- a/src/3rdparty/chromium/third_party/webrtc/modules/audio_processing/aec3/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/webrtc/modules/audio_processing/aec3/BUILD.gn	2023-12-14 21:44:12.577567300 +0800
@@ -264,7 +264,7 @@
       "vector_math_avx2.cc",
     ]
 
-    if (is_win) {
+    if (is_win && !is_mingw) {
       cflags = [ "/arch:AVX2" ]
     } else {
       cflags = [
diff -ur a/src/3rdparty/chromium/third_party/webrtc/modules/audio_processing/agc2/rnn_vad/BUILD.gn b/src/3rdparty/chromium/third_party/webrtc/modules/audio_processing/agc2/rnn_vad/BUILD.gn
--- a/src/3rdparty/chromium/third_party/webrtc/modules/audio_processing/agc2/rnn_vad/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/webrtc/modules/audio_processing/agc2/rnn_vad/BUILD.gn	2023-12-14 21:44:12.655743300 +0800
@@ -122,7 +122,7 @@
 if (current_cpu == "x86" || current_cpu == "x64") {
   rtc_library("vector_math_avx2") {
     sources = [ "vector_math_avx2.cc" ]
-    if (is_win) {
+    if (is_win && !is_mingw) {
       cflags = [ "/arch:AVX2" ]
     } else {
       cflags = [
diff -ur a/src/3rdparty/chromium/third_party/webrtc/modules/desktop_capture/BUILD.gn b/src/3rdparty/chromium/third_party/webrtc/modules/desktop_capture/BUILD.gn
--- a/src/3rdparty/chromium/third_party/webrtc/modules/desktop_capture/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/webrtc/modules/desktop_capture/BUILD.gn	2023-12-14 21:48:14.233702800 +0800
@@ -524,9 +524,9 @@
       "window_finder_win.h",
     ]
     libs = [
-      "d3d11.lib",
-      "dxgi.lib",
-      "shcore.lib",
+      "d3d11",
+      "dxgi",
+      "shcore",
     ]
     deps += [
       "../../rtc_base:win32",
@@ -683,7 +683,7 @@
       "differ_vector_sse2.h",
     ]
 
-    if (is_posix || is_fuchsia) {
+    if (is_posix || is_fuchsia || is_mingw) {
       cflags = [ "-msse2" ]
     }
   }
diff -ur a/src/3rdparty/chromium/third_party/webrtc/rtc_base/BUILD.gn b/src/3rdparty/chromium/third_party/webrtc/rtc_base/BUILD.gn
--- a/src/3rdparty/chromium/third_party/webrtc/rtc_base/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/webrtc/rtc_base/BUILD.gn	2023-12-14 21:44:12.780703500 +0800
@@ -551,7 +551,7 @@
 
   libs = []
   if (is_win) {
-    libs += [ "winmm.lib" ]
+    libs += [ "winmm" ]
   }
 }
 
@@ -1074,9 +1074,9 @@
     ]
 
     libs = [
-      "crypt32.lib",
-      "iphlpapi.lib",
-      "secur32.lib",
+      "crypt32",
+      "iphlpapi",
+      "secur32",
     ]
 
     defines = [ "_CRT_NONSTDC_NO_DEPRECATE" ]
diff -ur a/src/3rdparty/chromium/third_party/webrtc/rtc_base/network.cc b/src/3rdparty/chromium/third_party/webrtc/rtc_base/network.cc
--- a/src/3rdparty/chromium/third_party/webrtc/rtc_base/network.cc	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/webrtc/rtc_base/network.cc	2023-12-14 21:44:13.015087900 +0800
@@ -846,10 +846,12 @@
             case IF_TYPE_IEEE80211:
               adapter_type = ADAPTER_TYPE_WIFI;
               break;
+#ifdef _MSC_VER
             case IF_TYPE_WWANPP:
             case IF_TYPE_WWANPP2:
               adapter_type = ADAPTER_TYPE_CELLULAR;
               break;
+#endif
             default:
               // TODO(phoglund): Need to recognize other types as well.
               adapter_type = ADAPTER_TYPE_UNKNOWN;
diff -ur a/src/3rdparty/chromium/third_party/webrtc/rtc_base/platform_thread_types.cc b/src/3rdparty/chromium/third_party/webrtc/rtc_base/platform_thread_types.cc
--- a/src/3rdparty/chromium/third_party/webrtc/rtc_base/platform_thread_types.cc	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/webrtc/rtc_base/platform_thread_types.cc	2023-12-14 21:44:13.046329000 +0800
@@ -32,6 +32,13 @@
 #include "rtc_base/checks.h"
 #endif
 
+#if defined(__MINGW32__)
+#undef __try
+#define __try try
+#undef __except
+#define __except(x) catch(...)
+#endif
+
 namespace rtc {
 
 PlatformThreadId CurrentThreadId() {
diff -ur a/src/3rdparty/chromium/third_party/webrtc/rtc_base/system/file_wrapper.h b/src/3rdparty/chromium/third_party/webrtc/rtc_base/system/file_wrapper.h
--- a/src/3rdparty/chromium/third_party/webrtc/rtc_base/system/file_wrapper.h	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/webrtc/rtc_base/system/file_wrapper.h	2023-12-14 21:44:13.077573200 +0800
@@ -13,6 +13,7 @@
 
 #include <stddef.h>
 #include <stdio.h>
+#include <stdint.h>
 
 #include <string>
 
diff -ur a/src/3rdparty/chromium/third_party/webrtc/rtc_base/system/rtc_export_template.h b/src/3rdparty/chromium/third_party/webrtc/rtc_base/system/rtc_export_template.h
--- a/src/3rdparty/chromium/third_party/webrtc/rtc_base/system/rtc_export_template.h	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/webrtc/rtc_base/system/rtc_export_template.h	2023-12-14 21:44:13.093193400 +0800
@@ -185,7 +185,9 @@
 
 RTC_EXPORT_TEMPLATE_TEST(DEFAULT, );  // NOLINT
 RTC_EXPORT_TEMPLATE_TEST(DEFAULT, __attribute__((visibility("default"))));
+#ifdef _MSC_VER
 RTC_EXPORT_TEMPLATE_TEST(MSVC_HACK, __declspec(dllexport));
+#endif
 RTC_EXPORT_TEMPLATE_TEST(DEFAULT, __declspec(dllimport));
 
 #undef RTC_EXPORT_TEMPLATE_TEST
diff -ur a/src/3rdparty/chromium/third_party/webrtc/rtc_base/win/BUILD.gn b/src/3rdparty/chromium/third_party/webrtc/rtc_base/win/BUILD.gn
--- a/src/3rdparty/chromium/third_party/webrtc/rtc_base/win/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/webrtc/rtc_base/win/BUILD.gn	2023-12-14 21:44:13.108829000 +0800
@@ -9,11 +9,13 @@
 import("../../webrtc.gni")
 
 rtc_library("create_direct3d_device") {
-  sources = [
-    "create_direct3d_device.cc",
-    "create_direct3d_device.h",
-  ]
-  data_deps = [ "//build/win:runtime_libs" ]
+  if (!is_mingw) {
+    sources = [
+      "create_direct3d_device.cc",
+      "create_direct3d_device.h",
+    ]
+    data_deps = [ "//build/win:runtime_libs" ]
+  }
 }
 
 rtc_library("get_activation_factory") {
diff -ur a/src/3rdparty/chromium/third_party/webrtc/rtc_base/win/windows_version.cc b/src/3rdparty/chromium/third_party/webrtc/rtc_base/win/windows_version.cc
--- a/src/3rdparty/chromium/third_party/webrtc/rtc_base/win/windows_version.cc	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/webrtc/rtc_base/win/windows_version.cc	2023-12-14 21:44:13.124453300 +0800
@@ -17,7 +17,7 @@
 #include "rtc_base/checks.h"
 #include "rtc_base/string_utils.h"
 
-#if !defined(__clang__) && _MSC_FULL_VER < 191125507
+#if !defined(__clang__) && defined(_MSC_VER) && _MSC_FULL_VER < 191125507
 #error VS 2017 Update 3.2 or higher is required
 #endif
 
diff -ur a/src/3rdparty/chromium/third_party/webrtc/system_wrappers/BUILD.gn b/src/3rdparty/chromium/third_party/webrtc/system_wrappers/BUILD.gn
--- a/src/3rdparty/chromium/third_party/webrtc/system_wrappers/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/webrtc/system_wrappers/BUILD.gn	2023-12-14 21:44:13.155724500 +0800
@@ -69,7 +69,7 @@
   }
 
   if (is_win) {
-    libs += [ "winmm.lib" ]
+    libs += [ "winmm" ]
 
     # Windows needs ../rtc_base due to include of
     # webrtc/rtc_base/win32.h in source/clock.cc.
diff -ur a/src/3rdparty/chromium/third_party/webrtc/webrtc.gni b/src/3rdparty/chromium/third_party/webrtc/webrtc.gni
--- a/src/3rdparty/chromium/third_party/webrtc/webrtc.gni	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/third_party/webrtc/webrtc.gni	2023-12-14 21:44:13.186946300 +0800
@@ -227,7 +227,7 @@
   # When set to true, a capturer implementation that uses the
   # Windows.Graphics.Capture APIs will be available for use. This introduces a
   # dependency on the Win 10 SDK v10.0.17763.0.
-  rtc_enable_win_wgc = is_win
+  rtc_enable_win_wgc = is_win && !is_mingw
 
   # Includes the dav1d decoder in the internal decoder factory when set to true.
   rtc_include_dav1d_in_internal_decoder_factory = true
