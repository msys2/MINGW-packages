diff --git a/src/3rdparty/chromium/third_party/blink/renderer/BUILD.gn b/src/3rdparty/chromium/third_party/blink/renderer/BUILD.gn
index 39a955e..0a29b14 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/BUILD.gn
+++ b/src/3rdparty/chromium/third_party/blink/renderer/BUILD.gn
@@ -41,7 +41,7 @@ config("inside_blink") {
     "BLINK_IMPLEMENTATION=1",
     "INSIDE_BLINK",
   ]
-  if (is_clang || !is_win) {
+  if (is_clang || !is_msvc) {
     cflags += [
       "-Wno-unused-variable",
     ]
@@ -72,7 +72,7 @@ import("//build/config/pch.gni")
 
 config("blink_pch") {
   if (enable_precompiled_headers) {
-    if (is_win) {
+    if (is_msvc) {
       # This is a string rather than a file GN knows about. It has to match
       # exactly what's in the /FI flag below, and what might appear in the
       # source code in quotes for an #include directive.
@@ -86,6 +86,8 @@ config("blink_pch") {
 
       # Force include the header.
       cflags = [ "/FI$precompiled_header" ]
+    } else if (is_mingw) {
+      precompiled_source = "//third_party/blink/renderer/build/win/precompile.h"
     } else if (is_mac) {
       precompiled_source = "//third_party/blink/renderer/build/mac/prefix.h"
     } else if (is_linux) {
@@ -100,7 +102,7 @@ config("config") {
   cflags = []
   defines = []
 
-  if (is_win) {
+  if (is_msvc) {
     cflags += [
       "/wd4305",  # Truncation from 'type1' to 'type2'.
       "/wd4324",  # Struct padded due to declspec(align).
diff --git a/src/3rdparty/chromium/third_party/blink/renderer/bindings/core/v8/v8_initializer.cc b/src/3rdparty/chromium/third_party/blink/renderer/bindings/core/v8/v8_initializer.cc
index 35b2d7b..8f2f91a 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/bindings/core/v8/v8_initializer.cc
+++ b/src/3rdparty/chromium/third_party/blink/renderer/bindings/core/v8/v8_initializer.cc
@@ -765,9 +765,9 @@ void V8Initializer::InitializeV8Common(v8::Isolate* isolate) {
       HostGetImportMetaProperties);
   isolate->SetMetricsRecorder(std::make_shared<V8MetricsRecorder>(isolate));
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   isolate->SetFilterETWSessionByURLCallback(FilterETWSessionByURLCallback);
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 
   V8ContextSnapshot::EnsureInterfaceTemplates(isolate);
 
diff --git a/src/3rdparty/chromium/third_party/blink/renderer/core/BUILD.gn b/src/3rdparty/chromium/third_party/blink/renderer/core/BUILD.gn
index a24b89d..671279d 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/core/BUILD.gn
+++ b/src/3rdparty/chromium/third_party/blink/renderer/core/BUILD.gn
@@ -128,7 +128,7 @@ config("blink_core_pch") {
   # Add precompiled header (pch) support when enabled, possible and
   # making sense.
   if (enable_precompiled_headers) {
-    if (is_win) {
+    if (is_msvc) {
       # This is a string rather than a file GN knows about. It has to match
       # exactly what's in the /FI flag below, and what might appear in the
       # source code in quotes for an #include directive.
@@ -142,7 +142,7 @@ config("blink_core_pch") {
 
       # Force include the header.
       cflags = [ "/FI$precompiled_header" ]
-    } else if (is_mac || is_linux) {
+    } else if (is_mac || is_linux || is_mingw) {
       precompiled_source = "//third_party/blink/renderer/core/precompile_core.h"
     }
   }
@@ -1283,7 +1283,7 @@ target("jumbo_" + core_generated_target_type, "core_generated") {
     defines += [ "USING_V8_SHARED" ]
   }
 
-  if (is_win) {
+  if (is_msvc) {
     cflags += [
       # In generated bindings code: "switch contains default but no case".
       # 4701 and 4702 are disabled because of issues in Bison-generated
diff --git a/src/3rdparty/chromium/third_party/blink/renderer/core/css/css_numeric_literal_value.cc b/src/3rdparty/chromium/third_party/blink/renderer/core/css/css_numeric_literal_value.cc
index 0e9958d..cc47fd9 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/core/css/css_numeric_literal_value.cc
+++ b/src/3rdparty/chromium/third_party/blink/renderer/core/css/css_numeric_literal_value.cc
@@ -173,11 +173,11 @@ bool CSSNumericLiteralValue::IsComputationallyIndependent() const {
 }
 
 static String FormatNumber(double number, const char* suffix) {
-#if BUILDFLAG(IS_WIN) && _MSC_VER < 1900
+#if BUILDFLAG(IS_MSVC) && _MSC_VER < 1900
   unsigned oldFormat = _set_output_format(_TWO_DIGIT_EXPONENT);
 #endif
   String result = String::Format("%.6g%s", number, suffix);
-#if BUILDFLAG(IS_WIN) && _MSC_VER < 1900
+#if BUILDFLAG(IS_MSVC) && _MSC_VER < 1900
   _set_output_format(oldFormat);
 #endif
   return result;
diff --git a/src/3rdparty/chromium/third_party/blink/renderer/core/inspector/BUILD.gn b/src/3rdparty/chromium/third_party/blink/renderer/core/inspector/BUILD.gn
index 91adeca..6d38a16 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/core/inspector/BUILD.gn
+++ b/src/3rdparty/chromium/third_party/blink/renderer/core/inspector/BUILD.gn
@@ -106,7 +106,7 @@ jumbo_source_set("generated") {
                "//third_party/blink/renderer/core:core_include_dirs",
              ]
 
-  if (is_win) {
+  if (is_msvc) {
     cflags = [ "/wd4702" ]  # Unreachable code.
   }
 
diff --git a/src/3rdparty/chromium/third_party/blink/renderer/core/layout/layout_object.cc b/src/3rdparty/chromium/third_party/blink/renderer/core/layout/layout_object.cc
index e2e0219..9225b9a 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/core/layout/layout_object.cc
+++ b/src/3rdparty/chromium/third_party/blink/renderer/core/layout/layout_object.cc
@@ -327,7 +327,9 @@ struct SameSizeAsLayoutObject : public GarbageCollected<SameSizeAsLayoutObject>,
 #endif
 };
 
+#if !BUILDFLAG(IS_MINGW) // FIXME: check fails on MinGW
 ASSERT_SIZE(LayoutObject, SameSizeAsLayoutObject);
+#endif
 
 bool LayoutObject::affects_parent_block_ = false;
 
diff --git a/src/3rdparty/chromium/third_party/blink/renderer/core/precompile_core.h b/src/3rdparty/chromium/third_party/blink/renderer/core/precompile_core.h
index e88f40c..f307da4 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/core/precompile_core.h
+++ b/src/3rdparty/chromium/third_party/blink/renderer/core/precompile_core.h
@@ -9,7 +9,7 @@
 #ifndef THIRD_PARTY_BLINK_RENDERER_CORE_PRECOMPILE_CORE_H_
 #define THIRD_PARTY_BLINK_RENDERER_CORE_PRECOMPILE_CORE_H_
 
-#if defined(_MSC_VER)
+#if defined(_WIN32)
 #include "third_party/blink/renderer/build/win/precompile.h"
 #elif defined(__APPLE__)
 #include "third_party/blink/renderer/build/mac/prefix.h"
diff --git a/src/3rdparty/chromium/third_party/blink/renderer/modules/BUILD.gn b/src/3rdparty/chromium/third_party/blink/renderer/modules/BUILD.gn
index 17a103e..e276baa 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/modules/BUILD.gn
+++ b/src/3rdparty/chromium/third_party/blink/renderer/modules/BUILD.gn
@@ -207,7 +207,7 @@ jumbo_component("modules") {
   public_deps = sub_modules
   allow_circular_includes_from = sub_modules
 
-  if (is_win) {
+  if (is_msvc) {
     cflags =
         [ "/wd4334" ]  # Result of 32-bit shift implicitly converted to 64 bits.
   }
diff --git a/src/3rdparty/chromium/third_party/blink/renderer/modules/webaudio/BUILD.gn b/src/3rdparty/chromium/third_party/blink/renderer/modules/webaudio/BUILD.gn
index e7d9a69..45edca4 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/modules/webaudio/BUILD.gn
+++ b/src/3rdparty/chromium/third_party/blink/renderer/modules/webaudio/BUILD.gn
@@ -192,7 +192,7 @@ blink_modules_sources("webaudio") {
     "wave_shaper_processor.h",
   ]
 
-  if (is_win) {
+  if (is_msvc) {
     # Result of 32-bit shift implicitly converted to 64 bits.
     cflags = [ "/wd4334" ]
   }
diff --git a/src/3rdparty/chromium/third_party/blink/renderer/platform/BUILD.gn b/src/3rdparty/chromium/third_party/blink/renderer/platform/BUILD.gn
index 1323236..8892edd 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/platform/BUILD.gn
+++ b/src/3rdparty/chromium/third_party/blink/renderer/platform/BUILD.gn
@@ -251,7 +251,7 @@ config("blink_platform_pch") {
   visibility = []
   visibility = [ "./*" ]
   if (enable_precompiled_headers) {
-    if (is_win) {
+    if (is_msvc) {
       # This is a string rather than a file GN knows about. It has to match
       # exactly what's in the /FI flag below, and what might appear in the
       # source code in quotes for an #include directive.
@@ -265,7 +265,7 @@ config("blink_platform_pch") {
 
       # Force include the header.
       cflags = [ "/FI$precompiled_header" ]
-    } else if (is_mac || is_linux) {
+    } else if (is_mac || is_linux || is_mingw) {
       precompiled_source =
           "//third_party/blink/renderer/platform/precompile_platform.h"
     }
@@ -1802,10 +1802,12 @@ jumbo_component("platform") {
       "text/locale_icu.cc",
       "text/locale_icu.h",
     ]
-    cflags = [
-      "/wd4334",  # Result of 32-bit shift implicitly converted to 64 bits.
-      "/wd4724",  # Modulo by 0.
-    ]
+    if (is_msvc) {
+      cflags = [
+        "/wd4334",  # Result of 32-bit shift implicitly converted to 64 bits.
+        "/wd4724",  # Modulo by 0.
+      ]
+    }
   }
 
   if (is_android) {
@@ -2512,7 +2514,7 @@ if (current_cpu == "x86" || current_cpu == "x64") {
       "//third_party/blink/renderer:non_test_config",
     ]
     public_deps = [ ":blink_platform_public_deps" ]
-    if (is_win) {
+    if (is_msvc) {
       cflags = [ "/arch:AVX" ]
     } else {
       cflags = [ "-mavx" ]
diff --git a/src/3rdparty/chromium/third_party/blink/renderer/platform/fonts/font_platform_data.cc b/src/3rdparty/chromium/third_party/blink/renderer/platform/fonts/font_platform_data.cc
index fa0de1c..678b416 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/platform/fonts/font_platform_data.cc
+++ b/src/3rdparty/chromium/third_party/blink/renderer/platform/fonts/font_platform_data.cc
@@ -71,6 +71,7 @@ BASE_FEATURE(kOptimizeLinuxFonts,
 
 namespace {
 
+#if !BUILDFLAG(IS_MINGW)
 // These functions are also implemented in sandbox_ipc_linux.cc
 // Converts gfx::FontRenderParams::Hinting to WebFontRenderStyle::hintStyle.
 // Returns an int for serialization, but the underlying Blink type is a char.
@@ -100,6 +101,7 @@ int ConvertSubpixelRendering(
   NOTREACHED() << "Unexpected subpixel rendering value " << rendering;
   return 0;
 }
+#endif
 
 } // namespace
 
diff --git a/src/3rdparty/chromium/third_party/blink/renderer/platform/precompile_platform.h b/src/3rdparty/chromium/third_party/blink/renderer/platform/precompile_platform.h
index 83a9e90..2fdc22d 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/platform/precompile_platform.h
+++ b/src/3rdparty/chromium/third_party/blink/renderer/platform/precompile_platform.h
@@ -10,7 +10,7 @@
 
 #define THIRD_PARTY_BLINK_RENDERER_PLATFORM_PRECOMPILE_PLATFORM_H_
 
-#if defined(_MSC_VER)
+#if defined(_WIN32)
 #include "third_party/blink/renderer/build/win/precompile.h"
 #elif defined(__APPLE__)
 #include "third_party/blink/renderer/build/mac/prefix.h"
diff --git a/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/BUILD.gn b/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/BUILD.gn
index 0dfef18..1f87294 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/BUILD.gn
+++ b/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/BUILD.gn
@@ -21,7 +21,7 @@ visibility = [
 ]
 
 config("wtf_config") {
-  if (is_win) {
+  if (is_msvc) {
     cflags = [
       # Don't complain about calling specific versions of templatized
       # functions (e.g. in RefPtrHashMap.h).
@@ -35,6 +35,8 @@ config("wtf_config") {
       # build.
       cflags += [ "/wd4291" ]
     }
+  } else {
+    cflags = [ "-Wno-template-id-cdtor" ]
   }
 }
 
@@ -248,7 +250,7 @@ jumbo_component("wtf") {
     ]
   }
 
-  if (is_win) {
+  if (is_msvc) {
     cflags = [ "/wd4068" ]  # Unknown pragma.
 
     # Inject Visual Studio debug visualizers for our types into all targets
@@ -353,7 +355,7 @@ jumbo_source_set("wtf_unittests_sources") {
     "vector_test.cc",
   ]
 
-  if (is_win) {
+  if (is_msvc) {
     cflags = [ "/wd4068" ]  # Unknown pragma.
   }
 
diff --git a/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/stack_util.cc b/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/stack_util.cc
index 8432101..57dc9a2 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/stack_util.cc
+++ b/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/stack_util.cc
@@ -88,7 +88,7 @@ size_t GetUnderestimatedStackSize() {
 #endif
   }
   return pthread_get_stacksize_np(pthread_self());
-#elif BUILDFLAG(IS_WIN) && defined(COMPILER_MSVC)
+#elif BUILDFLAG(IS_WIN)
   return Threading::ThreadStackSize();
 #else
 #error "Stack frame size estimation not supported on this platform."
@@ -131,7 +131,7 @@ void* GetStackStart() {
 #endif
 #elif BUILDFLAG(IS_APPLE)
   return pthread_get_stackaddr_np(pthread_self());
-#elif BUILDFLAG(IS_WIN) && defined(COMPILER_MSVC)
+#elif BUILDFLAG(IS_WIN)
 // On Windows stack limits for the current thread are available in
 // the thread information block (TIB).
 // On Windows ARM64, stack limits could be retrieved by calling
@@ -180,7 +180,7 @@ void InitializeMainThreadStackEstimate() {
   g_main_thread_underestimated_stack_size = underestimated_stack_size;
 }
 
-#if BUILDFLAG(IS_WIN) && defined(COMPILER_MSVC)
+#if BUILDFLAG(IS_WIN)
 size_t ThreadStackSize() {
   // Notice that we cannot use the TIB's StackLimit for the stack end, as i
   // tracks the end of the committed range. We're after the end of the reserved
diff --git a/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/stack_util.h b/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/stack_util.h
index 9da5a68..0791988 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/stack_util.h
+++ b/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/stack_util.h
@@ -29,7 +29,7 @@ WTF_EXPORT extern uintptr_t g_main_thread_underestimated_stack_size;
 
 WTF_EXPORT void InitializeMainThreadStackEstimate();
 
-#if BUILDFLAG(IS_WIN) && defined(COMPILER_MSVC)
+#if BUILDFLAG(IS_WIN)
 size_t ThreadStackSize();
 #endif
 
diff --git a/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/threading.cc b/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/threading.cc
index 3a4c9d4..e333875 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/threading.cc
+++ b/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/threading.cc
@@ -50,7 +50,7 @@ void Threading::Initialize() {
   WtfThreading();
 }
 
-#if BUILDFLAG(IS_WIN) && defined(COMPILER_MSVC)
+#if BUILDFLAG(IS_WIN)
 size_t Threading::ThreadStackSize() {
   // Needed to bootstrap Threading on Windows, because this value is needed
   // before the main thread data is fully initialized.
diff --git a/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/threading.h b/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/threading.h
index 302a200..a348959 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/threading.h
+++ b/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/threading.h
@@ -77,7 +77,7 @@ class WTF_EXPORT Threading {
   // Must be called on the main thread before any callers to wtfThreadData().
   static void Initialize();
 
-#if BUILDFLAG(IS_WIN) && defined(COMPILER_MSVC)
+#if BUILDFLAG(IS_WIN)
   static size_t ThreadStackSize();
 #endif
 
@@ -86,7 +86,7 @@ class WTF_EXPORT Threading {
 
   base::PlatformThreadId thread_id_;
 
-#if BUILDFLAG(IS_WIN) && defined(COMPILER_MSVC)
+#if BUILDFLAG(IS_WIN)
   size_t thread_stack_size_ = 0u;
 #endif
 
diff --git a/src/3rdparty/chromium/third_party/blink/tools/BUILD.gn b/src/3rdparty/chromium/third_party/blink/tools/BUILD.gn
index 83690ce..cfc58ea 100644
--- a/src/3rdparty/chromium/third_party/blink/tools/BUILD.gn
+++ b/src/3rdparty/chromium/third_party/blink/tools/BUILD.gn
@@ -40,7 +40,7 @@ group("wpt_tests_isolate") {
   if (!is_ios) {
     data_deps += [ ":wpt_tests_mojo_bindings" ]
   }
-  if (is_win) {
+  if (is_msvc) {
     data_deps += [ "//build/win:copy_cdb_to_output" ]
   }
 }
