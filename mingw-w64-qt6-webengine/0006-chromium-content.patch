diff --git a/src/3rdparty/chromium/content/app/content_main.cc b/src/3rdparty/chromium/content/app/content_main.cc
index 79a4736..8b3b8b2 100644
--- a/src/3rdparty/chromium/content/app/content_main.cc
+++ b/src/3rdparty/chromium/content/app/content_main.cc
@@ -53,7 +53,9 @@
 #include "base/win/process_startup_helper.h"
 #include "base/win/win_util.h"
 #include "base/win/windows_version.h"
+#if defined(COMPILER_MSVC)
 #include "ui/base/win/atl_module.h"
+#endif
 #include "ui/gfx/switches.h"
 #endif
 
@@ -225,7 +227,9 @@ RunContentProcess(ContentMainParams params,
 
 #if BUILDFLAG(IS_WIN)
     base::win::RegisterInvalidParamHandler();
+#if defined(COMPILER_MSVC)
     ui::win::CreateATLModuleIfNeeded();
+#endif
 #endif  // BUILDFLAG(IS_WIN)
 
 #if !BUILDFLAG(IS_ANDROID)
diff --git a/src/3rdparty/chromium/content/app/content_main_runner_impl.cc b/src/3rdparty/chromium/content/app/content_main_runner_impl.cc
index 7a01ed8..50096ea 100644
--- a/src/3rdparty/chromium/content/app/content_main_runner_impl.cc
+++ b/src/3rdparty/chromium/content/app/content_main_runner_impl.cc
@@ -932,11 +932,11 @@ int ContentMainRunnerImpl::Initialize(ContentMainParams params) {
   if (enable_startup_tracing)
     tracing::EnableStartupTracingIfNeeded();
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 #if !BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
   base::trace_event::TraceEventETWExport::EnableETWExport();
 #endif
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 
   // Android tracing started at the beginning of the method.
   // Other OSes have to wait till we get here in order for all the memory
diff --git a/src/3rdparty/chromium/content/browser/BUILD.gn b/src/3rdparty/chromium/content/browser/BUILD.gn
index 4354f11..080746f 100644
--- a/src/3rdparty/chromium/content/browser/BUILD.gn
+++ b/src/3rdparty/chromium/content/browser/BUILD.gn
@@ -2920,6 +2920,17 @@ jumbo_source_set("browser") {
       "speech/tts_win.cc",
       "utility_sandbox_delegate_win.cc",
     ]
+    if (is_mingw) {
+      sources -= [
+        "installedapp/installed_app_provider_impl_win.cc",
+        "installedapp/installed_app_provider_impl_win.h",
+        "renderer_host/direct_manipulation_event_handler_win.cc",
+        "renderer_host/direct_manipulation_event_handler_win.h",
+        "renderer_host/direct_manipulation_helper_win.cc",
+        "renderer_host/direct_manipulation_helper_win.h",
+        "speech/tts_win.cc",
+      ]
+    }
     defines += [
       # This prevents the inclusion of atlhost.h which paired
       # with the windows 8 sdk it does the wrong thing.
@@ -2934,15 +2945,15 @@ jumbo_source_set("browser") {
       "//third_party/wtl",
     ]
     libs += [
-      "comctl32.lib",
-      "dinput8.lib",
-      "dwmapi.lib",
-      "dxguid.lib",
-      "imm32.lib",
-      "oleacc.lib",
-      "portabledeviceguids.lib",
-      "uiautomationcore.lib",
-      "wtsapi32.lib",
+      "comctl32",
+      "dinput8",
+      "dwmapi",
+      "dxguid",
+      "imm32",
+      "oleacc",
+      "portabledeviceguids",
+      "uiautomationcore",
+      "wtsapi32",
     ]
     if (is_qtwebengine) {
       sources -= [
diff --git a/src/3rdparty/chromium/content/browser/browser_main_loop.cc b/src/3rdparty/chromium/content/browser/browser_main_loop.cc
index 6fd5f35..d398aae 100644
--- a/src/3rdparty/chromium/content/browser/browser_main_loop.cc
+++ b/src/3rdparty/chromium/content/browser/browser_main_loop.cc
@@ -1219,7 +1219,7 @@ void BrowserMainLoop::ShutdownThreadsAndCleanUp() {
 // On Mac and windows, the monitor needs to be destroyed on the same thread
 // as they were created. On Linux, the monitor will be deleted when IO thread
 // goes away.
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   system_message_window_.reset();
 #elif BUILDFLAG(IS_MAC)
   device_monitor_mac_.reset();
@@ -1403,7 +1403,7 @@ void BrowserMainLoop::PostCreateThreadsImpl() {
 #endif
   }
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   system_message_window_ = std::make_unique<media::SystemMessageWindowWin>();
 #elif (BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)) && defined(USE_UDEV)
   device_monitor_linux_ = std::make_unique<media::DeviceMonitorLinux>();
diff --git a/src/3rdparty/chromium/content/browser/devtools/devtools_pipe_handler.cc b/src/3rdparty/chromium/content/browser/devtools/devtools_pipe_handler.cc
index cba089b..7edda7e 100644
--- a/src/3rdparty/chromium/content/browser/devtools/devtools_pipe_handler.cc
+++ b/src/3rdparty/chromium/content/browser/devtools/devtools_pipe_handler.cc
@@ -91,7 +91,7 @@ class PipeIOBase {
   base::AtomicFlag shutting_down_;
 };
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 // Temporary CRT parameter validation error handler override that allows
 //  _get_osfhandle() to return INVALID_HANDLE_VALUE instead of crashing.
 class ScopedInvalidParameterHandlerOverride {
@@ -123,7 +123,7 @@ class ScopedInvalidParameterHandlerOverride {
   const _invalid_parameter_handler prev_invalid_parameter_handler_;
 };
 
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 
 }  // namespace
 
@@ -135,7 +135,9 @@ class PipeReaderBase : public PipeIOBase {
         devtools_handler_(std::move(devtools_handler)),
         read_fd_(read_fd) {
 #if BUILDFLAG(IS_WIN)
+#if defined(COMPILER_MSVC)
     ScopedInvalidParameterHandlerOverride invalid_parameter_handler_override;
+#endif
     read_handle_ = reinterpret_cast<HANDLE>(_get_osfhandle(read_fd));
 #endif
   }
@@ -152,7 +154,9 @@ class PipeReaderBase : public PipeIOBase {
 #if BUILDFLAG(IS_WIN)
     // Cancel pending synchronous read.
     CancelIoEx(read_handle_, nullptr);
+#if defined(COMPILER_MSVC)
     ScopedInvalidParameterHandlerOverride invalid_parameter_handler_override;
+#endif
     _close(read_fd_);
     read_handle_ = INVALID_HANDLE_VALUE;
 #else
@@ -219,7 +223,9 @@ class PipeWriterBase : public PipeIOBase {
   explicit PipeWriterBase(int write_fd)
       : PipeIOBase("DevToolsPipeHandlerWriteThread"), write_fd_(write_fd) {
 #if BUILDFLAG(IS_WIN)
+#if defined(COMPILER_MSVC)
     ScopedInvalidParameterHandlerOverride invalid_parameter_handler_override;
+#endif
     write_handle_ = reinterpret_cast<HANDLE>(_get_osfhandle(write_fd));
 #endif
   }
@@ -235,7 +241,9 @@ class PipeWriterBase : public PipeIOBase {
  protected:
   void ClosePipe() override {
 #if BUILDFLAG(IS_WIN)
+#if defined(COMPILER_MSVC)
     ScopedInvalidParameterHandlerOverride invalid_parameter_handler_override;
+#endif
     _close(write_fd_);
     write_handle_ = INVALID_HANDLE_VALUE;
 #else
diff --git a/src/3rdparty/chromium/content/browser/installedapp/installed_app_provider_impl.cc b/src/3rdparty/chromium/content/browser/installedapp/installed_app_provider_impl.cc
index f0b5739..549210d 100644
--- a/src/3rdparty/chromium/content/browser/installedapp/installed_app_provider_impl.cc
+++ b/src/3rdparty/chromium/content/browser/installedapp/installed_app_provider_impl.cc
@@ -49,7 +49,7 @@ void InstalledAppProviderImpl::FilterInstalledApps(
     FilterInstalledAppsCallback callback) {
   bool is_implemented = false;
   if (base::FeatureList::IsEnabled(features::kInstalledAppProvider)) {
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
     is_implemented = true;
     bool is_off_the_record =
         render_frame_host().GetProcess()->GetBrowserContext()->IsOffTheRecord();
diff --git a/src/3rdparty/chromium/content/browser/media/capture/desktop_capture_device.cc b/src/3rdparty/chromium/content/browser/media/capture/desktop_capture_device.cc
index 4ab3c36..cba7e7a 100644
--- a/src/3rdparty/chromium/content/browser/media/capture/desktop_capture_device.cc
+++ b/src/3rdparty/chromium/content/browser/media/capture/desktop_capture_device.cc
@@ -741,7 +741,7 @@ std::unique_ptr<media::VideoCaptureDevice> DesktopCaptureDevice::Create(
   std::unique_ptr<webrtc::DesktopCapturer> capturer;
   std::unique_ptr<media::VideoCaptureDevice> result;
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   options.set_allow_cropping_window_capturer(true);
 
   // We prefer to allow the WGC and DXGI capturers to embed the cursor when
diff --git a/src/3rdparty/chromium/content/browser/media/key_system_support_win.cc b/src/3rdparty/chromium/content/browser/media/key_system_support_win.cc
index 9cdaffb..f7b5ce7 100644
--- a/src/3rdparty/chromium/content/browser/media/key_system_support_win.cc
+++ b/src/3rdparty/chromium/content/browser/media/key_system_support_win.cc
@@ -54,6 +54,7 @@ void GetMediaFoundationServiceCdmCapability(
     const base::FilePath& cdm_path,
     bool is_hw_secure,
     media::CdmCapabilityCB cdm_capability_cb) {
+#if defined(COMPILER_MSVC)
   if (!media::MediaFoundationCdm::IsAvailable()) {
     DVLOG(1) << "MediaFoundationCdm not available!";
     std::move(cdm_capability_cb).Run(std::nullopt);
@@ -67,6 +68,11 @@ void GetMediaFoundationServiceCdmCapability(
                       base::BindOnce(&OnKeySystemCapability, is_hw_secure,
                                      std::move(cdm_capability_cb)),
                       false, nullptr));
+#else
+  DVLOG(1) << "MediaFoundationCdm not available!";
+  std::move(cdm_capability_cb).Run(absl::nullopt);
+  return;
+#endif
 }
 
 }  // namespace content
diff --git a/src/3rdparty/chromium/content/browser/renderer_host/dwrite_font_proxy_impl_win.cc b/src/3rdparty/chromium/content/browser/renderer_host/dwrite_font_proxy_impl_win.cc
index 257f848..6c6dd8d 100644
--- a/src/3rdparty/chromium/content/browser/renderer_host/dwrite_font_proxy_impl_win.cc
+++ b/src/3rdparty/chromium/content/browser/renderer_host/dwrite_font_proxy_impl_win.cc
@@ -37,7 +37,9 @@
 #include "third_party/blink/public/common/font_unique_name_lookup/font_unique_name_table.pb.h"
 #include "third_party/blink/public/common/font_unique_name_lookup/icu_fold_case_util.h"
 #include "ui/gfx/win/direct_write.h"
+#if defined(COMPILER_MSVC)
 #include "ui/gfx/win/text_analysis_source.h"
+#endif
 
 namespace mswr = Microsoft::WRL;
 
@@ -110,6 +112,7 @@ bool CheckRequiredStylesPresent(IDWriteFontCollection* collection,
   return true;
 }
 
+#if defined(COMPILER_MSVC)
 HRESULT GetLocalFontCollection(mswr::ComPtr<IDWriteFactory3>& factory,
                                IDWriteFontCollection** collection) {
   if (!g_sideloaded_fonts) {
@@ -176,6 +179,7 @@ HRESULT GetLocalFontCollection(mswr::ComPtr<IDWriteFactory3>& factory,
   hr = collection1->QueryInterface(collection);
   return hr;
 }
+#endif
 
 }  // namespace
 
@@ -363,6 +367,7 @@ void DWriteFontProxyImpl::MapCharacters(
     }
   }
 
+#if defined(COMPILER_MSVC)
   mswr::ComPtr<IDWriteFont> mapped_font;
 
   mswr::ComPtr<IDWriteNumberSubstitution> number_substitution;
@@ -444,6 +449,7 @@ void DWriteFontProxyImpl::MapCharacters(
   // Could not find a matching family
   DCHECK_EQ(result->family_index, UINT32_MAX);
   DCHECK_GT(result->mapped_length, 0u);
+#endif
 }
 
 void DWriteFontProxyImpl::MatchUniqueFont(
@@ -568,7 +574,11 @@ void DWriteFontProxyImpl::InitializeDirectWrite() {
 
   // Normally identical to factory_->GetSystemFontCollection() unless a
   // sideloaded font has been added using SideLoadFontForTesting().
+#if defined(COMPILER_MSVC)
   HRESULT hr = GetLocalFontCollection(factory3_, &collection_);
+#else
+  HRESULT hr = factory_->GetSystemFontCollection(&collection_);
+#endif
   DCHECK(SUCCEEDED(hr));
 
   if (!collection_) {
diff --git a/src/3rdparty/chromium/content/browser/renderer_host/media/in_process_video_capture_device_launcher.cc b/src/3rdparty/chromium/content/browser/renderer_host/media/in_process_video_capture_device_launcher.cc
index 2ed5658..b29ebf5 100644
--- a/src/3rdparty/chromium/content/browser/renderer_host/media/in_process_video_capture_device_launcher.cc
+++ b/src/3rdparty/chromium/content/browser/renderer_host/media/in_process_video_capture_device_launcher.cc
@@ -410,7 +410,7 @@ InProcessVideoCaptureDeviceLauncher::CreateDeviceClient(
     base::WeakPtr<media::VideoFrameReceiver> receiver_on_io_thread) {
   DCHECK_CURRENTLY_ON(BrowserThread::IO);
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   scoped_refptr<media::DXGIDeviceManager> dxgi_device_manager;
   if (video_capture_system_ && video_capture_system_->GetFactory()) {
     dxgi_device_manager =
diff --git a/src/3rdparty/chromium/content/browser/renderer_host/media/media_stream_manager.cc b/src/3rdparty/chromium/content/browser/renderer_host/media/media_stream_manager.cc
index 88b1419..688f198 100644
--- a/src/3rdparty/chromium/content/browser/renderer_host/media/media_stream_manager.cc
+++ b/src/3rdparty/chromium/content/browser/renderer_host/media/media_stream_manager.cc
@@ -1550,6 +1550,7 @@ MediaStreamManager::MediaStreamManager(
 
   DCHECK(audio_system_);
 
+#if !BUILDFLAG(IS_MINGW)
   if (!video_capture_provider) {
     scoped_refptr<base::SingleThreadTaskRunner> device_task_runner;
 
@@ -1606,6 +1607,7 @@ MediaStreamManager::MediaStreamManager(
     }
   }
   InitializeMaybeAsync(std::move(video_capture_provider));
+#endif
 
   audio_service_listener_ = std::make_unique<AudioServiceListener>();
 }
diff --git a/src/3rdparty/chromium/content/browser/speech/tts_platform_impl.cc b/src/3rdparty/chromium/content/browser/speech/tts_platform_impl.cc
index 07b1e98..8072c30 100644
--- a/src/3rdparty/chromium/content/browser/speech/tts_platform_impl.cc
+++ b/src/3rdparty/chromium/content/browser/speech/tts_platform_impl.cc
@@ -22,7 +22,7 @@ TtsPlatform* TtsPlatform::GetInstance() {
     return result;
 #endif
 
-#if BUILDFLAG(IS_CHROMEOS)
+#if BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_MINGW)
   // On Chrome OS, the platform TTS definition is provided by the content
   // client.
   //
diff --git a/src/3rdparty/chromium/content/child/BUILD.gn b/src/3rdparty/chromium/content/child/BUILD.gn
index b409564..5f43d2a 100644
--- a/src/3rdparty/chromium/content/child/BUILD.gn
+++ b/src/3rdparty/chromium/content/child/BUILD.gn
@@ -132,7 +132,7 @@ target(link_target_type, "child") {
     ]
   }
 
-  if (is_win) {
+  if (is_msvc) {
     sources += [
       "dwrite_font_proxy/dwrite_font_proxy_init_impl_win.cc",
       "dwrite_font_proxy/dwrite_font_proxy_init_impl_win.h",
@@ -148,6 +148,14 @@ target(link_target_type, "child") {
     libs = [ "dwrite.lib" ]
   }
 
+  if (is_mingw) {
+    sources += [
+      "font_warmup_win.cc",
+      "font_warmup_win.h",
+    ]
+    libs = [ "dwrite" ]
+  }
+
   if (is_mac) {
     sources += [
       "child_process_sandbox_support_impl_mac.cc",
diff --git a/src/3rdparty/chromium/content/gpu/gpu_main.cc b/src/3rdparty/chromium/content/gpu/gpu_main.cc
index 3f18e42..acfc145 100644
--- a/src/3rdparty/chromium/content/gpu/gpu_main.cc
+++ b/src/3rdparty/chromium/content/gpu/gpu_main.cc
@@ -241,7 +241,7 @@ int GpuMain(MainFunctionParams parameters) {
 
 #if BUILDFLAG(IS_WIN)
   base::win::EnableHighDPISupport();
-#if !BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY)
+#if !BUILDFLAG(USE_PERFETTO_CLIENT_LIBRARY) && BUILDFLAG(IS_MSVC)
   base::trace_event::TraceEventETWExport::EnableETWExport();
 #endif
 
diff --git a/src/3rdparty/chromium/content/ppapi_plugin/ppapi_plugin_main.cc b/src/3rdparty/chromium/content/ppapi_plugin/ppapi_plugin_main.cc
index 89e84b2..48e50c6 100644
--- a/src/3rdparty/chromium/content/ppapi_plugin/ppapi_plugin_main.cc
+++ b/src/3rdparty/chromium/content/ppapi_plugin/ppapi_plugin_main.cc
@@ -169,7 +169,7 @@ int PpapiPluginMain(MainFunctionParams parameters) {
     tracing::EnableStartupTracingIfNeeded();
   }
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   if (!base::win::IsUser32AndGdi32Available())
     gfx::win::InitializeDirectWrite();
   InitializeDWriteFontProxy();
@@ -191,7 +191,7 @@ int PpapiPluginMain(MainFunctionParams parameters) {
 
   run_loop.Run();
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   UninitializeDWriteFontProxy();
 #endif
   return 0;
diff --git a/src/3rdparty/chromium/content/renderer/renderer_main_platform_delegate_win.cc b/src/3rdparty/chromium/content/renderer/renderer_main_platform_delegate_win.cc
index e7b8caa..3792121 100644
--- a/src/3rdparty/chromium/content/renderer/renderer_main_platform_delegate_win.cc
+++ b/src/3rdparty/chromium/content/renderer/renderer_main_platform_delegate_win.cc
@@ -53,11 +53,15 @@ void RendererMainPlatformDelegate::PlatformInitialize() {
     std::unique_ptr<icu::TimeZone> zone(icu::TimeZone::createDefault());
   }
 
+#if defined(COMPILER_MSVC)
   InitializeDWriteFontProxy();
+#endif
 }
 
 void RendererMainPlatformDelegate::PlatformUninitialize() {
+#if defined(COMPILER_MSVC)
   UninitializeDWriteFontProxy();
+#endif
 }
 
 bool RendererMainPlatformDelegate::EnableSandbox() {
diff --git a/src/3rdparty/chromium/content/shell/BUILD.gn b/src/3rdparty/chromium/content/shell/BUILD.gn
index 0e4e43a..32e7c7d 100644
--- a/src/3rdparty/chromium/content/shell/BUILD.gn
+++ b/src/3rdparty/chromium/content/shell/BUILD.gn
@@ -1029,7 +1029,7 @@ group("content_shell_crash_test") {
       "//components/crash/content/tools/dmp2minidump.py",
     ]
   }
-  if (is_win) {
+  if (is_msvc) {
     data_deps += [ "//build/win:copy_cdb_to_output" ]
   }
   if (is_posix) {
diff --git a/src/3rdparty/chromium/content/utility/services.cc b/src/3rdparty/chromium/content/utility/services.cc
index d9c85c0..83d0d24 100644
--- a/src/3rdparty/chromium/content/utility/services.cc
+++ b/src/3rdparty/chromium/content/utility/services.cc
@@ -285,7 +285,7 @@ auto RunAccessibilityService(
 }
 #endif  // BUILDFLAG(ENABLE_ACCESSIBILITY_SERVICE)
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
 std::unique_ptr<media::MediaFoundationServiceBroker>
 RunMediaFoundationServiceBroker(
     mojo::PendingReceiver<media::mojom::MediaFoundationServiceBroker>
@@ -293,7 +293,7 @@ RunMediaFoundationServiceBroker(
   return std::make_unique<media::MediaFoundationServiceBroker>(
       std::move(receiver), base::BindOnce(&EnsureSandboxedWin));
 }
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 
 auto RunStorageService(
     mojo::PendingReceiver<storage::mojom::StorageService> receiver) {
@@ -426,9 +426,9 @@ void RegisterMainThreadServices(mojo::ServiceFactory& services) {
   services.Add(RunCdmServiceBroker);
 #endif
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_MSVC)
   services.Add(RunMediaFoundationServiceBroker);
-#endif  // BUILDFLAG(IS_WIN)
+#endif  // BUILDFLAG(IS_MSVC)
 
 #if BUILDFLAG(ENABLE_VR) && !BUILDFLAG(IS_ANDROID)
   services.Add(RunXrDeviceService);
