diff -ur a/src/3rdparty/chromium/content/app/content_main.cc b/src/3rdparty/chromium/content/app/content_main.cc
--- a/src/3rdparty/chromium/content/app/content_main.cc	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/content/app/content_main.cc	2023-12-14 02:37:20.096654300 +0800
@@ -52,8 +52,10 @@
 #include "base/win/process_startup_helper.h"
 #include "base/win/win_util.h"
 #include "base/win/windows_version.h"
+#if defined(COMPILER_MSVC)
 #include "ui/base/win/atl_module.h"
 #endif
+#endif
 
 #if BUILDFLAG(IS_POSIX) && !BUILDFLAG(IS_ANDROID)
 #include <locale.h>
@@ -223,7 +225,9 @@
 
 #if BUILDFLAG(IS_WIN)
     base::win::RegisterInvalidParamHandler();
+#if defined(COMPILER_MSVC)
     ui::win::CreateATLModuleIfNeeded();
+#endif
 #endif  // BUILDFLAG(IS_WIN)
 
 #if !BUILDFLAG(IS_ANDROID)
diff -ur a/src/3rdparty/chromium/content/browser/BUILD.gn b/src/3rdparty/chromium/content/browser/BUILD.gn
--- a/src/3rdparty/chromium/content/browser/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/content/browser/BUILD.gn	2023-12-23 00:44:03.704223900 +0800
@@ -2759,6 +2759,17 @@
       "speech/tts_win.cc",
       "utility_sandbox_delegate_win.cc",
     ]
+    if (is_mingw) {
+      sources -= [
+        "installedapp/installed_app_provider_impl_win.cc",
+        "installedapp/installed_app_provider_impl_win.h",
+        "renderer_host/direct_manipulation_event_handler_win.cc",
+        "renderer_host/direct_manipulation_event_handler_win.h",
+        "renderer_host/direct_manipulation_helper_win.cc",
+        "renderer_host/direct_manipulation_helper_win.h",
+        "speech/tts_win.cc",
+      ]
+    }
     defines += [
       # This prevents the inclusion of atlhost.h which paired
       # with the windows 8 sdk it does the wrong thing.
@@ -2772,15 +2783,15 @@
       "//third_party/wtl",
     ]
     libs += [
-      "comctl32.lib",
-      "dinput8.lib",
-      "dwmapi.lib",
-      "dxguid.lib",
-      "imm32.lib",
-      "oleacc.lib",
-      "portabledeviceguids.lib",
-      "uiautomationcore.lib",
-      "wtsapi32.lib",
+      "comctl32",
+      "dinput8",
+      "dwmapi",
+      "dxguid",
+      "imm32",
+      "oleacc",
+      "portabledeviceguids",
+      "uiautomationcore",
+      "wtsapi32",
     ]
     if (is_qtwebengine) {
       sources -= [
diff -ur a/src/3rdparty/chromium/content/browser/gpu/gpu_internals_ui.cc b/src/3rdparty/chromium/content/browser/gpu/gpu_internals_ui.cc
--- a/src/3rdparty/chromium/content/browser/gpu/gpu_internals_ui.cc	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/content/browser/gpu/gpu_internals_ui.cc	2024-01-01 17:36:59.374499200 +0800
@@ -451,7 +451,7 @@
   return display_info;
 }
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_WIN) && defined(COMPILER_MSVC)
 const char* D3dFeatureLevelToString(D3D_FEATURE_LEVEL level) {
   switch (level) {
     case D3D_FEATURE_LEVEL_1_0_CORE:
@@ -512,7 +512,7 @@
         "Hardware Concurrency",
         base::NumberToString(device_perf_info->hardware_concurrency)));
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_WIN) && defined(COMPILER_MSVC)
     list.Append(display::BuildGpuInfoEntry(
         "System Commit Limit (Gb)",
         base::NumberToString(device_perf_info->system_commit_limit_mb / 1024)));
diff -ur a/src/3rdparty/chromium/content/browser/media/capture/desktop_capture_device.cc b/src/3rdparty/chromium/content/browser/media/capture/desktop_capture_device.cc
--- a/src/3rdparty/chromium/content/browser/media/capture/desktop_capture_device.cc	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/content/browser/media/capture/desktop_capture_device.cc	2023-12-14 02:37:21.815405000 +0800
@@ -596,7 +596,7 @@
   std::unique_ptr<webrtc::DesktopCapturer> capturer;
   std::unique_ptr<media::VideoCaptureDevice> result;
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_WIN) && defined(COMPILER_MSVC)
   options.set_allow_cropping_window_capturer(true);
   if (base::FeatureList::IsEnabled(features::kWebRtcAllowWgcDesktopCapturer)) {
     options.set_allow_wgc_capturer(true);
diff -ur a/src/3rdparty/chromium/content/browser/media/key_system_support_win.cc b/src/3rdparty/chromium/content/browser/media/key_system_support_win.cc
--- a/src/3rdparty/chromium/content/browser/media/key_system_support_win.cc	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/content/browser/media/key_system_support_win.cc	2023-12-14 02:37:21.924741800 +0800
@@ -46,11 +46,13 @@
     const std::string& key_system,
     const base::FilePath& cdm_path,
     CdmCapabilityCB cdm_capability_cb) {
+#if defined(COMPILER_MSVC)
   if (!media::MediaFoundationCdm::IsAvailable()) {
     DVLOG(1) << "MediaFoundationCdm not available!";
     std::move(cdm_capability_cb).Run(absl::nullopt);
     return;
   }
+#endif
 
   // CDM capability is global, use a generic BrowserContext and Site to query.
   auto& mf_service = GetMediaFoundationService(nullptr, GURL(), cdm_path);
diff -ur a/src/3rdparty/chromium/content/browser/media/media_interface_proxy.cc b/src/3rdparty/chromium/content/browser/media/media_interface_proxy.cc
--- a/src/3rdparty/chromium/content/browser/media/media_interface_proxy.cc	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/content/browser/media/media_interface_proxy.cc	2023-12-14 02:37:21.971634700 +0800
@@ -194,12 +194,14 @@
   void CreateDCOMPSurfaceRegistry(
       mojo::PendingReceiver<media::mojom::DCOMPSurfaceRegistry> receiver)
       override {
+#if defined(COMPILER_MSVC)
     if (media::SupportMediaFoundationPlayback()) {
       // TODO(crbug.com/1233379): Pass IO task runner and remove the PostTask()
       // in DCOMPSurfaceRegistryBroker after bug fixed.
       mojo::MakeSelfOwnedReceiver(
           std::make_unique<DCOMPSurfaceRegistryBroker>(), std::move(receiver));
     }
+#endif
   }
 #endif  // BUILDFLAG(IS_WIN)
 
diff -ur a/src/3rdparty/chromium/content/browser/renderer_host/dwrite_font_proxy_impl_win.cc b/src/3rdparty/chromium/content/browser/renderer_host/dwrite_font_proxy_impl_win.cc
--- a/src/3rdparty/chromium/content/browser/renderer_host/dwrite_font_proxy_impl_win.cc	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/content/browser/renderer_host/dwrite_font_proxy_impl_win.cc	2023-12-14 02:37:22.081013100 +0800
@@ -39,7 +39,9 @@
 #include "third_party/skia/include/core/SkTypeface.h"
 #include "third_party/skia/include/ports/SkTypeface_win.h"
 #include "ui/gfx/win/direct_write.h"
+#if defined(COMPILER_MSVC)
 #include "ui/gfx/win/text_analysis_source.h"
+#endif
 
 namespace mswr = Microsoft::WRL;
 
@@ -312,6 +314,7 @@
     }
   }
 
+#if defined(COMPILER_MSVC)
   mswr::ComPtr<IDWriteFont> mapped_font;
 
   mswr::ComPtr<IDWriteNumberSubstitution> number_substitution;
@@ -394,6 +397,7 @@
   LogMessageFilterError(MessageFilterError::MAP_CHARACTERS_NO_FAMILY);
   DCHECK_EQ(result->family_index, UINT32_MAX);
   DCHECK_GT(result->mapped_length, 0u);
+#endif
 }
 
 void DWriteFontProxyImpl::MatchUniqueFont(
diff -ur a/src/3rdparty/chromium/content/child/BUILD.gn b/src/3rdparty/chromium/content/child/BUILD.gn
--- a/src/3rdparty/chromium/content/child/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/content/child/BUILD.gn	2023-12-14 02:37:22.580987300 +0800
@@ -127,7 +127,7 @@
     ]
   }
 
-  if (is_win) {
+  if (is_win && !is_mingw) {
     sources += [
       "dwrite_font_proxy/dwrite_font_proxy_init_impl_win.cc",
       "dwrite_font_proxy/dwrite_font_proxy_init_impl_win.h",
@@ -143,6 +143,14 @@
     libs = [ "dwrite.lib" ]
   }
 
+  if (is_mingw) {
+    sources += [
+      "font_warmup_win.cc",
+      "font_warmup_win.h",
+    ]
+    libs = [ "dwrite" ]
+  }
+
   if (is_mac) {
     sources += [
       "child_process_sandbox_support_impl_mac.cc",
diff -ur a/src/3rdparty/chromium/content/shell/BUILD.gn b/src/3rdparty/chromium/content/shell/BUILD.gn
--- a/src/3rdparty/chromium/content/shell/BUILD.gn	2023-10-04 03:49:54.000000000 +0800
+++ b/src/3rdparty/chromium/content/shell/BUILD.gn	2023-12-14 02:37:22.674794400 +0800
@@ -965,7 +965,7 @@
       "//components/crash/content/tools/dmp2minidump.py",
     ]
   }
-  if (is_win) {
+  if (is_win && !is_mingw) {
     data_deps += [ "//build/win:copy_cdb_to_output" ]
   }
   if (is_posix) {
