--- a/configure.cmake	2023-11-21 00:08:07.000000000 +0800
+++ b/configure.cmake	2024-01-02 21:00:57.404191800 +0800
@@ -201,7 +201,7 @@
     LABEL "winversion"
     CODE
 "
-#if !defined(__clang__) && _MSC_VER < 1922
+#if !defined(__clang__) && defined(_MSC_VER) && _MSC_VER < 1922
 #error unsupported Visual Studio version
 #endif
 int main(void){
@@ -330,15 +330,15 @@
 )
 qt_feature("webengine-system-libwebp" PRIVATE
     LABEL "libwebp, libwebpmux and libwebpdemux"
-    CONDITION UNIX AND WEBP_FOUND
+    CONDITION (UNIX OR MINGW) AND WEBP_FOUND
 )
 qt_feature("webengine-system-libopenjpeg2" PRIVATE
     LABEL "libopenjpeg2"
-    CONDITION UNIX AND LIBOPENJP2_FOUND
+    CONDITION (UNIX OR MINGW) AND LIBOPENJP2_FOUND
 )
 qt_feature("webengine-system-opus" PRIVATE
     LABEL "opus"
-    CONDITION UNIX AND OPUS_FOUND
+    CONDITION (UNIX OR MINGW) AND OPUS_FOUND
 )
 qt_feature("webengine-system-ffmpeg" PRIVATE
     LABEL "ffmpeg"
@@ -348,11 +348,11 @@
 qt_feature("webengine-system-libvpx" PRIVATE
     LABEL "libvpx"
     AUTODETECT FALSE
-    CONDITION UNIX AND TEST_vpx
+    CONDITION (UNIX OR MINGW) AND TEST_vpx
 )
 qt_feature("webengine-system-snappy" PRIVATE
     LABEL "snappy"
-    CONDITION UNIX AND TEST_snappy
+    CONDITION (UNIX OR MINGW) AND TEST_snappy
 )
 qt_feature("webengine-system-glib" PRIVATE
     LABEL "glib"
@@ -360,7 +360,7 @@
 )
 qt_feature("webengine-system-zlib" PRIVATE
     LABEL "zlib"
-    CONDITION UNIX AND QT_FEATURE_system_zlib AND ZLIB_FOUND
+    CONDITION (UNIX OR MINGW) AND QT_FEATURE_system_zlib AND ZLIB_FOUND
 )
 qt_feature("webengine-qt-zlib" PRIVATE
     LABEL "qtzlib"
@@ -370,7 +370,7 @@
 )
 qt_feature("webengine-system-minizip" PRIVATE
     LABEL "minizip"
-    CONDITION UNIX AND MINIZIP_FOUND
+    CONDITION (UNIX OR MINGW) AND MINIZIP_FOUND
 )
 qt_feature("webengine-system-libevent" PRIVATE
     LABEL "libevent"
@@ -382,15 +382,15 @@
 )
 qt_feature("webengine-system-lcms2" PRIVATE
     LABEL "lcms2"
-    CONDITION UNIX AND LCMS2_FOUND
+    CONDITION (UNIX OR MINGW) AND LCMS2_FOUND
 )
 qt_feature("webengine-system-libpng" PRIVATE
     LABEL "png"
-    CONDITION UNIX AND TARGET Qt::Gui AND PNG_FOUND AND QT_FEATURE_system_png
+    CONDITION (UNIX OR MINGW) AND TARGET Qt::Gui AND PNG_FOUND AND QT_FEATURE_system_png
 )
 qt_feature("webengine-system-libtiff" PRIVATE
     LABEL "tiff"
-    CONDITION UNIX AND TARGET Qt::Gui AND TIFF_FOUND
+    CONDITION (UNIX OR MINGW) AND TARGET Qt::Gui AND TIFF_FOUND
 )
 qt_feature("webengine-qt-libpng" PRIVATE
     LABEL "qtpng"
@@ -401,7 +401,7 @@
 )
 qt_feature("webengine-system-libjpeg" PRIVATE
     LABEL "jpeg"
-    CONDITION UNIX AND TARGET Qt::Gui AND TEST_jpeg AND QT_FEATURE_system_jpeg
+    CONDITION (UNIX OR MINGW) AND TARGET Qt::Gui AND TEST_jpeg AND QT_FEATURE_system_jpeg
 )
 qt_feature("webengine-qt-libjpeg" PRIVATE
     LABEL "qtjpeg"
@@ -412,7 +412,7 @@
 )
 qt_feature("webengine-system-harfbuzz" PRIVATE
     LABEL "harfbuzz"
-    CONDITION UNIX AND TARGET Qt::Gui AND HARFBUZZ_FOUND AND QT_FEATURE_system_harfbuzz
+    CONDITION (UNIX OR MINGW) AND TARGET Qt::Gui AND HARFBUZZ_FOUND AND QT_FEATURE_system_harfbuzz
 )
 qt_feature("webengine-qt-harfbuzz" PRIVATE
     LABEL "qtharfbuzz"
@@ -423,7 +423,7 @@
 )
 qt_feature("webengine-system-freetype" PRIVATE
     LABEL "freetype"
-    CONDITION UNIX AND TARGET Qt::Gui AND TEST_freetype AND QT_FEATURE_system_freetype
+    CONDITION (UNIX OR MINGW) AND TARGET Qt::Gui AND TEST_freetype AND QT_FEATURE_system_freetype
 )
 qt_feature("webengine-qt-freetype" PRIVATE
     LABEL "qtfreetype"
@@ -589,6 +589,8 @@
    CONDITION MSVC OR
        (LINUX AND CMAKE_CXX_COMPILER_ID STREQUAL GNU) OR
        (LINUX AND CMAKE_CXX_COMPILER_ID STREQUAL Clang) OR
+       (MINGW AND CMAKE_CXX_COMPILER_ID STREQUAL GNU) OR
+       (MINGW AND CMAKE_CXX_COMPILER_ID STREQUAL Clang) OR
        (MACOS AND CMAKE_CXX_COMPILER_ID STREQUAL AppleClang)
    MESSAGE
        "${CMAKE_CXX_COMPILER_ID} compiler is not supported."
@@ -606,7 +608,7 @@
    MESSAGE
        "${CMAKE_CXX_COMPILER_ID} compiler is not supported."
 )
-if(WIN32)
+if(WIN32 AND NOT MINGW)
     if(MSVC)
         add_check_for_support(
             MODULES QtWebEngine QtPdf
@@ -648,7 +650,7 @@
 qt_configure_add_summary_entry(ARGS "qtpdf-quick-build")
 qt_configure_end_summary_section()
 # >> Optional system libraries
-if(UNIX)
+if(UNIX OR MINGW)
     qt_configure_add_summary_section(NAME "Optional system libraries")
     qt_configure_add_summary_entry(ARGS "webengine-system-re2")
     qt_configure_add_summary_entry(ARGS "webengine-system-icu")
diff -ur a/cmake/Functions.cmake b/cmake/Functions.cmake
--- a/cmake/Functions.cmake	2023-11-21 00:08:07.000000000 +0800
+++ b/cmake/Functions.cmake	2024-01-02 19:05:37.970612100 +0800
@@ -1051,7 +1051,7 @@
 endmacro()
 
 macro(append_toolchain_setup)
-    if(MINGW)
+    if(MINGW AND CMAKE_CROSSCOMPILING)
         list(APPEND gnArgArg
             # note '/' prefix
             custom_toolchain="/${buildDir}/target_toolchain:target"
@@ -1091,7 +1091,7 @@
 
 
 macro(append_pkg_config_setup)
-    if(LINUX)
+    if(LINUX OR MINGW)
         list(APPEND gnArgArg
             pkg_config="${PKG_CONFIG_EXECUTABLE}"
             host_pkg_config="${PKG_CONFIG_HOST_EXECUTABLE}"
diff -ur a/src/core/CMakeLists.txt b/src/core/CMakeLists.txt
--- a/src/core/CMakeLists.txt	2023-11-21 00:08:07.000000000 +0800
+++ b/src/core/CMakeLists.txt	2024-01-02 20:40:32.320536200 +0800
@@ -532,10 +532,29 @@
                 ninja_use_custom_environment_files=false
                 com_init_check_hook_disabled=true
                 heterogeneous_executables=true
-                use_static_angle=true
             )
         endif()
 
+        if(MINGW)
+            list(APPEND gnArgArg
+                angle_enable_vulkan=false
+                angle_shared_libvulkan=false
+                icu_use_data_file=false
+                use_gio=false
+                use_glib=false
+                use_gtk=false
+            )
+            set(systemLibs libjpeg libpng freetype harfbuzz libtiff libwebp libxml
+                opus snappy icu ffmpeg lcms2 libopenjpeg2 libvpx minizip zlib
+            )
+            foreach(slib ${systemLibs})
+                extend_gn_list(gnArgArg
+                    ARGS use_system_${slib}
+                    CONDITION QT_FEATURE_webengine_system_${slib}
+                )
+            endforeach()
+        endif()
+
         add_gn_command(
             CMAKE_TARGET WebEngineCore
             NINJA_TARGETS QtWebEngineCore convert_dict
@@ -584,7 +603,7 @@
 #  SANDBOX
 ##
 
-if(WIN32)
+if(MSVC)
     add_library(WebEngineCoreSandbox STATIC IMPORTED GLOBAL)
     foreach(config ${configs})
         string(TOUPPER ${config} cfg)
diff -ur a/src/core/api/configure.cmake b/src/core/api/configure.cmake
--- a/src/core/api/configure.cmake	2023-11-21 00:08:07.000000000 +0800
+++ b/src/core/api/configure.cmake	2024-01-02 20:42:17.358328900 +0800
@@ -156,7 +156,7 @@
     SECTION "WebEngine"
     LABEL "Vulkan support"
     PURPOSE "Enables support for Vulkan rendering"
-    CONDITION QT_FEATURE_vulkan
+    CONDITION QT_FEATURE_vulkan AND NOT MINGW
 )
 qt_feature("webengine-vaapi" PRIVATE
     SECTION "WebEngine"
diff -ur a/src/core/configure/BUILD.root.gn.in b/src/core/configure/BUILD.root.gn.in
--- a/src/core/configure/BUILD.root.gn.in	2023-11-21 00:08:07.000000000 +0800
+++ b/src/core/configure/BUILD.root.gn.in	2024-01-02 19:05:38.189442300 +0800
@@ -89,7 +89,7 @@
 
 config("cpp20_config") {
   # Chromium is build with C++20
-  if (is_win) {
+  if (is_win && !is_mingw) {
     cflags_cc = [ "/std:c++20" ]
   } else {
     cflags_cc = [ "-std=c++20" ]
@@ -166,7 +166,7 @@
     deps += [ "//third_party/webrtc_overrides:webrtc_component" ]
   }
 
-  if (is_win) {
+  if (is_win && !is_mingw) {
     configs += [ "//build/config/compiler:rtti" ]
     data_deps += [ ":QtWebEngineCoreSandbox" ]
   }
@@ -511,7 +511,7 @@
   }
 }
 
-if (is_win) {
+if (is_win && !is_mingw) {
   static_library("QtWebEngineCoreSandbox") {
     complete_static_lib = true
     configs += [ ":cpp20_config",
diff -ur a/src/pdf/configure/BUILD.root.gn.in b/src/pdf/configure/BUILD.root.gn.in
--- a/src/pdf/configure/BUILD.root.gn.in	2023-11-21 00:08:07.000000000 +0800
+++ b/src/pdf/configure/BUILD.root.gn.in	2024-01-02 19:05:38.220614000 +0800
@@ -42,7 +42,7 @@
 config("cpp17_config") {
   # static initialized constexpr expressions must be compiled always as c++14 or always as c++17
   # and our qtwebengine core sources use them as c++17
-  if (is_win) {
+  if (is_win && !is_mingw) {
     cflags_cc = [ "/std:c++17" ]
   } else {
     cflags_cc = [ "-std=c++17" ]
