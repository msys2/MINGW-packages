diff --git a/configure.cmake b/configure.cmake
index 81b1c95..2a7029a 100644
--- a/configure.cmake
+++ b/configure.cmake
@@ -134,7 +134,7 @@ qt_config_compile_test(libxml2
     CODE
 "
 #include \"libxml/xmlversion.h\"
-#if !defined(LIBXML_ICU_ENABLED)
+#if !defined(LIBXML_ICU_ENABLED) && !defined(_WIN32)
 #error libxml icu not enabled
 #endif
 int main() {
@@ -212,7 +212,7 @@ extern \"C\" {
 #include \"libavformat/avformat.h\"
 }
 int main(void) {
-#if LIBAVFORMAT_VERSION_MAJOR >= 59
+#if LIBAVFORMAT_VERSION_MAJOR < 60
     AVStream stream;
     auto first_dts = av_stream_get_first_dts(&stream);
 #endif
@@ -323,15 +323,15 @@ qt_feature("webengine-system-icu" PRIVATE
 )
 qt_feature("webengine-system-libwebp" PRIVATE
     LABEL "libwebp, libwebpmux and libwebpdemux"
-    CONDITION UNIX AND WEBP_FOUND
+    CONDITION (UNIX OR MINGW) AND WEBP_FOUND
 )
 qt_feature("webengine-system-libopenjpeg2" PRIVATE
     LABEL "libopenjpeg2"
-    CONDITION UNIX AND LIBOPENJP2_FOUND
+    CONDITION (UNIX OR MINGW) AND LIBOPENJP2_FOUND
 )
 qt_feature("webengine-system-opus" PRIVATE
     LABEL "opus"
-    CONDITION UNIX AND OPUS_FOUND
+    CONDITION (UNIX OR MINGW) AND OPUS_FOUND
 )
 qt_feature("webengine-system-ffmpeg" PRIVATE
     LABEL "ffmpeg"
@@ -345,7 +345,7 @@ qt_feature("webengine-system-libvpx" PRIVATE
 )
 qt_feature("webengine-system-snappy" PRIVATE
     LABEL "snappy"
-    CONDITION UNIX AND TEST_snappy
+    CONDITION (UNIX OR MINGW) AND TEST_snappy
 )
 qt_feature("webengine-system-glib" PRIVATE
     LABEL "glib"
@@ -353,7 +353,7 @@ qt_feature("webengine-system-glib" PRIVATE
 )
 qt_feature("webengine-system-zlib" PRIVATE
     LABEL "zlib"
-    CONDITION UNIX AND QT_FEATURE_system_zlib AND ZLIB_FOUND
+    CONDITION (UNIX OR MINGW) AND QT_FEATURE_system_zlib AND ZLIB_FOUND
 )
 qt_feature("webengine-qt-zlib" PRIVATE
     LABEL "qtzlib"
@@ -363,7 +363,7 @@ qt_feature("webengine-qt-zlib" PRIVATE
 )
 qt_feature("webengine-system-minizip" PRIVATE
     LABEL "minizip"
-    CONDITION UNIX AND MINIZIP_FOUND
+    CONDITION (UNIX OR MINGW) AND MINIZIP_FOUND
 )
 qt_feature("webengine-system-libevent" PRIVATE
     LABEL "libevent"
@@ -371,19 +371,19 @@ qt_feature("webengine-system-libevent" PRIVATE
 )
 qt_feature("webengine-system-libxml" PRIVATE
     LABEL "libxml2 and libxslt"
-    CONDITION UNIX AND TEST_libxml2
+    CONDITION (UNIX OR MINGW) AND TEST_libxml2
 )
 qt_feature("webengine-system-lcms2" PRIVATE
     LABEL "lcms2"
-    CONDITION UNIX AND LCMS2_FOUND
+    CONDITION (UNIX OR MINGW) AND LCMS2_FOUND
 )
 qt_feature("webengine-system-libpng" PRIVATE
     LABEL "png"
-    CONDITION UNIX AND TARGET Qt::Gui AND PNG_FOUND AND QT_FEATURE_system_png
+    CONDITION (UNIX OR MINGW) AND TARGET Qt::Gui AND PNG_FOUND AND QT_FEATURE_system_png
 )
 qt_feature("webengine-system-libtiff" PRIVATE
     LABEL "tiff"
-    CONDITION UNIX AND TARGET Qt::Gui AND TIFF_FOUND
+    CONDITION (UNIX OR MINGW) AND TARGET Qt::Gui AND TIFF_FOUND
 )
 qt_feature("webengine-qt-libpng" PRIVATE
     LABEL "qtpng"
@@ -394,7 +394,7 @@ qt_feature("webengine-qt-libpng" PRIVATE
 )
 qt_feature("webengine-system-libjpeg" PRIVATE
     LABEL "jpeg"
-    CONDITION UNIX AND TARGET Qt::Gui AND TEST_jpeg AND QT_FEATURE_system_jpeg
+    CONDITION (UNIX OR MINGW) AND TARGET Qt::Gui AND TEST_jpeg AND QT_FEATURE_system_jpeg
 )
 qt_feature("webengine-qt-libjpeg" PRIVATE
     LABEL "qtjpeg"
@@ -405,7 +405,7 @@ qt_feature("webengine-qt-libjpeg" PRIVATE
 )
 qt_feature("webengine-system-harfbuzz" PRIVATE
     LABEL "harfbuzz"
-    CONDITION UNIX AND TARGET Qt::Gui AND HARFBUZZ_FOUND AND QT_FEATURE_system_harfbuzz
+    CONDITION (UNIX OR MINGW) AND TARGET Qt::Gui AND HARFBUZZ_FOUND AND QT_FEATURE_system_harfbuzz
 )
 qt_feature("webengine-qt-harfbuzz" PRIVATE
     LABEL "qtharfbuzz"
@@ -416,7 +416,7 @@ qt_feature("webengine-qt-harfbuzz" PRIVATE
 )
 qt_feature("webengine-system-freetype" PRIVATE
     LABEL "freetype"
-    CONDITION UNIX AND TARGET Qt::Gui AND TEST_freetype AND QT_FEATURE_system_freetype
+    CONDITION (UNIX OR MINGW) AND TARGET Qt::Gui AND TEST_freetype AND QT_FEATURE_system_freetype
 )
 qt_feature("webengine-qt-freetype" PRIVATE
     LABEL "qtfreetype"
@@ -570,6 +570,8 @@ add_check_for_support(
    CONDITION MSVC OR
        (LINUX AND CMAKE_CXX_COMPILER_ID STREQUAL "GNU") OR
        (LINUX AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang") OR
+       (MINGW AND CMAKE_CXX_COMPILER_ID STREQUAL "GNU") OR
+       (MINGW AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang") OR
        (MACOS AND CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
    MESSAGE
        "${CMAKE_CXX_COMPILER_ID} compiler is not supported."
@@ -587,7 +589,7 @@ add_check_for_support(
    MESSAGE
        "${CMAKE_CXX_COMPILER_ID} compiler is not supported."
 )
-if(WIN32)
+if(WIN32 AND NOT MINGW)
     if(MSVC)
         if(MSVC_TOOLSET_VERSION EQUAL 142) # VS 2019 (16.0)
             add_check_for_support(
@@ -634,7 +636,7 @@ qt_configure_add_summary_entry(ARGS "qtpdf-widgets-build")
 qt_configure_add_summary_entry(ARGS "qtpdf-quick-build")
 qt_configure_end_summary_section()
 # >> Optional system libraries
-if(UNIX)
+if(UNIX OR MINGW)
     qt_configure_add_summary_section(NAME "Optional system libraries")
     qt_configure_add_summary_entry(ARGS "webengine-system-re2")
     qt_configure_add_summary_entry(ARGS "webengine-system-icu")
diff --git a/cmake/Functions.cmake b/cmake/Functions.cmake
index f41a008..24646fb 100644
--- a/cmake/Functions.cmake
+++ b/cmake/Functions.cmake
@@ -1058,7 +1058,7 @@ macro(append_toolchain_setup)
     if(WIN32)
         get_gn_arch(cpu ${arch})
         list(APPEND gnArgArg target_cpu="${cpu}")
-        if(MINGW)
+        if(MINGW AND CMAKE_CROSSCOMPILING)
             get_gn_arch(cpu ${TEST_architecture_arch})
             list(APPEND gnArgArg
                 # note '/' prefix
diff --git a/src/core/CMakeLists.txt b/src/core/CMakeLists.txt
index de52226..bb9090b 100644
--- a/src/core/CMakeLists.txt
+++ b/src/core/CMakeLists.txt
@@ -562,6 +562,47 @@ foreach(arch ${archs})
             )
         endif()
 
+        if(MINGW)
+            list(APPEND gnArgArg
+                angle_enable_vulkan=false
+                angle_shared_libvulkan=false
+                devtools_dcheck_always_on=true
+                icu_use_data_file=false
+                use_gio=false
+                use_glib=false
+                use_gtk=false
+            )
+            set(systemLibs libjpeg libpng freetype harfbuzz libwebp libxml
+                opus snappy icu ffmpeg lcms2 libopenjpeg2
+            )
+            foreach(slib ${systemLibs})
+                extend_gn_list(gnArgArg
+                    ARGS use_system_${slib}
+                    CONDITION QT_FEATURE_webengine_system_${slib}
+                )
+            endforeach()
+            extend_gn_list(gnArgArg
+                ARGS use_system_libxslt
+                CONDITION QT_FEATURE_webengine_system_libxml
+            )
+            extend_gn_list(gnArgArg
+                ARGS use_system_zlib use_system_minizip
+                CONDITION QT_FEATURE_webengine_system_zlib AND QT_FEATURE_webengine_system_minizip
+            )
+            extend_gn_list(gnArgArg
+                ARGS pdfium_use_system_zlib
+                CONDITION QT_FEATURE_webengine_system_zlib
+            )
+            extend_gn_list(gnArgArg
+                ARGS pdfium_use_system_libpng
+                CONDITION QT_FEATURE_webengine_system_libpng
+            )
+            extend_gn_list(gnArgArg
+                ARGS pdfium_use_system_libtiff
+                CONDITION QT_FEATURE_webengine_system_libtiff
+            )
+        endif()
+
         add_gn_command(
             CMAKE_TARGET WebEngineCore
             NINJA_TARGETS QtWebEngineCore convert_dict
@@ -613,20 +654,21 @@ endif()
 
 if(WIN32)
     add_library(WebEngineCoreSandbox STATIC IMPORTED GLOBAL)
+    set(sandboxLibraryName ${CMAKE_STATIC_LIBRARY_PREFIX}QtWebEngineCoreSandbox${CMAKE_STATIC_LIBRARY_SUFFIX})
     foreach(config ${configs})
         string(TOUPPER ${config} cfg)
         add_ninja_command(
             TARGET QtWebEngineCoreSandbox
-            OUTPUT QtWebEngineCoreSandbox.lib
+            OUTPUT ${sandboxLibraryName}
             BUILDDIR ${buildDir}/${config}/${arch}
             MODULE core
         )
-        set(sandboxLibraryPath ${buildDir}/${config}/${arch}/QtWebEngineCoreSandbox.lib)
+        set(sandboxLibraryPath ${buildDir}/${config}/${arch}/${sandboxLibraryName})
         set_property(TARGET WebEngineCoreSandbox
             PROPERTY IMPORTED_LOCATION_${cfg} ${sandboxLibraryPath}
         )
         add_custom_target(sandboxLibrary_${config}
-            DEPENDS ${buildDir}/${config}/${arch}/QtWebEngineCoreSandbox.lib)
+            DEPENDS ${buildDir}/${config}/${arch}/${sandboxLibraryName})
         add_dependencies(run_core_NinjaDone sandboxLibrary_${config})
         add_dependencies(WebEngineCoreSandbox WebEngineCore)
     endforeach()
diff --git a/src/core/api/CMakeLists.txt b/src/core/api/CMakeLists.txt
index 9ca610d..8ec2ac8 100644
--- a/src/core/api/CMakeLists.txt
+++ b/src/core/api/CMakeLists.txt
@@ -84,6 +84,7 @@ if(CLANG OR GCC)
     target_compile_options(WebEngineCore PRIVATE
         "-Wno-unused-parameter"
         "-Wno-expansion-to-defined"
+        "-Wno-deprecated-declarations"
     )
 endif()
 
diff --git a/src/core/configure/BUILD.root.gn.in b/src/core/configure/BUILD.root.gn.in
index 0e913f1..dd0e13f 100644
--- a/src/core/configure/BUILD.root.gn.in
+++ b/src/core/configure/BUILD.root.gn.in
@@ -77,6 +77,20 @@ config("QtWebEngineCore_config") {
     @GN_INCLUDE_DIRS@,
     rebase_path("${target_gen_dir}/.moc/")
   ]
+
+  if (is_mingw) {
+    # Silenced warnings from skia headers.
+    cflags_cc += [ "-Wno-missing-field-initializers" ]
+
+    if (is_clang) {
+      cflags_cc += [
+        "-Wno-deprecated-declarations",
+        "-Wno-overloaded-virtual",
+        "-Wno-sometimes-uninitialized",
+        "-Wno-unused-private-field",
+      ]
+    }
+  }
 }
 
 declare_args() {
@@ -90,7 +104,7 @@ config("embedded_config") {
 
 config("cpp20_config") {
   # Chromium is built with C++20
-  if (is_win) {
+  if (is_msvc) {
     cflags_cc = [ "/std:c++20" ]
   } else if(is_gcc) {
     cflags_cc = [ "-std=gnu++20" ]
diff --git a/src/pdf/configure/BUILD.root.gn.in b/src/pdf/configure/BUILD.root.gn.in
index e9f54ed..5033aa1 100644
--- a/src/pdf/configure/BUILD.root.gn.in
+++ b/src/pdf/configure/BUILD.root.gn.in
@@ -41,7 +41,7 @@ config("QtPdf_config") {
 
 config("cpp20_config") {
   # Chromium headers now use concepts and requires c++20
-  if (is_win) {
+  if (is_msvc) {
     cflags_cc = [ "/std:c++20" ]
   } else {
     cflags_cc = [ "-std=c++20" ]
diff --git a/src/process/CMakeLists.txt b/src/process/CMakeLists.txt
index 630ba42..2265a4c 100644
--- a/src/process/CMakeLists.txt
+++ b/src/process/CMakeLists.txt
@@ -25,7 +25,11 @@ if(WIN32)
     set_property(TARGET ${qtWebEngineProcessName} PROPERTY WIN32_EXECUTABLE TRUE)
     # get libs rsp file, since cmake is not aware of PUBLIC libs for WebEngineCore
     get_target_property(libs_rsp WebEngineCore LIBS_RSP)
-    target_link_options(${qtWebEngineProcessName} PRIVATE "@${libs_rsp}" "/STACK:0x800000")
+    if(MSVC)
+        target_link_options(${qtWebEngineProcessName} PRIVATE "@${libs_rsp}" "/STACK:0x800000")
+    else()
+        target_link_options(${qtWebEngineProcessName} PRIVATE "@${libs_rsp}" "-Wl,--stack,800000")
+    endif()
 endif()
 
 if(MACOS)
