# Contributor: Mehdi Chinoune <mehdi.chinoune@hotmail.com>
# Contributor: Raed Rizqie <raed.rizqie@gmail.com>

_realname=qt6-webengine
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-debug")
_qtver=6.6.1
pkgver=${_qtver/-/}
pkgrel=1
arch=(any)
mingw_arch=('mingw64' 'ucrt64' 'clang64')
msys2_references=(
  'archlinux: qt6-webengine'
)
url='https://www.qt.io'
license=('spdx:BSD-3-Clause OR GFDL-1.3-no-invariants-only OR GPL-2.0-only OR GPL-3.0-only OR LGPL-3.0-only' 'custom')
pkgdesc='Provides support for web applications using the Chromium browser project (mingw-w64)'
depends=("${MINGW_PACKAGE_PREFIX}-ffmpeg"
         "${MINGW_PACKAGE_PREFIX}-freetype"
         "${MINGW_PACKAGE_PREFIX}-harfbuzz"
         "${MINGW_PACKAGE_PREFIX}-icu"
         "${MINGW_PACKAGE_PREFIX}-lcms2"
         "${MINGW_PACKAGE_PREFIX}-libjpeg"
         "${MINGW_PACKAGE_PREFIX}-libpng"
         "${MINGW_PACKAGE_PREFIX}-libtiff"
         "${MINGW_PACKAGE_PREFIX}-libvpx"
         "${MINGW_PACKAGE_PREFIX}-libwebp"
         "${MINGW_PACKAGE_PREFIX}-minizip"
         "${MINGW_PACKAGE_PREFIX}-nss"
         "${MINGW_PACKAGE_PREFIX}-openjpeg2"
         "${MINGW_PACKAGE_PREFIX}-opus"
         "${MINGW_PACKAGE_PREFIX}-snappy"
         "${MINGW_PACKAGE_PREFIX}-zlib")
makedepends=("${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-ninja"
             "${MINGW_PACKAGE_PREFIX}-nodejs"
             "${MINGW_PACKAGE_PREFIX}-pkgconf"
             "${MINGW_PACKAGE_PREFIX}-python"
             "${MINGW_PACKAGE_PREFIX}-python-html5lib"
             "${MINGW_PACKAGE_PREFIX}-qt6-base"
             "${MINGW_PACKAGE_PREFIX}-qt6-declarative"
             "${MINGW_PACKAGE_PREFIX}-qt6-positioning"
             "${MINGW_PACKAGE_PREFIX}-qt6-tools"
             "${MINGW_PACKAGE_PREFIX}-qt6-webchannel"
             "${MINGW_PACKAGE_PREFIX}-qt6-websockets"
             "gperf"
             "rsync")
_pkgfn="${_realname/6-/}-everywhere-src-${_qtver}"
source=("https://download.qt.io/official_releases/qt/${pkgver%.*}/${_qtver}/submodules/${_pkgfn}.tar.xz"
        0001-cmake-configure-fixes.patch
        0002-chromium-add-mingw-toolchain.patch
        0003-chromium-base.patch
        0004-chromium-chrome.patch
        0005-chromium-components.patch
        0006-chromium-content.patch
        0007-chromium-device.patch
        0008-chromium-gpu.patch
        0009-chromium-media.patch
        0010-chromium-net.patch
        0011-chromium-sandbox.patch
        0012-chromium-services.patch
        0013-chromium-tools.patch
        0014-chromium-ui.patch
        0015-chromium-v8.patch
        0016-chromium-others.patch
        0101-chromium-third-party-angle.patch
        0102-chromium-third-party-blink.patch
        0103-chromium-third-party-breakpad.patch
        0104-chromium-third-party-crashpad.patch
        0105-chromium-third-party-dawn.patch
        0106-chromium-third-party-pdfium.patch
        0107-chromium-third-party-perfetto.patch
        0108-chromium-third-party-skia.patch
        0109-chromium-third-party-vulkan-deps.patch
        0110-chromium-third-party-webrtc.patch
        0111-chromium-third-party-others.patch
        0201-gn-mingw-fixes.patch
        0202-contiguous_iterator.patch)
sha256sums=('7a6ea228214bd66029ca90549b29021f30f7544abff997b7f831ceac2ce73691'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP')

apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying ${_patch}"
    patch -Np1 -i "${srcdir}/${_patch}"
  done
}

prepare() {
  cd ${srcdir}/${_pkgfn}

  apply_patch_with_msg \
    0001-cmake-configure-fixes.patch \
    0002-chromium-add-mingw-toolchain.patch \
    0003-chromium-base.patch \
    0004-chromium-chrome.patch \
    0005-chromium-components.patch \
    0006-chromium-content.patch \
    0007-chromium-device.patch \
    0008-chromium-gpu.patch \
    0009-chromium-media.patch \
    0010-chromium-net.patch \
    0011-chromium-sandbox.patch \
    0012-chromium-services.patch \
    0013-chromium-tools.patch \
    0014-chromium-ui.patch \
    0015-chromium-v8.patch \
    0016-chromium-others.patch

  apply_patch_with_msg \
    0101-chromium-third-party-angle.patch \
    0102-chromium-third-party-blink.patch \
    0103-chromium-third-party-breakpad.patch \
    0104-chromium-third-party-crashpad.patch \
    0105-chromium-third-party-dawn.patch \
    0106-chromium-third-party-pdfium.patch \
    0107-chromium-third-party-perfetto.patch \
    0108-chromium-third-party-skia.patch \
    0109-chromium-third-party-vulkan-deps.patch \
    0110-chromium-third-party-webrtc.patch \
    0111-chromium-third-party-others.patch

  apply_patch_with_msg \
    0201-gn-mingw-fixes.patch \
    0202-contiguous_iterator.patch

  # Temporary workaround
  sed -e "s|enum DayOfWeek|enum ABI::Windows::Globalization::DayOfWeek|g" \
      -i /${MINGW_ARCH}/include/windows.system.userprofile.h
}

build() {
  mkdir -p build-${MSYSTEM} && cd build-${MSYSTEM}

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  ${MINGW_PREFIX}/bin/cmake \
    -DCMAKE_MESSAGE_LOG_LEVEL=STATUS \
    -DCMAKE_BUILD_TYPE=RelWithDebInfo \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    -DQT_FEATURE_webengine_system_ffmpeg=ON \
    -DQT_FEATURE_webengine_system_freetype=ON \
    -DQT_FEATURE_webengine_system_harfbuzz=ON \
    -DQT_FEATURE_webengine_system_icu=ON \
    -DQT_FEATURE_webengine_system_lcms2=ON \
    -DQT_FEATURE_webengine_system_libjpeg=ON \
    -DQT_FEATURE_webengine_system_libopenjpeg2=ON \
    -DQT_FEATURE_webengine_system_libpng=ON \
    -DQT_FEATURE_webengine_system_libtiff=ON \
    -DQT_FEATURE_webengine_system_libvpx=ON \
    -DQT_FEATURE_webengine_system_libwebp=ON \
    -DQT_FEATURE_webengine_system_minizip=ON \
    -DQT_FEATURE_webengine_system_opus=ON \
    -DQT_FEATURE_webengine_system_snappy=ON \
    -DQT_FEATURE_webengine_system_zlib=ON \
    ../${_pkgfn}

  ${MINGW_PREFIX}/bin/cmake --build .
}

package_qt6-webengine() {
  depends+=("${MINGW_PACKAGE_PREFIX}-qt6-base"
            "${MINGW_PACKAGE_PREFIX}-qt6-positioning"
            "${MINGW_PACKAGE_PREFIX}-qt6-webchannel")
  groups=("${MINGW_PACKAGE_PREFIX}-qt6")

  DESTDIR=${pkgdir} ${MINGW_PREFIX}/bin/cmake --install build-${MSYSTEM}

  # Seperate debug-info files
  rsync -armR --remove-source-files --include="*/" --include="*.debug" --exclude="*" --prune-empty-dirs ${pkgdir}/.${MINGW_PREFIX} ${srcdir}/${MSYSTEM}-debug/

  install -d "${pkgdir}${MINGW_PREFIX}"/share/licenses/${_realname}
  install -Dm644 ${_pkgfn}/LICENSES/* -t "${pkgdir}${MINGW_PREFIX}"/share/licenses/${_realname}
}

package_qt6-webengine-debug() {
  depends+=("${MINGW_PACKAGE_PREFIX}-qt6-base-debug"
            "${MINGW_PACKAGE_PREFIX}-qt6-positioning-debug"
            "${MINGW_PACKAGE_PREFIX}-qt6-webchannel-debug"
            "${MINGW_PACKAGE_PREFIX}-${_realname}")
  groups=("${MINGW_PACKAGE_PREFIX}-qt6-debug")
  options=('!strip')

  cp -rf ${srcdir}/${MSYSTEM}-debug${MINGW_PREFIX} "${pkgdir}"/
}

# template start; name=mingw-w64-splitpkg-wrappers; version=1.0;
# vim: set ft=bash :

# generate wrappers
for _name in "${pkgname[@]}"; do
  _short="package_${_name#${MINGW_PACKAGE_PREFIX}-}"
  _func="$(declare -f "${_short}")"
  eval "${_func/#${_short}/package_${_name}}"
done
# template end;
