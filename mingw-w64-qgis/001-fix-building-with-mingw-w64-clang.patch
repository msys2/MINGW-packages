--- a/src/core/processing/qgsprocessingalgorithm.cpp
+++ b/src/core/processing/qgsprocessingalgorithm.cpp
@@ -325,7 +325,7 @@
   auto escapeIfNeeded = []( const QString & input ) -> QString
   {
     // play it safe and escape everything UNLESS it's purely alphanumeric characters (and a very select scattering of other common characters!)
-    const thread_local QRegularExpression nonAlphaNumericRx( QStringLiteral( "[^a-zA-Z0-9.\\-/_]" ) );
+    const QRegularExpression nonAlphaNumericRx( QStringLiteral( "[^a-zA-Z0-9.\\-/_]" ) );
     if ( nonAlphaNumericRx.match( input ).hasMatch() )
     {
       QString escaped = input;
--- a/src/core/processing/qgsprocessingcontext.cpp
+++ b/src/core/processing/qgsprocessingcontext.cpp
@@ -159,7 +159,7 @@
   auto escapeIfNeeded = []( const QString & input ) -> QString
   {
     // play it safe and escape everything UNLESS it's purely alphanumeric characters (and a very select scattering of other common characters!)
-    const thread_local QRegularExpression nonAlphaNumericRx( QStringLiteral( "[^a-zA-Z0-9.\\-/_]" ) );
+    const QRegularExpression nonAlphaNumericRx( QStringLiteral( "[^a-zA-Z0-9.\\-/_]" ) );
     if ( nonAlphaNumericRx.match( input ).hasMatch() )
     {
       QString escaped = input;
--- a/src/core/qgsogrutils.cpp
+++ b/src/core/qgsogrutils.cpp
@@ -1193,7 +1193,7 @@
 
   auto convertSize = []( const QString & size, double & value, QgsUnitTypes::RenderUnit & unit )->bool
   {
-    const thread_local QRegularExpression sUnitRx = QRegularExpression( QStringLiteral( "^([\\d\\.]+)(g|px|pt|mm|cm|in)$" ) );
+    const QRegularExpression sUnitRx = QRegularExpression( QStringLiteral( "^([\\d\\.]+)(g|px|pt|mm|cm|in)$" ) );
     const QRegularExpressionMatch match = sUnitRx.match( size );
     if ( match.hasMatch() )
     {
@@ -1249,7 +1249,7 @@
     if ( string.isEmpty() )
       return QColor();
 
-    const thread_local QRegularExpression sColorWithAlphaRx = QRegularExpression( QStringLiteral( "^#([0-9a-fA-F]{6})([0-9a-fA-F]{2})$" ) );
+    const QRegularExpression sColorWithAlphaRx = QRegularExpression( QStringLiteral( "^#([0-9a-fA-F]{6})([0-9a-fA-F]{2})$" ) );
     const QRegularExpressionMatch match = sColorWithAlphaRx.match( string );
     if ( match.hasMatch() )
     {
@@ -1271,7 +1271,7 @@
     convertSize( lineStyle.value( QStringLiteral( "w" ) ).toString(), lineWidth, lineWidthUnit );
 
     // if the pen is a mapinfo pen, use dedicated converter for more accurate results
-    const thread_local QRegularExpression sMapInfoId = QRegularExpression( QStringLiteral( "mapinfo-pen-(\\d+)" ) );
+    const QRegularExpression sMapInfoId = QRegularExpression( QStringLiteral( "mapinfo-pen-(\\d+)" ) );
     const QRegularExpressionMatch match = sMapInfoId.match( string );
     if ( match.hasMatch() )
     {
@@ -1289,7 +1289,7 @@
     const QString pattern = lineStyle.value( QStringLiteral( "p" ) ).toString();
     if ( !pattern.isEmpty() )
     {
-      const thread_local QRegularExpression sPatternUnitRx = QRegularExpression( QStringLiteral( "^([\\d\\.\\s]+)(g|px|pt|mm|cm|in)$" ) );
+      const QRegularExpression sPatternUnitRx = QRegularExpression( QStringLiteral( "^([\\d\\.\\s]+)(g|px|pt|mm|cm|in)$" ) );
       const QRegularExpressionMatch match = sPatternUnitRx.match( pattern );
       if ( match.hasMatch() )
       {
@@ -1370,7 +1370,7 @@
     const QString id = brushStyle.value( QStringLiteral( "id" ) ).toString();
 
     // if the pen is a mapinfo brush, use dedicated converter for more accurate results
-    const thread_local QRegularExpression sMapInfoId = QRegularExpression( QStringLiteral( "mapinfo-brush-(\\d+)" ) );
+    const QRegularExpression sMapInfoId = QRegularExpression( QStringLiteral( "mapinfo-brush-(\\d+)" ) );
     const QRegularExpressionMatch match = sMapInfoId.match( id );
     if ( match.hasMatch() )
     {
@@ -1381,7 +1381,7 @@
         return res;
     }
 
-    const thread_local QRegularExpression sOgrId = QRegularExpression( QStringLiteral( "ogr-brush-(\\d+)" ) );
+    const QRegularExpression sOgrId = QRegularExpression( QStringLiteral( "ogr-brush-(\\d+)" ) );
     const QRegularExpressionMatch ogrMatch = sOgrId.match( id );
 
     Qt::BrushStyle style = Qt::SolidPattern;
@@ -1459,7 +1459,7 @@
     const QString id = symbolStyle.value( QStringLiteral( "id" ) ).toString();
 
     // if the symbol is a mapinfo symbol, use dedicated converter for more accurate results
-    const thread_local QRegularExpression sMapInfoId = QRegularExpression( QStringLiteral( "mapinfo-sym-(\\d+)" ) );
+    const QRegularExpression sMapInfoId = QRegularExpression( QStringLiteral( "mapinfo-sym-(\\d+)" ) );
     const QRegularExpressionMatch match = sMapInfoId.match( id );
     if ( match.hasMatch() )
     {
@@ -1476,7 +1476,7 @@
 
     std::unique_ptr< QgsMarkerSymbolLayer > markerLayer;
 
-    const thread_local QRegularExpression sFontId = QRegularExpression( QStringLiteral( "font-sym-(\\d+)" ) );
+    const QRegularExpression sFontId = QRegularExpression( QStringLiteral( "font-sym-(\\d+)" ) );
     const QRegularExpressionMatch fontMatch = sFontId.match( id );
     if ( fontMatch.hasMatch() )
     {
@@ -1530,7 +1530,7 @@
 
     if ( !markerLayer )
     {
-      const thread_local QRegularExpression sOgrId = QRegularExpression( QStringLiteral( "ogr-sym-(\\d+)" ) );
+      const QRegularExpression sOgrId = QRegularExpression( QStringLiteral( "ogr-sym-(\\d+)" ) );
       const QRegularExpressionMatch ogrMatch = sOgrId.match( id );
 
       Qgis::MarkerShape shape;
--- a/src/core/textrenderer/qgsfontmanager.cpp
+++ b/src/core/textrenderer/qgsfontmanager.cpp
@@ -921,8 +921,8 @@
 
   auto cleanFontFamily = []( const QString & family ) -> QString
   {
-    const thread_local QRegularExpression charsToRemove( QStringLiteral( "[^a-z]" ) );
-    const thread_local QRegularExpression styleNames( QStringLiteral( "(?:normal|regular|light|bold|black|demi|italic|oblique|medium|thin)" ) );
+    const QRegularExpression charsToRemove( QStringLiteral( "[^a-z]" ) );
+    const QRegularExpression styleNames( QStringLiteral( "(?:normal|regular|light|bold|black|demi|italic|oblique|medium|thin)" ) );
 
     QString processed = family.toLower();
     processed.replace( styleNames, QString() );
