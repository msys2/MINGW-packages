--- libarchive-3.2.2/CMakeLists.txt.orig	2016-10-31 06:44:48.210114100 -0400
+++ libarchive-3.2.2/CMakeLists.txt	2016-10-31 07:07:35.977487200 -0400
@@ -1006,6 +1006,22 @@
 ENDIF(ENABLE_ICONV)
 
 #
+# Find Bcrypt library on Windows and MSYS
+#
+IF(HAVE_BCRYPT_H)
+  IF((WIN32 AND NOT CYGWIN) OR MSYS)
+    FIND_LIBRARY(BCRYPTLIB "Bcrypt")
+    IF(NOT BCRYPTLIB)
+      UNSET(HAVE_BCRYPT_H CACHE)
+      MESSAGE(STATUS "Bcrypt Library: Not Found")
+    ELSE(NOT BCRYPTLIB)
+      LIST(APPEND ADDITIONAL_LIBS ${BCRYPTLIB})
+      MESSAGE(STATUS "Found Bcrypt ${BCRYPTLIB}")
+    ENDIF(NOT BCRYPTLIB)
+  ENDIF((WIN32 AND NOT CYGWIN) OR MSYS)
+ENDIF(HAVE_BCRYPT_H)
+
+#
 # Find Libxml2
 #
 IF(ENABLE_LIBXML2)
--- libarchive-3.2.2/configure.ac.orig	2016-11-30 09:57:23.030626900 +0300
+++ libarchive-3.2.2/configure.ac	2016-11-30 09:57:30.220842900 +0300
@@ -279,7 +279,6 @@
 AC_CHECK_HEADERS([sys/time.h sys/utime.h sys/utsname.h sys/vfs.h])
 AC_CHECK_HEADERS([time.h unistd.h utime.h wchar.h wctype.h])
 AC_CHECK_HEADERS([windows.h])
-AC_CHECK_HEADERS([Bcrypt.h])
 # check windows.h first; the other headers require it.
 AC_CHECK_HEADERS([wincrypt.h winioctl.h],[],[],
 [[#ifdef HAVE_WINDOWS_H
@@ -398,6 +393,9 @@
   AC_CHECK_LIB(lzo2,lzo1x_decompress_safe)
 fi
 
+AC_ARG_WITH([cng],
+  AS_HELP_STRING([--without-cng], [Don't build support of CNG(Crypto Next Generation)]))
+
 AC_ARG_WITH([nettle],
   AS_HELP_STRING([--without-nettle], [Don't build with crypto support from Nettle]))
 AC_ARG_WITH([openssl],
@@ -821,6 +819,16 @@
 	;;
 esac
 
+if test "x$with_cng" != "xno"; then
+    AC_CHECK_HEADERS([bcrypt.h],[
+        LIBS="$LIBS -lbcrypt"
+    ],[],
+    [[#ifdef HAVE_WINDOWS_H
+    # include <windows.h>
+    #endif
+    ]])
+fi
+
 if test "x$with_nettle" != "xno"; then
     AC_CHECK_HEADERS([nettle/md5.h nettle/ripemd160.h nettle/sha.h])
     AC_CHECK_HEADERS([nettle/pbkdf2.h nettle/aes.h nettle/hmac.h])
