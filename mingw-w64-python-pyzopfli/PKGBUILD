# Maintainer: J. Peter Mugaas <jpmugaas@suddenlink.net>

_realname=pyzopfli
pkgbase=mingw-w64-python-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-python2-${_realname}"  
         "${MINGW_PACKAGE_PREFIX}-python3-${_realname}")
pkgver=0.1.4
_zopfliver=1.0.2
pkgrel=1
pkgdesc="Python bindings for the Zopfli compressor (mingw-w64)"
arch=('any')
url='https://github.com/obp/py-zopfli/'
license=('Apache')
makedepends=("${MINGW_PACKAGE_PREFIX}-python2"
             "${MINGW_PACKAGE_PREFIX}-python3"
             "${MINGW_PACKAGE_PREFIX}-python3-setuptools"
             "${MINGW_PACKAGE_PREFIX}-python2-setuptools")
options=('staticlibs' 'strip' '!debug')
source=("${_realname}-${pkgver}.tar.gz"::"https://github.com/obp/py-zopfli/archive/v$pkgver.tar.gz"
        "zopfli-${_zopfliver}.tar.gz"::"https://github.com/google/zopfli/archive/zopfli-${_zopfliver}.tar.gz"
        win32-fixes.patch)
sha256sums=('a95a7d414e6591ee9ed2dfb6905234eb760d90518cf57763dbcfbd7b5aff5345'
            '4a570307c37172d894ec4ef93b6e8e3aacc401e78cbcc51cf85b212dbc379a55'
            '25c2734059f3c794a8dddd5e9c7c176d96ff6f8d0ac0dada8d750951a995b41e')

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying $_patch"
    patch -Nbp0 -i "${srcdir}/$_patch"
  done
}

del_file_exists() {
  for _fname in "$@"
  do
    if [ -f $_fname ]; then
      rm -rf $_fname
    fi
  done
}
# =========================================== #

prepare() {
  cd "${srcdir}"
 #for this, you have to something weird, extract zopfli into a dir
 #named zopfli py-zopfli dir.  We also have to patch zopfli to match what
#is in the mingw-w64-zopfli because that gives a serious warning about Win32.
  rm -rf py-zopfli-${pkgver}/zopfli
  apply_patch_with_msg win32-fixes.patch
  cp -r "zopfli-zopfli-${_zopfliver}" "py-zopfli-${pkgver}/zopfli/"
  for builddir in python{2,3}-build-${CARCH}; do
    rm -rf ${builddir} | true
    cp -r "py-zopfli-${pkgver}" "${builddir}"
  done
  # Set version for setuptools_scm
  export SETUPTOOLS_SCM_PRETEND_VERSION=$pkgver
}

# Note that build() is sometimes skipped because it's done in 
# the packages setup.py install for simplicity if you can do so.
# but sometimes, you want to do a check before install which would
# also trigger the build.
build() {
  for pver in {2,3}; do  
    msg "Python ${pver} build for ${CARCH}"  
    cd "${srcdir}/python${pver}-build-${CARCH}"
    ${MINGW_PREFIX}/bin/python${pver} setup.py build
  done  
}

check() {
  for pver in {2,3}; do
    msg "Python ${pver} test for ${CARCH}"
    cd "${srcdir}/python${pver}-build-${CARCH}"
    ${MINGW_PREFIX}/bin/python${pver} setup.py check
  done
}

package_python3-pyzopfli() {
  depends=("${MINGW_PACKAGE_PREFIX}-python3")

  cd "${srcdir}/python3-build-${CARCH}"
  MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
  ${MINGW_PREFIX}/bin/python3 setup.py install --prefix=${MINGW_PREFIX} \
    --root="${pkgdir}" --optimize=1 --skip-build
}

package_python2-pyzopfli() {
  depends=("${MINGW_PACKAGE_PREFIX}-python2")

  cd "${srcdir}/python2-build-${CARCH}"
  MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
  ${MINGW_PREFIX}/bin/python2 setup.py install --prefix=${MINGW_PREFIX} \
    --root="${pkgdir}" --optimize=1 --skip-build
}

package_mingw-w64-i686-python2-pyzopfli() {
  package_python2-pyzopfli
}

package_mingw-w64-i686-python3-pyzopfli() {
  package_python3-pyzopfli
}

package_mingw-w64-x86_64-python2-pyzopfli() {
  package_python2-pyzopfli
}

package_mingw-w64-x86_64-python3-pyzopfli() {
  package_python3-pyzopfli
}
