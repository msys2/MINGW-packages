# Maintainer: J. Peter Mugaas <jpmugaas@suddenlink.net>

_realname=cachecontrol
pkgbase=mingw-w64-python-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-python2-${_realname}"  "${MINGW_PACKAGE_PREFIX}-python3-${_realname}")
pkgver=0.12.5
pkgrel=1
pkgdesc="httplib2 caching for requests (mingw-w64)"
arch=('any')
url="https://github.com/ionrock/${_realname}"
license=('Apache')
makedepends=("${MINGW_PACKAGE_PREFIX}-python2"
             "${MINGW_PACKAGE_PREFIX}-python3"
             "${MINGW_PACKAGE_PREFIX}-python3-msgpack"
             "${MINGW_PACKAGE_PREFIX}-python3-requests"
             "${MINGW_PACKAGE_PREFIX}-python2-msgpack"
             "${MINGW_PACKAGE_PREFIX}-python2-requests"
             "${MINGW_PACKAGE_PREFIX}-python3-setuptools"
             "${MINGW_PACKAGE_PREFIX}-python2-setuptools")
#checkdepends=("${MINGW_PACKAGE_PREFIX}-python3-mock"
#              "${MINGW_PACKAGE_PREFIX}-python3-pytest"
#              "${MINGW_PACKAGE_PREFIX}-python3-lockfile"
#              "${MINGW_PACKAGE_PREFIX}-python3-cherrypy"
#              "${MINGW_PACKAGE_PREFIX}-python2-mock"
#              "${MINGW_PACKAGE_PREFIX}-python2-pytest"
#              "${MINGW_PACKAGE_PREFIX}-python2-lockfile"
#              "${MINGW_PACKAGE_PREFIX}-python2-cherrypy")
options=('staticlibs' 'strip' '!debug')
source=("${_realname}-${pkgver}.tar.gz"::"${url}/archive/v${pkgver}.tar.gz")
sha256sums=('d3876bbd614968e0d82c95734b380fca648661416fb14dc1a50514256e521089')

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying $_patch"
    patch -Nbp1 -i "${srcdir}/$_patch"
  done
}

del_file_exists() {
  for _fname in "$@"
  do
    if [ -f $_fname ]; then
      rm -rf $_fname
    fi
  done
}
# =========================================== #

prepare() {
  cd "${srcdir}"
  pushd "${_realname}-${pkgver}"
#    apply_patch_with_msg 0001-A-really-important-fix.patch \
#      0002-A-less-important-fix.patch
  popd 
  for builddir in python{2,3}-build-${CARCH}; do
    rm -rf ${builddir} | true
    cp -r "${_realname}-${pkgver}" "${builddir}"
  done
  # Set version for setuptools_scm
  export SETUPTOOLS_SCM_PRETEND_VERSION=$pkgver
}

# Note that build() is sometimes skipped because it's done in 
# the packages setup.py install for simplicity if you can do so.
# but sometimes, you want to do a check before install which would
# also trigger the build.
build() {
  for pver in {2,3}; do  
    msg "Python ${pver} build for ${CARCH}"  
    cd "${srcdir}/python${pver}-build-${CARCH}"
    ${MINGW_PREFIX}/bin/python${pver} setup.py build
  done  
}

check() {
  for pver in {2,3}; do
    msg "Python ${pver} test for ${CARCH}"
    cd "${srcdir}/python${pver}-build-${CARCH}"
#    ${MINGW_PREFIX}/bin/python${pver} -m pytest
  done
}

package_python3-cachecontrol() {
  depends=("${MINGW_PACKAGE_PREFIX}-python3"
           "${MINGW_PACKAGE_PREFIX}-python3-msgpack"
           "${MINGW_PACKAGE_PREFIX}-python3-requests")
  optdepends=("${MINGW_PACKAGE_PREFIX}-python3-lockfile: for the FileCache")

  #This package install is needed for .fixups with .EXE's 
  #in the bit directory.  The install files "python-exe-installs"
  #and should be renamed to your _realname .
  install=${_realname}3-${CARCH}.install

  cd "${srcdir}/python3-build-${CARCH}"
  MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
  ${MINGW_PREFIX}/bin/python3 setup.py install --prefix=${MINGW_PREFIX} \
    --root="${pkgdir}" --optimize=1 --skip-build

# This entire section should be removed if the package does NOT install
# anything in the /mingw*/bin directory.
### begin section ###
  local PREFIX_WIN=$(cygpath -wm ${MINGW_PREFIX})
  # fix python command in files
  for _f in "${pkgdir}${MINGW_PREFIX}"/bin/*.py; do
    sed -e "s|/usr/bin/env |${MINGW_PREFIX}|g" \
        -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" -i ${_f}
  done
#### end section ####
}

package_python2-cachecontrol() {
  depends=("${MINGW_PACKAGE_PREFIX}-python2"
           "${MINGW_PACKAGE_PREFIX}-python2-msgpack"
           "${MINGW_PACKAGE_PREFIX}-python2-requests")
  optdepends=("${MINGW_PACKAGE_PREFIX}-python2-lockfile: for the FileCache")
  #This package install is needed for .fixups with .EXE's 
  #in the bit directory.  The install files "python-exe-installs"
  #and should be renamed to your _realname
  install=${_realname}2-${CARCH}.install

  cd "${srcdir}/python2-build-${CARCH}"
  MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
  ${MINGW_PREFIX}/bin/python2 setup.py install --prefix=${MINGW_PREFIX} \
    --root="${pkgdir}" --optimize=1 --skip-build

# This entire section should be removed if the package does NOT install
# anything in the /mingw*/bin directory. 
### begin section ###
  local PREFIX_WIN=$(cygpath -wm ${MINGW_PREFIX})
  # fix python command in files
  for _f in "${pkgdir}${MINGW_PREFIX}"/bin/*.py; do
    sed -e "s|/usr/bin/env |${MINGW_PREFIX}|g" \
        -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" -i ${_f}
  done

# for Python2 packages, you want to rename some stuff from the bin directory 
# with the 2 suffix like in the mingw-w64-python-pygments package to avoid
# conflicts when installing both the Python2 and Python3 packages
  for f in doesitcache; do
    mv "${pkgdir}${MINGW_PREFIX}"/bin/${f}{,2}.exe
    if [ -f "${pkgdir}${MINGW_PREFIX}"/bin/${f}.exe.manifest ]; then
      mv "${pkgdir}${MINGW_PREFIX}"/bin/${f}{,2}.exe.manifest
      sed -e "s|${f}|${f}2|g" -i "${pkgdir}${MINGW_PREFIX}"/bin/${f}2.exe.manifest
    fi
    mv "${pkgdir}${MINGW_PREFIX}"/bin/${f}{,2}-script.py
  done
#### end section ####
}

package_mingw-w64-i686-python2-cachecontrol() {
  package_python2-cachecontrol
}

package_mingw-w64-i686-python3-cachecontrol() {
  package_python3-cachecontrol
}

package_mingw-w64-x86_64-python2-cachecontrol() {
  package_python2-cachecontrol
}

package_mingw-w64-x86_64-python3-cachecontrol() {
  package_python3-cachecontrol
}
