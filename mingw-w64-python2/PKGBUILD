# Maintainer: Alexey Pavlov <alexpux@gmail.com>
# Contributor: Ray Donnelly <mingw.android@gmail.com>

_realname=python2
_mingw_suff=mingw-w64-${CARCH}
pkgname="${_mingw_suff}-${_realname}"
pkgver=2.7.6
pkgrel=10
_pybasever=2.7
pkgdesc="A high-level scripting language (mingw-w64)"
arch=('any')
license=('PSF')
url="http://www.python.org/"
depends=("${_mingw_suff}-gcc-libs" 
    "${_mingw_suff}-expat"
    "${_mingw_suff}-bzip2"
    "${_mingw_suff}-gdbm"
    "${_mingw_suff}-readline"
    "${_mingw_suff}-openssl"
    "${_mingw_suff}-libffi"
    "${_mingw_suff}-zlib"
    "${_mingw_suff}-tcl"
    "${_mingw_suff}-tk")
makedepends=("${_mingw_suff}-gcc" "${_mingw_suff}-pkg-config" "${_mingw_suff}-ncurses")
options=('!makeflags' 'staticlibs' 'strip')
source=("http://www.python.org/ftp/python/${pkgver%rc?}/Python-${pkgver}.tar.xz"
    0100-MINGW-BASE-use-NT-thread-model.patch
    0110-MINGW-translate-gcc-internal-defines-to-python-platf.patch
    0120-MINGW-use-header-in-lowercase.patch
    0130-MINGW-configure-MACHDEP-and-platform-for-build.patch
    0140-MINGW-preset-configure-defaults.patch
    0150-MINGW-configure-largefile-support-for-windows-builds.patch
    0160-MINGW-add-wincrypt.h-in-Python-random.c.patch
    0180-MINGW-init-system-calls.patch
    0190-MINGW-detect-REPARSE_DATA_BUFFER.patch
    0200-MINGW-build-in-windows-modules-winreg.patch
    0210-MINGW-determine-if-pwdmodule-should-be-used.patch
    0220-MINGW-default-sys.path-calculations-for-windows-plat.patch
    0230-MINGW-AC_LIBOBJ-replacement-of-fileblocks.patch
    0250-MINGW-compiler-customize-mingw-cygwin-compilers.patch
    0270-CYGWIN-issue13756-Python-make-fail-on-cygwin.patch
    0280-issue17219-add-current-dir-in-library-path-if-buildi.patch
    0290-issue6672-v2-Add-Mingw-recognition-to-pyport.h-to-al.patch
    0300-MINGW-configure-for-shared-build.patch
    0310-MINGW-dynamic-loading-support.patch
    0320-MINGW-implement-exec-prefix.patch
    0330-MINGW-ignore-main-program-for-frozen-scripts.patch
    0340-MINGW-setup-exclude-termios-module.patch
    0350-MINGW-setup-_multiprocessing-module.patch
    0360-MINGW-setup-select-module.patch
    0370-MINGW-setup-_ctypes-module-with-system-libffi.patch
    0380-MINGW-defect-winsock2-and-setup-_socket-module.patch
    0390-MINGW-exclude-unix-only-modules.patch
    0400-MINGW-setup-msvcrt-module.patch
    0410-MINGW-build-extensions-with-GCC.patch
    0420-MINGW-use-Mingw32CCompiler-as-default-compiler-for-m.patch
    0430-MINGW-find-import-library.patch
    0440-MINGW-setup-_ssl-module.patch
    0450-MINGW-export-_PyNode_SizeOf-as-PyAPI-for-parser-modu.patch
    0460-MINGW-generalization-of-posix-build-in-sysconfig.py.patch
    0462-MINGW-support-stdcall-without-underscore.patch
    0480-MINGW-generalization-of-posix-build-in-distutils-sys.patch
    0490-MINGW-customize-site.patch
    0500-add-python-config-sh.patch
    0510-cross-darwin-feature.patch
    0520-py3k-mingw-ntthreads-vs-pthreads.patch
    0530-mingw-system-libffi.patch
    0540-mingw-semicolon-DELIM.patch
    0550-mingw-regen-use-stddef_h.patch
    0560-mingw-use-posix-getpath.patch
    0565-mingw-add-ModuleFileName-dir-to-PATH.patch
    0570-mingw-add-BUILDIN_WIN32_MODULEs-time-msvcrt.patch
    0580-mingw32-test-REPARSE_DATA_BUFFER.patch
    0590-mingw-INSTALL_SHARED-LDLIBRARY-LIBPL.patch
    0600-msys-mingw-prefer-unix-sep-if-MSYSTEM.patch
    0610-msys-cygwin-semi-native-build-sysconfig.patch
    0620-mingw-sysconfig-like-posix.patch
    0630-mingw-_winapi_as_builtin_for_Popen_in_cygwinccompiler.patch
    0640-mingw-x86_64-size_t-format-specifier-pid_t.patch
    0650-cross-dont-add-multiarch-paths-if-cross-compiling.patch
    0660-mingw-use-backslashes-in-compileall-py.patch
    0670-msys-convert_path-fix-and-root-hack.patch
    0690-allow-static-tcltk.patch
    0710-CROSS-properly-detect-WINDOW-_flags-for-different-nc.patch
    0720-mingw-pdcurses_ISPAD.patch
    0740-grammar-fixes.patch
    0750-Add-interp-Python-DESTSHARED-to-PYTHONPATH-b4-pybuilddir-txt-dir.patch
    0760-msys-monkeypatch-os-system-via-sh-exe.patch
    0770-msys-replace-slashes-used-in-io-redirection.patch
    0790-mingw-add-_exec_prefix-for-tcltk-dlls.patch
    0800-mingw-install-layout-as-posix.patch
    0820-mingw-reorder-bininstall-ln-symlink-creation.patch
    0830-add-build-sysroot-config-option.patch
    0840-add-builddir-to-library_dirs.patch
    0850-cross-PYTHON_FOR_BUILD-gteq-276-and-fullpath-it.patch
    1000-dont-link-with-gettext.patch
    1010-ctypes-python-dll.patch
    1020-gdbm-module-includes.patch
    1030-use-gnu_printf-in-format.patch)


prepare() {
  cd "${srcdir}/Python-${pkgver}"

  # these are created by patches
  rm -f Misc/config_mingw Misc/cross_mingw32 Misc/python-config.sh.in Python/fileblocks.c

  plain "Apply Roumen Petrov's core patches (15)"
  patch -p1 -i "${srcdir}"/0100-MINGW-BASE-use-NT-thread-model.patch
  patch -p1 -i "${srcdir}"/0110-MINGW-translate-gcc-internal-defines-to-python-platf.patch
  patch -p1 -i "${srcdir}"/0120-MINGW-use-header-in-lowercase.patch
  patch -p1 -i "${srcdir}"/0130-MINGW-configure-MACHDEP-and-platform-for-build.patch
  patch -p1 -i "${srcdir}"/0140-MINGW-preset-configure-defaults.patch
  patch -p1 -i "${srcdir}"/0150-MINGW-configure-largefile-support-for-windows-builds.patch
  patch -p1 -i "${srcdir}"/0160-MINGW-add-wincrypt.h-in-Python-random.c.patch
  patch -p1 -i "${srcdir}"/0180-MINGW-init-system-calls.patch
  patch -p1 -i "${srcdir}"/0190-MINGW-detect-REPARSE_DATA_BUFFER.patch
  patch -p1 -i "${srcdir}"/0200-MINGW-build-in-windows-modules-winreg.patch
  patch -p1 -i "${srcdir}"/0210-MINGW-determine-if-pwdmodule-should-be-used.patch
  patch -p1 -i "${srcdir}"/0220-MINGW-default-sys.path-calculations-for-windows-plat.patch
  patch -p1 -i "${srcdir}"/0230-MINGW-AC_LIBOBJ-replacement-of-fileblocks.patch

  plain "Apply Roumen Petrov's compiler patch (2)"
  patch -p1 -i "${srcdir}"/0250-MINGW-compiler-customize-mingw-cygwin-compilers.patch

  plain "Apply Roumen Petrov's extensions patches (23)"
  patch -p1 -i "${srcdir}"/0270-CYGWIN-issue13756-Python-make-fail-on-cygwin.patch
  patch -p1 -i "${srcdir}"/0280-issue17219-add-current-dir-in-library-path-if-buildi.patch
  patch -p1 -i "${srcdir}"/0290-issue6672-v2-Add-Mingw-recognition-to-pyport.h-to-al.patch
  patch -p1 -i "${srcdir}"/0300-MINGW-configure-for-shared-build.patch
  patch -p1 -i "${srcdir}"/0310-MINGW-dynamic-loading-support.patch
  patch -p1 -i "${srcdir}"/0320-MINGW-implement-exec-prefix.patch
  patch -p1 -i "${srcdir}"/0330-MINGW-ignore-main-program-for-frozen-scripts.patch
  patch -p1 -i "${srcdir}"/0340-MINGW-setup-exclude-termios-module.patch
  patch -p1 -i "${srcdir}"/0350-MINGW-setup-_multiprocessing-module.patch
  patch -p1 -i "${srcdir}"/0360-MINGW-setup-select-module.patch
  patch -p1 -i "${srcdir}"/0370-MINGW-setup-_ctypes-module-with-system-libffi.patch
  patch -p1 -i "${srcdir}"/0380-MINGW-defect-winsock2-and-setup-_socket-module.patch
  patch -p1 -i "${srcdir}"/0390-MINGW-exclude-unix-only-modules.patch
  patch -p1 -i "${srcdir}"/0400-MINGW-setup-msvcrt-module.patch
  patch -p1 -i "${srcdir}"/0410-MINGW-build-extensions-with-GCC.patch
  patch -p1 -i "${srcdir}"/0420-MINGW-use-Mingw32CCompiler-as-default-compiler-for-m.patch
  patch -p1 -i "${srcdir}"/0430-MINGW-find-import-library.patch
  patch -p1 -i "${srcdir}"/0440-MINGW-setup-_ssl-module.patch
  patch -p1 -i "${srcdir}"/0450-MINGW-export-_PyNode_SizeOf-as-PyAPI-for-parser-modu.patch
  patch -p1 -i "${srcdir}"/0460-MINGW-generalization-of-posix-build-in-sysconfig.py.patch
  patch -p1 -i "${srcdir}"/0462-MINGW-support-stdcall-without-underscore.patch
  patch -p1 -i "${srcdir}"/0480-MINGW-generalization-of-posix-build-in-distutils-sys.patch
  patch -p1 -i "${srcdir}"/0490-MINGW-customize-site.patch

  plain "Apply Ray Donnelly's general/cross patches (32)"
  patch -p1 -i "${srcdir}"/0500-add-python-config-sh.patch
  patch -p1 -i "${srcdir}"/0510-cross-darwin-feature.patch
  patch -p1 -i "${srcdir}"/0520-py3k-mingw-ntthreads-vs-pthreads.patch
  patch -p1 -i "${srcdir}"/0530-mingw-system-libffi.patch
  patch -p1 -i "${srcdir}"/0540-mingw-semicolon-DELIM.patch
  patch -p1 -i "${srcdir}"/0550-mingw-regen-use-stddef_h.patch
  patch -p1 -i "${srcdir}"/0560-mingw-use-posix-getpath.patch
  patch -p1 -i "${srcdir}"/0565-mingw-add-ModuleFileName-dir-to-PATH.patch
  patch -p1 -i "${srcdir}"/0570-mingw-add-BUILDIN_WIN32_MODULEs-time-msvcrt.patch
  patch -p1 -i "${srcdir}"/0580-mingw32-test-REPARSE_DATA_BUFFER.patch
  patch -p1 -i "${srcdir}"/0590-mingw-INSTALL_SHARED-LDLIBRARY-LIBPL.patch
  patch -p1 -i "${srcdir}"/0600-msys-mingw-prefer-unix-sep-if-MSYSTEM.patch
  patch -p1 -i "${srcdir}"/0610-msys-cygwin-semi-native-build-sysconfig.patch
  patch -p1 -i "${srcdir}"/0620-mingw-sysconfig-like-posix.patch
  patch -p1 -i "${srcdir}"/0630-mingw-_winapi_as_builtin_for_Popen_in_cygwinccompiler.patch
  patch -p1 -i "${srcdir}"/0640-mingw-x86_64-size_t-format-specifier-pid_t.patch
  patch -p1 -i "${srcdir}"/0650-cross-dont-add-multiarch-paths-if-cross-compiling.patch
  patch -p1 -i "${srcdir}"/0660-mingw-use-backslashes-in-compileall-py.patch
  patch -p1 -i "${srcdir}"/0670-msys-convert_path-fix-and-root-hack.patch
  patch -p1 -i "${srcdir}"/0690-allow-static-tcltk.patch
  patch -p1 -i "${srcdir}"/0710-CROSS-properly-detect-WINDOW-_flags-for-different-nc.patch
  patch -p1 -i "${srcdir}"/0720-mingw-pdcurses_ISPAD.patch
  patch -p1 -i "${srcdir}"/0740-grammar-fixes.patch
  patch -p1 -i "${srcdir}"/0750-Add-interp-Python-DESTSHARED-to-PYTHONPATH-b4-pybuilddir-txt-dir.patch
  patch -p1 -i "${srcdir}"/0760-msys-monkeypatch-os-system-via-sh-exe.patch
  patch -p1 -i "${srcdir}"/0770-msys-replace-slashes-used-in-io-redirection.patch
  patch -p1 -i "${srcdir}"/0790-mingw-add-_exec_prefix-for-tcltk-dlls.patch
  patch -p1 -i "${srcdir}"/0800-mingw-install-layout-as-posix.patch
  patch -p1 -i "${srcdir}"/0820-mingw-reorder-bininstall-ln-symlink-creation.patch
  patch -p1 -i "${srcdir}"/0830-add-build-sysroot-config-option.patch
  patch -p1 -i "${srcdir}"/0840-add-builddir-to-library_dirs.patch
  patch -p1 -i "${srcdir}"/0850-cross-PYTHON_FOR_BUILD-gteq-276-and-fullpath-it.patch

  plain "Apply Alexey Pavlov's mingw-w64 patches (2)"
  patch -p1 -i "${srcdir}"/1000-dont-link-with-gettext.patch
  patch -p1 -i "${srcdir}"/1010-ctypes-python-dll.patch
  patch -p1 -i "${srcdir}"/1020-gdbm-module-includes.patch
  patch -p1 -i "${srcdir}"/1030-use-gnu_printf-in-format.patch

  autoreconf -vfi

  # Temporary workaround for FS#22322
  # See http://bugs.python.org/issue10835 for upstream report
  #sed -i "/progname =/s/python/python${_pybasever}/" Python/pythonrun.c

  # Enable built-in SQLite module to load extensions (fix FS#22122)
  sed -i "/SQLITE_OMIT_LOAD_EXTENSION/d" setup.py

  # FS#23997
  sed -i -e "s|^#.* /usr/local/bin/python|#!/usr/bin/python2|" Lib/cgi.py

  sed -i "s/python2.3/python2/g" Lib/distutils/tests/test_build_scripts.py \
  Lib/distutils/tests/test_install_scripts.py Tools/scripts/gprof2html.py

  touch Include/graminit.h
  touch Python/graminit.c
  touch Parser/Python.asdl
  touch Parser/asdl.py
  touch Parser/asdl_c.py
  touch Include/Python-ast.h
  touch Python/Python-ast.c
  echo \"\" > Parser/pgen.stamp
    
  # Ensure that we are using the system copy of various libraries (expat, zlib and libffi),
  # rather than copies shipped in the tarball
  rm -r Modules/expat
  rm -r Modules/zlib
  rm -r Modules/_ctypes/{darwin,libffi}*
}

build() {
  pushd ${MINGW_PREFIX} > /dev/null
  export PREFIX_WIN=`pwd -W`
  popd > /dev/null

  CFLAGS+=" -fwrapv -D__USE_MINGW_ANSI_STDIO=1 -I$PREFIX_WIN/${MINGW_CHOST}/include "
  CXXFLAGS+=" -fwrapv -D__USE_MINGW_ANSI_STDIO=1 -I$PREFIX_WIN/include -I$PREFIX_WIN/include/ncursesw -I$MINGWHOME_WIN/$HOST/include "
  CPPFLAGS+=" -I$PREFIX_WIN/include -I$PREFIX_WIN/include/ncursesw -I$PREFIX_WIN/${MINGW_CHOST}/include "
  LDFLAGS+=" -L$PREFIX_WIN/${MINGW_CHOST}/lib -L$PREFIX_WIN/lib "
  if check_option "strip" "y"; then
    LDFLAGS+=" -s "
  fi
  if check_option "debug" "n"; then
    CFLAGS+=" -DNDEBUG "
    CXXFLAGS+=" -DNDEBUG "
  else
    plain " -DDEBUG -DPy_DEBUG -D_DEBUG does not work unfortunately .."
    #    CFLAGS+=" -DDEBUG -DPy_DEBUG -D_DEBUG "
    #    CXXFLAGS+=" -DDEBUG -DPy_DEBUG -D_DEBUG "
    CFLAGS+=" -O0 -ggdb"
    CXXFLAGS+=" -O0 -ggdb"
  fi

  LIBFFI_INC=`${MINGW_PREFIX}/bin/pkg-config libffi --cflags-only-I | sed "s|\-I||g"`
  pushd ${LIBFFI_INC} > /dev/null
  export LIBFFI_INCLUDEDIR=`pwd -W`
  popd > /dev/null

  # Workaround for conftest error on 64-bit builds
  export ac_cv_working_tzset=no

  mkdir -p "${srcdir}/build-${CARCH}" && cd "${srcdir}/build-${CARCH}"
  MSYSTEM=MINGW ../Python-${pkgver}/configure \
    --prefix=${MINGW_PREFIX} \
    --host=${MINGW_CHOST} \
    --build=${MINGW_CHOST} \
    --enable-shared \
    --with-threads \
    --with-system-expat \
    --with-system-ffi \
    OPT=""
    #--with-dbmliborder='gdbm:ndbm'
  make
}

check() {
  cd "${srcdir}/build-${CARCH}"
  make test
}

package() {
  cd "${srcdir}/build-${CARCH}"
  MSYSTEM=MINGW \
  MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
  make install DESTDIR="$pkgdir"
  
  mv "${pkgdir}${MINGW_PREFIX}"/bin/smtpd.py "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/

  # Copy python import library to $prefix/lib because some programs can't find it in other locations
  cp -f "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/config/libpython${_pybasever}.dll.a "${pkgdir}${MINGW_PREFIX}"/lib/libpython${_pybasever}.dll.a
  
  # some useful "stuff"
  install -dm755 "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/Tools/{i18n,scripts}
  install -m755 "${srcdir}/Python-${pkgver}"/Tools/i18n/{msgfmt,pygettext}.py "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/Tools/i18n/
  install -m755 "${srcdir}/Python-${pkgver}"/Tools/scripts/{README,*py} "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/Tools/scripts/

  # clean up #!s
  find "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/ -name '*.py' | \
    xargs sed -i "s|#[ ]*![ ]*/usr/bin/env python$|#!/usr/bin/env python2|"

  # clean-up reference to build directory
  sed -i "s#${srcdir}/Python-${pkgver}:##" "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/config/Makefile

  for fscripts in 2to3 idle pydoc; do
    sed -e "s|${MINGW_PREFIX}/bin/python${_pybasever}.exe|/usr/bin/env python${_pybasever}.exe|g" -i "${pkgdir}${MINGW_PREFIX}"/bin/$fscripts
  done

  sed -i "s|#!${pkgdir}${MINGW_PREFIX}/bin/python${_pybasever}.exe|#!/usr/bin/env python${_pybasever}.exe|" "${pkgdir}${MINGW_PREFIX}"/bin/python${_pybasever}-config
  sed -i "s|#!${pkgdir}${MINGW_PREFIX}/bin/python${_pybasever}.exe|#!/usr/bin/env python${_pybasever}.exe|" "${pkgdir}${MINGW_PREFIX}"/bin/python2-config
  sed -i "s|#!${pkgdir}${MINGW_PREFIX}/bin/python${_pybasever}.exe|#!/usr/bin/env python${_pybasever}.exe|" "${pkgdir}${MINGW_PREFIX}"/bin/python-config

  # fix permissons
  find ${pkgdir}${MINGW_PREFIX} -type f \( -name "*.dll" -o -name "*.exe" \) | xargs chmod 0755

  # Fix up two instances of MSYS2 paths in python-config.sh in-case the final consumer of the results are native executables.
  sed -i "s|${MINGW_PREFIX}|${PREFIX_WIN}|" "${pkgdir}${MINGW_PREFIX}"/bin/python-config.sh

  # replace paths in sysconfig
  sed -i "s|${pkgdir}${MINGW_PREFIX}|${MINGW_PREFIX}|g" \
    "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/_sysconfigdata.py \
    "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/smtpd.py

  # Create python executable with windows subsystem
  cp -f "${pkgdir}${MINGW_PREFIX}"/bin/python2.exe "${pkgdir}${MINGW_PREFIX}"/bin/python2w.exe
  ${MINGW_PREFIX}/bin/objcopy --subsystem windows "${pkgdir}${MINGW_PREFIX}"/bin/python2w.exe
}

sha1sums=('8321636af2acbeaa68fc635d7dda7369ed446a80'
          'c40d13e75cdc4c1c479a83c54248370dea9d4aa9'
          '7c5662e21391490acbb8829e79510c665b8b3e99'
          'e5fc173b46419586cb0e8420bad32ce5e457d762'
          '9c1c76ef1b7856060e967938fe16c8ee5bbe0f1b'
          'e36dcd32fc4adb8fdbbd75c2a1524d7832339669'
          'd1d91f1127234607c1de7bba3c88186d3ce39b75'
          '133074c14801be9dc438c8af3ec3c1588a213fa3'
          '92b0f6eafe141c541e0e76e65d31905af6efe14b'
          'e71af80ec572cfb17dd47ed59fc1a8a6e7918359'
          'aba9e452350851ccbc662df0109ca0964fe10ccc'
          '901dedaf4f7999506c9dc0c7d8a62f248b0e8123'
          'dc9738bbdcaf0c6d74e1a4c52b0593ed4020061b'
          'd78fdf526263999faaf6f00faec89a3ea29faf12'
          '45e8badaf400e33f055167e0ed7466dad70fa99d'
          '24fd7263ba878ce4a9d573f543b82f03f0a0a356'
          'f9e8c2f44debacb92a8b130bcbf553cd8cf0ec66'
          '49f1c3527d2fff6ca267662a533cd0c076dc694e'
          '8afb3eafa06956dfe0cc948c11d66ebd4674b904'
          '0577cd1cf06cbe0a6dba3aaec60a5d3f49b56d7c'
          'c7c4eb9b8fb2313a36033915bbc181c8d8ac6332'
          'abcf17d54b97e08ffd0e15fe8f48859b32b6ac48'
          '8b191361d034048721975bb6c044019ac684ef10'
          '872266ddf4a950957556a85947651938dd059b8a'
          'af0c1db650551d8363aef150f60716cb4858e150'
          '5eef2c3249d4694681645bf9ae1e254a6eb4f58f'
          '4fdf351e0b139440ff93b233abb08cf819fb3a00'
          '7c160def2428eb530e5db6bb1ead97620262c4ee'
          'f53c42d28548fec43e76b8c7d705340aa50fceb0'
          '4f02ce291d052ab577a69a8310f4460cd8c485a9'
          '431041f4fb0a2aba60f417a953f3696effd4e9ec'
          '6824cf1f6cf9da63c2ca3cd66abb8905a1d92ffb'
          '77fd6ded9a666088c9925ee9edb105ba7811676a'
          '579787b060f5404feea88620b70bb9a3c2237cfc'
          '6223260df8999f932e8d50de600c7afd7825cda4'
          'f1e8d12d31b7ece5e10999e12ab00de76873d019'
          'c0e278de34b416454f7727a6701d82371ce717b8'
          '61b783ee45bb5aa5875b5bbef671c3db179d5291'
          '584c979f65b642c643cc43fff350ace7e4f17638'
          '1cf9f4571b2b19392e6a4d8d9546fa5196e70008'
          '0ac2b1b07ba9df85201766f81ac44e49010a2037'
          '54f0a022fdc4c06d4c113c52b95111fa04ddb7a7'
          '3bc2c87a208fc82e5b371fec599da9e2177eaf49'
          '5c6ca4f55a703ec9bb6ed48c9a367783a53026ca'
          'f38ef1ce91364ac241cf4da4bb94be675e3f26df'
          '44370c2f0ee384f94887a174092781641e8e168c'
          '13be1aa3756d917a23a8a7c62d80a3e8379798c2'
          'd70b55cd4e97b5b251f06b45563b74861bd54a88'
          'caaa1a77b50970bd94ec879eda6a4f969d2176c6'
          '5a4d1c79bc34a1cc211dfe0cb51d6c71058fdbef'
          '1c336c3324c35684bdef8b4c6c7be818b5075378'
          '1f6522a92ac12642d008e6c82f3f7342af5af7da'
          '22d23e66f00ce930951504a38b83bf2cbd6f6655'
          '381a7fe2c9965b713613df6b431be7e82ff48657'
          '7fb378190e08b4a24fd0c0b350f3fe875f79971b'
          'd9358fc992cbcbaf562fcd5d9b40ba894c24bd3f'
          '27843a2d0e664aaeeeaa7eb3b09a147bcb709181'
          'be47a7e7b389c3f350e45f312a4b2b2590681ab7'
          'cf9f4fe3f1d11bfd5189b1813709224fcc4379d5'
          '16e50b61b9066b7ccf724718f0e5c767f163c24c'
          '0431e4edbba19d28c63b6fd4ae216371404fc726'
          'ce6e7f5a1885e42f807cc66ba6d193512ea7eb8c'
          '8ef9807ae7a9065d1d2f34624c4ca094c373dd41'
          'a261fe0bebb95e9ca674c808d7f13e7d7e597814'
          'a2a8191e179f04fdc6baf3c833cfaa6303901e6c'
          '26a0ffd0d9a28d30dcb64803912e4cc4012ee744'
          '659c39a7a8257a810839070c5d134bd497472def'
          '050a55419fadddd76a356aa15a8c3f5854e3bbf1'
          '6d64be59561ad69e0bd056392ae5d255412188c4'
          'c9d6321fbdb9067fa18cd1aebba216e87c9be4d4'
          '0f38980482673a50845cf2f4e1339194210968bd'
          '35262922a607e0cc0ee6d6d789004a069986eb8e'
          '23f78a2af387fe4d782be16362c8589dc10ca77b'
          '052ffdc59f589373ef52c3cb0868daccfc4ccb1e')
