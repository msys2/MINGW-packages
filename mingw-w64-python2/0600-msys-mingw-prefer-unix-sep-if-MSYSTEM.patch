diff -Naur Python-2.7.9-orig/Lib/ntpath.py Python-2.7.9/Lib/ntpath.py
--- Python-2.7.9-orig/Lib/ntpath.py	2014-12-10 18:59:39.000000000 +0300
+++ Python-2.7.9/Lib/ntpath.py	2014-12-11 13:50:46.238600000 +0300
@@ -24,9 +24,22 @@
 curdir = '.'
 pardir = '..'
 extsep = '.'
-sep = '\\'
+# Generally we prefer forwards slashes for MinGW-w64 Python,
+# but should probably defer to the C code and a set of #defines
+# with the following precedence and logic:
+# DIRSEP_MSYSTEM    = If MSYSTEM env. var is set then / otherwise \.
+# DIRSEP_ARGV0      = Whichever of / and \ is more prevalent in argv0
+#                     (if equal DIRSEP_FORWARDS or DIRSEP_BACKWARDS)
+# DIRSEP_FORWARDS   = Always /
+# DIRSEP_BACKWARDS  = Always \
+# .. note, UNC paths are always converted to backslashes.
+if sys.platform == "win32" and "MSYSTEM" in os.environ:
+    sep = '/'
+    altsep = '\\'
+else:
+    sep = '\\'
+    altsep = '/'
 pathsep = ';'
-altsep = '/'
 defpath = '.;C:\\bin'
 if 'ce' in sys.builtin_module_names:
     defpath = '\\Windows'
@@ -60,7 +73,7 @@
 
 # Join two (or more) paths.
 def join(path, *paths):
-    """Join two or more pathname components, inserting "\\" as needed."""
+    """Join two or more pathname components, inserting sep as needed."""
     result_drive, result_path = splitdrive(path)
     for p in paths:
         p_drive, p_path = splitdrive(p)
@@ -80,7 +93,7 @@
             result_drive = p_drive
         # Second path is relative to the first
         if result_path and result_path[-1] not in '\\/':
-            result_path = result_path + '\\'
+            result_path = result_path + sep
         result_path = result_path + p_path
     ## add separator between UNC and non-absolute path
     if (result_path and result_path[0] not in '\\/' and
@@ -415,13 +428,19 @@
     """Normalize path, eliminating double slashes, etc."""
     # Preserve unicode (if path is unicode)
     backslash, dot = (u'\\', u'.') if isinstance(path, _unicode) else ('\\', '.')
+    isUNC = path.startswith('\\\\')
+    this_sep = sep
+    other_sep = altsep
+    if isUNC:
+        this_sep = backslash
+        other_sep = '/'
     if path.startswith(('\\\\.\\', '\\\\?\\')):
         # in the case of paths with these prefixes:
         # \\.\ -> device names
         # \\?\ -> literal paths
         # do not do any normalization, but return the path unchanged
         return path
-    path = path.replace("/", "\\")
+    path = path.replace(other_sep, this_sep)
     prefix, path = splitdrive(path)
     # We need to be careful here. If the prefix is empty, and the path starts
     # with a backslash, it could either be an absolute path on the current
@@ -434,15 +453,15 @@
     # is any better behaviour for such edge cases.
     if prefix == '':
         # No drive letter - preserve initial backslashes
-        while path[:1] == "\\":
-            prefix = prefix + backslash
+        while path[:1] == this_sep:
+            prefix = prefix + this_sep
             path = path[1:]
     else:
         # We have a drive letter - collapse initial backslashes
-        if path.startswith("\\"):
-            prefix = prefix + backslash
-            path = path.lstrip("\\")
-    comps = path.split("\\")
+        if path.startswith(sep):
+            prefix = prefix + this_sep
+            path = path.lstrip(this_sep)
+    comps = path.split(this_sep)
     i = 0
     while i < len(comps):
         if comps[i] in ('.', ''):
@@ -451,7 +470,7 @@
             if i > 0 and comps[i-1] != '..':
                 del comps[i-1:i+1]
                 i -= 1
-            elif i == 0 and prefix.endswith("\\"):
+            elif i == 0 and prefix.endswith(this_sep):
                 del comps[i]
             else:
                 i += 1
@@ -460,7 +479,7 @@
     # If the path is now empty, substitute '.'
     if not prefix and not comps:
         comps.append(dot)
-    return prefix + backslash.join(comps)
+    return prefix + this_sep.join(comps)
 
 
 # Return an absolute path.
diff -Naur Python-2.7.9-orig/Python/pythonrun.c Python-2.7.9/Python/pythonrun.c
--- Python-2.7.9-orig/Python/pythonrun.c	2014-12-10 18:59:59.000000000 +0300
+++ Python-2.7.9/Python/pythonrun.c	2014-12-11 13:50:46.238600000 +0300
@@ -667,13 +667,24 @@
     PyInterpreterState_Delete(interp);
 }
 
-static char *progname = "python";
+static char progname[PATH_MAX+1] = "python";
 
 void
 Py_SetProgramName(char *pn)
 {
     if (pn && *pn)
-        progname = pn;
+        strncpy(progname, pn, PATH_MAX);
+    pn = &progname[0];
+#ifdef __MINGW32__
+    char* msystem = Py_GETENV("MSYSTEM");
+    char altsep = msystem ? '\\' : '/';
+    char sep    = msystem ? '/'  : '\\';
+    char* seps = strchr(pn, altsep);
+    while(seps) {
+        *seps = sep;
+        seps = strchr(seps, altsep);
+    }
+#endif
 }
 
 char *
