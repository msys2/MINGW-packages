# Maintainer: Alexey Pavlov <alexpux@gmail.com>

_realname=make
_autotools=yes
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}")
_ver_base=4.1
pkgver=4.1.2366.168f123
pkgrel=1
pkgdesc="GNU make utility to maintain groups of programs (mingw-w64)"
arch=('any')
url="https://www.gnu.org/software/make"
license=('GPL3')
groups=("${MINGW_PACKAGE_PREFIX}-toolchain")
depends=()
makedepends=('git' 'wget')
source=("${_realname}"::'git://git.savannah.gnu.org/make.git'
        'make-getopt.patch'
        'make-linebuf-mingw.patch')
sha256sums=('SKIP'
            '8b69d3e28f789ed69a38b37367345ce15f4773237825cbed65ea1013559bb2f4'
            '11859c48a641baf9a5f000fa4e5c10d0cdf602bc8e3aaea3ed74005943dcd8da')

pkgver() {
  cd "${srcdir}"/${_realname}
  printf "%s.%s.%s" "$_ver_base" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
}

prepare() {
  cd ${srcdir}/${_realname}
  patch -p1 -i ${srcdir}/make-getopt.patch
  patch -p1 -i ${srcdir}/make-linebuf-mingw.patch
  if [[ "${_autotools}" = "yes" ]]; then
    autoreconf -fi
  fi
}

build() {
  if [[ "${_autotools}" = "yes" ]]; then
      [[ -d build-${MINGW_CHOST} ]] && rm -rf build-${MINGW_CHOST}
      mkdir -p build-${MINGW_CHOST} && cd build-${MINGW_CHOST}
      ../${_realname}/configure \
      --prefix=${MINGW_PREFIX} \
      --host=${MINGW_CHOST} \
      --without-libintl-prefix \
      --without-libiconv-prefix \
      ac_cv_dos_paths=yes
    make -j1 scm-update do-po-update all
  else
    cmd /c 'build_w32.bat --without-guile gcc'
  fi
}

package() {
  mkdir -p ${pkgdir}${MINGW_PREFIX}/{bin,lib,include}
  if [[ "${_autotools}" = "yes" ]]; then
    cd ${srcdir}/build-${MINGW_CHOST}
    cp -f make.exe ${pkgdir}${MINGW_PREFIX}/bin/mingw32-make.exe
    cp -f ${srcdir}/${_realname}/gnumake.h ${pkgdir}${MINGW_PREFIX}/include/
  else
    cd ${srcdir}/${_realname}
    cp -f gnumake.exe ${pkgdir}${MINGW_PREFIX}/bin/mingw32-make.exe
    cp -f libgnumake-1.dll.a ${pkgdir}${MINGW_PREFIX}/lib/
    cp -f gnumake.h ${pkgdir}${MINGW_PREFIX}/include/
  fi
}
