diff --git a/cx_Freeze/command/install.py b/cx_Freeze/command/install.py
index c744bfe5..872364a5 100644
--- a/cx_Freeze/command/install.py
+++ b/cx_Freeze/command/install.py
@@ -3,6 +3,7 @@
 from __future__ import annotations
 
 import contextlib
+import os
 import sys
 import warnings
 from typing import ClassVar, ContextManager
@@ -52,9 +53,11 @@ class Install(_install):
                 winreg.HKEY_LOCAL_MACHINE,
                 r"Software\Microsoft\Windows\CurrentVersion",
             )
-            prefix = str(winreg.QueryValueEx(key, "ProgramFilesDir")[0])
+            base = winreg.QueryValueEx(key, "ProgramFilesDir")[0]
             metadata = self.distribution.metadata
-            self.prefix = f"{prefix}\\{metadata.get_name()}"
+            self.prefix = os.path.join(
+                os.path.normpath(base), metadata.get_name()
+            )
         super().finalize_options()
         self.convert_paths("exe")
         if self.root is not None:
diff --git a/cx_Freeze/hooks/importlib.py b/cx_Freeze/hooks/importlib.py
index 71534962..c42b99f4 100644
--- a/cx_Freeze/hooks/importlib.py
+++ b/cx_Freeze/hooks/importlib.py
@@ -6,7 +6,7 @@ from __future__ import annotations
 
 from typing import TYPE_CHECKING
 
-from cx_Freeze._compat import IS_WINDOWS
+from cx_Freeze._compat import IS_MINGW, IS_WINDOWS
 
 if TYPE_CHECKING:
     from cx_Freeze.finder import ModuleFinder
@@ -34,7 +34,7 @@ def load_importlib__bootstrap_external(_, module: Module) -> None:
     """Ignore modules not found in current OS."""
     if IS_WINDOWS:
         module.exclude_names.add("posix")
-    else:
+    elif not IS_MINGW:
         module.exclude_names.update(("nt", "winreg"))
 
 
diff --git a/cx_Freeze/hooks/multiprocessing.py b/cx_Freeze/hooks/multiprocessing.py
index 04c9b6e7..175e4a4b 100644
--- a/cx_Freeze/hooks/multiprocessing.py
+++ b/cx_Freeze/hooks/multiprocessing.py
@@ -8,7 +8,7 @@ import os
 from textwrap import dedent
 from typing import TYPE_CHECKING
 
-from cx_Freeze._compat import IS_WINDOWS
+from cx_Freeze._compat import IS_MINGW, IS_WINDOWS
 
 if TYPE_CHECKING:
     from cx_Freeze.module import Module
@@ -27,7 +27,7 @@ def load_multiprocessing(_, module: Module) -> None:
     # - fork in Unix (including macOS) is native;
     # - spawn in Windows is native (since 4.3.4) but was improved in v6.2;
     # - spawn and forkserver in Unix is implemented here.
-    if IS_WINDOWS:
+    if IS_MINGW or IS_WINDOWS:
         return
     if module.file.suffix == ".pyc":  # source unavailable
         return
@@ -54,7 +54,7 @@ def load_multiprocessing(_, module: Module) -> None:
 
 def load_multiprocessing_connection(_, module: Module) -> None:
     """Ignore modules not found in current OS."""
-    if not IS_WINDOWS:
+    if not IS_MINGW and not IS_WINDOWS:
         module.exclude_names.update({"_winapi"})
     module.ignore_names.update(
         {
@@ -66,7 +66,7 @@ def load_multiprocessing_connection(_, module: Module) -> None:
 
 def load_multiprocessing_heap(_, module: Module) -> None:
     """Ignore modules not found in current OS."""
-    if not IS_WINDOWS:
+    if not IS_MINGW and not IS_WINDOWS:
         module.exclude_names.add("_winapi")
 
 
@@ -84,19 +84,19 @@ def load_multiprocessing_pool(_, module: Module) -> None:
 
 def load_multiprocessing_popen_spawn_win32(_, module: Module) -> None:
     """Ignore modules not found in current OS."""
-    if not IS_WINDOWS:
+    if not IS_MINGW and not IS_WINDOWS:
         module.exclude_names.update({"msvcrt", "_winapi"})
 
 
 def load_multiprocessing_reduction(_, module: Module) -> None:
     """Ignore modules not found in current OS."""
-    if not IS_WINDOWS:
+    if not IS_MINGW and not IS_WINDOWS:
         module.exclude_names.add("_winapi")
 
 
 def load_multiprocessing_resource_tracker(_, module: Module) -> None:
     """Ignore modules not found in current OS."""
-    if IS_WINDOWS:
+    if IS_MINGW or IS_WINDOWS:
         module.exclude_names.add("_posixshmem")
 
 
@@ -107,7 +107,7 @@ def load_multiprocessing_sharedctypes(_, module: Module) -> None:
 
 def load_multiprocessing_shared_memory(_, module: Module) -> None:
     """Ignore modules not found in current OS."""
-    if not IS_WINDOWS:
+    if not IS_MINGW and not IS_WINDOWS:
         module.exclude_names.add("_winapi")
     else:
         module.exclude_names.add("_posixshmem")
@@ -115,7 +115,7 @@ def load_multiprocessing_shared_memory(_, module: Module) -> None:
 
 def load_multiprocessing_spawn(_, module: Module) -> None:
     """Ignore modules not found in current OS."""
-    if not IS_WINDOWS:
+    if not IS_MINGW and not IS_WINDOWS:
         module.exclude_names.update({"msvcrt", "_winapi"})
     module.ignore_names.update(
         {
@@ -128,5 +128,5 @@ def load_multiprocessing_spawn(_, module: Module) -> None:
 def load_multiprocessing_util(_, module: Module) -> None:
     """The module uses test for tests and shouldn't be imported."""
     module.exclude_names.add("test")
-    if IS_WINDOWS:
+    if IS_MINGW or IS_WINDOWS:
         module.exclude_names.add("_posixsubprocess")
diff --git a/tests/test_command_install_exe.py b/tests/test_command_install_exe.py
index c2ad3de1..c9dc6568 100644
--- a/tests/test_command_install_exe.py
+++ b/tests/test_command_install_exe.py
@@ -26,7 +26,7 @@ DIST_ATTRS = {
         pytest.param(
             {"install_dir": None},
             "install_dir",
-            os.fspath(
+            os.path.normpath(
                 Path(os.getenv("PROGRAMFILES"), "foo")
                 if sys.platform == "win32"
                 else Path(get_config_var("base"), "lib/foo-0.0")
diff --git a/tests/test_freezer.py b/tests/test_freezer.py
index 4b5d47f1..056189c5 100644
--- a/tests/test_freezer.py
+++ b/tests/test_freezer.py
@@ -3,22 +3,19 @@
 from __future__ import annotations
 
 import sys
-from sysconfig import get_config_vars, get_platform, get_python_version
+from sysconfig import get_config_vars, get_python_version
 from typing import TYPE_CHECKING, Any, NoReturn
 
 import pytest
 from generate_samples import create_package
 
 from cx_Freeze import Executable, Freezer
+from cx_Freeze._compat import IS_MACOS, IS_MINGW, IS_WINDOWS, PLATFORM
 from cx_Freeze.exception import OptionError
 
 if TYPE_CHECKING:
     from pathlib import Path
 
-PLATFORM = get_platform()
-IS_LINUX = PLATFORM.startswith("linux")
-IS_MACOS = PLATFORM.startswith("macos")
-IS_WINDOWS = PLATFORM.startswith("win")
 PYTHON_VERSION = get_python_version()
 BUILD_EXE_DIR = f"build/exe.{PLATFORM}-{PYTHON_VERSION}"
 
@@ -79,13 +76,15 @@ def test_freezer_default_bin_includes(tmp_path: Path, monkeypatch) -> None:
     monkeypatch.chdir(tmp_path)
 
     freezer = Freezer(executables=[Executable("hello.py")])
-    if IS_WINDOWS:
-        expected = f"python{PYTHON_VERSION.replace('.','')}.dll"
-    elif IS_MACOS:
+    if IS_MACOS:
         if sys.version_info[:2] <= (3, 10):
             expected = f"libpython{PYTHON_VERSION}.dylib"
         else:
             expected = f"Python.framework/Versions/{PYTHON_VERSION}/Python"
+    elif IS_WINDOWS:
+        expected = f"python{PYTHON_VERSION.replace('.','')}.dll"
+    elif IS_MINGW:
+        expected = f"libpython{PYTHON_VERSION}.dll"
     else:
         expected = f"libpython{PYTHON_VERSION}.so"
     assert expected in freezer.bin_includes
@@ -102,7 +101,7 @@ def test_freezer_default_bin_includes_emulated(
         if name == "INSTSONAME":
             # emulate conda and/or mingw
             soname = f"libpython{PYTHON_VERSION}.a"
-            if IS_WINDOWS:  # emulate mingw
+            if IS_MINGW or IS_WINDOWS:  # emulate mingw
                 soname = soname.replace(".a", ".dll.a")
             return soname
         return get_config_vars().get(name)
@@ -110,10 +109,10 @@ def test_freezer_default_bin_includes_emulated(
     monkeypatch.setattr("sysconfig.get_config_var", t_get_config_var)
 
     freezer = Freezer(executables=[Executable("hello.py")])
-    if IS_WINDOWS:
-        expected = f"libpython{PYTHON_VERSION}.dll"
-    elif IS_MACOS:
+    if IS_MACOS:
         expected = f"libpython{PYTHON_VERSION}.dylib"
+    elif IS_MINGW or IS_WINDOWS:
+        expected = f"libpython{PYTHON_VERSION}.dll"
     else:
         expected = f"libpython{PYTHON_VERSION}.so"
     assert expected in freezer.bin_includes
diff --git a/tests/test_winmsvcr.py b/tests/test_winmsvcr.py
index 000da8e3..30441d71 100644
--- a/tests/test_winmsvcr.py
+++ b/tests/test_winmsvcr.py
@@ -72,6 +72,6 @@ def test_build_exe_with_include_msvcr(
         if any(filter(file.match, EXPECTED))
     ]
     if include_msvcr:
-        assert names != []
+        assert names is not []
     else:
-        assert names == []
+        assert not names
