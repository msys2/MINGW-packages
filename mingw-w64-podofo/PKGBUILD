# Maintainer: RÃ©mi BERTHO <remi.bertho@dalan.fr>

_realname=podofo
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}"
         $([[ $MINGW_PACKAGE_PREFIX == *-clang-* ]] && echo "${MINGW_PACKAGE_PREFIX}-${_realname}-tools"))
pkgver=0.10.3
pkgrel=1
pkgdesc="A C++ library to work with the PDF file format (mingw-w64)"
arch=('any')
mingw_arch=('mingw64' 'ucrt64' 'clang64')
url="https://podofo.sourceforge.io/"
msys2_repository_url="https://github.com/podofo/podofo"
msys2_references=(
  "cpe: cpe:/a:podofo_project:podofo"
)
license=('spdx:LGPL-2.0-or-later AND GPL-2.0-or-later')
depends=("${MINGW_PACKAGE_PREFIX}-fontconfig"
         "${MINGW_PACKAGE_PREFIX}-freetype"
         "${MINGW_PACKAGE_PREFIX}-libtiff"
         "${MINGW_PACKAGE_PREFIX}-libidn"
         "${MINGW_PACKAGE_PREFIX}-libjpeg-turbo"
         "${MINGW_PACKAGE_PREFIX}-libunistring"
         "${MINGW_PACKAGE_PREFIX}-openssl"
         "${MINGW_PACKAGE_PREFIX}-zlib"
         "${MINGW_PACKAGE_PREFIX}-libxml2")
makedepends=("${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-ninja"
             "${MINGW_PACKAGE_PREFIX}-pkgconf")
source=("https://github.com/podofo/podofo/archive/${pkgver}/${_realname}-${pkgver}.tar.gz"
        "fix-export.patch"
        "fix-redefinitions.patch"
        "mingw-build-tools.patch")
sha256sums=('4be2232643f9e9dd7fbb02894d5a0394c3ca2826aab179654c2cc751074825ec'
            '5d418a1978ee43f384cb11dad2f6010ee0fec8c5b9987d1bfc659e72e3527b3b'
            '98a936f042c1a5ba9a3c8c89c4384444fc6bf47a7c5ce59de551cce225eac719'
            '21b55c4abef4466354c85207235e94f0ce1de7caf6a76a88650cfc80580550a0')

prepare() {
  cd "${_realname}-${pkgver}"

  patch -p1 -i "${srcdir}/fix-export.patch"
  # https://github.com/podofo/podofo/issues/152
  patch -p1 -i "${srcdir}/fix-redefinitions.patch"
  patch -p1 -i "${srcdir}/mingw-build-tools.patch"
}

build() {
  declare -a _cmake_opts=(
    -GNinja
    -DCMAKE_INSTALL_PREFIX="${MINGW_PREFIX}"
    -DPODOFO_HAVE_JPEG_LIB=ON
    -DPODOFO_HAVE_PNG_LIB=ON
    -DPODOFO_HAVE_TIFF_LIB=ON
    -DPODOFO_HAVE_FONTCONFIG=ON
    -DPODOFO_BUILD_EXAMPLES=OFF
    -DPODOFO_BUILD_TEST=OFF
  )
  if [[ $MINGW_PACKAGE_PREFIX == *-clang-* ]]; then
    _cmake_opts+=("-DPODOFO_BUILD_TOOLS=ON")
  fi

  if check_option "debug" "n"; then
    _cmake_opts+=("-DCMAKE_BUILD_TYPE=Release")
  else
    _cmake_opts+=("-DCMAKE_BUILD_TYPE=Debug")
  fi

  export CFLAGS+=" -Wno-deprecated-declarations"
  export CXXFLAGS+=" -Wno-deprecated-declarations"

  mkdir -p "${srcdir}/build-${MSYSTEM}-static" && cd "${srcdir}/build-${MSYSTEM}-static"

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  ${MINGW_PREFIX}/bin/cmake.exe \
    "${_cmake_opts[@]}" \
    -DPODOFO_BUILD_STATIC=ON \
    ../${_realname}-${pkgver}

  ${MINGW_PREFIX}/bin/cmake --build .

  mkdir -p "${srcdir}/build-${MSYSTEM}-shared" && cd "${srcdir}/build-${MSYSTEM}-shared"

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  ${MINGW_PREFIX}/bin/cmake.exe \
    "${_cmake_opts[@]}" \
    -DPODOFO_BUILD_STATIC=OFF \
    ../${_realname}-${pkgver}

  ${MINGW_PREFIX}/bin/cmake --build .
}

package_podofo() {
  cd "${srcdir}/build-${MSYSTEM}-static"
  DESTDIR=${pkgdir} ${MINGW_PREFIX}/bin/cmake --install .

  cd "${srcdir}/build-${MSYSTEM}-shared"
  DESTDIR=${pkgdir} ${MINGW_PREFIX}/bin/cmake --install .

  if [[ $MINGW_PACKAGE_PREFIX == *-clang-* ]]; then
    mkdir -p "dest${MINGW_PREFIX}/bin"
    mv "${pkgdir}${MINGW_PREFIX}"/bin/*.exe "dest${MINGW_PREFIX}/bin"
  fi
}

package_podofo-tools() {
  cd "${srcdir}/build-${MSYSTEM}-shared"

  pkgdesc+=" (Tools)"
  depends=("${MINGW_PACKAGE_PREFIX}-podofo=${pkgver}-${pkgrel}")

  mv dest/* "${pkgdir}"
  install -Dm644 -t "${pkgdir}${MINGW_PREFIX}/share/man/man1/" "${srcdir}/${_realname}-${pkgver}"/man/*.1
}

# template start; name=mingw-w64-splitpkg-wrappers; version=1.0;
# vim: set ft=bash :

# generate wrappers
for _name in "${pkgname[@]}"; do
  _short="package_${_name#${MINGW_PACKAGE_PREFIX}-}"
  _func="$(declare -f "${_short}")"
  eval "${_func/#${_short}/package_${_name}}"
done
# template end;
