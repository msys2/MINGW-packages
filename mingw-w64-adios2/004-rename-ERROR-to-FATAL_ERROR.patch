diff -Naur a/source/adios2/engine/ssc/SscReader.cpp b/source/adios2/engine/ssc/SscReader.cpp
--- a/source/adios2/engine/ssc/SscReader.cpp	2022-04-07 10:58:26.463083300 +0100
+++ b/source/adios2/engine/ssc/SscReader.cpp	2022-04-07 11:01:50.430612400 +0100
@@ -150,7 +150,7 @@
                 {
                     helper::Log("Engine", "SSCReader", "BeginStep",
                                 "unknown data type", 0, m_Comm.Rank(), 0,
-                                m_Verbosity, helper::LogMode::ERROR);
+                                m_Verbosity, helper::LogMode::FATAL_ERROR);
                 }
             }
         }
@@ -252,7 +252,7 @@
                         {
                             helper::Log("Engine", "SSCReader", "PerformGets",
                                         "unknown data type", 0, m_Comm.Rank(),
-                                        0, m_Verbosity, helper::LogMode::ERROR);
+                                        0, m_Verbosity, helper::LogMode::FATAL_ERROR);
                         }
                     }
                 }
diff -Naur a/source/adios2/engine/ssc/SscReader.tcc b/source/adios2/engine/ssc/SscReader.tcc
--- a/source/adios2/engine/ssc/SscReader.tcc	2022-04-07 10:58:26.463083300 +0100
+++ b/source/adios2/engine/ssc/SscReader.tcc	2022-04-07 11:01:50.430612400 +0100
@@ -154,7 +154,7 @@
                     {
                         helper::Log("Engine", "SSCReader", "GetDeferredCommon",
                                     "unknown ShapeID", 0, m_Comm.Rank(), 0,
-                                    m_Verbosity, helper::LogMode::ERROR);
+                                    m_Verbosity, helper::LogMode::FATAL_ERROR);
                     }
                 }
             }
diff -Naur a/source/adios2/helper/adiosCommDummy.cpp b/source/adios2/helper/adiosCommDummy.cpp
--- a/source/adios2/helper/adiosCommDummy.cpp	2022-04-07 10:58:26.478704500 +0100
+++ b/source/adios2/helper/adiosCommDummy.cpp	2022-04-07 11:01:50.431622000 +0100
@@ -25,7 +25,7 @@
     helper::Log("Helper", "adiosCommDummy", "CommDummyError",
                 "CommDummy: a function returned error code '" + msg +
                     "'. Aborting!",
-                helper::LogMode::ERROR);
+                helper::LogMode::FATAL_ERROR);
     std::abort();
 }
 }
diff -Naur a/source/adios2/helper/adiosLog.cpp b/source/adios2/helper/adiosLog.cpp
--- a/source/adios2/helper/adiosLog.cpp	2022-04-07 10:58:26.478704500 +0100
+++ b/source/adios2/helper/adiosLog.cpp	2022-04-07 11:03:09.522660200 +0100
@@ -54,7 +54,7 @@
     {
         m << warningColor << " [ADIOS2 WARNING]" << defaultColor;
     }
-    else if (mode == ERROR)
+    else if (mode == FATAL_ERROR)
     {
         m << errorColor << " [ADIOS2 ERROR]" << defaultColor;
     }
@@ -102,7 +102,7 @@
     if ((logRank >= 0 && commRank >= 0 && logRank != commRank) ||
         priority > verbosity ||
         (messages.find(message) != messages.end() &&
-         (mode == LogMode::ERROR || mode == LogMode::WARNING)))
+         (mode == LogMode::FATAL_ERROR || mode == LogMode::WARNING)))
     {
         return;
     }
@@ -115,7 +115,7 @@
     {
         std::cout << m;
     }
-    else if (mode == ERROR)
+    else if (mode == FATAL_ERROR)
     {
         std::cerr << m;
     }
diff -Naur a/source/adios2/helper/adiosLog.h b/source/adios2/helper/adiosLog.h
--- a/source/adios2/helper/adiosLog.h	2022-04-07 10:58:26.478704500 +0100
+++ b/source/adios2/helper/adiosLog.h	2022-04-07 11:03:06.556750100 +0100
@@ -21,7 +21,7 @@
 enum LogMode : char
 {
     EXCEPTION = 'x',
-    ERROR = 'e',
+    FATAL_ERROR = 'e',
     WARNING = 'w',
     INFO = 'i'
 };
diff -Naur a/source/adios2/helper/adiosSystem.cpp b/source/adios2/helper/adiosSystem.cpp
--- a/source/adios2/helper/adiosSystem.cpp	2022-04-07 10:58:26.478704500 +0100
+++ b/source/adios2/helper/adiosSystem.cpp	2022-04-07 11:01:50.431622000 +0100
@@ -97,25 +97,25 @@
     catch (std::invalid_argument &e)
     {
         helper::Log("Helper", "adiosSystem", "ExceptionToError",
-                    function + ": " + e.what(), helper::LogMode::ERROR);
+                    function + ": " + e.what(), helper::LogMode::FATAL_ERROR);
         return 1;
     }
     catch (std::system_error &e)
     {
         helper::Log("Helper", "adiosSystem", "ExceptionToError",
-                    function + ": " + e.what(), helper::LogMode::ERROR);
+                    function + ": " + e.what(), helper::LogMode::FATAL_ERROR);
         return 2;
     }
     catch (std::runtime_error &e)
     {
         helper::Log("Helper", "adiosSystem", "ExceptionToError",
-                    function + ": " + e.what(), helper::LogMode::ERROR);
+                    function + ": " + e.what(), helper::LogMode::FATAL_ERROR);
         return 3;
     }
     catch (std::exception &e)
     {
         helper::Log("Helper", "adiosSystem", "ExceptionToError",
-                    function + ": " + e.what(), helper::LogMode::ERROR);
+                    function + ": " + e.what(), helper::LogMode::FATAL_ERROR);
         return 4;
     }
 }
diff -Naur a/source/adios2/operator/compress/CompressBlosc.cpp b/source/adios2/operator/compress/CompressBlosc.cpp
--- a/source/adios2/operator/compress/CompressBlosc.cpp	2022-04-07 10:58:26.494325700 +0100
+++ b/source/adios2/operator/compress/CompressBlosc.cpp	2022-04-07 11:04:52.630837300 +0100
@@ -141,7 +141,7 @@
                         "ADIOS WARNING: Unknown parameter keyword '" + key +
                             "' with value '" + value +
                             "' passed to Blosc compression operator.",
-                        helper::ERROR);
+                        helper::FATAL_ERROR);
         }
     }
 
diff -Naur a/source/adios2/toolkit/burstbuffer/FileDrainerSingleThread.cpp b/source/adios2/toolkit/burstbuffer/FileDrainerSingleThread.cpp
--- a/source/adios2/toolkit/burstbuffer/FileDrainerSingleThread.cpp	2022-04-07 10:58:26.525568700 +0100
+++ b/source/adios2/toolkit/burstbuffer/FileDrainerSingleThread.cpp	2022-04-07 11:01:50.430612400 +0100
@@ -220,7 +220,7 @@
                     helper::Log("BurstBuffer", "FileDrainerSingleThread",
                                 "DrainThread",
                                 "ADIOS THREAD ERROR: " + std::string(e.what()),
-                                helper::LogMode::ERROR);
+                                helper::LogMode::FATAL_ERROR);
                 }
             }
             break;
diff -Naur a/source/adios2/toolkit/query/JsonWorker.cpp b/source/adios2/toolkit/query/JsonWorker.cpp
--- a/source/adios2/toolkit/query/JsonWorker.cpp	2022-04-07 10:58:26.525568700 +0100
+++ b/source/adios2/toolkit/query/JsonWorker.cpp	2022-04-07 11:01:50.430612400 +0100
@@ -105,7 +105,7 @@
         {
             helper::Log("Query", "JsonWorker", "ParseJson",
                         "No such variable: " + varName.dump(),
-                        helper::LogMode::ERROR);
+                        helper::LogMode::FATAL_ERROR);
             return nullptr;
         }
 
diff -Naur a/source/adios2/toolkit/query/Query.cpp b/source/adios2/toolkit/query/Query.cpp
--- a/source/adios2/toolkit/query/Query.cpp	2022-04-07 10:58:26.525568700 +0100
+++ b/source/adios2/toolkit/query/Query.cpp	2022-04-07 11:01:50.430612400 +0100
@@ -244,7 +244,7 @@
         helper::Log(
             "Query", "QueryVar", "IsSelectionValid",
             "Query selection dimension is different from shape dimension",
-            helper::LogMode::ERROR);
+            helper::LogMode::FATAL_ERROR);
         return false; // different dimension
     }
 
diff -Naur a/source/adios2/toolkit/query/Worker.cpp b/source/adios2/toolkit/query/Worker.cpp
--- a/source/adios2/toolkit/query/Worker.cpp	2022-04-07 10:58:26.541189800 +0100
+++ b/source/adios2/toolkit/query/Worker.cpp	2022-04-07 11:01:50.418764500 +0100
@@ -73,7 +73,7 @@
     {
         helper::Log("Query", "Worker", "GetBasicVarQuery",
                     "No such variable: " + variableName,
-                    helper::LogMode::ERROR);
+                    helper::LogMode::FATAL_ERROR);
         return nullptr;
     }
 #define declare_type(T)                                                        \
diff -Naur a/source/adios2/toolkit/query/XmlWorker.cpp b/source/adios2/toolkit/query/XmlWorker.cpp
--- a/source/adios2/toolkit/query/XmlWorker.cpp	2022-04-07 10:58:26.541189800 +0100
+++ b/source/adios2/toolkit/query/XmlWorker.cpp	2022-04-07 11:01:50.418764500 +0100
@@ -150,7 +150,7 @@
     {
         helper::Log("Query", "XmlWorker", "ParseVarNode",
                     "No such variable: " + variableName,
-                    helper::LogMode::ERROR);
+                    helper::LogMode::FATAL_ERROR);
         helper::Throw<std::ios_base::failure>(
             "Toolkit", "query::XmlWorker", "ParseVarNode",
             "variable: " + variableName + " not found");
diff -Naur a/source/utils/adios_reorganize/Reorganize.cpp b/source/utils/adios_reorganize/Reorganize.cpp
--- a/source/utils/adios_reorganize/Reorganize.cpp	2022-04-07 10:58:26.634918000 +0100
+++ b/source/utils/adios_reorganize/Reorganize.cpp	2022-04-07 11:01:50.418764500 +0100
@@ -597,7 +597,7 @@
                     "write buffer size needs to hold about " +
                         std::to_string(bufsize) + " bytes but max is set to " +
                         std::to_string(max_write_buffer_size),
-                    m_Rank, m_Rank, 0, 0, helper::LogMode::ERROR);
+                    m_Rank, m_Rank, 0, 0, helper::LogMode::FATAL_ERROR);
         return 1;
     }
 
@@ -608,7 +608,7 @@
                         std::to_string(largest_block) +
                         " bytes but max is set to " +
                         std::to_string(max_read_buffer_size),
-                    m_Rank, m_Rank, 0, 0, helper::LogMode::ERROR);
+                    m_Rank, m_Rank, 0, 0, helper::LogMode::FATAL_ERROR);
         return 1;
     }
     return retval;
@@ -628,7 +628,7 @@
                 std::to_string(nvars) +
                 ") to read does not match the number of processed variables (" +
                 std::to_string(varinfo.size()) + ")",
-            m_Rank, m_Rank, 0, 0, helper::LogMode::ERROR);
+            m_Rank, m_Rank, 0, 0, helper::LogMode::FATAL_ERROR);
     }
 
     /*
