--- a/src/qt/graphics.cpp
+++ b/src/qt/graphics.cpp
@@ -33,6 +33,7 @@
 #include "wx/tokenzr.h"
 
 #include "wx/private/graphics.h"
+#include "wx/qt/private/converter.h"
 
 namespace
 {
@@ -395,7 +396,7 @@
         : wxGraphicsObjectRefData(renderer),
           m_color(col.GetQColor())
     {
-        m_font.setFamily(QString(facename));
+        m_font.setFamily(wxQtConvertString(facename));
         m_font.setPixelSize(static_cast<int>(sizeInPixels));
         if ( flags & wxFONTFLAG_LIGHT )
             m_font.setWeight(QFont::Light);
@@ -967,7 +968,7 @@
         m_qtPainter->setFont(fontData->GetFont());
 
         const QFontMetrics metrics = m_qtPainter->fontMetrics();
-        const QRect boundingRect = metrics.boundingRect(QString(str));
+        const QRect boundingRect = metrics.boundingRect(wxQtConvertString(str));
 
         if ( width )
             *width = boundingRect.width();
@@ -1003,7 +1004,7 @@
         {
             const wxString subString = text.substr(0, i+1);
             const QRect
-                boundingRect = metrics.boundingRect(QString(subString));
+                boundingRect = metrics.boundingRect(wxQtConvertString(subString));
             widths[i] = boundingRect.width();
         }
     }
@@ -1027,7 +1028,7 @@
         while ( tokenizer.HasMoreTokens() )
         {
             const wxString line = tokenizer.GetNextToken();
-            m_qtPainter->drawText(x, y + metrics.ascent(), QString(line));
+            m_qtPainter->drawText(x, y + metrics.ascent(), wxQtConvertString(line));
             y += metrics.lineSpacing();
         }
     }
