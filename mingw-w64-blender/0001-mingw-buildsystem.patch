--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -254,7 +254,7 @@
   option(WITH_X11_ALPHA     "Enable X11 transparent background"                     ON)
 endif()
 
-if(UNIX AND NOT APPLE)
+if((UNIX AND NOT APPLE) OR MINGW)
   option(WITH_SYSTEM_GLEW "Use GLEW OpenGL wrapper library provided by the operating system" OFF)
   option(WITH_SYSTEM_GLES "Use OpenGL ES library provided by the operating system"           ON)
   option(WITH_SYSTEM_FREETYPE "Use the freetype library provided by the operating system" OFF)
@@ -266,7 +266,7 @@
 endif()
 
 
-if(UNIX AND NOT APPLE)
+if((UNIX AND NOT APPLE) OR MINGW)
   option(WITH_SYSTEM_EIGEN3 "Use the systems Eigen3 library" OFF)
 endif()
 
@@ -335,7 +335,7 @@
 # Compression
 option(WITH_LZO           "Enable fast LZO compression (used for pointcache)" ON)
 option(WITH_LZMA          "Enable best LZMA compression, (used for pointcache)" ON)
-if(UNIX AND NOT APPLE)
+if((UNIX AND NOT APPLE) OR MINGW)
   option(WITH_SYSTEM_LZO    "Use the system LZO library" OFF)
 endif()
 option(WITH_DRACO         "Enable Draco mesh compression Python module (used for glTF)" ON)
@@ -359,7 +359,7 @@
   option(WITH_INPUT_IME "Enable Input Method Editor (IME) for complex Asian character input" ON)
 endif()
 option(WITH_INPUT_NDOF "Enable NDOF input devices (SpaceNavigator and friends)" ON)
-if(UNIX AND NOT APPLE)
+if((UNIX AND NOT APPLE) OR MINGW)
   option(WITH_INSTALL_PORTABLE "Install redistributeable runtime, otherwise install into CMAKE_INSTALL_PREFIX" ON)
   option(WITH_STATIC_LIBS "Try to link with static libraries, as much as possible, to make blender more portable across distributions" OFF)
   if(WITH_STATIC_LIBS)
@@ -552,7 +552,7 @@
   set(CMAKE_OSX_DEPLOYMENT_TARGET "10.15" CACHE STRING "Minimum OS X deployment version" FORCE)
 endif()
 
-if(WIN32)
+if(MSVC)
   getDefaultWindowsPrefixBase(CMAKE_GENERIC_PROGRAM_FILES)
   set(CPACK_INSTALL_PREFIX ${CMAKE_GENERIC_PROGRAM_FILES}/${})
 endif()
@@ -650,7 +650,7 @@
   mark_as_advanced(WITH_COMPILER_SHORT_FILE_MACRO)
 endif()
 
-if(WIN32)
+if(MSVC)
   # Use hardcoded paths or find_package to find externals
   option(WITH_WINDOWS_FIND_MODULES "Use find_package to locate libraries" OFF)
   mark_as_advanced(WITH_WINDOWS_FIND_MODULES)
@@ -698,7 +698,7 @@
   mark_as_advanced(WITH_NINJA_POOL_JOBS)
 endif()
 
-if(UNIX AND NOT APPLE)
+if((UNIX AND NOT APPLE) OR MINGW)
   option(WITH_CXX11_ABI "Use native C++11 ABI of compiler" ON)
   mark_as_advanced(WITH_CXX11_ABI)
 endif()
@@ -1001,8 +1001,10 @@
 
 if(UNIX AND NOT APPLE)
   include(platform_unix)
-elseif(WIN32)
+elseif(MSVC)
   include(platform_win32)
+elseif(MINGW)
+  include(platform_win32_mingw64)
 elseif(APPLE)
   include(platform_apple)
 endif()
@@ -1117,7 +1119,7 @@
 endif()
 if(WITH_IMAGE_OPENJPEG)
   # Special handling of Windows platform where openjpeg is always static.
-  if(WIN32)
+  if(WIN32 AND WITH_STATIC_LIBS)
     set(OPENJPEG_DEFINES "-DOPJ_STATIC")
   else()
     set(OPENJPEG_DEFINES "")
@@ -1776,7 +1776,7 @@
     )
   endif()
 
-  if(WIN32 OR APPLE)
+  if(MSVC OR APPLE)
     # Windows and macOS have this bundled with Python libraries.
   elseif((WITH_PYTHON_INSTALL AND WITH_PYTHON_INSTALL_NUMPY) OR WITH_PYTHON_NUMPY)
     if(("${PYTHON_NUMPY_PATH}" STREQUAL "") OR (${PYTHON_NUMPY_PATH} MATCHES NOTFOUND))
@@ -1784,13 +1784,13 @@
     endif()
   endif()
 
-  if(WIN32 OR APPLE)
+  if(MSVC OR APPLE)
     # pass, we have this in lib/python/site-packages
   elseif(WITH_PYTHON_INSTALL_REQUESTS)
     find_python_package(requests "")
   endif()
 
-  if(WIN32 OR APPLE)
+  if(MSVC OR APPLE)
     # pass, we have this in lib/python/site-packages
   elseif(WITH_PYTHON_INSTALL_ZSTANDARD)
     find_python_package(zstandard "")
--- a/source/creator/CMakeLists.txt
+++ b/source/creator/CMakeLists.txt
@@ -298,7 +298,7 @@
 # -----------------------------------------------------------------------------
 # Platform Specific Var: TARGETDIR_VER
 
-if(UNIX AND NOT APPLE)
+if((UNIX AND NOT APPLE) OR MINGW)
   if(WITH_PYTHON_MODULE)
     if(WITH_INSTALL_PORTABLE)
       set(TARGETDIR_VER ${BLENDER_VERSION})
@@ -456,13 +456,13 @@
 # -----------------------------------------------------------------------------
 # Install Targets (Platform Specific)
 
-if(UNIX AND NOT APPLE)
+if((UNIX AND NOT APPLE) OR MINGW)
 
   if(NOT WITH_PYTHON_MODULE)
     if(WITH_DOC_MANPAGE)
       add_custom_target(
         blender_man_page ALL
-        COMMAND ${CMAKE_SOURCE_DIR}/doc/manpage/blender.1.py
+        COMMAND python3 ${CMAKE_SOURCE_DIR}/doc/manpage/blender.1.py
                 --blender ${EXECUTABLE_OUTPUT_PATH}/blender
                 --output ${CMAKE_CURRENT_BINARY_DIR}/blender.1)
       add_dependencies(blender_man_page blender)
@@ -1345,7 +1345,7 @@
 # -----------------------------------------------------------------------------
 # Setup launcher
 
-if(WIN32 AND NOT WITH_PYTHON_MODULE)
+if(MSVC AND NOT WITH_PYTHON_MODULE)
   install(
     TARGETS blender
     COMPONENT Blender
--- a/build_files/cmake/Modules/FindOpenImageIO.cmake
+++ b/build_files/cmake/Modules/FindOpenImageIO.cmake
@@ -49,6 +49,7 @@
 FIND_FILE(OPENIMAGEIO_IDIFF
   NAMES
     idiff
+    idiff.exe
   HINTS
     ${_openimageio_SEARCH_DIRS}
   PATH_SUFFIXES
--- a/build_files/cmake/Modules/FindPythonLibsUnix.cmake
+++ b/build_files/cmake/Modules/FindPythonLibsUnix.cmake
@@ -36,7 +36,9 @@
 
 # See: http://docs.python.org/extending/embedding.html#linking-requirements
 #      for why this is needed
+if(NOT MINGW)
 SET(PYTHON_LINKFLAGS "-Xlinker -export-dynamic" CACHE STRING "Linker flags for python")
+endif()
 MARK_AS_ADVANCED(PYTHON_LINKFLAGS)
 
 
--- a/build_files/cmake/platform/platform_win32_mingw64.cmake
+++ b/build_files/cmake/platform/platform_win32_mingw64.cmake
@@ -0,0 +1,560 @@
+# SPDX-License-Identifier: GPL-2.0-or-later
+# Copyright 2016 Blender Foundation. All rights reserved.
+
+# Libraries configuration for MINGW
+
+add_definitions(-DWIN32 -D_WIN32_WINNT=0x603)
+
+# Support restoring this value once pre-compiled libraries have been handled.
+set(WITH_STATIC_LIBS_INIT ${WITH_STATIC_LIBS})
+
+if(WITH_STATIC_LIBS)
+  string(APPEND CMAKE_EXE_LINKER_FLAGS " -static-libstdc++")
+endif()
+
+# Wrapper to prefer static libraries
+macro(find_package_wrapper)
+  if(WITH_STATIC_LIBS)
+    find_package_static(${ARGV})
+  else()
+    find_package(${ARGV})
+  endif()
+endmacro()
+
+# ----------------------------------------------------------------------------
+# Precompiled Libraries
+#
+
+find_package_wrapper(JPEG REQUIRED)
+find_package_wrapper(PNG REQUIRED)
+find_package_wrapper(ZLIB REQUIRED)
+find_package_wrapper(Zstd REQUIRED)
+
+if(NOT WITH_SYSTEM_FREETYPE)
+  # FreeType compiled with Brotli compression for woff2.
+  find_package_wrapper(Freetype REQUIRED)
+endif()
+
+if(WITH_PYTHON)
+  # No way to set py35, remove for now.
+  # find_package(PythonLibs)
+
+  # Use our own instead, since without py is such a rare case,
+  # require this package
+  # XXX Linking errors with debian static python :/
+#       find_package_wrapper(PythonLibsUnix REQUIRED)
+  find_package(PythonLibsUnix REQUIRED)
+endif()
+
+if(WITH_IMAGE_OPENEXR)
+  find_package_wrapper(OpenEXR)  # our own module
+  if(NOT OPENEXR_FOUND)
+    set(WITH_IMAGE_OPENEXR OFF)
+  endif()
+endif()
+
+if(WITH_IMAGE_OPENJPEG)
+  find_package_wrapper(OpenJPEG)
+  if(NOT OPENJPEG_FOUND)
+    set(WITH_IMAGE_OPENJPEG OFF)
+  endif()
+endif()
+
+if(WITH_IMAGE_TIFF)
+  # XXX Linking errors with debian static tiff :/
+#       find_package_wrapper(TIFF)
+  find_package(TIFF)
+  if(NOT TIFF_FOUND)
+    set(WITH_IMAGE_TIFF OFF)
+  endif()
+endif()
+
+if(WITH_OPENAL)
+  find_package_wrapper(OpenAL)
+  if(NOT OPENAL_FOUND)
+    set(WITH_OPENAL OFF)
+  endif()
+endif()
+
+if(WITH_SDL)
+  find_package_wrapper(SDL2)
+  if(SDL2_FOUND)
+    # Use same names for both versions of SDL until we move to 2.x.
+    set(SDL_INCLUDE_DIR "${SDL2_INCLUDE_DIR}")
+    set(SDL_LIBRARY "${SDL2_LIBRARY}")
+    set(SDL_FOUND "${SDL2_FOUND}")
+  else()
+    find_package_wrapper(SDL)
+  endif()
+  mark_as_advanced(
+    SDL_INCLUDE_DIR
+    SDL_LIBRARY
+  )
+  # unset(SDLMAIN_LIBRARY CACHE)
+  if(NOT SDL_FOUND)
+    set(WITH_SDL OFF)
+  endif()
+endif()
+
+# Codecs
+if(WITH_CODEC_SNDFILE)
+  find_package_wrapper(SndFile)
+  if(NOT SNDFILE_FOUND)
+    set(WITH_CODEC_SNDFILE OFF)
+  endif()
+endif()
+
+if(WITH_CODEC_FFMPEG)
+  set(FFMPEG_ROOT_DIR ${FFMPEG})
+  find_package(FFmpeg)
+  if(NOT FFMPEG_FOUND)
+    set(WITH_CODEC_FFMPEG OFF)
+    message(STATUS "FFmpeg not found, disabling it")
+  endif()
+endif()
+
+if(WITH_FFTW3)
+  find_package_wrapper(Fftw3)
+  if(NOT FFTW3_FOUND)
+    set(WITH_FFTW3 OFF)
+  endif()
+endif()
+
+if(WITH_OPENCOLLADA)
+  find_package_wrapper(OpenCOLLADA)
+  if(OPENCOLLADA_FOUND)
+    find_package_wrapper(PCRE)
+    find_package_wrapper(XML2)
+  else()
+    set(WITH_OPENCOLLADA OFF)
+  endif()
+endif()
+
+if(WITH_MEM_JEMALLOC)
+  find_package_wrapper(JeMalloc)
+  if(NOT JEMALLOC_FOUND)
+    set(WITH_MEM_JEMALLOC OFF)
+  endif()
+endif()
+
+if(WITH_INPUT_NDOF)
+  find_package_wrapper(Spacenav)
+  if(SPACENAV_FOUND)
+    # use generic names within blenders buildsystem.
+    set(NDOF_INCLUDE_DIRS ${SPACENAV_INCLUDE_DIRS})
+    set(NDOF_LIBRARIES ${SPACENAV_LIBRARIES})
+  else()
+    set(WITH_INPUT_NDOF OFF)
+  endif()
+endif()
+
+if(WITH_CYCLES AND WITH_CYCLES_OSL)
+  find_package_wrapper(OSL)
+  if(OSL_FOUND)
+    if(${OSL_LIBRARY_VERSION_MAJOR} EQUAL "1" AND ${OSL_LIBRARY_VERSION_MINOR} LESS "6")
+      # Note: --whole-archive is needed to force loading of all symbols in liboslexec,
+      # otherwise LLVM is missing the osl_allocate_closure_component function
+      set(OSL_LIBRARIES
+        ${OSL_OSLCOMP_LIBRARY}
+        -Wl,--whole-archive ${OSL_OSLEXEC_LIBRARY}
+        -Wl,--no-whole-archive ${OSL_OSLQUERY_LIBRARY}
+      )
+    endif()
+  else()
+    message(STATUS "OSL not found, disabling it from Cycles")
+    set(WITH_CYCLES_OSL OFF)
+  endif()
+endif()
+
+if(WITH_OPENVDB)
+  find_package_wrapper(OpenVDB)
+  find_package_wrapper(Blosc)
+
+  if(NOT OPENVDB_FOUND)
+    set(WITH_OPENVDB OFF)
+    set(WITH_OPENVDB_BLOSC OFF)
+    message(STATUS "OpenVDB not found, disabling it")
+  elseif(NOT BLOSC_FOUND)
+    set(WITH_OPENVDB_BLOSC OFF)
+    message(STATUS "Blosc not found, disabling it for OpenVBD")
+  endif()
+endif()
+
+if(WITH_NANOVDB)
+  find_package_wrapper(NanoVDB)
+
+  if(NOT NANOVDB_FOUND)
+    set(WITH_NANOVDB OFF)
+    message(STATUS "NanoVDB not found, disabling it")
+  endif()
+endif()
+
+if(WITH_CPU_SIMD AND SUPPORT_NEON_BUILD)
+  find_package_wrapper(sse2neon)
+endif()
+
+if(WITH_ALEMBIC)
+  find_package_wrapper(Alembic)
+
+  if(NOT ALEMBIC_FOUND)
+    set(WITH_ALEMBIC OFF)
+  endif()
+endif()
+
+if(WITH_USD)
+  find_package_wrapper(USD)
+
+  if(NOT USD_FOUND)
+    set(WITH_USD OFF)
+  endif()
+endif()
+
+if(WITH_BOOST)
+  # uses in build instructions to override include and library variables
+  if(NOT BOOST_CUSTOM)
+    if(WITH_STATIC_LIBS)
+      set(Boost_USE_STATIC_LIBS ON)
+    endif()
+    set(Boost_USE_MULTITHREADED ON)
+    set(__boost_packages filesystem regex thread date_time)
+    if(WITH_CYCLES AND WITH_CYCLES_OSL)
+      if(NOT (${OSL_LIBRARY_VERSION_MAJOR} EQUAL "1" AND ${OSL_LIBRARY_VERSION_MINOR} LESS "6"))
+        list(APPEND __boost_packages wave)
+      else()
+      endif()
+    endif()
+    if(WITH_INTERNATIONAL)
+      list(APPEND __boost_packages locale)
+    endif()
+    if(WITH_OPENVDB)
+      list(APPEND __boost_packages iostreams)
+    endif()
+    list(APPEND __boost_packages system)
+    find_package(Boost 1.48 COMPONENTS ${__boost_packages})
+    if(NOT Boost_FOUND)
+      # try to find non-multithreaded if -mt not found, this flag
+      # doesn't matter for us, it has nothing to do with thread
+      # safety, but keep it to not disturb build setups
+      set(Boost_USE_MULTITHREADED OFF)
+      find_package(Boost 1.48 COMPONENTS ${__boost_packages})
+    endif()
+    unset(__boost_packages)
+    if(Boost_USE_STATIC_LIBS AND WITH_BOOST_ICU)
+      find_package(IcuLinux)
+    endif()
+    mark_as_advanced(Boost_DIR)  # why doesn't boost do this?
+    mark_as_advanced(Boost_INCLUDE_DIR)  # why doesn't boost do this?
+  endif()
+
+  set(BOOST_INCLUDE_DIR ${Boost_INCLUDE_DIRS})
+  set(BOOST_LIBRARIES ${Boost_LIBRARIES})
+  set(BOOST_LIBPATH ${Boost_LIBRARY_DIRS})
+  set(BOOST_DEFINITIONS "-DBOOST_ALL_NO_LIB")
+
+  if(Boost_USE_STATIC_LIBS AND WITH_BOOST_ICU)
+    find_package(IcuLinux)
+    list(APPEND BOOST_LIBRARIES ${ICU_LIBRARIES})
+  endif()
+endif()
+
+if(WITH_PUGIXML)
+  find_package_wrapper(PugiXML)
+
+  if(NOT PUGIXML_FOUND)
+    set(WITH_PUGIXML OFF)
+    message(STATUS "PugiXML not found, disabling WITH_PUGIXML")
+  endif()
+endif()
+
+if(WITH_IMAGE_WEBP)
+  set(WEBP_ROOT_DIR ${LIBDIR}/webp)
+  find_package_wrapper(WebP)
+  if(NOT WEBP_FOUND)
+    set(WITH_IMAGE_WEBP OFF)
+    message(WARNING "WebP not found, disabling WITH_IMAGE_WEBP")
+  endif()
+endif()
+
+if(WITH_OPENIMAGEIO)
+  find_package_wrapper(OpenImageIO)
+  set(OPENIMAGEIO_LIBRARIES
+    ${OPENIMAGEIO_LIBRARIES}
+    ${PNG_LIBRARIES}
+    ${JPEG_LIBRARIES}
+    ${ZLIB_LIBRARIES}
+    ${BOOST_LIBRARIES}
+  )
+  set(OPENIMAGEIO_LIBPATH)  # TODO, remove and reference the absolute path everywhere
+  set(OPENIMAGEIO_DEFINITIONS "")
+
+  if(WITH_IMAGE_TIFF)
+    list(APPEND OPENIMAGEIO_LIBRARIES "${TIFF_LIBRARY}")
+  endif()
+  if(WITH_IMAGE_OPENEXR)
+    list(APPEND OPENIMAGEIO_LIBRARIES "${OPENEXR_LIBRARIES}")
+  endif()
+  if(WITH_IMAGE_WEBP)
+    list(APPEND OPENIMAGEIO_LIBRARIES "${WEBP_LIBRARIES}")
+  endif()
+
+  if(NOT OPENIMAGEIO_FOUND)
+    set(WITH_OPENIMAGEIO OFF)
+    message(STATUS "OpenImageIO not found, disabling WITH_CYCLES")
+  endif()
+endif()
+
+if(WITH_OPENCOLORIO)
+  find_package_wrapper(OpenColorIO 2.0.0)
+
+  set(OPENCOLORIO_LIBRARIES ${OPENCOLORIO_LIBRARIES})
+  set(OPENCOLORIO_LIBPATH)  # TODO, remove and reference the absolute path everywhere
+  set(OPENCOLORIO_DEFINITIONS)
+
+  if(NOT OPENCOLORIO_FOUND)
+    set(WITH_OPENCOLORIO OFF)
+    message(STATUS "OpenColorIO not found")
+  endif()
+endif()
+
+if(WITH_CYCLES AND WITH_CYCLES_EMBREE)
+  find_package(Embree 3.8.0 REQUIRED)
+endif()
+
+if(WITH_OPENIMAGEDENOISE)
+  find_package_wrapper(OpenImageDenoise)
+
+  if(NOT OPENIMAGEDENOISE_FOUND)
+    set(WITH_OPENIMAGEDENOISE OFF)
+    message(STATUS "OpenImageDenoise not found")
+  endif()
+endif()
+
+if(WITH_LLVM)
+  if(EXISTS ${LIBDIR})
+    set(LLVM_STATIC ON)
+  endif()
+
+  find_package_wrapper(LLVM)
+  if(WITH_CLANG)
+    find_package_wrapper(Clang)
+  endif()
+  # Symbol conflicts with same UTF library used by OpenCollada
+  if(EXISTS ${LIBDIR})
+    if(WITH_OPENCOLLADA AND (${LLVM_VERSION} VERSION_LESS "4.0.0"))
+      list(REMOVE_ITEM OPENCOLLADA_LIBRARIES ${OPENCOLLADA_UTF_LIBRARY})
+    endif()
+  endif()
+
+  if(NOT LLVM_FOUND)
+    set(WITH_LLVM OFF)
+    set(WITH_CLANG OFF)
+    message(STATUS "LLVM not found")
+  else()
+    if(NOT CLANG_FOUND)
+      set(WITH_CLANG OFF)
+      message(STATUS "Clang not found")
+    endif()
+  endif()
+endif()
+
+if(WITH_OPENSUBDIV)
+  find_package_wrapper(OpenSubdiv)
+
+  set(OPENSUBDIV_LIBRARIES ${OPENSUBDIV_LIBRARIES})
+  set(OPENSUBDIV_LIBPATH)  # TODO, remove and reference the absolute path everywhere
+
+  if(NOT OPENSUBDIV_FOUND)
+    set(WITH_OPENSUBDIV OFF)
+    message(STATUS "OpenSubdiv not found")
+  endif()
+endif()
+
+if(WITH_TBB)
+  find_package_wrapper(TBB)
+  if(NOT TBB_FOUND)
+    message(WARNING "TBB not found, disabling WITH_TBB")
+    set(WITH_TBB OFF)
+  endif()
+endif()
+
+if(WITH_XR_OPENXR)
+  find_package(XR_OpenXR_SDK)
+  if(NOT XR_OPENXR_SDK_FOUND)
+    message(WARNING "OpenXR-SDK not found, disabling WITH_XR_OPENXR")
+    set(WITH_XR_OPENXR OFF)
+  endif()
+endif()
+
+if(WITH_GMP)
+  find_package_wrapper(GMP)
+  if(NOT GMP_FOUND)
+    message(WARNING "GMP not found, disabling WITH_GMP")
+    set(WITH_GMP OFF)
+  endif()
+endif()
+
+if(WITH_POTRACE)
+  find_package_wrapper(Potrace)
+  if(NOT POTRACE_FOUND)
+    message(WARNING "potrace not found, disabling WITH_POTRACE")
+    set(WITH_POTRACE OFF)
+  endif()
+endif()
+
+if(WITH_HARU)
+  find_package_wrapper(Haru)
+  if(NOT HARU_FOUND)
+    message(WARNING "Haru not found, disabling WITH_HARU")
+    set(WITH_HARU OFF)
+  endif()
+endif()
+
+# ----------------------------------------------------------------------------
+# Build and Link Flags
+
+list(APPEND PLATFORM_LINKLIBS
+  ws2_32 vfw32 winmm kernel32 user32 gdi32 comdlg32 comctl32 version
+  advapi32 shfolder shell32 ole32 oleaut32 uuid psapi dbghelp shlwapi
+  pathcch shcore
+)
+
+if(WITH_INPUT_IME)
+  list(APPEND PLATFORM_LINKLIBS imm32)
+endif()
+
+find_package(Threads REQUIRED)
+list(APPEND PLATFORM_LINKLIBS ${CMAKE_THREAD_LIBS_INIT})
+# used by other platforms
+set(PTHREADS_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})
+
+if(WITH_SYSTEM_FREETYPE)
+  find_package_wrapper(Freetype)
+  if(NOT FREETYPE_FOUND)
+    message(FATAL_ERROR "Failed finding system FreeType version!")
+  endif()
+endif()
+
+if(WITH_LZO AND WITH_SYSTEM_LZO)
+  find_package_wrapper(LZO)
+  if(NOT LZO_FOUND)
+    message(FATAL_ERROR "Failed finding system LZO version!")
+  endif()
+endif()
+
+if(WITH_SYSTEM_EIGEN3)
+  find_package_wrapper(Eigen3)
+  if(NOT EIGEN3_FOUND)
+    message(FATAL_ERROR "Failed finding system Eigen3 version!")
+  endif()
+endif()
+
+# Jack is intended to use the system library.
+if(WITH_JACK)
+  find_package_wrapper(Jack)
+  if(NOT JACK_FOUND)
+    set(WITH_JACK OFF)
+  endif()
+endif()
+
+# Pulse is intended to use the system library.
+if(WITH_PULSEAUDIO)
+  find_package_wrapper(Pulse)
+  if(NOT PULSE_FOUND)
+    set(WITH_PULSEAUDIO OFF)
+  endif()
+endif()
+
+# Audio IO
+if(WITH_SYSTEM_AUDASPACE)
+  find_package_wrapper(Audaspace)
+  if(NOT AUDASPACE_FOUND OR NOT AUDASPACE_C_FOUND)
+    message(FATAL_ERROR "Audaspace external library not found!")
+  endif()
+endif()
+
+# ----------------------------------------------------------------------------
+# Compilers
+
+# GNU Compiler
+if(CMAKE_COMPILER_IS_GNUCC)
+  # ffp-contract=off:
+  # Automatically turned on when building with "-march=native". This is
+  # explicitly turned off here as it will make floating point math give a bit
+  # different results. This will lead to automated test failures. So disable
+  # this until we support it. Seems to default to off in clang and the intel
+  # compiler.
+  set(PLATFORM_CFLAGS "-pipe -fPIC -funsigned-char -fno-strict-aliasing -ffp-contract=off")
+
+  # `maybe-uninitialized` is unreliable in release builds, but fine in debug builds.
+  set(GCC_EXTRA_FLAGS_RELEASE "-Wno-maybe-uninitialized")
+  set(CMAKE_C_FLAGS_RELEASE          "${GCC_EXTRA_FLAGS_RELEASE} ${CMAKE_C_FLAGS_RELEASE}")
+  set(CMAKE_C_FLAGS_RELWITHDEBINFO   "${GCC_EXTRA_FLAGS_RELEASE} ${CMAKE_C_FLAGS_RELWITHDEBINFO}")
+  set(CMAKE_CXX_FLAGS_RELEASE        "${GCC_EXTRA_FLAGS_RELEASE} ${CMAKE_CXX_FLAGS_RELEASE}")
+  string(PREPEND CMAKE_CXX_FLAGS_RELWITHDEBINFO "${GCC_EXTRA_FLAGS_RELEASE} ")
+  unset(GCC_EXTRA_FLAGS_RELEASE)
+
+# CLang is the same as GCC for now.
+elseif(CMAKE_C_COMPILER_ID MATCHES "Clang")
+  set(PLATFORM_CFLAGS "-pipe -fPIC -funsigned-char -fno-strict-aliasing")
+endif()
+
+# Don't use position independent executable for portable install since file
+# browsers can't properly detect blender as an executable then. Still enabled
+# for non-portable installs as typically used by Linux distributions.
+if(WITH_INSTALL_PORTABLE)
+  string(APPEND CMAKE_EXE_LINKER_FLAGS " -no-pie")
+endif()
+
+if(WITH_COMPILER_CCACHE)
+  find_program(CCACHE_PROGRAM ccache)
+  if(CCACHE_PROGRAM)
+    # Makefiles and ninja
+    set(CMAKE_C_COMPILER_LAUNCHER   "${CCACHE_PROGRAM}" CACHE STRING "" FORCE)
+    set(CMAKE_CXX_COMPILER_LAUNCHER "${CCACHE_PROGRAM}" CACHE STRING "" FORCE)
+  else()
+    message(WARNING "Ccache NOT found, disabling WITH_COMPILER_CCACHE")
+    set(WITH_COMPILER_CCACHE OFF)
+  endif()
+endif()
+
+# On some platforms certain atomic operations are not possible with assembly and/or intrinsics and
+# they are emulated in software with locks. For example, on armel there is no intrinsics to grant
+# 64 bit atomic operations and STL library uses libatomic to offload software emulation of atomics
+# to.
+# This function will check whether libatomic is required and if so will configure linker flags.
+# If atomic operations are possible without libatomic then linker flags are left as-is.
+function(CONFIGURE_ATOMIC_LIB_IF_NEEDED)
+  # Source which is used to enforce situation when software emulation of atomics is required.
+  # Assume that using 64bit integer gives a definitive answer (as in, if 64bit atomic operations
+  # are possible using assembly/intrinsics 8, 16, and 32 bit operations will also be possible.
+  set(_source
+      "#include <atomic>
+      #include <cstdint>
+      int main(int argc, char **argv) {
+        std::atomic<uint64_t> uint64; uint64++;
+        return 0;
+      }")
+
+  include(CheckCXXSourceCompiles)
+  check_cxx_source_compiles("${_source}" ATOMIC_OPS_WITHOUT_LIBATOMIC)
+
+  if(NOT ATOMIC_OPS_WITHOUT_LIBATOMIC)
+    # Compilation of the test program has failed.
+    # Try it again with -latomic to see if this is what is needed, or whether something else is
+    # going on.
+
+    set(CMAKE_REQUIRED_LIBRARIES atomic)
+    check_cxx_source_compiles("${_source}" ATOMIC_OPS_WITH_LIBATOMIC)
+
+    if(ATOMIC_OPS_WITH_LIBATOMIC)
+      set(PLATFORM_LINKFLAGS "${PLATFORM_LINKFLAGS} -latomic" PARENT_SCOPE)
+    else()
+      # Atomic operations are required part of Blender and it is not possible to process forward.
+      # We expect that either standard library or libatomic will make atomics to work. If both
+      # cases has failed something fishy o na bigger scope is going on.
+      message(FATAL_ERROR "Failed to detect required configuration for atomic operations")
+    endif()
+  endif()
+endfunction()
+
+CONFIGURE_ATOMIC_LIB_IF_NEEDED()
