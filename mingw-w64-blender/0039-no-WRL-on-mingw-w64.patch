--- a/intern/ghost/CMakeLists.txt
+++ b/intern/ghost/CMakeLists.txt
@@ -468,7 +468,6 @@
     intern/GHOST_DisplayManagerWin32.cc
     intern/GHOST_DropTargetWin32.cc
     intern/GHOST_SystemWin32.cc
-    intern/GHOST_TrackpadWin32.cc
     intern/GHOST_WindowWin32.cc
     intern/GHOST_Wintab.cc
 
@@ -477,10 +476,15 @@
     intern/GHOST_DropTargetWin32.hh
     intern/GHOST_SystemWin32.hh
     intern/GHOST_TaskbarWin32.hh
-    intern/GHOST_TrackpadWin32.hh
     intern/GHOST_WindowWin32.hh
     intern/GHOST_Wintab.hh
   )
+  if(MSVC)
+    list(APPEND SRC
+      intern/GHOST_TrackpadWin32.cpp
+      intern/GHOST_TrackpadWin32.h
+    )
+  endif()
 
   list(APPEND SRC
     intern/GHOST_ContextWGL.cpp
--- a/intern/ghost/intern/GHOST_SystemWin32.cc
+++ b/intern/ghost/intern/GHOST_SystemWin32.cc
@@ -410,9 +410,9 @@
     if (timerMgr->fireTimers(getMilliSeconds())) {
       hasEventHandled = true;
     }
-
+#ifdef _MSC_VER
     driveTrackpad();
-
+#endif
     /* Process all the events waiting for us. */
     while (::PeekMessageW(&msg, NULL, 0, 0, PM_REMOVE) != 0) {
       /* #TranslateMessage doesn't alter the message, and doesn't change our raw keyboard data.
@@ -421,9 +421,9 @@
       ::DispatchMessageW(&msg);
       hasEventHandled = true;
     }
-
+#ifdef _MSC_VER
     processTrackpad();
-
+#endif
     /* `PeekMessage` above is allowed to dispatch messages to the `wndproc` without us
      * noticing, so we need to check the event manager here to see if there are
      * events waiting in the queue. */
@@ -1415,7 +1415,7 @@
   return eventSent;
 }
 #endif /* WITH_INPUT_NDOF */
-
+#ifdef _MSC_VER
 void GHOST_SystemWin32::driveTrackpad()
 {
   GHOST_WindowWin32 *active_window = static_cast<GHOST_WindowWin32 *>(
@@ -1461,7 +1461,7 @@
                                               false));
   }
 }
-
+#endif
 LRESULT WINAPI GHOST_SystemWin32::s_wndProc(HWND hwnd, uint msg, WPARAM wParam, LPARAM lParam)
 {
   GHOST_Event *event = NULL;
@@ -2045,8 +2045,9 @@
                        suggestedWindowRect->right - suggestedWindowRect->left,
                        suggestedWindowRect->bottom - suggestedWindowRect->top,
                        SWP_NOZORDER | SWP_NOACTIVATE);
-
+#ifdef _MSC_VER
           window->updateDPI();
+#endif
           break;
         }
         case WM_DISPLAYCHANGE: {
@@ -2141,6 +2142,7 @@
            * In GHOST, we let DefWindowProc call the timer callback. */
           break;
         }
+#ifdef _MSC_VER
         case DM_POINTERHITTEST: {
           /* The DM_POINTERHITTEST message is sent to a window, when pointer input is first
            * detected, in order to determine the most probable input target for Direct
@@ -2150,6 +2152,7 @@
           }
           break;
         }
+#endif
       }
     }
     else {
--- a/intern/ghost/intern/GHOST_SystemWin32.hh
+++ b/intern/ghost/intern/GHOST_SystemWin32.hh
@@ -403,7 +403,7 @@
    */
   bool processNDOF(RAWINPUT const &raw);
 #endif
-
+#ifdef _MSC_VER
   /**
    * Drives Direct Manipulation update.
    */
@@ -413,7 +413,7 @@
    * Creates trackpad events for the active window.
    */
   void processTrackpad();
-
+#endif
   /**
    * Check current key layout for AltGr
    */
--- a/intern/ghost/intern/GHOST_TrackpadWin32.cc
+++ b/intern/ghost/intern/GHOST_TrackpadWin32.cc
@@ -7,7 +7,9 @@
 #include <cmath>
 
 #include "GHOST_Debug.hh"
+#ifdef _MSC_VER
 #include "GHOST_TrackpadWin32.hh"
+#endif
 
 GHOST_DirectManipulationHelper::GHOST_DirectManipulationHelper(
     HWND hWnd,
--- a/intern/ghost/intern/GHOST_WindowWin32.cc
+++ b/intern/ghost/intern/GHOST_WindowWin32.cc
@@ -71,7 +71,9 @@
       m_normal_state(GHOST_kWindowStateNormal),
       m_user32(::LoadLibrary("user32.dll")),
       m_parentWindowHwnd(parentwindow ? parentwindow->m_hWnd : HWND_DESKTOP),
+#ifdef _MSC_VER
       m_directManipulationHelper(nullptr),
+#endif
       m_debug_context(is_debug)
 {
   DWORD style = parentwindow ?
@@ -208,7 +210,7 @@
   /* Allow the showing of a progress bar on the taskbar. */
   CoCreateInstance(
       CLSID_TaskbarList, nullptr, CLSCTX_INPROC_SERVER, IID_ITaskbarList3, (LPVOID *)&m_Bar);
-
+#ifdef _MSC_VER
   /* Initialize Direct Manipulation. */
   m_directManipulationHelper = GHOST_DirectManipulationHelper::create(m_hWnd, getDPIHint());
 }
@@ -244,6 +246,7 @@
   }
 
   return m_directManipulationHelper->getTrackpadInfo();
+#endif
 }
 
 GHOST_WindowWin32::~GHOST_WindowWin32()
@@ -293,9 +296,10 @@
     ::DestroyWindow(m_hWnd);
     m_hWnd = 0;
   }
-
+#ifdef _MSC_VER
   delete m_directManipulationHelper;
   m_directManipulationHelper = nullptr;
+#endif
 }
 
 void GHOST_WindowWin32::adjustWindowRectForClosestMonitor(LPRECT win_rect,
@@ -1066,14 +1070,14 @@
     DwmSetWindowAttribute(this->m_hWnd, 20, &DarkMode, sizeof(DarkMode));
   }
 }
-
+#ifdef _MSC_VER
 void GHOST_WindowWin32::updateDPI()
 {
   if (m_directManipulationHelper) {
     m_directManipulationHelper->setDPI(getDPIHint());
   }
 }
-
+#endif
 uint16_t GHOST_WindowWin32::getDPIHint()
 {
   if (m_user32) {
--- a/intern/ghost/intern/GHOST_WindowWin32.hh
+++ b/intern/ghost/intern/GHOST_WindowWin32.hh
@@ -13,7 +13,9 @@
 #endif /* WIN32 */
 
 #include "GHOST_TaskbarWin32.hh"
+#ifdef _MSC_VER
 #include "GHOST_TrackpadWin32.hh"
+#endif
 #include "GHOST_Window.hh"
 #include "GHOST_Wintab.hh"
 #ifdef WITH_INPUT_IME
@@ -286,9 +288,9 @@
   {
     return GHOST_kFailure;
   }
-
+#ifdef _MSC_VER
   void updateDPI();
-
+#endif
   uint16_t getDPIHint() override;
 
   /** True if the mouse is either over or captured by the window. */
@@ -310,7 +312,7 @@
 
   void endIME();
 #endif /* WITH_INPUT_IME */
-
+#ifdef _MSC_VER
   /*
    * Drive DirectManipulation context.
    */
@@ -323,7 +325,7 @@
   void onPointerHitTest(WPARAM wParam);
 
   GHOST_TTrackpadInfo getTrackpadInfo();
-
+#endif
  private:
   /**
    * \param type: The type of rendering context create.
@@ -406,9 +408,9 @@
   HMODULE m_user32;
 
   HWND m_parentWindowHwnd;
-
+#ifdef _MSC_VER
   GHOST_DirectManipulationHelper *m_directManipulationHelper;
-
+#endif
 #ifdef WITH_INPUT_IME
   /** Handle input method editors event */
   GHOST_ImeWin32 m_imeInput;
