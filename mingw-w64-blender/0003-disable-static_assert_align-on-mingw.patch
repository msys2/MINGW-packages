--- a/intern/cycles/kernel/types.h
+++ b/intern/cycles/kernel/types.h
@@ -1060,7 +1060,7 @@
 
   int motion_position;
 } KernelCamera;
-static_assert_align(KernelCamera, 16);
+// static_assert_align(KernelCamera, 16);
 
 typedef struct KernelFilm {
   float exposure;
@@ -1148,7 +1148,7 @@
 
   int pad1;
 } KernelFilm;
-static_assert_align(KernelFilm, 16);
+// static_assert_align(KernelFilm, 16);
 
 typedef struct KernelFilmConvert {
   int pass_offset;
@@ -1189,7 +1189,7 @@
   /* Padding. */
   int pad1;
 } KernelFilmConvert;
-static_assert_align(KernelFilmConvert, 16);
+// static_assert_align(KernelFilmConvert, 16);
 
 typedef struct KernelBackground {
   /* only shader index */
@@ -1222,7 +1222,7 @@
   /* Padding */
   int pad1, pad2;
 } KernelBackground;
-static_assert_align(KernelBackground, 16);
+// static_assert_align(KernelBackground, 16);
 
 typedef struct KernelIntegrator {
   /* emission */
@@ -1291,7 +1291,7 @@
   /* padding */
   int pad1;
 } KernelIntegrator;
-static_assert_align(KernelIntegrator, 16);
+// static_assert_align(KernelIntegrator, 16);
 
 typedef enum KernelBVHLayout {
   BVH_LAYOUT_NONE = 0,
@@ -1335,13 +1335,13 @@
 #  endif
 #endif
 } KernelBVH;
-static_assert_align(KernelBVH, 16);
+// static_assert_align(KernelBVH, 16);
 
 typedef struct KernelTables {
   int beckmann_offset;
   int pad1, pad2, pad3;
 } KernelTables;
-static_assert_align(KernelTables, 16);
+// static_assert_align(KernelTables, 16);
 
 typedef struct KernelBake {
   int use;
@@ -1349,7 +1349,7 @@
   int tri_offset;
   int pad1;
 } KernelBake;
-static_assert_align(KernelBake, 16);
+// static_assert_align(KernelBake, 16);
 
 typedef struct KernelData {
   uint kernel_features;
@@ -1365,7 +1365,7 @@
   KernelTables tables;
   KernelBake bake;
 } KernelData;
-static_assert_align(KernelData, 16);
+// static_assert_align(KernelData, 16);
 
 /* Kernel data structures. */
 
@@ -1407,7 +1407,7 @@
   /* Volume velocity scale. */
   float velocity_scale;
 } KernelObject;
-static_assert_align(KernelObject, 16);
+// static_assert_align(KernelObject, 16);
 
 typedef struct KernelCurve {
   int shader_id;
@@ -1415,13 +1415,13 @@
   int num_keys;
   int type;
 } KernelCurve;
-static_assert_align(KernelCurve, 16);
+// static_assert_align(KernelCurve, 16);
 
 typedef struct KernelCurveSegment {
   int prim;
   int type;
 } KernelCurveSegment;
-static_assert_align(KernelCurveSegment, 8);
+// static_assert_align(KernelCurveSegment, 8);
 
 typedef struct KernelSpotLight {
   float radius;
@@ -1467,7 +1467,7 @@
     KernelDistantLight distant;
   };
 } KernelLight;
-static_assert_align(KernelLight, 16);
+// static_assert_align(KernelLight, 16);
 
 typedef struct KernelLightDistribution {
   float totarea;
@@ -1483,7 +1483,7 @@
     } lamp;
   };
 } KernelLightDistribution;
-static_assert_align(KernelLightDistribution, 16);
+// static_assert_align(KernelLightDistribution, 16);
 
 typedef struct KernelParticle {
   int index;
@@ -1497,7 +1497,7 @@
   float4 velocity;
   float4 angular_velocity;
 } KernelParticle;
-static_assert_align(KernelParticle, 16);
+// static_assert_align(KernelParticle, 16);
 
 typedef struct KernelShader {
   float constant_emission[3];
@@ -1506,7 +1506,7 @@
   int pass_id;
   int pad2, pad3;
 } KernelShader;
-static_assert_align(KernelShader, 16);
+// static_assert_align(KernelShader, 16);
 
 /* Patches */
 
@@ -1545,7 +1545,7 @@
   int prim;
   float u, v;
 } KernelShaderEvalInput;
-static_assert_align(KernelShaderEvalInput, 16);
+// static_assert_align(KernelShaderEvalInput, 16);
 
 /* Pre-computed sample table sizes for PMJ02 sampler. */
 #define NUM_PMJ_DIVISIONS 32
