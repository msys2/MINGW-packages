--- blender-4.0.2-orig/intern/cycles/kernel/types.h	2023-10-31 03:42:12.000000000 +0300
+++ blender-4.0.2/intern/cycles/kernel/types.h	2024-01-11 14:35:13.056217200 +0300
@@ -1144,7 +1144,7 @@
 
   int motion_position;
 } KernelCamera;
-static_assert_align(KernelCamera, 16);
+// static_assert_align(KernelCamera, 16);
 
 typedef struct KernelFilmConvert {
   int pass_offset;
@@ -1185,7 +1185,7 @@
   /* Padding. */
   int pad1;
 } KernelFilmConvert;
-static_assert_align(KernelFilmConvert, 16);
+// static_assert_align(KernelFilmConvert, 16);
 
 typedef enum KernelBVHLayout {
   BVH_LAYOUT_NONE = 0,
@@ -1242,7 +1242,7 @@
   int pad1;
   int pad2;
 } KernelTables;
-static_assert_align(KernelTables, 16);
+// static_assert_align(KernelTables, 16);
 
 typedef struct KernelBake {
   int use;
@@ -1250,7 +1250,7 @@
   int tri_offset;
   int use_camera;
 } KernelBake;
-static_assert_align(KernelBake, 16);
+// static_assert_align(KernelBake, 16);
 
 typedef struct KernelLightLinkSet {
   uint light_tree_root;
@@ -1292,7 +1292,7 @@
 #endif
   int pad2, pad3;
 } KernelData;
-static_assert_align(KernelData, 16);
+// static_assert_align(KernelData, 16);
 
 /* Kernel data structures. */
 
@@ -1340,7 +1340,7 @@
   uint64_t shadow_set_membership;
   uint blocker_shadow_set;
 } KernelObject;
-static_assert_align(KernelObject, 16);
+// static_assert_align(KernelObject, 16);
 
 typedef struct KernelCurve {
   int shader_id;
@@ -1348,13 +1348,13 @@
   int num_keys;
   int type;
 } KernelCurve;
-static_assert_align(KernelCurve, 16);
+// static_assert_align(KernelCurve, 16);
 
 typedef struct KernelCurveSegment {
   int prim;
   int type;
 } KernelCurveSegment;
-static_assert_align(KernelCurveSegment, 8);
+// static_assert_align(KernelCurveSegment, 8);
 
 typedef struct KernelSpotLight {
   packed_float3 scaled_axis_u;
@@ -1411,7 +1411,7 @@
   uint64_t light_set_membership;
   uint64_t shadow_set_membership;
 } KernelLight;
-static_assert_align(KernelLight, 16);
+// static_assert_align(KernelLight, 16);
 
 using MeshLight = struct MeshLight {
   int shader_flag;
@@ -1423,7 +1423,7 @@
   int prim;
   MeshLight mesh_light;
 } KernelLightDistribution;
-static_assert_align(KernelLightDistribution, 16);
+// static_assert_align(KernelLightDistribution, 16);
 
 /* Bounding box. */
 using BoundingBox = struct BoundingBox {
@@ -1527,7 +1527,7 @@
   float4 velocity;
   float4 angular_velocity;
 } KernelParticle;
-static_assert_align(KernelParticle, 16);
+// static_assert_align(KernelParticle, 16);
 
 typedef struct KernelShader {
   float constant_emission[3];
@@ -1536,7 +1536,7 @@
   int pass_id;
   int pad2, pad3;
 } KernelShader;
-static_assert_align(KernelShader, 16);
+// static_assert_align(KernelShader, 16);
 
 /* Patches */
 
@@ -1575,7 +1575,7 @@
   int prim;
   float u, v;
 } KernelShaderEvalInput;
-static_assert_align(KernelShaderEvalInput, 16);
+// static_assert_align(KernelShaderEvalInput, 16);
 
 /* Pre-computed sample table sizes for the tabulated Sobol sampler.
  *
