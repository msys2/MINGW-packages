--- a/intern/cycles/kernel/types.h
+++ b/intern/cycles/kernel/types.h
@@ -1076,7 +1076,7 @@
 
   int motion_position;
 } KernelCamera;
-static_assert_align(KernelCamera, 16);
+// static_assert_align(KernelCamera, 16);
 
 typedef struct KernelFilmConvert {
   int pass_offset;
@@ -1117,7 +1117,7 @@
   /* Padding. */
   int pad1;
 } KernelFilmConvert;
-static_assert_align(KernelFilmConvert, 16);
+// static_assert_align(KernelFilmConvert, 16);
 
 typedef enum KernelBVHLayout {
   BVH_LAYOUT_NONE = 0,
@@ -1156,7 +1156,7 @@
   int filter_table_offset;
   int pad1, pad2;
 } KernelTables;
-static_assert_align(KernelTables, 16);
+// static_assert_align(KernelTables, 16);
 
 typedef struct KernelBake {
   int use;
@@ -1164,7 +1164,7 @@
   int tri_offset;
   int use_camera;
 } KernelBake;
-static_assert_align(KernelBake, 16);
+// static_assert_align(KernelBake, 16);
 
 typedef struct KernelData {
   /* Features and limits. */
@@ -1199,7 +1199,7 @@
 #endif
   int pad2, pad3;
 } KernelData;
-static_assert_align(KernelData, 16);
+// static_assert_align(KernelData, 16);
 
 /* Kernel data structures. */
 
@@ -1241,7 +1241,7 @@
   /* Volume velocity scale. */
   float velocity_scale;
 } KernelObject;
-static_assert_align(KernelObject, 16);
+// static_assert_align(KernelObject, 16);
 
 typedef struct KernelCurve {
   int shader_id;
@@ -1249,13 +1249,13 @@
   int num_keys;
   int type;
 } KernelCurve;
-static_assert_align(KernelCurve, 16);
+// static_assert_align(KernelCurve, 16);
 
 typedef struct KernelCurveSegment {
   int prim;
   int type;
 } KernelCurveSegment;
-static_assert_align(KernelCurveSegment, 8);
+// static_assert_align(KernelCurveSegment, 8);
 
 typedef struct KernelSpotLight {
   float radius;
@@ -1301,7 +1301,7 @@
     KernelDistantLight distant;
   };
 } KernelLight;
-static_assert_align(KernelLight, 16);
+// static_assert_align(KernelLight, 16);
 
 typedef struct KernelLightDistribution {
   float totarea;
@@ -1317,7 +1317,7 @@
     } lamp;
   };
 } KernelLightDistribution;
-static_assert_align(KernelLightDistribution, 16);
+// static_assert_align(KernelLightDistribution, 16);
 
 typedef struct KernelParticle {
   int index;
@@ -1331,7 +1331,7 @@
   float4 velocity;
   float4 angular_velocity;
 } KernelParticle;
-static_assert_align(KernelParticle, 16);
+// static_assert_align(KernelParticle, 16);
 
 typedef struct KernelShader {
   float constant_emission[3];
@@ -1340,7 +1340,7 @@
   int pass_id;
   int pad2, pad3;
 } KernelShader;
-static_assert_align(KernelShader, 16);
+// static_assert_align(KernelShader, 16);
 
 /* Patches */
 
@@ -1379,7 +1379,7 @@
   int prim;
   float u, v;
 } KernelShaderEvalInput;
-static_assert_align(KernelShaderEvalInput, 16);
+// static_assert_align(KernelShaderEvalInput, 16);
 
 /* Pre-computed sample table sizes for PMJ02 sampler.
  *
