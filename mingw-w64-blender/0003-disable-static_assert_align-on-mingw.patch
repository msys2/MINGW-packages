--- blender-4.4.3/intern/cycles/kernel/types.h.orig	2025-06-10 08:02:07.220549100 +0300
+++ blender-4.4.3/intern/cycles/kernel/types.h	2025-06-10 08:04:44.429315900 +0300
@@ -1347,7 +1347,7 @@
 
   int motion_position;
 };
-static_assert_align(KernelCamera, 16);
+// static_assert_align(KernelCamera, 16);
 
 struct KernelFilmConvert {
   int pass_offset;
@@ -1388,7 +1388,7 @@
   /* Padding. */
   int pad1;
 };
-static_assert_align(KernelFilmConvert, 16);
+// static_assert_align(KernelFilmConvert, 16);
 
 enum KernelBVHLayout {
   BVH_LAYOUT_NONE = 0,
@@ -1447,7 +1447,7 @@
   int pad1;
   int pad2;
 };
-static_assert_align(KernelTables, 16);
+// static_assert_align(KernelTables, 16);
 
 struct KernelBake {
   int use;
@@ -1455,7 +1455,7 @@
   int tri_offset;
   int use_camera;
 };
-static_assert_align(KernelBake, 16);
+// static_assert_align(KernelBake, 16);
 
 struct KernelLightLinkSet {
   uint light_tree_root;
@@ -1498,7 +1498,7 @@
 #endif
   int pad2, pad3;
 };
-static_assert_align(KernelData, 16);
+// static_assert_align(KernelData, 16);
 
 /* Kernel data structures. */
 
@@ -1549,7 +1549,7 @@
   uint64_t shadow_set_membership;
   uint blocker_shadow_set;
 };
-static_assert_align(KernelObject, 16);
+// static_assert_align(KernelObject, 16);
 
 struct KernelCurve {
   int shader_id;
@@ -1557,13 +1557,13 @@
   int num_keys;
   int type;
 };
-static_assert_align(KernelCurve, 16);
+// static_assert_align(KernelCurve, 16);
 
 struct KernelCurveSegment {
   int prim;
   int type;
 };
-static_assert_align(KernelCurveSegment, 8);
+// static_assert_align(KernelCurveSegment, 8);
 
 struct KernelSpotLight {
   packed_float3 dir;
@@ -1621,7 +1621,7 @@
   uint64_t light_set_membership;
   uint64_t shadow_set_membership;
 };
-static_assert_align(KernelLight, 16);
+// static_assert_align(KernelLight, 16);
 
 struct MeshLight {
   int shader_flag;
@@ -1633,7 +1633,7 @@
   int prim;
   MeshLight mesh_light;
 };
-static_assert_align(KernelLightDistribution, 16);
+// static_assert_align(KernelLightDistribution, 16);
 
 /* Bounding box. */
 struct KernelBoundingBox {
@@ -1692,7 +1692,7 @@
   /* Padding. */
   uint8_t pad[11];
 };
-static_assert_align(KernelLightTreeNode, 16);
+// static_assert_align(KernelLightTreeNode, 16);
 
 struct KernelLightTreeEmitter {
   /* Bounding cone. */
@@ -1723,7 +1723,7 @@
   /* Bit trail from root node to leaf node containing emitter. */
   int bit_trail;
 };
-static_assert_align(KernelLightTreeEmitter, 16);
+// static_assert_align(KernelLightTreeEmitter, 16);
 
 struct KernelParticle {
   int index;
@@ -1737,7 +1737,7 @@
   float4 velocity;
   float4 angular_velocity;
 };
-static_assert_align(KernelParticle, 16);
+// static_assert_align(KernelParticle, 16);
 
 struct KernelShader {
   float constant_emission[3];
@@ -1746,7 +1746,7 @@
   int pass_id;
   int pad2, pad3;
 };
-static_assert_align(KernelShader, 16);
+// static_assert_align(KernelShader, 16);
 
 /* Patches */
 
@@ -1787,7 +1787,7 @@
   int prim;
   float u, v;
 };
-static_assert_align(KernelShaderEvalInput, 16);
+// static_assert_align(KernelShaderEvalInput, 16);
 
 /* Pre-computed sample table sizes for the tabulated Sobol sampler.
  *
