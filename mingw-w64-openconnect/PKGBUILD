# Contributor: Marios Paouris <mspaourh@gmail.com>

_realname=openconnect
_wintun_source="wintun-0.14.1.zip::https://gitlab.com/openconnect/openconnect-gui/-/raw/edd44c4d181b5333bc499b7e8ff8978f35cea7e8/wintun/wintun-0.14.1.zip?inline=false"
_wintun_sha256sum="07c256185d6ee3652e09fa55c0b673e2624b565e02c4b9091c79ca7d2f24ef51"
_wintun_dll_amd64_sha256sum="e5da8447dc2c320edc0fc52fa01885c103de8c118481f683643cacc3220dafce"
_wintun_dll_arm64_sha256sum="f7ba89005544be9d85231a9e0d5f23b2d15b3311667e2dad0debd344918a3f80"
_wintun_dll_x86_sha256sum="d694fa46ab4cfebcb2632d094c7aa97278eef2f8052438621766d863ae98a931"
_installer_sha256sum="86c34707705955d6d8bd953fc1748245df7fd83ba41d037dc61d7d6fc8463c06"

pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}")
pkgver=9.12
pkgrel=1
pkgdesc="Open client for Cisco AnyConnect, Juniper, Pulse, GlobalProtect, F5, Fortinet and Array Networks (IBM Cloud) VPNs. (mingw-w64)"
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clangarm64')
url="https://www.infradead.org/openconnect"
license=('spdx:LGPL-2.1-or-later')
makedepends=("${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-autotools"
             "${MINGW_PACKAGE_PREFIX}-curl"
             "unzip"
             "${MINGW_PACKAGE_PREFIX}-jq")
depends=("${MINGW_PACKAGE_PREFIX}-libxml2" 
         "${MINGW_PACKAGE_PREFIX}-gnutls>=3.6.13"
         "${MINGW_PACKAGE_PREFIX}-p11-kit"
         "${MINGW_PACKAGE_PREFIX}-nettle"
         "${MINGW_PACKAGE_PREFIX}-lz4"
         "${MINGW_PACKAGE_PREFIX}-zlib"
         "${MINGW_PACKAGE_PREFIX}-stoken=0.92")
options=('staticlibs' 'strip')
source=("https://gitlab.com/openconnect/openconnect/-/archive/v${pkgver}/${_realname}-v${pkgver}.tar.gz"
        "vpnc-script-win.js::https://gitlab.com/openconnect/vpnc-scripts/-/raw/4ed41c21e3857f96ab935b45092bbb07c3ccd5be/vpnc-script-win.js?inline=false"
        "0001-openconnect-9.12-version.patch"
        "0002-openconnect-9.12-configure.patch"
        "0003-openconnect-9.12-makefile.patch"
        "0101-dont-download-things.patch"
        "openconnect-wintun-installer.in"
)
sha256sums=('c1c22b2bcb92576960c545f09e35ff36142198c21ed766752076fa72eb4070d4'
            '4b1787273fea24efb3aa75cc822018626457517ef52f02b26e7120b9b49a1c41'
            '714830aa86b42bf836612918d11de7b70252d17f13b418745a93e386d4bdd3ee'
            '067f14c130c217a987da83cbadddaf14f220ae9e34b9e3cac7dcc08c27ed4df3'
            '129749a3f4c652fa000151d041f6bf27ab84e1ffc9a5aad888078c04b7551573'
            '8096d46600715b8b93470e2d50691261289883f62fb3db4bc0ce51180ef5eb26'
            "${_installer_sha256sum}")
validpgpkeys=('BE07D9FD54809AB2C4B0FF5F63762CDA67E2F359') # David Woodhouse <dwmw2@infradead.org>
install=${_realname}-${MSYSTEM}.install

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying $_patch"
    patch -Np1 -i "${srcdir}/$_patch"
  done
}

del_file_exists() {
  for _fname in "$@"
  do
    if [ -f $_fname ]; then
      rm -rf $_fname
    fi
  done
}
# =========================================== #

prepare() {
  cd ${srcdir}/${_realname}-v${pkgver}

  apply_patch_with_msg \
    0001-openconnect-9.12-version.patch \
    0002-openconnect-9.12-configure.patch \
    0003-openconnect-9.12-makefile.patch

  apply_patch_with_msg \
    0101-dont-download-things.patch

  ./autogen.sh
}

build() {
  #export lt_cv_deplibs_check_method='pass_all'
  [[ -d "${srcdir}/build-${MSYSTEM}" ]] && rm -rf "${srcdir}/build-${MSYSTEM}"
  mkdir -p "${srcdir}/build-${MSYSTEM}" && cd "${srcdir}/build-${MSYSTEM}"

  #specify -Wno-error=... to workaround compilation issue on GCC 14
  #see discussion on https://gitlab.com/openconnect/openconnect-gui/-/merge_requests/307#note_1904157712
  #this can be removed after 9.13 is released, it is fixed in https://gitlab.com/openconnect/openconnect/-/commit/d8127b8f4bbaedfe1665c2052f47c5616aa404b1
  CFLAGS="${CFLAGS} -g -O2 -Wno-error=incompatible-pointer-types" \
  ../${_realname}-v${pkgver}/configure \
    --disable-dependency-tracking \
    --prefix=${MINGW_PREFIX} \
    --build=${MINGW_CHOST} \
    --host=${MINGW_CHOST} \
    --sbindir=${MINGW_PREFIX}/bin \
    --disable-nsis-installer \
    --with-gnutls \
    --without-openssl \
    --without-libpskc \
    --without-libproxy \
    --with-vpnc-script=vpnc-script-win.js 

  #grab WINTUN_ARCH that configure figured out is applicable for this system
  WINTUN_ARCH=$(grep -h 'WINTUN_ARCH = ' ${srcdir}/build-${MSYSTEM}/Makefile | sed 's/.* = \(.*\)/\1/')

  #grab WINTUNSHA256 that Makefile knows and validate it is the same we are expecting
  WINTUNSHA256=$(grep -h 'WINTUNSHA256 = ' ${srcdir}/build-${MSYSTEM}/Makefile | sed 's/.* = \(.*\)/\1/')

  if [ "x${_wintun_sha256sum}" != "x${WINTUNSHA256}" ]; then
    msg2 "Wintun SHA256 in PKGBUILD is not the same as expected by openconnect"
    msg2 "Please notify the maintainer"
    exit 1
  fi

  generate_wintun_installer

  mkdir -p "${srcdir}/build-${MSYSTEM}"
  cp "${srcdir}/vpnc-script-win.js" "${srcdir}/build-${MSYSTEM}"

  #set MINGW_PACKAGE vars so version.sh produces the correct version string in version.c
  MINGW_PACKAGE_VERSION=$pkgver MINGW_PACKAGE_RELEASE=$pkgrel make
}

check() {
  cd "${srcdir}/build-${MSYSTEM}"
  #autocompletion tests fail since autocompletion is not enabled in windows builds
  #so disable them until it is actually enabled
  make DESTDIR="${pkgdir}" XFAIL_TESTS="autocompletion" check

}

package() {
  cd "${srcdir}/build-${MSYSTEM}"
  make DESTDIR="${pkgdir}" install

  #install wintun installer
  install -Dm644 "${srcdir}/build-${MSYSTEM}/openconnect-wintun-installer" "${pkgdir}${MINGW_PREFIX}/bin/openconnect-wintun-installer"

  install -Dm644 "${srcdir}/${_realname}-v${pkgver}/COPYING.LGPL" "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}/LICENSE"
}

generate_wintun_installer() {
  _installer_script="openconnect-wintun-installer"

  case "${WINTUN_ARCH}" in
    amd64) wintundll_sha256=${_wintun_dll_amd64_sha256sum} ;;
    arm64) wintundll_sha256=${_wintun_dll_arm64_sha256sum} ;;
    x86) wintundll_sha256=${_wintun_dll_x86_sha256sum} ;;
    *) msg2 "Unknown WINTUN_ARCH" ; exit 1 ;;
  esac

  declare -A wintun_installer_vars
  wintun_installer_vars["WINTUN_ARCH"]="${WINTUN_ARCH}"
  wintun_installer_vars["_wintun_source"]="${_wintun_source}"
  wintun_installer_vars["_wintun_sha256sum"]="${_wintun_sha256sum}"
  wintun_installer_vars["wintundll_sha256"]="${wintundll_sha256}"
  wintun_installer_vars["wintundll_dest"]="${MINGW_PREFIX}/bin"
  wintun_installer_vars["wintun_license_dest"]="${MINGW_PREFIX}/share/licenses/${_realname}"
  wintun_installer_vars["pkgver"]="${pkgver}"
  wintun_installer_vars["pkgrel"]="${pkgrel}"
  wintun_installer_vars["installer_script"]="${_installer_script}"

  #generate the installer, substituting @vars@ like configure does
  substitute_in_file ${srcdir}/${_installer_script}.in ${srcdir}/build-${MSYSTEM}/${_installer_script} ${srcdir}/tmp_wd.awk wintun_installer_vars
}

# Generate file from file.in, substituting @vars@ like configure does
#
# vars are supplied though an associative array, whose name is passed
# as 4th argument

substitute_in_file() {
  local infile=$1 genfile=$2 awkfile=$3 arrayname=$4 keys val k

  cat > ${awkfile} << _AWKEOF
BEGIN {
_AWKEOF

  eval "keys=(\"\${!$arrayname[@]}\")"

  #echo keys: ${keys[@]}
  for k in "${keys[@]}"; do

    eval "val=\${$arrayname[\"$k\"]}"
    echo "S[\"$k\"]=\"$val\"" >> ${awkfile}
  done;

  cat >> ${awkfile} << _AWKEOF

  for (key in S) S_is_set[key] = 1
  FS = ""

}
{
  line = $ 0
  nfields = split(line, field, "@")
  substed = 0
  len = length(field[1])
  for (i = 2; i < nfields; i++) {
    key = field[i]
    keylen = length(key)
    if (S_is_set[key]) {
      value = S[key]
      line = substr(line, 1, len) "" value "" substr(line, len + keylen + 3)
      len += length(value) + length(field[++i])
      substed = 1
    } else
      len += 1 + keylen
  }

  print line
}
_AWKEOF

  msg2 "Generating $(basename ${genfile})"
  cat ${infile} | awk -f ${awkfile} > ${genfile}

  rm -f ${awkfile}
}
