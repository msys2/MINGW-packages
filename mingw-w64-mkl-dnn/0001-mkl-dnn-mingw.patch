diff --git a/cmake/MKL.cmake b/cmake/MKL.cmake
index 883fb21..69e7b97 100644
--- a/cmake/MKL.cmake
+++ b/cmake/MKL.cmake
@@ -108,13 +108,23 @@ function(detect_mkl LIBNAME)
     string(FIND "${MKLLIBPATH}" ${CMAKE_CURRENT_SOURCE_DIR}/external __idx)
     if(${__idx} EQUAL 0)
         if(WIN32)
-            install(PROGRAMS ${MKLDLL} DESTINATION lib)
+            if(MINGW)
+                # We need to install *.dll into bin/ instead of lib/.
+                install(PROGRAMS ${MKLDLL} DESTINATION bin)
+            else()
+                install(PROGRAMS ${MKLDLL} DESTINATION lib)
+            endif()
         else()
             install(PROGRAMS ${MKLLIB} DESTINATION lib)
         endif()
         if(MKLIOMP5LIB)
             if(WIN32)
-                install(PROGRAMS ${MKLIOMP5DLL} DESTINATION lib)
+                if(MINGW)
+                    # We need to install *.dll into bin/ instead of lib/.
+                    install(PROGRAMS ${MKLIOMP5DLL} DESTINATION bin)
+                else()
+                    install(PROGRAMS ${MKLIOMP5DLL} DESTINATION lib)
+                endif()
             else()
                 install(PROGRAMS ${MKLIOMP5LIB} DESTINATION lib)
             endif()
@@ -181,4 +191,3 @@ else()
         "set of libraries or get a full version from "
         "https://software.intel.com/en-us/intel-mkl")
 endif()
-
diff --git a/cmake/platform.cmake b/cmake/platform.cmake
index ed1dbe1..fa51aa7 100644
--- a/cmake/platform.cmake
+++ b/cmake/platform.cmake
@@ -38,7 +38,7 @@ endif()
 set(CMAKE_CCXX_FLAGS)
 set(DEF_ARCH_OPT_FLAGS)
 
-if(WIN32)
+if(WIN32 AND NOT MINGW)
     set(USERCONFIG_PLATFORM "x64")
     set(CMAKE_CCXX_FLAGS "${CMAKE_CCXX_FLAGS} /MP")
     if(MSVC)
@@ -52,9 +52,7 @@ if(WIN32)
         # disable: loop was not vectorized with "simd"
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Qdiag-disable:15552")
     endif()
-    set(CTESTCONFIG_PATH "$ENV{PATH}")
-    string(REPLACE ";" "\;" CTESTCONFIG_PATH "${CTESTCONFIG_PATH}")
-elseif(UNIX OR APPLE)
+elseif(UNIX OR APPLE OR MINGW)
     set(CMAKE_CCXX_FLAGS "${CMAKE_CCXX_FLAGS} -Wall -Werror -Wno-unknown-pragmas")
     set(CMAKE_CCXX_FLAGS "${CMAKE_CCXX_FLAGS} -fvisibility=internal")
     set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99")
@@ -84,7 +82,12 @@ elseif(UNIX OR APPLE)
     endif()
 endif()
 
-if(UNIX OR APPLE)
+if(WIN32)
+    set(CTESTCONFIG_PATH "$ENV{PATH}")
+    string(REPLACE ";" "\;" CTESTCONFIG_PATH "${CTESTCONFIG_PATH}")
+endif()
+
+if(UNIX OR APPLE OR MINGW)
     if(CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
         # Link Intel libraries statically (except for iomp5)
         set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -liomp5 -static-intel")
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 95fb94a..509c035 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -54,12 +54,25 @@ endif()
 
 add_library(${TARGET_NAME} SHARED ${HEADERS} ${SOURCES})
 #Add mkldnn.dll to execution PATH
-set(CTESTCONFIG_PATH "${CTESTCONFIG_PATH}\;${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_BUILD_TYPE}" PARENT_SCOPE)
+if(NOT(MINGW))
+    set(CTESTCONFIG_PATH "${CTESTCONFIG_PATH}\;${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_BUILD_TYPE}" PARENT_SCOPE)
+else()
+    # CMake with "MSYS Makefiles" generator seems to build libmkldnn.dll in a directory without build type.
+    set(CTESTCONFIG_PATH "${CTESTCONFIG_PATH}\;${CMAKE_CURRENT_BINARY_DIR}" PARENT_SCOPE)
+endif()
 target_link_libraries(${TARGET_NAME} ${${TARGET_NAME}_LINKER_LIBS} ${EXTRA_LIBS})
 set_property(TARGET ${TARGET_NAME} PROPERTY CXX_STANDARD 11)
 set_property(TARGET ${TARGET_NAME} PROPERTY CXX_STANDARD_REQUIRED ON)
 set_property(TARGET ${TARGET_NAME} PROPERTY VERSION "${PROJECT_VERSION}.0")
 set_property(TARGET ${TARGET_NAME} PROPERTY SOVERSION "0")
 
-install(TARGETS ${TARGET_NAME} DESTINATION lib${LIB_SUFFIX})
+if(MINGW)
+    # We need to install *.dll into bin/ and *.a into lib/. 
+    install(TARGETS ${TARGET_NAME}
+        RUNTIME DESTINATION bin
+        ARCHIVE DESTINATION lib${LIB_SUFFIX}
+    )
+else()
+    install(TARGETS ${TARGET_NAME} DESTINATION lib${LIB_SUFFIX})
+endif()
 install(FILES ${HEADERS} DESTINATION include)
diff --git a/src/cpu/jit_generator.hpp b/src/cpu/jit_generator.hpp
index f344ff2..d7cd5c8 100644
--- a/src/cpu/jit_generator.hpp
+++ b/src/cpu/jit_generator.hpp
@@ -41,13 +41,16 @@
 #include "jitprofiling.h"
 #endif
 
-#ifdef _WIN32
+#if defined(_WIN32) && !defined(__GNUC__)
 #   define STRUCT_ALIGN(al, ...) __declspec(align(al)) __VA_ARGS__
-#   define OFFSET_SHADOWSPACE 0x28
 #else
 #   define STRUCT_ALIGN(al, ...) __VA_ARGS__ __attribute__((__aligned__(al)))
 #endif
 
+#if defined(_WIN32)
+#   define OFFSET_SHADOWSPACE 0x28
+#endif
+
 #define DECLARE_CPU_JIT_AUX_FUNCTIONS(jit_name) \
     const char *name() const override { return STRINGIFY(jit_name); } \
     const char *source_file() const override { return __FILE__; \
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index 32cd4bb..d926402 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -23,7 +23,7 @@ if(POLICY CMP0065)
     cmake_policy(SET CMP0065 NEW)
 endif()
 
-if(UNIX OR APPLE)
+if(UNIX OR APPLE OR MINGW)
     # workaround for Intel Compiler 16.0 that doesn't suppress warning on
     # deprecation with "-Wno-deprecated" compiler flag
     if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel" AND
@@ -54,6 +54,9 @@ if(WIN32)
     set_property(TEST api-c PROPERTY ENVIRONMENT "PATH=${CTESTCONFIG_PATH}")
     configure_file(${CMAKE_SOURCE_DIR}/config_template.vcxproj.user
         api-c.vcxproj.user @ONLY)
+endif()
+
+if(WIN32 AND NOT MINGW)
     # c4244: conversion with possible loss of data
     # c4996: unsafe / deprecated functions
     set(SUPPRESS_SOME_WARNINGS "/wd4996 /wd4244")
@@ -61,7 +64,7 @@ if(WIN32)
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${SUPPRESS_SOME_WARNINGS}")
 endif()
 
-if(UNIX OR APPLE)
+if(UNIX OR APPLE OR MINGW)
     set(test_c_symbols "${CMAKE_CURRENT_BINARY_DIR}/test_c_symbols.c")
     add_executable(test_c_symbols-c ${test_c_symbols})
     add_custom_command(
@@ -71,6 +74,11 @@ if(UNIX OR APPLE)
     )
     target_link_libraries(test_c_symbols-c ${LIB_NAME} ${EXTRA_LIBS})
     add_test(test_c_symbols-c test_c_symbols-c)
+    if(MINGW)
+        configure_file(${CMAKE_SOURCE_DIR}/config_template.vcxproj.user
+            test_c_symbols-c.vcxproj.user @ONLY)
+        set_property(TEST test_c_symbols-c PROPERTY ENVIRONMENT "PATH=${CTESTCONFIG_PATH}")
+    endif()
 # elseif(WIN32)
 # No Windows support for: test_c_symbols.c
 endif()
diff --git a/tests/benchdnn/common.cpp b/tests/benchdnn/common.cpp
index bac7744..9b383e6 100644
--- a/tests/benchdnn/common.cpp
+++ b/tests/benchdnn/common.cpp
@@ -278,7 +278,7 @@ bool maybe_skip(const char *skip_impl, const char *impl_str) {
     return false;
 }
 
-#ifdef _WIN32
+#if defined(_WIN32) && !defined(__GNUC__)
 #include <windows.h>
 #define PATH_MAX MAX_PATH
 static char *dirname(char *path) {
diff --git a/tests/benchdnn/common.hpp b/tests/benchdnn/common.hpp
index 28d82dd..4e158d5 100644
--- a/tests/benchdnn/common.hpp
+++ b/tests/benchdnn/common.hpp
@@ -39,7 +39,7 @@
 #define CONCAt2(a,b) a ## b
 #define CONCAT2(a,b) CONCAt2(a,b)
 
-#ifdef _WIN32
+#if defined(_WIN32) && !defined(__GNUC__) 
 #define strncasecmp _strnicmp
 #define strcasecmp _stricmp
 #define __PRETTY_FUNCTION__ __FUNCSIG__
