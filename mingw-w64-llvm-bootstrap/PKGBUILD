# Maintainer: Martell Malone <martellmalone@gmail.com>
# Maintainer: Alexey Pavlov <alexpux@gmail.com>
# Contributor: Ray Donnelly <mingw.android@gmail.com>
# Contributor: Mateusz Miku≈Ça <mati865@gmail.com>
# Contributor: wirx6 <wirx654@gmail.com>
# Contributor: Yuui Tanabe <yuuitanabe@163.com>
# Contributor: Oscar Fuentes <ofv@wanadoo.es>
# Contributor: Adrian Pop <adrian.pop@liu.se>
# Contributor: Raed Rizqie <raed.rizqie@gmail.com>

if [[ $MINGW_PACKAGE_PREFIX == *-clang-* ]]; then
  _clangprefix=1
fi

_realname=llvm
pkgbase=mingw-w64-${_realname}-bootstrap
pkgname=("${MINGW_PACKAGE_PREFIX}-llvm-bootstrap"
         "${MINGW_PACKAGE_PREFIX}-clang-bootstrap"
         "${MINGW_PACKAGE_PREFIX}-compiler-rt-bootstrap"
         "${MINGW_PACKAGE_PREFIX}-lld-bootstrap")
_version=19.1.6
_crtver=12.0.0.r459.g63f3f2846
_gccver=14.2.0
_rc=""
_tag=llvmorg-${_version}${_rc}
pkgver=${_version}${_rc/-/}
pkgrel=1
pkgdesc="C language family frontend for LLVM (static) (mingw-w64)"
arch=('any')
mingw_arch=('mingw64' 'ucrt64' 'clang64')
url="https://llvm.org/"
msys2_references=(
  "cpe: cpe:/a:llvm:llvm"
)
license=("spdx:Apache-2.0 WITH LLVM-exception")
makedepends=("${MINGW_PACKAGE_PREFIX}-clang"
             $( (( _clangprefix )) || echo "${MINGW_PACKAGE_PREFIX}-gcc")
             "${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-lld"
             "${MINGW_PACKAGE_PREFIX}-ninja"
             "${MINGW_PACKAGE_PREFIX}-pkgconf"
             "${MINGW_PACKAGE_PREFIX}-python"
             "${MINGW_PACKAGE_PREFIX}-compiler-rt"
             "${MINGW_PACKAGE_PREFIX}-libunwind"
             "${MINGW_PACKAGE_PREFIX}-libffi"
             "${MINGW_PACKAGE_PREFIX}-libxml2"
             "${MINGW_PACKAGE_PREFIX}-zlib"
             "git")
_url=https://github.com/llvm/llvm-project/releases/download/${_tag}
source=("${_url}/llvm-${pkgver}.src.tar.xz"{,.sig}
        "${_url}/clang-${pkgver}.src.tar.xz"{,.sig}
        "${_url}/clang-tools-extra-${pkgver}.src.tar.xz"{,.sig}
        "${_url}/compiler-rt-${pkgver}.src.tar.xz"{,.sig}
        "${_url}/lld-${pkgver}.src.tar.xz"{,.sig}
        "${_url}/cmake-${pkgver}.src.tar.xz"{,.sig}
        "${_url}/third-party-${pkgver}.src.tar.xz"{,.sig}
        "crt.tar.zst::https://mirror.msys2.org/mingw/${MINGW_ARCH}/${MINGW_PACKAGE_PREFIX}-crt-git-${_crtver}-1-any.pkg.tar.zst"
        "headers.tar.zst::https://mirror.msys2.org/mingw/${MINGW_ARCH}/${MINGW_PACKAGE_PREFIX}-headers-git-${_crtver}-3-any.pkg.tar.zst"
        "pthread.tar.zst::https://mirror.msys2.org/mingw/${MINGW_ARCH}/${MINGW_PACKAGE_PREFIX}-winpthreads-git-${_crtver}-1-any.pkg.tar.zst"
        $( (( _clangprefix )) || echo "gcc.tar.zst::https://mirror.msys2.org/mingw/${MINGW_ARCH}/${MINGW_PACKAGE_PREFIX}-gcc-${_gccver}-2-any.pkg.tar.zst")
        # 0001-0099 -> llvm
        "0001-Fix-GetHostTriple-for-mingw-w64-in-msys.patch"
        "0002-Fix-Findzstd-on-MINGW.patch"
        "0003-add-pthread-as-system-lib-for-mingw.patch"
        "0004-enable-emutls-for-mingw.patch"
        # 0101-0199 -> clang
        "0101-link-pthread-with-mingw.patch"
        "0102-Rename-flang-new-flang-experimental-exec-to-flang.patch"
        "0103-fix-linking-with-static-clang.patch"
        # 0201-0299 -> rt
        "0201-use-proper-libs-when-not-using-builtin-crt.patch"
        # 0301-0399 -> lld
        "0303-ignore-new-bfd-options.patch"
        )
sha256sums=('ad1a3b125ff014ded290094088de40efb9193ce81a24278184230b7d401f8a3e'
            'SKIP'
            '6358cbb3e14687ca2f3465c61cffc65589b448aaa912ec2c163ef9fc046e8a89'
            'SKIP'
            '417a7d0048d8eb62dbaa8461f1fd474eb6493b09e14d050b39cc1f051e8b71d1'
            'SKIP'
            '0d4f312e1419152282c267e6b6a1fa5914a7a0c753a5e926bee1c8c28e614ae4'
            'SKIP'
            '44fa50556cefbe3796e8256536267ee2f34ced5f3c1492473bccd75449cadbe6'
            'SKIP'
            '9c7ec82d9a240dc2287b8de89d6881bb64ceea0dcd6ce133c34ef65bda22d99e'
            'SKIP'
            '0e8048333bab2ba3607910e5d074259f08dccf00615778d03a2a55416718eb45'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            $( (( _clangprefix )) || echo 'SKIP')
            'eb03df53671df6627768141b3aaa76abe176a14e5e47911c97bec544387c4aff'
            '6707901cc632e3404d94590f0cb9bf2bed17e54d8c0f9f6115fe756d3e169699'
            '790eb0fccb4ef29c3795bceb8a62c8f4ecd0bdd6c49b2812352b04cfbc552342'
            '76d2a88733cebb1f01b766ff2ab91a9e095bae1d2e4cc18c1ffcf21fd095efc4'
            '715cb8862753854b2d9256e0b70003e2d1f57083d83eaeaf5a095fc72b8a4e26'
            '2770cadf8ccf6b31aece6aee8f76dceb71e6e9d01fdf3be74c3743480ce34899'
            'a6366771300bbd4d21427ff143c31e74a0e67a820331edf2bb0fe9cbc9108660'
            'SKIP'
            'fd0253879cc5e31857f57307e6105e56493358e35d7c4540e0b476be607ab94e')
validpgpkeys=('B6C8F98282B944E3B0D5C2530FC3042E345AD05D'  # Hans Wennborg, Google.
              '474E22316ABF4785A88C6E8EA2C794A986419D8A'  # Tom Stellard
              'D574BD5D1D0E98895E3BF90044F2485E45D59042') # Tobias Hieta
noextract=(clang-${pkgver}.src.tar.xz
           crt.tar.zst
           headers.tar.zst
           pthread.tar.zst
           gcc.tar.zst)

apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying ${_patch}"
    patch -Nbp1 -i "${srcdir}/${_patch}"
  done
}

prepare() {
  plain "Extracting clang-${pkgver}.src.tar.xz due to symlink(s) without pre-existing target(s)"
  tar -xJf "${srcdir}"/clang-${pkgver}.src.tar.xz -C "${srcdir}" || true

  # Rename Directories
  for pkg in llvm clang clang-tools-extra compiler-rt lld cmake third-party; do
    mv ${pkg}-$pkgver.src ${pkg}
  done

  # Patch llvm
  cd "${srcdir}"/llvm

  apply_patch_with_msg \
    "0001-Fix-GetHostTriple-for-mingw-w64-in-msys.patch" \
    "0002-Fix-Findzstd-on-MINGW.patch"

  if (( ! _clangprefix )); then
    apply_patch_with_msg \
      "0003-add-pthread-as-system-lib-for-mingw.patch" \
      "0004-enable-emutls-for-mingw.patch"
  fi

  # Patch clang
  cd "${srcdir}"/clang

  if (( ! _clangprefix )); then
    apply_patch_with_msg \
      "0101-link-pthread-with-mingw.patch"
  fi
  # https://reviews.llvm.org/D143592
  apply_patch_with_msg \
    "0102-Rename-flang-new-flang-experimental-exec-to-flang.patch"

  apply_patch_with_msg \
    "0103-fix-linking-with-static-clang.patch"

  # Patch compiler-rt
  cd "${srcdir}"/compiler-rt

  apply_patch_with_msg \
    "0201-use-proper-libs-when-not-using-builtin-crt.patch"

  # Patch lld
  cd "${srcdir}"/lld

  apply_patch_with_msg \
    "0303-ignore-new-bfd-options.patch"

  # Extract crt and header files
  mkdir -p ${srcdir}/crt_files && cd ${srcdir}/crt_files
  tar -xf ../crt.tar.zst
  tar -xf ../headers.tar.zst
  tar -xf ../pthread.tar.zst
  rm -f ${MINGW_ARCH}/lib/*.dll.a

  if (( ! _clangprefix )); then
    mkdir -p ${srcdir}/gcc_files && cd ${srcdir}/gcc_files
    tar -xf ../gcc.tar.zst
    rm -f ${MINGW_ARCH}/lib/*.dll.a
  fi
}

build() {
  local -a platform_config
  local -a common_cmake_args

  # Include location of libffi headers in CPPFLAGS
  FFI_INCLUDE_DIR="$(pkg-config --cflags libffi)"
  FFI_INCLUDE_DIR=$(echo $FFI_INCLUDE_DIR | sed 's|-I||g')

  if check_option "debug" "y"; then
    common_cmake_args+=(-DCMAKE_BUILD_TYPE=Debug
                        -DLLVM_ENABLE_ASSERTIONS=ON)
    VERBOSE="VERBOSE=1"
  else
    common_cmake_args+=(-DCMAKE_BUILD_TYPE=Release
                        -DLLVM_ENABLE_ASSERTIONS=OFF)
  fi

  common_cmake_args+=(
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX}/bootstrap
    -DCMAKE_SYSTEM_IGNORE_PATH=/usr/lib
    -DLLVM_HOST_TRIPLE="${CARCH}-w64-windows-gnu"
    -DLLVM_BUILD_STATIC=ON
    -DLLVM_BUILD_UTILS=OFF
    -DLLVM_BUILD_LLVM_DYLIB=OFF
    -DLLVM_LINK_LLVM_DYLIB=OFF
    -DLLVM_ENABLE_FFI=ON
    -DLLVM_ENABLE_PIC=OFF
    -DLLVM_ENABLE_THREADS=ON
    -DLLVM_INCLUDE_BENCHMARKS=OFF
    -DLLVM_INCLUDE_EXAMPLES=OFF
    -DLLVM_INCLUDE_TESTS=OFF
    -DPython3_EXECUTABLE=${MINGW_PREFIX}/bin/python.exe
    -DFFI_INCLUDE_DIR="${FFI_INCLUDE_DIR}")

  if (( _clangprefix )); then
    platform_config+=(
      -DLLVM_INSTALL_BINUTILS_SYMLINKS=ON
      -DCLANG_LINKS_TO_CREATE="clang++;as;c++;cc"
      -DCLANG_DEFAULT_CXX_STDLIB=libc++
      -DCLANG_DEFAULT_RTLIB=compiler-rt
      -DCLANG_DEFAULT_UNWINDLIB=libunwind
      -DCOMPILER_RT_CXX_LIBRARY=libc++
      -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON
    )
  else
    platform_config+=(
      -DCLANG_DEFAULT_CXX_STDLIB=libstdc++
      -DCLANG_DEFAULT_RTLIB=compiler-rt
      -DCLANG_DEFAULT_UNWINDLIB=libgcc
      -DCOMPILER_RT_CXX_LIBRARY=libstdc++
      -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF
    )
  fi

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  cmake -Wno-dev \
    -GNinja \
    -DCMAKE_C_COMPILER=clang \
    -DCMAKE_CXX_COMPILER=clang++ \
    -DCLANG_DEFAULT_LINKER=lld \
    -DCOMPILER_RT_BUILD_SANITIZERS=OFF \
    -DLLVM_ENABLE_LIBCXX=ON \
    -DLLVM_ENABLE_LLD=ON \
    -DLLVM_ENABLE_PROJECTS="clang;compiler-rt;lld" \
    -DLLVM_ENABLE_RTTI=ON \
    -DLLVM_ENABLE_ZSTD=OFF \
    -DLLVM_INSTALL_UTILS=OFF \
    -DLLVM_STATIC_LINK_CXX_STDLIB=ON \
    -DLLVM_TARGETS_TO_BUILD="all" \
    -DLIBCLANG_BUILD_STATIC=ON \
    -DLLD_DEFAULT_LD_LLD_IS_MINGW=ON \
    "${common_cmake_args[@]}" \
    "${platform_config[@]}" \
    -S llvm \
    -B build-${MSYSTEM}

  cmake --build build-${MSYSTEM}
}

package_clang-bootstrap() {
  pkgdesc="C language family frontend for LLVM (static) (mingw-w64)"
  url="https://clang.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-llvm-bootstrap=${pkgver}"
           "${MINGW_PACKAGE_PREFIX}-compiler-rt-bootstrap=${pkgver}"
           "${MINGW_PACKAGE_PREFIX}-lld-bootstrap=${pkgver}")

  # Disable automatic installation of components that go into subpackages
  # -i.orig to check what has been removed in-case it starts dropping more than it should
  sed -i.orig '/\(extra\|scan-build\|scan-build-py\|scan-view\)\/cmake_install.cmake/d' build-${MSYSTEM}/tools/clang/tools/cmake_install.cmake
  DESTDIR="${pkgdir}" cmake --install "${srcdir}"/build-${MSYSTEM}/tools/clang

  install -Dm644 "${srcdir}"/clang/LICENSE.TXT "${pkgdir}"${MINGW_PREFIX}/bootstrap/share/licenses/clang/LICENSE
}

package_compiler-rt-bootstrap() {
  pkgdesc="Runtime libraries for Clang and LLVM (static) (mingw-w64)"
  url="https://compiler-rt.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-libc++-bootstrap=${pkgver}")

  DESTDIR="${pkgdir}" cmake --install "${srcdir}"/build-${MSYSTEM}/projects/compiler-rt

  # Install crt and header files
  cp -rf ${srcdir}/crt_files/${MINGW_ARCH}/include ${pkgdir}${MINGW_PREFIX}/bootstrap
  cp -rf ${srcdir}/crt_files/${MINGW_ARCH}/lib ${pkgdir}${MINGW_PREFIX}/bootstrap
  cp -rf ${srcdir}/crt_files/${MINGW_ARCH}/share ${pkgdir}${MINGW_PREFIX}/bootstrap

  if (( ! _clangprefix )); then
    # Install gcc libs and headers
    cp -rf ${srcdir}/gcc_files/${MINGW_ARCH}/include ${pkgdir}${MINGW_PREFIX}/bootstrap
    cp -rf ${srcdir}/gcc_files/${MINGW_ARCH}/lib ${pkgdir}${MINGW_PREFIX}/bootstrap

    cp -f ${pkgdir}${MINGW_PREFIX}/bootstrap/lib/gcc/x86_64-w64-mingw32/${_gccver}/libgcc.a ${pkgdir}${MINGW_PREFIX}/bootstrap/lib
    cp -f ${pkgdir}${MINGW_PREFIX}/bootstrap/lib/gcc/x86_64-w64-mingw32/${_gccver}/libgcc_eh.a ${pkgdir}${MINGW_PREFIX}/bootstrap/lib
  fi

  install -Dm644 "${srcdir}"/compiler-rt/LICENSE.TXT "${pkgdir}"${MINGW_PREFIX}/bootstrap/share/licenses/compiler-rt/LICENSE
}

package_lld-bootstrap() {
  pkgdesc="Linker tools for LLVM (static) (mingw-w64)"
  url="https://lld.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-llvm-bootstrap=${pkgver}")

  DESTDIR="${pkgdir}" cmake --install "${srcdir}"/build-${MSYSTEM}/tools/lld
  if (( _clangprefix )); then
    install -Dm755 "${pkgdir}"${MINGW_PREFIX}/bootstrap/bin/lld.exe "${pkgdir}"${MINGW_PREFIX}/bootstrap/bin/ld.exe
  fi

  install -Dm644 "${srcdir}"/lld/LICENSE.TXT "${pkgdir}"${MINGW_PREFIX}/bootstrap/share/licenses/lld/LICENSE
}

package_llvm-bootstrap() {
  pkgdesc="Low Level Virtual Machine (static) (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-libc++-bootstrap=${pkgver}")

  # Disable automatic installation of components that go into subpackages
  # -i.orig to check what has been removed in-case it starts dropping more than it should
  sed -i.orig '/\(clang\|lld\)\/cmake_install.cmake/d' build-${MSYSTEM}/tools/cmake_install.cmake
  sed -i.orig '/compiler-rt\/cmake_install.cmake/d' build-${MSYSTEM}/projects/cmake_install.cmake
  DESTDIR="${pkgdir}" cmake --install build-${MSYSTEM}

  install -Dm644 "${srcdir}"/llvm/LICENSE.TXT "${pkgdir}"${MINGW_PREFIX}/bootstrap/share/licenses/llvm/LICENSE

  # Install CMake stuff
  install -d "${pkgdir}"${MINGW_PREFIX}/bootstrap/share/llvm/cmake/{modules,platforms}
  install -Dm644 "${srcdir}"/llvm/cmake/modules/*.cmake "${pkgdir}"${MINGW_PREFIX}/bootstrap/share/llvm/cmake/modules/
  install -Dm644 "${srcdir}"/llvm/cmake/platforms/*.cmake "${pkgdir}"${MINGW_PREFIX}/bootstrap/share/llvm/cmake/platforms/
}

# template start; name=mingw-w64-splitpkg-wrappers; version=1.0;
# vim: set ft=bash :

# generate wrappers
for _name in "${pkgname[@]}"; do
  _short="package_${_name#${MINGW_PACKAGE_PREFIX}-}"
  _func="$(declare -f "${_short}")"
  eval "${_func/#${_short}/package_${_name}}"
done
# template end;
