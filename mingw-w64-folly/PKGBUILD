# Maintainer: Alexey Pavlov <alexpux@gmail.com>

_realname=folly
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}")
pkgver=2025.10.06.00
pkgrel=1
pkgdesc="An open-source C++ library developed and used at Facebook (mingw-w64)"
arch=('any')
_use_nglog=yes
mingw_arch=('mingw64' 'ucrt64' 'clang64')
url='https://github.com/facebook/folly'
license=('spdx:Apache-2.0')
depends=("${MINGW_PACKAGE_PREFIX}-boost"
         "${MINGW_PACKAGE_PREFIX}-bzip2"
         "${MINGW_PACKAGE_PREFIX}-double-conversion"
         "${MINGW_PACKAGE_PREFIX}-fmt"
         $([[ "$_use_nglog" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-ng-log" || echo "${MINGW_PACKAGE_PREFIX}-glog")
         #"${MINGW_PACKAGE_PREFIX}-jemalloc"
         #"${MINGW_PACKAGE_PREFIX}-libbacktrace" # Libraries seems not provide needed functions for symbolizer.
         #"${MINGW_PACKAGE_PREFIX}-libdwarf"
         "${MINGW_PACKAGE_PREFIX}-libunwind"
         "${MINGW_PACKAGE_PREFIX}-libevent"
         "${MINGW_PACKAGE_PREFIX}-libsodium"
         "${MINGW_PACKAGE_PREFIX}-lz4"
         "${MINGW_PACKAGE_PREFIX}-openssl"
         "${MINGW_PACKAGE_PREFIX}-snappy"
         "${MINGW_PACKAGE_PREFIX}-xz"
         "${MINGW_PACKAGE_PREFIX}-zlib"
         "${MINGW_PACKAGE_PREFIX}-zstd")
makedepends=("${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-ninja"
             "${MINGW_PACKAGE_PREFIX}-fast_float"
             $([[ ${MINGW_PACKAGE_PREFIX} == *-clang-* ]] && echo "${MINGW_PACKAGE_PREFIX}-winpthreads-stub") # GCC toolchain implicitly include <pthread.h> and its defines, so it not possible to build without pthread
             )
source=("https://github.com/facebook/folly/archive/v${pkgver}/${_realname}-${pkgver}.tar.gz"
        folly.patch
        folly-nglog.patch)
sha256sums=('9ed3d1752c44ac9eb6dfd1ae88d7bc0bf4690152b8966dd0e12b1c0c3d3ca1f2'
            '1d9dae5c19f39de507654ec16d2eaedf572852c95825b734542154a1206a2ce7'
            '9d94543f1e7c12136a5370b448dee7861452caf24f8a68b71d530390b21724ac')
#options=(debug !strip)

prepare() {
  cd ${_realname}-${pkgver}
  patch -p1 -i ${srcdir}/folly.patch

  if [[ "${_use_nglog}" == "yes" ]]; then
    patch -p1 -i ${srcdir}/folly-nglog.patch
  fi

  # Use packages config scripts to properly find targets
  rm -f build/fbcode_builder/CMake/FindDoubleConversion.cmake
  rm -f build/fbcode_builder/CMake/FindGflags.cmake
  rm -f build/fbcode_builder/CMake/FindGlog.cmake
  rm -f build/fbcode_builder/CMake/FindLibevent.cmake
  rm -f CMake/FindFastFloat.cmake
  rm -f CMake/FindFmt.cmake
  rm -f CMake/FindLZ4.cmake
  rm -f CMake/FindSnappy.cmake
}

build() {
  mkdir -p "${srcdir}/build-${MSYSTEM}" && cd "${srcdir}/build-${MSYSTEM}"

  declare -a extra_config
  if check_option "debug" "n"; then
    extra_config+=("-DCMAKE_BUILD_TYPE=Release")
  else
    extra_config+=("-DCMAKE_BUILD_TYPE=Debug")
  fi

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
    "${MINGW_PREFIX}"/bin/cmake.exe \
      -GNinja \
      -DCMAKE_INSTALL_PREFIX="${MINGW_PREFIX}" \
      -DPYTHON_EXTENSIONS=OFF \
      -DBUILD_WITH_JEMALLOC=OFF \
      -DUSE_STATIC_DEPS_ON_UNIX=ON \
      -DCMAKE_POLICY_DEFAULT_CMP0167=NEW \
      -DBUILD_TESTS=OFF \
      -DBUILD_SLOW_TESTS=OFF \
      "${extra_config[@]}" \
      ../${_realname}-${pkgver}

  "${MINGW_PREFIX}"/bin/cmake.exe --build .
}

package() {
  cd "${srcdir}/build-${MSYSTEM}"

  DESTDIR="${pkgdir}" "${MINGW_PREFIX}"/bin/cmake.exe --install .

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_realname}
  install -Dm644 "${srcdir}"/${_realname}-${pkgver}/LICENSE* -t "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}"
  sed -s "s|$(cygpath -m ${MINGW_PREFIX})|${MINGW_PREFIX}|g" -i "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig/lib${_realname}.pc"
}
