diff -Naur folly-main-orig/CMake/FindLibJemalloc.cmake folly-main/CMake/FindLibJemalloc.cmake
--- folly-main-orig/CMake/FindLibJemalloc.cmake	1970-01-01 03:00:00.000000000 +0300
+++ folly-main/CMake/FindLibJemalloc.cmake	2025-05-21 13:01:50.340883400 +0300
@@ -0,0 +1,29 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+find_path(LIBJEMALLOC_INCLUDE_DIR NAMES jemalloc.h PATH_SUFFIXES jemalloc)
+mark_as_advanced(LIBJEMALLOC_INCLUDE_DIR)
+
+find_library(LIBJEMALLOC_LIBRARY NAMES jemalloc)
+mark_as_advanced(LIBJEMALLOC_LIBRARY)
+
+include(FindPackageHandleStandardArgs)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(
+  LIBJEMALLOC
+  REQUIRED_VARS LIBJEMALLOC_LIBRARY LIBJEMALLOC_INCLUDE_DIR)
+
+if(LIBJEMALLOC_FOUND)
+  set(LIBJEMALLOC_LIBRARIES ${LIBJEMALLOC_LIBRARY})
+  set(LIBJEMALLOC_INCLUDE_DIRS ${LIBJEMALLOC_INCLUDE_DIR})
+endif()
diff -Naur folly-main-orig/CMake/FollyConfigChecks.cmake folly-main/CMake/FollyConfigChecks.cmake
--- folly-main-orig/CMake/FollyConfigChecks.cmake	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/CMake/FollyConfigChecks.cmake	2025-05-21 12:18:34.623875900 +0300
@@ -24,12 +24,6 @@
   list(APPEND FOLLY_CXX_FLAGS -Wno-psabi)
 endif()
 
-if (CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
-  CHECK_INCLUDE_FILE_CXX(malloc_np.h FOLLY_USE_JEMALLOC)
-else()
-  CHECK_INCLUDE_FILE_CXX(jemalloc/jemalloc.h FOLLY_USE_JEMALLOC)
-endif()
-
 if(NOT CMAKE_SYSTEM_NAME STREQUAL "Windows")
   # clang only rejects unknown warning flags if -Werror=unknown-warning-option
   # is also specified.
diff -Naur folly-main-orig/CMake/folly-config.cmake.in folly-main/CMake/folly-config.cmake.in
--- folly-main-orig/CMake/folly-config.cmake.in	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/CMake/folly-config.cmake.in	2025-05-20 21:57:30.035632300 +0300
@@ -29,10 +29,21 @@
 set(FOLLY_LIBRARIES Folly::folly)
 
 # Find folly's dependencies
-find_dependency(fmt)
+find_dependency(fmt CONFIG)
+find_dependency(double-conversion CONFIG)
+find_dependency(FastFloat CONFIG)
+set(GFLAGS_USE_TARGET_NAMESPACE ON)
+find_dependency(gflags CONFIG)
+find_dependency(glog CONFIG)
+find_dependency(Libevent CONFIG)
+find_dependency(ZLIB)
+find_dependency(lz4 CONFIG)
+find_dependency(zstd CONFIG)
+find_dependency(Snappy CONFIG)
+find_dependency(sodium CONFIG)
 
 set(Boost_USE_STATIC_LIBS "@FOLLY_BOOST_LINK_STATIC@")
-find_dependency(Boost 1.51.0 MODULE
+find_dependency(Boost
   COMPONENTS
     context
     filesystem
diff -Naur folly-main-orig/CMake/folly-deps.cmake folly-main/CMake/folly-deps.cmake
--- folly-main-orig/CMake/folly-deps.cmake	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/CMake/folly-deps.cmake	2025-05-21 15:56:39.093604400 +0300
@@ -25,7 +25,7 @@
 )
 if("${BOOST_LINK_STATIC}" STREQUAL "auto")
   # Default to linking boost statically on Windows with MSVC
-  if(MSVC)
+  if(WIN32)
     set(FOLLY_BOOST_LINK_STATIC ON)
   else()
     set(FOLLY_BOOST_LINK_STATIC OFF)
@@ -35,7 +35,7 @@
 endif()
 set(Boost_USE_STATIC_LIBS "${FOLLY_BOOST_LINK_STATIC}")
 
-find_package(Boost 1.51.0 MODULE
+find_package(Boost
   COMPONENTS
     context
     filesystem
@@ -45,17 +45,35 @@
     thread
   REQUIRED
 )
+set(Boost_LIBRARIES Boost::boost Boost::context Boost::filesystem Boost::program_options Boost::regex Boost::system Boost::thread)
 list(APPEND FOLLY_LINK_LIBRARIES ${Boost_LIBRARIES})
 list(APPEND FOLLY_INCLUDE_DIRECTORIES ${Boost_INCLUDE_DIRS})
 
-find_package(DoubleConversion MODULE REQUIRED)
+option(BUILD_WITH_JEMALLOC "Add support using jemalloc" ON)
+if (BUILD_WITH_JEMALLOC)
+  if (CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
+    CHECK_INCLUDE_FILE_CXX(malloc_np.h FOLLY_USE_JEMALLOC)
+  else()
+    find_package(LibJemalloc MODULE)
+    set(FOLLY_USE_JEMALLOC ${LIBJEMALLOC_FOUND})
+    if(FOLLY_USE_JEMALLOC)
+      list(APPEND FOLLY_LINK_LIBRARIES ${LIBJEMALLOC_LIBRARY})
+      list(APPEND FOLLY_INCLUDE_DIRECTORIES ${LIBJEMALLOC_INCLUDE_DIR})
+    endif()
+  endif()
+endif()
+
+find_package(double-conversion CONFIG REQUIRED)
+set(DOUBLE_CONVERSION_LIBRARY double-conversion::double-conversion)
 list(APPEND FOLLY_LINK_LIBRARIES ${DOUBLE_CONVERSION_LIBRARY})
 list(APPEND FOLLY_INCLUDE_DIRECTORIES ${DOUBLE_CONVERSION_INCLUDE_DIR})
 
-find_package(FastFloat MODULE REQUIRED)
-list(APPEND FOLLY_INCLUDE_DIRECTORIES ${FASTFLOAT_INCLUDE_DIR})
+find_package(FastFloat CONFIG REQUIRED)
+list(APPEND FOLLY_LINK_LIBRARIES FastFloat::fast_float)
 
-find_package(Gflags MODULE)
+set(GFLAGS_USE_TARGET_NAMESPACE ON)
+find_package(LIBGFLAGS NAMES gflags REQUIRED)
+set(LIBGFLAGS_LIBRARY gflags::gflags)
 set(FOLLY_HAVE_LIBGFLAGS ${LIBGFLAGS_FOUND})
 if(LIBGFLAGS_FOUND)
   list(APPEND FOLLY_LINK_LIBRARIES ${LIBGFLAGS_LIBRARY})
@@ -64,16 +82,22 @@
   set(FOLLY_LIBGFLAGS_INCLUDE ${LIBGFLAGS_INCLUDE_DIR})
 endif()
 
-find_package(Glog MODULE)
+find_package(GLOG NAMES glog REQUIRED)
+set(GLOG_LIBRARY glog::glog)
 set(FOLLY_HAVE_LIBGLOG ${GLOG_FOUND})
 list(APPEND FOLLY_LINK_LIBRARIES ${GLOG_LIBRARY})
 list(APPEND FOLLY_INCLUDE_DIRECTORIES ${GLOG_INCLUDE_DIR})
 
-find_package(LibEvent MODULE REQUIRED)
+find_package(LIBEVENT NAMES Libevent REQUIRED)
+set(LIBEVENT_LIB libevent::core libevent::extra)
+if(NOT WIN32)
+  list(APPEND LIBEVENT_LIB libevent::pthreads)
+endif()
 list(APPEND FOLLY_LINK_LIBRARIES ${LIBEVENT_LIB})
 list(APPEND FOLLY_INCLUDE_DIRECTORIES ${LIBEVENT_INCLUDE_DIR})
 
 find_package(ZLIB MODULE)
+set(ZLIB_LIBRARIES ZLIB::ZLIB)
 set(FOLLY_HAVE_LIBZ ${ZLIB_FOUND})
 if (ZLIB_FOUND)
   list(APPEND FOLLY_INCLUDE_DIRECTORIES ${ZLIB_INCLUDE_DIRS})
@@ -113,7 +137,8 @@
   list(APPEND FOLLY_LINK_LIBRARIES ${LZ4_LIBRARY})
 endif()
 
-find_package(Zstd MODULE)
+find_package(ZSTD NAMES zstd)
+set(ZSTD_LIBRARY zstd::libzstd)
 set(FOLLY_HAVE_LIBZSTD ${ZSTD_FOUND})
 if(ZSTD_FOUND)
   list(APPEND FOLLY_INCLUDE_DIRECTORIES ${ZSTD_INCLUDE_DIR})
@@ -174,7 +199,12 @@
 CHECK_INCLUDE_FILE_CXX(elf.h FOLLY_HAVE_ELF)
 find_package(Backtrace)
 
-set(FOLLY_HAVE_BACKTRACE ${Backtrace_FOUND})
+CHECK_INCLUDE_FILE_CXX(execinfo.h FOLLY_HAVE_EXECINFO)
+if(FOLLY_HAVE_EXECINFO)
+  set(FOLLY_HAVE_BACKTRACE ${Backtrace_FOUND})
+else()
+  set(FOLLY_HAVE_BACKTRACE OFF)
+endif()
 set(FOLLY_HAVE_DWARF ${LIBDWARF_FOUND})
 if (NOT WIN32 AND NOT APPLE)
   set(FOLLY_USE_SYMBOLIZER ON)
diff -Naur folly-main-orig/CMakeLists.txt folly-main/CMakeLists.txt
--- folly-main-orig/CMakeLists.txt	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/CMakeLists.txt	2025-05-21 23:56:20.741478900 +0300
@@ -134,6 +134,9 @@
 
 include(folly-deps) # Find the required packages
 include(FollyConfigChecks)
+if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU" AND MINGW)
+  set(FOLLY_HAVE_WEAK_SYMBOLS OFF)
+endif()
 configure_file(
   ${CMAKE_CURRENT_SOURCE_DIR}/CMake/folly-config.h.cmake
   ${CMAKE_CURRENT_BINARY_DIR}/folly/folly-config.h
diff -Naur folly-main-orig/build/fbcode_builder/CMake/FBBuildOptions.cmake folly-main/build/fbcode_builder/CMake/FBBuildOptions.cmake
--- folly-main-orig/build/fbcode_builder/CMake/FBBuildOptions.cmake	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/build/fbcode_builder/CMake/FBBuildOptions.cmake	2025-05-21 23:53:42.017222900 +0300
@@ -9,7 +9,7 @@
   # is generally discouraged.
   mark_as_advanced(USE_STATIC_DEPS_ON_UNIX)
 
-  if(UNIX AND USE_STATIC_DEPS_ON_UNIX)
+  if((UNIX OR MINGW) AND USE_STATIC_DEPS_ON_UNIX)
     SET(CMAKE_FIND_LIBRARY_SUFFIXES ".a" PARENT_SCOPE)
   endif()
 endfunction()
diff -Naur folly-main-orig/folly/CPortability.h folly-main/folly/CPortability.h
--- folly-main-orig/folly/CPortability.h	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/CPortability.h	2025-05-21 23:11:31.353889900 +0300
@@ -243,7 +243,7 @@
 #endif
 
 #if defined(__has_attribute)
-#if __has_attribute(weak)
+#if __has_attribute(weak) && !defined(__MINGW32__)
 #define FOLLY_ATTR_WEAK_SYMBOLS_COMPILE_TIME __attribute__((__weak__))
 #else
 #define FOLLY_ATTR_WEAK_SYMBOLS_COMPILE_TIME
diff -Naur folly-main-orig/folly/FileUtil.cpp folly-main/folly/FileUtil.cpp
--- folly-main-orig/folly/FileUtil.cpp	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/FileUtil.cpp	2025-05-20 22:17:26.205685300 +0300
@@ -95,7 +95,7 @@
 int fdatasyncNoInt(int fd) {
 #if defined(__APPLE__)
   return int(wrapNoInt(fcntl, fd, F_FULLFSYNC));
-#elif defined(__FreeBSD__) || defined(_MSC_VER)
+#elif defined(__FreeBSD__) || defined(_WIN32)
   return int(wrapNoInt(fsync, fd));
 #else
   return int(wrapNoInt(fdatasync, fd));
diff -Naur folly-main-orig/folly/String.cpp folly-main/folly/String.cpp
--- folly-main-orig/folly/String.cpp	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/String.cpp	2025-05-20 23:39:22.580514500 +0300
@@ -504,7 +504,7 @@
 
   // https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man3/strerror_r.3.html
   // http://www.kernel.org/doc/man-pages/online/pages/man3/strerror.3.html
-#if defined(_WIN32) && (defined(__MINGW32__) || defined(_MSC_VER))
+#if defined(_WIN32)
   // mingw64 has no strerror_r, but Windows has strerror_s, which C11 added
   // as well. So maybe we should use this across all platforms (together
   // with strerrorlen_s). Note strerror_r and _s have swapped args.
diff -Naur folly-main-orig/folly/concurrency/CacheLocality.cpp folly-main/folly/concurrency/CacheLocality.cpp
--- folly-main-orig/folly/concurrency/CacheLocality.cpp	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/concurrency/CacheLocality.cpp	2025-05-20 22:16:01.440046300 +0300
@@ -16,7 +16,7 @@
 
 #include <folly/concurrency/CacheLocality.h>
 
-#ifndef _MSC_VER
+#ifndef _WIN32
 #define _GNU_SOURCE 1 // for RTLD_NOLOAD
 #include <dlfcn.h>
 #endif
diff -Naur folly-main-orig/folly/detail/IPAddressSource.h folly-main/folly/detail/IPAddressSource.h
--- folly-main-orig/folly/detail/IPAddressSource.h	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/detail/IPAddressSource.h	2025-05-20 22:17:04.261353400 +0300
@@ -243,7 +243,7 @@
 }
 
 inline size_t fastIpv6ToBufferUnsafe(const in6_addr& in6Addr, char* str) {
-#ifdef _MSC_VER
+#ifdef _WIN32
   const uint16_t* bytes = reinterpret_cast<const uint16_t*>(&in6Addr.u.Word);
 #else
   const uint16_t* bytes = reinterpret_cast<const uint16_t*>(&in6Addr.s6_addr16);
diff -Naur folly-main-orig/folly/external/farmhash/farmhash.cpp folly-main/folly/external/farmhash/farmhash.cpp
--- folly-main-orig/folly/external/farmhash/farmhash.cpp	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/external/farmhash/farmhash.cpp	2025-05-20 22:24:30.302119200 +0300
@@ -126,7 +126,7 @@
 
 #if defined(FARMHASH_UNKNOWN_ENDIAN) || !defined(bswap_64)
 
-#ifdef _MSC_VER
+#ifdef _WIN32
 
 #undef bswap_32
 #undef bswap_64
diff -Naur folly-main-orig/folly/lang/Exception.cpp folly-main/folly/lang/Exception.cpp
--- folly-main-orig/folly/lang/Exception.cpp	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/lang/Exception.cpp	2025-05-20 22:31:12.601395600 +0300
@@ -282,7 +282,7 @@
 
 #endif // defined(__FreeBSD__)
 
-#if defined(_WIN32)
+#if defined(_MSC_VER)
 
 #if defined(__clang__)
 struct _s_ThrowInfo; // compiler intrinsic in msvc
@@ -299,7 +299,7 @@
 void* __GetExceptionInfo(_E); // builtin
 #endif
 
-#endif // defined(_WIN32)
+#endif // defined(_MSC_VER)
 
 //  implementations ---
 
@@ -516,7 +516,7 @@
 
 #endif // defined(__FreeBSD__)
 
-#if defined(_WIN32)
+#if defined(_MSC_VER)
 
 template <typename T>
 static T* win32_decode_pointer(T* ptr) {
@@ -630,7 +630,7 @@
   return nullptr;
 }
 
-#endif // defined(_WIN32)
+#endif // defined(_MSC_VER)
 
 } // namespace detail
 
diff -Naur folly-main-orig/folly/logging/example/CMakeLists.txt folly-main/folly/logging/example/CMakeLists.txt
--- folly-main-orig/folly/logging/example/CMakeLists.txt	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/logging/example/CMakeLists.txt	2025-05-20 23:30:30.455738700 +0300
@@ -13,7 +13,7 @@
 # limitations under the License.
 
 add_executable(logging_example main.cpp)
-target_link_libraries(logging_example logging_example_lib folly)
+target_link_libraries(logging_example logging_example_lib folly ws2_32)
 
 add_library(logging_example_lib lib.cpp)
 target_link_libraries(logging_example_lib folly)
diff -Naur folly-main-orig/folly/memory/Malloc.h folly-main/folly/memory/Malloc.h
--- folly-main-orig/folly/memory/Malloc.h	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/memory/Malloc.h	2025-05-21 22:35:25.907468900 +0300
@@ -27,7 +27,6 @@
 
 #include <folly/Portability.h>
 #include <folly/lang/Exception.h>
-#include <folly/portability/Malloc.h>
 
 /**
  * Define various MALLOCX_* macros normally provided by jemalloc.  We define
diff -Naur folly-main-orig/folly/net/NetOps.h folly-main/folly/net/NetOps.h
--- folly-main-orig/folly/net/NetOps.h	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/net/NetOps.h	2025-05-21 12:26:34.799595000 +0300
@@ -17,6 +17,7 @@
 #pragma once
 
 #include <cstdint>
+#include <memory>
 
 #include <folly/Portability.h>
 #include <folly/net/NetworkSocket.h>
@@ -28,6 +29,12 @@
 #ifdef _WIN32
 
 #include <WS2tcpip.h> // @manual
+#ifdef __MINGW32__
+#include <mswsock.h>
+typedef WSACMSGHDR cmsghdr;
+#define CMSG_SPACE WSA_CMSG_SPACE
+typedef WSACMSGHDR CMSGHDR, *PCMSGHDR;
+#endif
 
 using nfds_t = int;
 using sa_family_t = ADDRESS_FAMILY;
diff -Naur folly-main-orig/folly/net/detail/SocketFileDescriptorMap.cpp folly-main/folly/net/detail/SocketFileDescriptorMap.cpp
--- folly-main-orig/folly/net/detail/SocketFileDescriptorMap.cpp	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/net/detail/SocketFileDescriptorMap.cpp	2025-05-20 22:33:55.882930100 +0300
@@ -16,7 +16,7 @@
 
 #include <folly/net/detail/SocketFileDescriptorMap.h>
 
-#ifdef _WIN32
+#ifdef _MSC_VER
 
 #include <shared_mutex>
 #include <unordered_map>
diff -Naur folly-main-orig/folly/net/detail/SocketFileDescriptorMap.h folly-main/folly/net/detail/SocketFileDescriptorMap.h
--- folly-main-orig/folly/net/detail/SocketFileDescriptorMap.h	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/net/detail/SocketFileDescriptorMap.h	2025-05-20 22:34:21.297497500 +0300
@@ -28,7 +28,7 @@
 namespace netops {
 namespace detail {
 struct SocketFileDescriptorMap {
-#ifdef _WIN32
+#ifdef _MSC_VER
   static int close(int fd) noexcept;
   static int close(SOCKET sock) noexcept;
 
diff -Naur folly-main-orig/folly/portability/Dirent.cpp folly-main/folly/portability/Dirent.cpp
--- folly-main-orig/folly/portability/Dirent.cpp	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/portability/Dirent.cpp	2025-05-20 22:37:01.772159400 +0300
@@ -17,6 +17,7 @@
 #include <folly/portability/Dirent.h>
 
 #ifdef _WIN32
+#include <errno.h>
 #include <stdlib.h>
 #include <string>
 
diff -Naur folly-main-orig/folly/portability/Fcntl.h folly-main/folly/portability/Fcntl.h
--- folly-main-orig/folly/portability/Fcntl.h	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/portability/Fcntl.h	2025-05-21 09:13:03.800953900 +0300
@@ -60,6 +60,9 @@
 
 #ifdef _WIN32
 #define FOLLY_PORT_WIN32_OPEN_BINARY _O_BINARY
+#ifdef __MINGW32__
+#include <share.h>
+#endif
 #else
 #define FOLLY_PORT_WIN32_OPEN_BINARY 0
 #endif
diff -Naur folly-main-orig/folly/portability/PThread.h folly-main/folly/portability/PThread.h
--- folly-main-orig/folly/portability/PThread.h	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/portability/PThread.h	2025-05-20 22:22:18.933354700 +0300
@@ -18,7 +18,7 @@
 
 #include <folly/portability/Config.h>
 
-#if !defined(_WIN32)
+#if !defined(_MSC_VER)
 
 #include <pthread.h>
 
diff -Naur folly-main-orig/folly/portability/Sched.cpp folly-main/folly/portability/Sched.cpp
--- folly-main-orig/folly/portability/Sched.cpp	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/portability/Sched.cpp	2025-05-21 12:37:07.785957100 +0300
@@ -16,7 +16,7 @@
 
 #include <folly/portability/Sched.h>
 
-#ifdef _WIN32
+#ifdef _MSC_VER
 #include <thread>
 
 namespace folly {
diff -Naur folly-main-orig/folly/portability/Sched.h folly-main/folly/portability/Sched.h
--- folly-main-orig/folly/portability/Sched.h	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/portability/Sched.h	2025-05-21 12:37:10.761884600 +0300
@@ -16,7 +16,7 @@
 
 #pragma once
 
-#ifndef _WIN32
+#ifndef _MSC_VER
 #include <sched.h>
 #else
 #define SCHED_OTHER 0
diff -Naur folly-main-orig/folly/portability/Sockets.cpp folly-main/folly/portability/Sockets.cpp
--- folly-main-orig/folly/portability/Sockets.cpp	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/portability/Sockets.cpp	2025-05-20 23:34:05.022205900 +0300
@@ -16,7 +16,7 @@
 
 #include <folly/portability/Sockets.h>
 
-#ifdef _MSC_VER
+#ifdef _WIN32
 
 #include <errno.h>
 #include <fcntl.h>
diff -Naur folly-main-orig/folly/portability/Stdlib.cpp folly-main/folly/portability/Stdlib.cpp
--- folly-main-orig/folly/portability/Stdlib.cpp	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/portability/Stdlib.cpp	2025-05-20 22:19:19.977479900 +0300
@@ -29,6 +29,8 @@
 namespace folly {
 namespace portability {
 namespace stdlib {
+
+#ifdef _MSC_VER
 char* mktemp(char* tn) {
   return _mktemp(tn);
 }
@@ -76,6 +78,7 @@
   // I sure hope the caller gave us _MAX_PATH space in the buffer....
   return _fullpath(resolved_path, path, _MAX_PATH);
 }
+#endif
 
 int setenv(const char* name, const char* value, int overwrite) {
   if (overwrite == 0 && getenv(name) != nullptr) {
@@ -165,7 +168,7 @@
     }
   }
 
-  for (auto s : data) {
+  for (const auto& s : data) {
     if (unsetenv(s.c_str()) != 0)
       return -1;
   }
diff -Naur folly-main-orig/folly/portability/Stdlib.h folly-main/folly/portability/Stdlib.h
--- folly-main-orig/folly/portability/Stdlib.h	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/portability/Stdlib.h	2025-05-20 22:18:38.966292700 +0300
@@ -62,9 +62,11 @@
 #endif
 
 #ifdef _WIN32
+#ifdef _MSC_VER
 char* mkdtemp(char* tn);
 int mkstemp(char* tn);
 char* realpath(const char* path, char* resolved_path);
+#endif
 int setenv(const char* name, const char* value, int overwrite);
 int unsetenv(const char* name);
 #endif
diff -Naur folly-main-orig/folly/portability/String.cpp folly-main/folly/portability/String.cpp
--- folly-main-orig/folly/portability/String.cpp	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/portability/String.cpp	2025-05-21 10:43:34.837969600 +0300
@@ -38,6 +38,7 @@
   memset(s, 0, n);
 }
 
+#ifdef _MSC_VER
 int strcasecmp(const char* a, const char* b) {
   return _stricmp(a, b);
 }
@@ -45,6 +46,7 @@
 int strncasecmp(const char* a, const char* b, size_t c) {
   return _strnicmp(a, b, c);
 }
+#endif
 
 char* strtok_r(char* str, char const* delim, char** ctx) {
   return strtok_s(str, delim, ctx);
diff -Naur folly-main-orig/folly/portability/String.h folly-main/folly/portability/String.h
--- folly-main-orig/folly/portability/String.h	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/portability/String.h	2025-05-21 10:43:25.880266800 +0300
@@ -32,8 +32,10 @@
 #ifdef _WIN32
 extern "C" {
 void bzero(void* s, size_t n);
+#ifdef _MSC_VER
 int strcasecmp(const char* a, const char* b);
 int strncasecmp(const char* a, const char* b, size_t c);
+#endif
 char* strtok_r(char* str, char const* delim, char** ctx);
 }
 #endif
diff -Naur folly-main-orig/folly/portability/SysStat.h folly-main/folly/portability/SysStat.h
--- folly-main-orig/folly/portability/SysStat.h	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/portability/SysStat.h	2025-05-20 22:24:06.736832100 +0300
@@ -23,6 +23,7 @@
 #ifdef _WIN32
 #include <folly/portability/SysTypes.h>
 
+#ifdef _MSC_VER
 // Windows gives weird names to these.
 #define S_IXUSR 0
 #define S_IWUSR _S_IWRITE
@@ -40,6 +41,7 @@
 
 #define S_ISDIR(mode) (((mode) & (_S_IFDIR)) == (_S_IFDIR) ? 1 : 0)
 #define S_ISREG(mode) (((mode) & (_S_IFREG)) == (_S_IFREG) ? 1 : 0)
+#endif
 
 // This isn't defined anywhere, so give a sane value.
 #define MAXSYMLINKS 255
diff -Naur folly-main-orig/folly/portability/SysTime.cpp folly-main/folly/portability/SysTime.cpp
--- folly-main-orig/folly/portability/SysTime.cpp	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/portability/SysTime.cpp	2025-05-20 22:30:19.798320400 +0300
@@ -21,6 +21,8 @@
 #include <cstdint>
 
 extern "C" {
+
+#ifdef _MSC_VER
 int gettimeofday(timeval* tv, folly_port_struct_timezone*) {
   constexpr auto posixWinFtOffset = 116444736000000000ULL;
 
@@ -39,6 +41,7 @@
 
   return 0;
 }
+#endif
 
 void timeradd(timeval* a, timeval* b, timeval* res) {
   res->tv_sec = a->tv_sec + b->tv_sec;
diff -Naur folly-main-orig/folly/portability/SysTime.h folly-main/folly/portability/SysTime.h
--- folly-main-orig/folly/portability/SysTime.h	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/portability/SysTime.h	2025-05-20 22:30:08.431176900 +0300
@@ -42,7 +42,9 @@
 // a global field that contains information on the current timezone.
 // As such "timezone" is not a good name to use inside of C/C++ code on
 // Windows.  Instead users should use folly_port_struct_timezone instead.
+#ifdef _MSC_VER
 int gettimeofday(timeval* tv, folly_port_struct_timezone*);
+#endif
 void timeradd(timeval* a, timeval* b, timeval* res);
 void timersub(timeval* a, timeval* b, timeval* res);
 }
diff -Naur folly-main-orig/folly/portability/SysTypes.h folly-main/folly/portability/SysTypes.h
--- folly-main-orig/folly/portability/SysTypes.h	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/portability/SysTypes.h	2025-05-20 22:15:00.197577200 +0300
@@ -24,7 +24,9 @@
 // This is a massive pain to have be an `int` due to the pthread implementation
 // we support, but it's far more compatible with the rest of the windows world
 // as an `int` than it would be as a `void*`
+#ifdef _MSC_VER
 using pid_t = int;
+#endif
 
 using uid_t = int;
 using gid_t = int;
@@ -38,7 +40,10 @@
 #define HAVE_MODE_T 1
 // The Windows headers don't define this anywhere, nor do any of the libs
 // that Folly depends on, so define it here.
+#ifdef _MSC_VER
 using mode_t = unsigned int;
 #endif
 
 #endif
+
+#endif
diff -Naur folly-main-orig/folly/portability/Time.cpp folly-main/folly/portability/Time.cpp
--- folly-main-orig/folly/portability/Time.cpp	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/portability/Time.cpp	2025-05-20 22:42:52.370456500 +0300
@@ -287,6 +287,8 @@
 #include <folly/portability/Windows.h>
 
 extern "C" {
+
+#ifdef _MSC_VER
 char* asctime_r(const tm* tm, char* buf) {
   char tmpBuf[64];
   if (asctime_s(tmpBuf, tm)) {
@@ -312,13 +314,6 @@
   return nullptr;
 }
 
-tm* localtime_r(const time_t* t, tm* o) {
-  if (!localtime_s(o, t)) {
-    return o;
-  }
-  return nullptr;
-}
-
 int nanosleep(const struct timespec* request, struct timespec* remain) {
   Sleep((DWORD)((request->tv_sec * 1000) + (request->tv_nsec / 1000000)));
   if (remain != nullptr) {
@@ -327,6 +322,14 @@
   }
   return 0;
 }
+#endif
+
+tm* localtime_r(const time_t* t, tm* o) {
+  if (!localtime_s(o, t)) {
+    return o;
+  }
+  return nullptr;
+}
 
 char* strptime(
     const char* __restrict s,
diff -Naur folly-main-orig/folly/portability/Time.h folly-main/folly/portability/Time.h
--- folly-main-orig/folly/portability/Time.h	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/portability/Time.h	2025-05-20 22:42:39.937207500 +0300
@@ -59,11 +59,13 @@
 #define TM_YEAR_BASE (1900)
 
 extern "C" {
+#ifdef _MSC_VER
 char* asctime_r(const tm* tm, char* buf);
 char* ctime_r(const time_t* t, char* buf);
 tm* gmtime_r(const time_t* t, tm* res);
-tm* localtime_r(const time_t* t, tm* o);
 int nanosleep(const struct timespec* request, struct timespec* remain);
+#endif
+tm* localtime_r(const time_t* t, tm* o);
 char* strptime(
     const char* __restrict buf,
     const char* __restrict fmt,
diff -Naur folly-main-orig/folly/portability/Unistd.cpp folly-main/folly/portability/Unistd.cpp
--- folly-main-orig/folly/portability/Unistd.cpp	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/portability/Unistd.cpp	2025-05-20 22:38:16.870565700 +0300
@@ -255,9 +255,11 @@
   return _locking(fd, cmd, len);
 }
 
+#ifdef _MSC_VER
 off64_t lseek64(int fh, off64_t off, int orig) {
   return _lseeki64(fh, static_cast<int64_t>(off), orig);
 }
+#endif
 
 ssize_t pread(int fd, void* buf, size_t count, off_t offset) {
   const bool is64Bit = false;
diff -Naur folly-main-orig/folly/portability/Unistd.h folly-main/folly/portability/Unistd.h
--- folly-main-orig/folly/portability/Unistd.h	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/portability/Unistd.h	2025-05-21 23:01:06.689277200 +0300
@@ -59,7 +59,7 @@
 // Windows is weird and doesn't actually defined these
 // for the parameters to access, so we have to do it ourselves -_-...
 #define F_OK 0
-#define X_OK F_OK
+#define X_OK 1
 #define W_OK 2
 #define R_OK 4
 #define RW_OK 6
@@ -78,7 +78,9 @@
 pid_t getppid();
 int getuid();
 int lockf(int fd, int cmd, off_t len);
+#ifdef _MSC_VER
 off64_t lseek64(int fh, off64_t off, int orig);
+#endif
 ssize_t pread(int fd, void* buf, size_t count, off_t offset);
 ssize_t pread64(int fd, void* buf, size_t count, off64_t offset);
 ssize_t pwrite(int fd, const void* buf, size_t count, off_t offset);
diff -Naur folly-main-orig/folly/system/ThreadId.cpp folly-main/folly/system/ThreadId.cpp
--- folly-main-orig/folly/system/ThreadId.cpp	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/system/ThreadId.cpp	2025-05-21 13:10:56.580443600 +0300
@@ -29,7 +29,7 @@
 uint64_t getCurrentThreadID() {
 #if defined(__APPLE__)
   return uint64_t(pthread_mach_thread_np(pthread_self()));
-#elif defined(_WIN32)
+#elif defined(_WIN32) && !defined(FOLLY_HAVE_PTHREAD)
   return uint64_t(GetCurrentThreadId());
 #else
   return uint64_t(pthread_self());
diff -Naur folly-main-orig/folly/system/ThreadName.cpp folly-main/folly/system/ThreadName.cpp
--- folly-main-orig/folly/system/ThreadName.cpp	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/system/ThreadName.cpp	2025-05-21 14:59:44.368296200 +0300
@@ -48,6 +48,8 @@
 // pthread_setname_np was introduced in Android NDK version 9
 #elif defined(__ANDROID__) && __ANDROID_API__ >= 9
 #define FOLLY_HAS_PTHREAD_SETNAME_NP_THREAD_NAME 1
+#elif defined(__MINGW32__)
+#define FOLLY_HAS_PTHREAD_SETNAME_NP_THREAD_NAME 1
 #else
 #define FOLLY_HAS_PTHREAD_SETNAME_NP_THREAD_NAME 0
 #endif
@@ -58,27 +60,52 @@
 #define FOLLY_HAS_PTHREAD_SETNAME_NP_NAME 0
 #endif // defined(__APPLE__)
 
+namespace ns {
+
+struct dummy {};
+using thread_id_access = std::basic_ostream<dummy>;
+
+} // namespace ns
+
+namespace std {
+template <>
+class basic_ostream<ns::dummy> {
+ public:
+  using id_type = std::thread::native_handle_type;
+  id_type id = 0;
+};
+
+template <>
+ns::thread_id_access& operator<<(ns::thread_id_access& os, std::thread::id id) {
+#if defined(_LIBCPP_VERSION)
+  os.id = reinterpret_cast<std::thread::native_handle_type>(id.__id_);
+#elif defined(_GLIBCXX_RELEASE)
+  os.id = reinterpret_cast<std::thread::native_handle_type>(id._M_thread);
+#elif defined(_MSC_VER)
+  os.id = (std::thread::native_handle_type)(id._Id);
+#else
+#error Search your implementation
+#endif
+  return os;
+}
+
+} // namespace std
+
 namespace folly {
 
 namespace {
 
-#if FOLLY_HAVE_PTHREAD && !defined(_WIN32)
+inline auto GetThreadId(std::thread::id id) {
+  ns::thread_id_access t;
+  t << id;
+  return t.id;
+}
+
 pthread_t stdTidToPthreadId(std::thread::id tid) {
-  static_assert(
-      std::is_same<pthread_t, std::thread::native_handle_type>::value,
-      "This assumes that the native handle type is pthread_t");
-  static_assert(
-      sizeof(std::thread::native_handle_type) == sizeof(std::thread::id),
-      "This assumes std::thread::id is a thin wrapper around "
-      "std::thread::native_handle_type, but that doesn't appear to be true.");
-  // In most implementations, std::thread::id is a thin wrapper around
-  // std::thread::native_handle_type, which means we can do unsafe things to
-  // extract it.
-  pthread_t id;
-  std::memcpy(&id, &tid, sizeof(id));
+  auto h = GetThreadId(tid);
+  pthread_t id = reinterpret_cast<pthread_t>(h);
   return id;
 }
-#endif
 
 } // namespace
 
@@ -235,6 +262,7 @@
 
   TNIUnion tniUnion = {0x1000, trimmed, id, 0};
 
+#ifdef _MSC_VER
   // SEH requires no use of C++ object destruction semantics in this stack
   // frame.
   __try {
@@ -245,20 +273,13 @@
           : EXCEPTION_EXECUTE_HANDLER) {
     // Swallow the exception when a debugger isn't attached.
   }
+#endif
   return true;
 }
 
 bool setThreadNameWindows(std::thread::id tid, StringPiece name) {
-  static_assert(
-      sizeof(DWORD) == sizeof(std::thread::id),
-      "This assumes std::thread::id is a thin wrapper around "
-      "the Win32 thread id, but that doesn't appear to be true.");
-
-  // std::thread::id is a thin wrapper around the Windows thread ID,
-  // so just extract it.
-  DWORD id;
-  std::memcpy(&id, &tid, sizeof(id));
-
+  auto h = GetThreadId(tid);
+  DWORD id = static_cast<DWORD>(reinterpret_cast<std::uintptr_t>(h));
   // First, try the Windows 10 1607 SetThreadDescription call.
   if (setThreadNameWindowsViaDescription(id, name)) {
     return true;
@@ -273,7 +294,7 @@
 } // namespace
 
 bool setThreadName(std::thread::id tid, StringPiece name) {
-#ifdef _WIN32
+#ifndef FOLLY_HAVE_PTHREAD
   return setThreadNameWindows(tid, name);
 #else
   return setThreadName(stdTidToPthreadId(tid), name);
@@ -281,7 +302,7 @@
 }
 
 bool setThreadName(pthread_t pid, StringPiece name) {
-#ifdef _WIN32
+#ifdef _MSC_VER
   static_assert(
       sizeof(unsigned int) == sizeof(std::thread::id),
       "This assumes std::thread::id is a thin wrapper around "
diff -Naur folly-main-orig/folly/testing/TestUtil.cpp folly-main/folly/testing/TestUtil.cpp
--- folly-main-orig/folly/testing/TestUtil.cpp	2025-05-20 03:05:48.000000000 +0300
+++ folly-main/folly/testing/TestUtil.cpp	2025-05-20 23:28:03.250541600 +0300
@@ -146,7 +146,7 @@
 namespace detail {
 
 SavedState disableInvalidParameters() {
-#ifdef _WIN32
+#ifdef _MSC_VER
   SavedState ret;
   ret.previousThreadLocalHandler = _set_thread_local_invalid_parameter_handler(
       [](const wchar_t*,
@@ -161,7 +161,7 @@
 #endif
 }
 
-#ifdef _WIN32
+#ifdef _MSC_VER
 void enableInvalidParameters(SavedState state) {
   _set_thread_local_invalid_parameter_handler(
       (_invalid_parameter_handler)state.previousThreadLocalHandler);
