From 51cc7c49e414bdd2268e637d4e900a4469e91936 Mon Sep 17 00:00:00 2001
From: Christoph Reiter <reiter.christoph@gmail.com>
Date: Thu, 22 Sep 2022 17:51:33 +0200
Subject: [PATCH 137/N] Don't change os.sep with an empty MSYSTEM env var,
 not just a missing one

Up until now this didn't really happen when calling from cygwin
because empty env vars were removed before Python would run.

But https://github.com/msys2/msys2-runtime/pull/101 changed that.

To avoid breaking users that did something like

MSYSTEM= python ...

not only check that MSYSTEM isn't set but also that it isn't empty
when deciding if os.sep/os.altsep should be switched.
---
 Lib/importlib/_bootstrap_external.py | 2 +-
 Lib/ntpath.py                        | 2 +-
 Lib/pathlib.py                       | 2 +-
 Python/pathconfig.c                  | 4 ++--
 mingw_smoketests.py                  | 2 +-
 setup.py                             | 2 +-
 6 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/Lib/importlib/_bootstrap_external.py b/Lib/importlib/_bootstrap_external.py
index 3a9f876..0781dda 100644
--- a/Lib/importlib/_bootstrap_external.py
+++ b/Lib/importlib/_bootstrap_external.py
@@ -43,7 +43,7 @@ if _MS_WINDOWS:
 else:
     path_separators = ['/']
 
-if 'MSYSTEM' in _os.environ:
+if _os.environ.get('MSYSTEM', ''):
     path_separators = path_separators[::-1]
 
 # Assumption made in _path_join()
diff --git a/Lib/ntpath.py b/Lib/ntpath.py
index 5f6fad4..e141b61 100644
--- a/Lib/ntpath.py
+++ b/Lib/ntpath.py
@@ -21,7 +21,7 @@ import stat
 import genericpath
 from genericpath import *
 
-if sys.platform == "win32" and "MSYSTEM" in os.environ:
+if sys.platform == "win32" and os.environ.get("MSYSTEM", ""):
     sep = '/'
     altsep = '\\'
 else:
diff --git a/Lib/pathlib.py b/Lib/pathlib.py
index 035892f..b7ea294 100644
--- a/Lib/pathlib.py
+++ b/Lib/pathlib.py
@@ -115,7 +115,7 @@ class _WindowsFlavour(_Flavour):
 
     sep = '\\'
     altsep = '/'
-    if 'MSYSTEM' in os.environ:
+    if os.environ.get('MSYSTEM', ''):
         sep, altsep = altsep, sep
     has_drv = True
     pathmod = ntpath
diff --git a/Python/pathconfig.c b/Python/pathconfig.c
index e037791..fea3ec4 100644
--- a/Python/pathconfig.c
+++ b/Python/pathconfig.c
@@ -64,7 +64,7 @@ Py_GetSepA(const char *name)
 #if defined(__MINGW32__)
     msystem = Py_GETENV("MSYSTEM");
 #endif
-    if (msystem != NULL)
+    if (msystem != NULL && strcmp(msystem, "") != 0)
         sep = '/';
     else
         sep = '\\';
@@ -117,7 +117,7 @@ Py_GetSepW(const wchar_t *name)
 #if defined(__MINGW32__)
     msystem = Py_GETENV("MSYSTEM");
 #endif
-    if (msystem != NULL)
+    if (msystem != NULL && strcmp(msystem, "") != 0)
         sep = L'/';
     else
         sep = L'\\';
diff --git a/mingw_smoketests.py b/mingw_smoketests.py
index 4f17e16..2d107ad 100644
--- a/mingw_smoketests.py
+++ b/mingw_smoketests.py
@@ -29,7 +29,7 @@ import os
 import unittest
 import sysconfig
 
-if "MSYSTEM" in os.environ:
+if os.environ.get("MSYSTEM", ""):
     SEP = "/"
 else:
     SEP = "\\"
diff --git a/setup.py b/setup.py
index 1973c7d..12a9528 100644
--- a/setup.py
+++ b/setup.py
@@ -83,7 +83,7 @@ def get_platform():
 # as otherwise all the io redirection will fail.
 # Arguably, this could happen inside the real os.system
 # rather than this monkey patch.
-if sys.platform == "win32" and "MSYSTEM" in os.environ:
+if sys.platform == "win32" and os.environ.get("MSYSTEM", ""):
     os_system = os.system
     def msys_system(command):
         command_in_sh = 'sh.exe -c "%s"' % command.replace("\\", "\\\\")
