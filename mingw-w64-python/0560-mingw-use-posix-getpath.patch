diff -Naur Python-3.9.4-orig/Include/pylifecycle.h Python-3.9.4/Include/pylifecycle.h
--- Python-3.9.4-orig/Include/pylifecycle.h	2021-04-04 08:56:53 +0000
+++ Python-3.9.4/Include/pylifecycle.h	2021-04-25 13:03:43 +0000
@@ -49,7 +49,7 @@
 PyAPI_FUNC(wchar_t *) Py_GetExecPrefix(void);
 PyAPI_FUNC(wchar_t *) Py_GetPath(void);
 PyAPI_FUNC(void)      Py_SetPath(const wchar_t *);
-#ifdef MS_WINDOWS
+#ifdef _MSC_VER
 int _Py_CheckPython3(void);
 #endif
 
diff -Naur Python-3.9.4-orig/Modules/getpath.c Python-3.9.4/Modules/getpath.c
--- Python-3.9.4-orig/Modules/getpath.c	2021-04-04 08:56:53 +0000
+++ Python-3.9.4/Modules/getpath.c	2021-04-25 13:39:07 +0000
@@ -13,6 +13,11 @@
 #  include <mach-o/dyld.h>
 #endif
 
+#ifdef MS_WINDOWS
+#include <windows.h>
+#include <shlwapi.h>
+#endif
+
 /* Search in some common locations for the associated Python libraries.
  *
  * Two directories must be found, the platform independent directory
@@ -129,6 +134,7 @@
     wchar_t *prefix_macro;             /* PREFIX macro */
     wchar_t *exec_prefix_macro;        /* EXEC_PREFIX macro */
     wchar_t *vpath_macro;              /* VPATH macro */
+    wchar_t *dll_path;                 /* DLL Path */
 
     wchar_t *lib_python;               /* <platlibdir> / "pythonX.Y" */
 
@@ -146,8 +152,33 @@
 } PyCalculatePath;
 
 static const wchar_t delimiter[2] = {DELIM, '\0'};
-static const wchar_t separator[2] = {SEP, '\0'};
+static wchar_t separator[2] = {SEP, '\0'};
 
+static int
+is_sep(wchar_t ch)
+{
+#ifdef _WIN32
+    return ch == SEP || ch == ALTSEP;
+#else
+    return ch == SEP;
+#endif
+}
+
+static int
+is_absolute(const wchar_t *path)
+{
+#ifdef _WIN32
+    size_t i = wcslen(path);
+    if (i >= 3) {
+        if (iswalpha(path[0]) && path[1] == L':' && is_sep(path[2])) {
+            return 1;
+        }
+    }
+    return 0;
+#else
+    return path[0] == SEP;
+#endif
+}
 
 /* Get file status. Encode the path to the locale encoding. */
 static int
@@ -170,7 +201,7 @@
 reduce(wchar_t *dir)
 {
     size_t i = wcslen(dir);
-    while (i > 0 && dir[i] != SEP) {
+    while (i > 0 && !is_sep(dir[i])) {
         --i;
     }
     dir[i] = '\0';
@@ -224,6 +255,9 @@
     return 1;
 }
 
+/*
+x86_64-w64-mingw32-gcc -c -Wno-unused-result -Wsign-compare -DNDEBUG  -march=x86-64 -mtune=generic -O2 -pipe -fwrapv -D__USE_MINGW_ANSI_STDIO=1 -D_WIN32_WINNT=0x0601 -DNDEBUG  -DMS_DLL_ID="\"3.9\""   -flto -fuse-linker-plugin -ffat-lto-objects -flto-partition=none -g -std=c99 -Wextra -Wno-unused-result -Wno-unused-parameter -Wno-missing-field-initializers -Wstrict-prototypes -Werror=implicit-function-declaration -fvisibility=hidden -fprofile-generate -I../Python-3.9.4/Include/internal -IObjects -IInclude -IPython -I. -I../Python-3.9.4/Include -I../Python-3.9.4/PC -D__USE_MINGW_ANSI_STDIO=1 -IC:/msys64/mingw64/include/ncurses  -I.   -DPy_BUILD_CORE -DPYTHONPATH='""' -DPREFIX='"/mingw64"' -DEXEC_PREFIX='"/mingw64"' -DVERSION='"3.9"' -DVPATH='"../Python-3.9.4"' -o Modules/getpath.o ../Python-3.9.4/Modules/getpath.c
+*/
 
 /* Add a path component, by appending stuff to buffer.
    buflen: 'buffer' length in characters including trailing NUL.
@@ -236,14 +270,14 @@
 joinpath(wchar_t *path, const wchar_t *path2, size_t path_len)
 {
     size_t n;
-    if (!_Py_isabs(path2)) {
+    if (!is_absolute(path2)) {
         n = wcslen(path);
         if (n >= path_len) {
             return PATHLEN_ERR();
         }
 
-        if (n > 0 && path[n-1] != SEP) {
-            path[n++] = SEP;
+        if (n > 0 && !is_sep(path[n-1])) {
+            path[n++] = Py_GetSepW(path);
         }
     }
     else {
@@ -280,12 +314,12 @@
 static wchar_t*
 joinpath2(const wchar_t *path, const wchar_t *path2)
 {
-    if (_Py_isabs(path2)) {
+    if (is_absolute(path2)) {
         return _PyMem_RawWcsdup(path2);
     }
 
     size_t len = wcslen(path);
-    int add_sep = (len > 0 && path[len - 1] != SEP);
+    int add_sep = (len > 0 && !is_sep(path[len - 1]));
     len += add_sep;
     len += wcslen(path2);
 
@@ -321,7 +355,7 @@
 static PyStatus
 copy_absolute(wchar_t *abs_path, const wchar_t *path, size_t abs_path_len)
 {
-    if (_Py_isabs(path)) {
+    if (is_absolute(path)) {
         if (safe_wcscpy(abs_path, path, abs_path_len) < 0) {
             return PATHLEN_ERR();
         }
@@ -334,7 +368,7 @@
             }
             return _PyStatus_OK();
         }
-        if (path[0] == '.' && path[1] == SEP) {
+        if (path[0] == '.' && is_sep(path[1])) {
             path += 2;
         }
         PyStatus status = joinpath(abs_path, path, abs_path_len);
@@ -384,7 +384,7 @@
 static PyStatus
 absolutize(wchar_t **path_p)
 {
-    assert(!_Py_isabs(*path_p));
+    assert(!is_absolute(*path_p));
 
     wchar_t abs_path[MAXPATHLEN+1];
     wchar_t *path = *path_p;
@@ -610,6 +644,11 @@
      * return the compiled-in defaults instead.
      */
     if (calculate->prefix_found > 0) {
+#ifdef _WIN32
+        wchar_t drive_root[3];
+        memset(drive_root, 0, sizeof(drive_root));
+        wcsncpy(drive_root, calculate->prefix, 3);
+#endif
         wchar_t *prefix = _PyMem_RawWcsdup(calculate->prefix);
         if (prefix == NULL) {
             return _PyStatus_NO_MEMORY();
@@ -824,6 +863,7 @@
         if (calculate->exec_prefix == NULL) {
             return _PyStatus_NO_MEMORY();
         }
+        Py_NormalizeSepsW(exec_prefix);
     }
     else {
         /* If we found EXEC_PREFIX do *not* reduce it!  (Yet.) */
@@ -836,6 +876,48 @@
 }
 
 
+#ifdef MS_WINDOWS
+static int
+GetWindowsModulePaths(wchar_t *progpath)
+{
+    int result = 0;
+    wchar_t program_full_path[MAXPATHLEN+1];
+    memset(program_full_path, 0, sizeof(program_full_path));
+
+    if (GetModuleFileNameW(NULL, program_full_path, MAXPATHLEN)) {
+        result = 1;
+        Py_NormalizeSepsW(program_full_path);
+    }
+
+    wcscpy(progpath, program_full_path);
+    return result;
+}
+
+
+wchar_t*
+_Py_GetDLLPath(void)
+{
+    wchar_t dll_path[MAXPATHLEN+1];
+    memset(dll_path, 0, sizeof(dll_path));
+
+#ifdef Py_ENABLE_SHARED
+    extern HANDLE PyWin_DLLhModule;
+    if (PyWin_DLLhModule) {
+        if (GetModuleFileNameW(PyWin_DLLhModule, dll_path, MAXPATHLEN)) {
+            Py_NormalizeSepsW(dll_path);
+        } else {
+            dll_path[0] = 0;
+        }
+    }
+#else
+    dll_path[0] = 0;
+#endif
+
+    return _PyMem_RawWcsdup(dll_path);
+}
+#endif /* MS_WINDOWS */
+
+
 static PyStatus
 calculate_set_exec_prefix(PyCalculatePath *calculate,
                           _PyPathConfig *pathconfig)
@@ -964,7 +1046,7 @@
      * other way to find a directory to start the search from.  If
      * $PATH isn't exported, you lose.
      */
-    if (wcschr(pathconfig->program_name, SEP)) {
+    if (wcschr(pathconfig->program_name, Py_GetSepW(pathconfig->program_name))) {
         pathconfig->program_full_path = _PyMem_RawWcsdup(pathconfig->program_name);
         if (pathconfig->program_full_path == NULL) {
             return _PyStatus_NO_MEMORY();
@@ -983,6 +1065,10 @@
         }
         return _PyStatus_OK();
     }
+#ifdef MS_WINDOWS
+    else if(GetWindowsModulePaths(pathconfig->program_full_path)) {
+    }
+#endif /* MS_WINDOWS */
 
 #ifdef __APPLE__
     wchar_t *abs_path = NULL;
@@ -1007,8 +1096,7 @@
 
 
 /* Calculate pathconfig->program_full_path */
-static PyStatus
-calculate_program(PyCalculatePath *calculate, _PyPathConfig *pathconfig)
+PyStatus calculate_program(PyCalculatePath *calculate, _PyPathConfig *pathconfig)
 {
     PyStatus status;
 
@@ -1021,7 +1109,7 @@
         /* program_full_path is not empty */
 
         /* Make sure that program_full_path is an absolute path */
-        if (!_Py_isabs(pathconfig->program_full_path)) {
+        if (!is_absolute(pathconfig->program_full_path)) {
             status = absolutize(&pathconfig->program_full_path);
             if (_PyStatus_EXCEPTION(status)) {
                 return status;
@@ -1044,7 +1132,7 @@
             break;
         }
 
-        if (_Py_isabs(new_path)) {
+        if (is_absolute(new_path)) {
             PyMem_RawFree(*path_p);
             *path_p = _PyMem_RawWcsdup(new_path);
             if (*path_p == NULL) {
@@ -1139,6 +1226,7 @@
         status = _PyStatus_NO_MEMORY();
         goto done;
     }
+    Py_NormalizeSepsW(zip_path);
 
     int module;
     status = ismodule(lib_python, &module);
@@ -1173,11 +1261,12 @@
 #endif
 
 
-static PyStatus
+PyStatus
 calculate_argv0_path(PyCalculatePath *calculate,
                      _PyPathConfig *pathconfig)
 {
     PyStatus status;
+    int status2;
 
     calculate->argv0_path = _PyMem_RawWcsdup(pathconfig->program_full_path);
     if (calculate->argv0_path == NULL) {
@@ -1191,10 +1280,12 @@
     }
 #endif
 
+#if defined(HAVE_READLINK)
     status = resolve_symlinks(&calculate->argv0_path);
     if (_PyStatus_EXCEPTION(status)) {
         return status;
     }
+#endif
 
     reduce(calculate->argv0_path);
 
@@ -1322,6 +1411,7 @@
         res = _PyStatus_NO_MEMORY();
         goto done;
     }
+    Py_NormalizeSepsW(calculate->zip_path);
 
     /* Replace "00" with version */
     size_t len = wcslen(calculate->zip_path);
@@ -1342,7 +1440,7 @@
     while (1) {
         wchar_t *delim = wcschr(defpath, DELIM);
 
-        if (!_Py_isabs(defpath)) {
+        if (!is_absolute(defpath)) {
             /* Paths are relative to prefix */
             bufsz += prefixsz;
         }
@@ -1367,7 +1457,14 @@
     }
 
     bufsz += wcslen(calculate->zip_path) + 1;
+/* TODO :: The MS_WINDOWS bit may be unnecessary. */
+#ifdef MS_WINDOWS
+    if (is_absolute(calculate->exec_prefix)) {
+        bufsz += wcslen(calculate->exec_prefix) + 1;
+    }
+#else
     bufsz += wcslen(calculate->exec_prefix) + 1;
+#endif
 
     /* Allocate the buffer */
     wchar_t *buf = PyMem_RawMalloc(bufsz * sizeof(wchar_t));
@@ -1395,9 +1492,9 @@
     while (1) {
         wchar_t *delim = wcschr(defpath, DELIM);
 
-        if (!_Py_isabs(defpath)) {
+        if (!is_absolute(defpath)) {
             wcscat(buf, calculate->prefix);
-            if (prefixsz >= 2 && calculate->prefix[prefixsz - 2] != SEP &&
+            if (prefixsz >= 2 && !is_sep(calculate->prefix[prefixsz - 2]) &&
                 defpath[0] != (delim ? DELIM : L'\0'))
             {
                 /* not empty */
@@ -1416,10 +1513,15 @@
         defpath = delim + 1;
     }
     wcscat(buf, delimiter);
-
+#ifdef MS_WINDOWS
+    if (is_absolute(calculate->exec_prefix)) {
+        wcscat(buf, calculate->exec_prefix);
+        wcscat(buf, delimiter);
+    }
+#else
     /* Finally, on goes the directory for dynamic-load modules */
     wcscat(buf, calculate->exec_prefix);
-
+#endif
     pathconfig->module_search_path = buf;
     return _PyStatus_OK();
 }
@@ -1447,14 +1549,17 @@
     if (!calculate->pythonpath_macro) {
         return DECODE_LOCALE_ERR("PYTHONPATH macro", len);
     }
+    Py_NormalizeSepsW(calculate->pythonpath_macro);
     calculate->prefix_macro = Py_DecodeLocale(PREFIX, &len);
     if (!calculate->prefix_macro) {
         return DECODE_LOCALE_ERR("PREFIX macro", len);
     }
+    Py_NormalizeSepsW(calculate->prefix_macro);
     calculate->exec_prefix_macro = Py_DecodeLocale(EXEC_PREFIX, &len);
     if (!calculate->exec_prefix_macro) {
         return DECODE_LOCALE_ERR("EXEC_PREFIX macro", len);
     }
+    Py_NormalizeSepsW(calculate->exec_prefix_macro);
     calculate->vpath_macro = Py_DecodeLocale(VPATH, &len);
     if (!calculate->vpath_macro) {
         return DECODE_LOCALE_ERR("VPATH macro", len);
@@ -1465,7 +1570,8 @@
     if (!pyversion) {
         return DECODE_LOCALE_ERR("VERSION macro", len);
     }
-    calculate->lib_python = joinpath2(config->platlibdir, pyversion);
+    const char *lib_python_VERSION = (Py_GetSepW(NULL) == L'/') ? "lib/python" VERSION : "lib\\python" VERSION;
+    calculate->lib_python = Py_DecodeLocale(lib_python_VERSION, &len);
     PyMem_RawFree(pyversion);
     if (calculate->lib_python == NULL) {
         return _PyStatus_NO_MEMORY();
@@ -1481,6 +1587,7 @@
     PyMem_RawFree(calculate->pythonpath_macro);
     PyMem_RawFree(calculate->prefix_macro);
     PyMem_RawFree(calculate->exec_prefix_macro);
+    PyMem_RawFree(calculate->dll_path);
     PyMem_RawFree(calculate->vpath_macro);
     PyMem_RawFree(calculate->lib_python);
     PyMem_RawFree(calculate->path_env);
@@ -1496,6 +1603,8 @@
 {
     PyStatus status;
 
+    calculate->dll_path = _Py_GetDLLPath();
+
     if (pathconfig->program_full_path == NULL) {
         status = calculate_program(calculate, pathconfig);
         if (_PyStatus_EXCEPTION(status)) {
@@ -1596,6 +1705,7 @@
 {
     PyStatus status;
     PyCalculatePath calculate;
+    separator[0] = Py_GetSepW(NULL);
     memset(&calculate, 0, sizeof(calculate));
 
     status = calculate_init(&calculate, config);
@@ -1750,7 +1749,7 @@
 
     /* program_full_path must an either an empty string or an absolute path */
     assert(wcslen(pathconfig->program_full_path) == 0
-           || _Py_isabs(pathconfig->program_full_path));
+           || is_absolute(pathconfig->program_full_path));
 
     status = _PyStatus_OK();
 
diff -Naur Python-3.9.4-orig/Modules/posixmodule.c Python-3.9.4/Modules/posixmodule.c
--- Python-3.9.4-orig/Modules/posixmodule.c	2021-04-04 08:56:53 +0000
+++ Python-3.9.4/Modules/posixmodule.c	2021-04-25 13:03:43 +0000
@@ -4007,7 +4007,7 @@
         Py_END_ALLOW_THREADS
         /* FindNextFile sets error to ERROR_NO_MORE_FILES if
            it got to the end of the directory. */
-        if (!result && GetLastError() != ERROR_NO_MORE_FILES) {
+        if (!result && GetLastError() != 0 && GetLastError() != ERROR_NO_MORE_FILES) {
             Py_DECREF(list);
             list = path_error(path);
             goto exit;
diff -Naur Python-3.9.4-orig/Python/dynload_win.c Python-3.9.4/Python/dynload_win.c
--- Python-3.9.4-orig/Python/dynload_win.c	2021-04-04 08:56:53 +0000
+++ Python-3.9.4/Python/dynload_win.c	2021-04-25 13:03:43 +0000
@@ -168,7 +168,9 @@
     char funcname[258], *import_python;
     const wchar_t *wpathname;
 
+#if defined(_MSC_VER)
     _Py_CheckPython3();
+#endif
 
 _Py_COMP_DIAG_PUSH
 _Py_COMP_DIAG_IGNORE_DEPR_DECLS
