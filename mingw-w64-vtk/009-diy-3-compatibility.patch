Fix compatibility with DIY 3.

diff -urN VTK-9.4.1/Filters/ParallelDIY2/vtkDIYKdTreeUtilities.cxx.orig VTK-9.4.1/Filters/ParallelDIY2/vtkDIYKdTreeUtilities.cxx
--- VTK-9.4.1/Filters/ParallelDIY2/vtkDIYKdTreeUtilities.cxx.orig	2024-12-27 18:08:14.000000000 +0100
+++ VTK-9.4.1/Filters/ParallelDIY2/vtkDIYKdTreeUtilities.cxx	2025-01-14 14:21:38.139663500 +0100
@@ -263,7 +263,7 @@
       }
       else
       {
-        block->BlockBounds.resize(srp.in_link().size());
+        block->BlockBounds.resize(srp.in_link().size(), diy::ContinuousBounds(0));
         for (int i = 0; i < srp.in_link().size(); ++i)
         {
           assert(i == srp.in_link().target(i).gid);
diff -urN VTK-9.4.1/Filters/ParallelDIY2/vtkPResampleToImage.cxx.orig VTK-9.4.1/Filters/ParallelDIY2/vtkPResampleToImage.cxx
--- VTK-9.4.1/Filters/ParallelDIY2/vtkPResampleToImage.cxx.orig	2024-12-27 18:08:14.000000000 +0100
+++ VTK-9.4.1/Filters/ParallelDIY2/vtkPResampleToImage.cxx	2025-01-14 14:40:23.384439700 +0100
@@ -337,8 +337,8 @@
   unsigned round = srp.round();
 
   // step 1: dequeue all the incoming points and add them to this block's vector
-  diy::Master::IncomingQueues& in = *srp.incoming();
-  for (diy::Master::IncomingQueues::iterator i = in.begin(); i != in.end(); ++i)
+  diy::ReduceProxy::IncomingQueues& in = *srp.incoming();
+  for (diy::ReduceProxy::IncomingQueues::iterator i = in.begin(); i != in.end(); ++i)
   {
     while (i->second)
     {
diff -urN VTK-9.4.1/Filters/ParallelDIY2/vtkPResampleWithDataSet.cxx.orig VTK-9.4.1/Filters/ParallelDIY2/vtkPResampleWithDataSet.cxx
--- VTK-9.4.1/Filters/ParallelDIY2/vtkPResampleWithDataSet.cxx.orig	2024-12-27 18:08:14.000000000 +0100
+++ VTK-9.4.1/Filters/ParallelDIY2/vtkPResampleWithDataSet.cxx	2025-01-14 14:38:24.066841100 +0100
@@ -1008,8 +1008,8 @@
   int numBlocks = static_cast<int>(block->InputBlocks.size());
   std::vector<std::map<std::string, int>> arrayReceiveCounts(numBlocks);
 
-  diy::Master::IncomingQueues& in = *cp.incoming();
-  for (diy::Master::IncomingQueues::iterator i = in.begin(); i != in.end(); ++i)
+  diy::Master::ProxyWithLink::IncomingQueues& in = *cp.incoming();
+  for (diy::Master::ProxyWithLink::IncomingQueues::iterator i = in.begin(); i != in.end(); ++i)
   {
     if (!i->second)
     {
