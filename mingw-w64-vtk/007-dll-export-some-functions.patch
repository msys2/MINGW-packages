--- a/Common/Core/vtkAOSDataArrayTemplate.h
+++ b/Common/Core/vtkAOSDataArrayTemplate.h
@@ -75,7 +75,7 @@
   /**
    * Get the value at @a valueIdx. @a valueIdx assumes AOS ordering.
    */
-  ValueType GetValue(vtkIdType valueIdx) const
+  VTKCOMMONCORE_EXPORT ValueType GetValue(vtkIdType valueIdx) const
     VTK_EXPECTS(0 <= valueIdx && valueIdx < GetNumberOfValues())
   {
     return this->Buffer->GetBuffer()[valueIdx];
@@ -84,7 +84,7 @@
   /**
    * Set the value at @a valueIdx to @a value. @a valueIdx assumes AOS ordering.
    */
-  void SetValue(vtkIdType valueIdx, ValueType value)
+  VTKCOMMONCORE_EXPORT void SetValue(vtkIdType valueIdx, ValueType value)
     VTK_EXPECTS(0 <= valueIdx && valueIdx < GetNumberOfValues())
   {
     this->Buffer->GetBuffer()[valueIdx] = value;
@@ -94,7 +94,7 @@
   /**
    * Copy the tuple at @a tupleIdx into @a tuple.
    */
-  void GetTypedTuple(vtkIdType tupleIdx, ValueType* tuple) const
+  VTKCOMMONCORE_EXPORT void GetTypedTuple(vtkIdType tupleIdx, ValueType* tuple) const
     VTK_EXPECTS(0 <= tupleIdx && tupleIdx < GetNumberOfTuples())
   {
     const vtkIdType valueIdx = tupleIdx * this->NumberOfComponents;
@@ -107,7 +107,7 @@
   /**
    * Set this array's tuple at @a tupleIdx to the values in @a tuple.
    */
-  void SetTypedTuple(vtkIdType tupleIdx, const ValueType* tuple)
+  VTKCOMMONCORE_EXPORT void SetTypedTuple(vtkIdType tupleIdx, const ValueType* tuple)
     VTK_EXPECTS(0 <= tupleIdx && tupleIdx < GetNumberOfTuples())
   {
     const vtkIdType valueIdx = tupleIdx * this->NumberOfComponents;
@@ -158,7 +158,7 @@
   /**
    * Get component @a comp of the tuple at @a tupleIdx.
    */
-  ValueType GetTypedComponent(vtkIdType tupleIdx, int comp) const
+  VTKCOMMONCORE_EXPORT ValueType GetTypedComponent(vtkIdType tupleIdx, int comp) const
     VTK_EXPECTS(0 <= tupleIdx && GetNumberOfComponents() * tupleIdx + comp < GetNumberOfValues())
       VTK_EXPECTS(0 <= comp && comp < GetNumberOfComponents())
   {
@@ -169,7 +169,7 @@
   /**
    * Set component @a comp of the tuple at @a tupleIdx to @a value.
    */
-  void SetTypedComponent(vtkIdType tupleIdx, int comp, ValueType value)
+  VTKCOMMONCORE_EXPORT void SetTypedComponent(vtkIdType tupleIdx, int comp, ValueType value)
     VTK_EXPECTS(0 <= tupleIdx && GetNumberOfComponents() * tupleIdx + comp < GetNumberOfValues())
       VTK_EXPECTS(0 <= comp && comp < GetNumberOfComponents())
   {
@@ -314,11 +314,11 @@
     vtkIdType dstStart, vtkIdType n, vtkIdType srcStart, vtkAbstractArray* source) override;
   // MSVC doesn't like 'using' here (error C2487). Just forward instead:
   // using Superclass::InsertTuples;
-  void InsertTuples(vtkIdList* dstIds, vtkIdList* srcIds, vtkAbstractArray* source) override
+  VTKCOMMONCORE_EXPORT void InsertTuples(vtkIdList* dstIds, vtkIdList* srcIds, vtkAbstractArray* source) override
   {
     this->Superclass::InsertTuples(dstIds, srcIds, source);
   }
-  void InsertTuplesStartingAt(
+  VTKCOMMONCORE_EXPORT void InsertTuplesStartingAt(
     vtkIdType dstStart, vtkIdList* srcIds, vtkAbstractArray* source) override
   {
     this->Superclass::InsertTuplesStartingAt(dstStart, srcIds, source);
--- a/Common/Core/vtkSetGet.h
+++ b/Common/Core/vtkSetGet.h
@@ -1076,7 +1076,7 @@
                                                                                                    \
 public:                                                                                            \
   typedef superclass Superclass;                                                                   \
-  static vtkTypeBool IsTypeOf(const char* type)                                                    \
+  static VTKCOMMONCORE_EXPORT vtkTypeBool IsTypeOf(const char* type)                               \
   {                                                                                                \
     if (!strcmp(thisClassName, type))                                                              \
     {                                                                                              \
@@ -1088,7 +1088,7 @@
   {                                                                                                \
     return this->thisClass::IsTypeOf(type);                                                        \
   }                                                                                                \
-  static thisClass* SafeDownCast(vtkObjectBase* o)                                                 \
+  static VTKCOMMONCORE_EXPORT thisClass* SafeDownCast(vtkObjectBase* o)                            \
   {                                                                                                \
     if (o && o->IsA(thisClassName))                                                                \
     {                                                                                              \
@@ -1100,7 +1100,7 @@
   {                                                                                                \
     return instanceType::SafeDownCast(this->NewInstanceInternal());                                \
   }                                                                                                \
-  static vtkIdType GetNumberOfGenerationsFromBaseType(const char* type)                            \
+  static VTKCOMMONCORE_EXPORT vtkIdType GetNumberOfGenerationsFromBaseType(const char* type)       \
   {                                                                                                \
     if (!strcmp(thisClassName, type))                                                              \
     {                                                                                              \
--- a/Common/Core/vtkSOADataArrayTemplate.h
+++ b/Common/Core/vtkSOADataArrayTemplate.h
@@ -52,7 +52,7 @@
   /**
    * Get the value at @a valueIdx. @a valueIdx assumes AOS ordering.
    */
-  inline ValueType GetValue(vtkIdType valueIdx) const
+  inline VTKCOMMONCORE_EXPORT ValueType GetValue(vtkIdType valueIdx) const
   {
     vtkIdType tupleIdx;
     int comp;
@@ -65,7 +65,7 @@
   /**
    * Set the value at @a valueIdx to @a value. @a valueIdx assumes AOS ordering.
    */
-  inline void SetValue(vtkIdType valueIdx, ValueType value)
+  inline VTKCOMMONCORE_EXPORT void SetValue(vtkIdType valueIdx, ValueType value)
   {
     vtkIdType tupleIdx;
     int comp;
@@ -77,7 +77,7 @@
   /**
    * Copy the tuple at @a tupleIdx into @a tuple.
    */
-  inline void GetTypedTuple(vtkIdType tupleIdx, ValueType* tuple) const
+  inline VTKCOMMONCORE_EXPORT void GetTypedTuple(vtkIdType tupleIdx, ValueType* tuple) const
   {
     if (this->StorageType == StorageTypeEnum::SOA)
     {
@@ -97,7 +97,7 @@
   /**
    * Set this array's tuple at @a tupleIdx to the values in @a tuple.
    */
-  inline void SetTypedTuple(vtkIdType tupleIdx, const ValueType* tuple)
+  inline VTKCOMMONCORE_EXPORT void SetTypedTuple(vtkIdType tupleIdx, const ValueType* tuple)
   {
     if (this->StorageType == StorageTypeEnum::SOA)
     {
@@ -117,7 +117,7 @@
   /**
    * Get component @a comp of the tuple at @a tupleIdx.
    */
-  inline ValueType GetTypedComponent(vtkIdType tupleIdx, int comp) const
+  inline VTKCOMMONCORE_EXPORT ValueType GetTypedComponent(vtkIdType tupleIdx, int comp) const
   {
     if (this->StorageType == StorageTypeEnum::SOA)
     {
@@ -129,7 +129,7 @@
   /**
    * Set component @a comp of the tuple at @a tupleIdx to @a value.
    */
-  inline void SetTypedComponent(vtkIdType tupleIdx, int comp, ValueType value)
+  inline VTKCOMMONCORE_EXPORT void SetTypedComponent(vtkIdType tupleIdx, int comp, ValueType value)
   {
     if (this->StorageType == StorageTypeEnum::SOA)
     {
@@ -219,11 +219,11 @@
     vtkIdType dstStart, vtkIdType n, vtkIdType srcStart, vtkAbstractArray* source) override;
   // MSVC doesn't like 'using' here (error C2487). Just forward instead:
   // using Superclass::InsertTuples;
-  void InsertTuples(vtkIdList* dstIds, vtkIdList* srcIds, vtkAbstractArray* source) override
+  VTKCOMMONCORE_EXPORT void InsertTuples(vtkIdList* dstIds, vtkIdList* srcIds, vtkAbstractArray* source) override
   {
     this->Superclass::InsertTuples(dstIds, srcIds, source);
   }
-  void InsertTuplesStartingAt(
+  VTKCOMMONCORE_EXPORT void InsertTuplesStartingAt(
     vtkIdType dstStart, vtkIdList* srcIds, vtkAbstractArray* source) override
   {
     this->Superclass::InsertTuplesStartingAt(dstStart, srcIds, source);
