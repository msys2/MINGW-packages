--- a/Common/Core/vtkAOSDataArrayTemplate.h
+++ b/Common/Core/vtkAOSDataArrayTemplate.h
@@ -63,7 +63,7 @@
   /**
    * Get the value at @a valueIdx. @a valueIdx assumes AOS ordering.
    */
-  ValueType GetValue(vtkIdType valueIdx) const
+  VTKCOMMONCORE_EXPORT ValueType GetValue(vtkIdType valueIdx) const
     VTK_EXPECTS(0 <= valueIdx && valueIdx < GetNumberOfValues())
   {
     return this->Buffer->GetBuffer()[valueIdx];
@@ -72,7 +72,7 @@
   /**
    * Set the value at @a valueIdx to @a value. @a valueIdx assumes AOS ordering.
    */
-  void SetValue(vtkIdType valueIdx, ValueType value)
+  VTKCOMMONCORE_EXPORT void SetValue(vtkIdType valueIdx, ValueType value)
     VTK_EXPECTS(0 <= valueIdx && valueIdx < GetNumberOfValues())
   {
     this->Buffer->GetBuffer()[valueIdx] = value;
@@ -82,7 +82,7 @@
   /**
    * Copy the tuple at @a tupleIdx into @a tuple.
    */
-  void GetTypedTuple(vtkIdType tupleIdx, ValueType* tuple) const
+  VTKCOMMONCORE_EXPORT void GetTypedTuple(vtkIdType tupleIdx, ValueType* tuple) const
     VTK_EXPECTS(0 <= tupleIdx && tupleIdx < GetNumberOfTuples())
   {
     const vtkIdType valueIdx = tupleIdx * this->NumberOfComponents;
@@ -95,7 +95,7 @@
   /**
    * Set this array's tuple at @a tupleIdx to the values in @a tuple.
    */
-  void SetTypedTuple(vtkIdType tupleIdx, const ValueType* tuple)
+  VTKCOMMONCORE_EXPORT void SetTypedTuple(vtkIdType tupleIdx, const ValueType* tuple)
     VTK_EXPECTS(0 <= tupleIdx && tupleIdx < GetNumberOfTuples())
   {
     const vtkIdType valueIdx = tupleIdx * this->NumberOfComponents;
@@ -106,7 +106,7 @@
   /**
    * Get component @a comp of the tuple at @a tupleIdx.
    */
-  ValueType GetTypedComponent(vtkIdType tupleIdx, int comp) const VTK_EXPECTS(0 <= tupleIdx &&
+  VTKCOMMONCORE_EXPORT ValueType GetTypedComponent(vtkIdType tupleIdx, int comp) const VTK_EXPECTS(0 <= tupleIdx &&
     tupleIdx < GetNumberOfTuples()) VTK_EXPECTS(0 <= comp && comp < GetNumberOfComponents())
   {
     return this->Buffer->GetBuffer()[this->NumberOfComponents * tupleIdx + comp];
@@ -116,7 +116,7 @@
   /**
    * Set component @a comp of the tuple at @a tupleIdx to @a value.
    */
-  void SetTypedComponent(vtkIdType tupleIdx, int comp, ValueType value) VTK_EXPECTS(0 <= tupleIdx &&
+  VTKCOMMONCORE_EXPORT void SetTypedComponent(vtkIdType tupleIdx, int comp, ValueType value) VTK_EXPECTS(0 <= tupleIdx &&
     tupleIdx < GetNumberOfTuples()) VTK_EXPECTS(0 <= comp && comp < GetNumberOfComponents())
   {
     const vtkIdType valueIdx = tupleIdx * this->NumberOfComponents + comp;
@@ -260,7 +260,7 @@
     vtkIdType dstStart, vtkIdType n, vtkIdType srcStart, vtkAbstractArray* source) override;
   // MSVC doesn't like 'using' here (error C2487). Just forward instead:
   // using Superclass::InsertTuples;
-  void InsertTuples(vtkIdList* dstIds, vtkIdList* srcIds, vtkAbstractArray* source) override
+  VTKCOMMONCORE_EXPORT void InsertTuples(vtkIdList* dstIds, vtkIdList* srcIds, vtkAbstractArray* source) override
   {
     this->Superclass::InsertTuples(dstIds, srcIds, source);
   }
--- a/Common/Core/vtkSetGet.h
+++ b/Common/Core/vtkSetGet.h
@@ -827,7 +827,7 @@
                                                                                                    \
 public:                                                                                            \
   typedef superclass Superclass;                                                                   \
-  static vtkTypeBool IsTypeOf(const char* type)                                                    \
+  static VTKCOMMONCORE_EXPORT vtkTypeBool IsTypeOf(const char* type)                               \
   {                                                                                                \
     if (!strcmp(thisClassName, type))                                                              \
     {                                                                                              \
@@ -836,7 +836,7 @@
     return superclass::IsTypeOf(type);                                                             \
   }                                                                                                \
   vtkTypeBool IsA(const char* type) override { return this->thisClass::IsTypeOf(type); }           \
-  static thisClass* SafeDownCast(vtkObjectBase* o)                                                 \
+  static VTKCOMMONCORE_EXPORT thisClass* SafeDownCast(vtkObjectBase* o)                            \
   {                                                                                                \
     if (o && o->IsA(thisClassName))                                                                \
     {                                                                                              \
@@ -848,7 +848,7 @@
   {                                                                                                \
     return instanceType::SafeDownCast(this->NewInstanceInternal());                                \
   }                                                                                                \
-  static vtkIdType GetNumberOfGenerationsFromBaseType(const char* type)                            \
+  static VTKCOMMONCORE_EXPORT vtkIdType GetNumberOfGenerationsFromBaseType(const char* type)       \
   {                                                                                                \
     if (!strcmp(thisClassName, type))                                                              \
     {                                                                                              \
--- a/Common/Core/vtkSOADataArrayTemplate.h
+++ b/Common/Core/vtkSOADataArrayTemplate.h
@@ -60,7 +60,7 @@
   /**
    * Get the value at @a valueIdx. @a valueIdx assumes AOS ordering.
    */
-  inline ValueType GetValue(vtkIdType valueIdx) const
+  inline VTKCOMMONCORE_EXPORT ValueType GetValue(vtkIdType valueIdx) const
   {
     vtkIdType tupleIdx;
     int comp;
@@ -73,7 +73,7 @@
   /**
    * Set the value at @a valueIdx to @a value. @a valueIdx assumes AOS ordering.
    */
-  inline void SetValue(vtkIdType valueIdx, ValueType value)
+  inline VTKCOMMONCORE_EXPORT void SetValue(vtkIdType valueIdx, ValueType value)
   {
     vtkIdType tupleIdx;
     int comp;
@@ -85,7 +85,7 @@
   /**
    * Copy the tuple at @a tupleIdx into @a tuple.
    */
-  inline void GetTypedTuple(vtkIdType tupleIdx, ValueType* tuple) const
+  inline VTKCOMMONCORE_EXPORT void GetTypedTuple(vtkIdType tupleIdx, ValueType* tuple) const
   {
     for (size_t cc = 0; cc < this->Data.size(); cc++)
     {
@@ -96,7 +96,7 @@
   /**
    * Set this array's tuple at @a tupleIdx to the values in @a tuple.
    */
-  inline void SetTypedTuple(vtkIdType tupleIdx, const ValueType* tuple)
+  inline VTKCOMMONCORE_EXPORT void SetTypedTuple(vtkIdType tupleIdx, const ValueType* tuple)
   {
     for (size_t cc = 0; cc < this->Data.size(); ++cc)
     {
@@ -107,7 +107,7 @@
   /**
    * Get component @a comp of the tuple at @a tupleIdx.
    */
-  inline ValueType GetTypedComponent(vtkIdType tupleIdx, int comp) const
+  inline VTKCOMMONCORE_EXPORT ValueType GetTypedComponent(vtkIdType tupleIdx, int comp) const
   {
     return this->Data[comp]->GetBuffer()[tupleIdx];
   }
@@ -115,7 +115,7 @@
   /**
    * Set component @a comp of the tuple at @a tupleIdx to @a value.
    */
-  inline void SetTypedComponent(vtkIdType tupleIdx, int comp, ValueType value)
+  inline VTKCOMMONCORE_EXPORT void SetTypedComponent(vtkIdType tupleIdx, int comp, ValueType value)
   {
     this->Data[comp]->GetBuffer()[tupleIdx] = value;
   }
@@ -198,7 +198,7 @@
     vtkIdType dstStart, vtkIdType n, vtkIdType srcStart, vtkAbstractArray* source) override;
   // MSVC doesn't like 'using' here (error C2487). Just forward instead:
   // using Superclass::InsertTuples;
-  void InsertTuples(vtkIdList* dstIds, vtkIdList* srcIds, vtkAbstractArray* source) override
+  VTKCOMMONCORE_EXPORT void InsertTuples(vtkIdList* dstIds, vtkIdList* srcIds, vtkAbstractArray* source) override
   {
     this->Superclass::InsertTuples(dstIds, srcIds, source);
   }
