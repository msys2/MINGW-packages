# Maintainer: Alexey Pavlov <alexpux@gmail.com>

_realname=qt4
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
pkgver=4.8.6
pkgrel=3
arch=('any')
url='http://qt-project.org/'
install=qt4-${CARCH}.install
license=('GPL3' 'LGPL' 'FDL' 'custom')
conflicts=("${MINGW_PACKAGE_PREFIX}-qt5")
depends=("${MINGW_PACKAGE_PREFIX}-gcc-libs"
        "${MINGW_PACKAGE_PREFIX}-dbus"
        "${MINGW_PACKAGE_PREFIX}-libiconv"
        "${MINGW_PACKAGE_PREFIX}-libjpeg"
        "${MINGW_PACKAGE_PREFIX}-libmng"
        "${MINGW_PACKAGE_PREFIX}-libpng"
        "${MINGW_PACKAGE_PREFIX}-libwebp"
        "${MINGW_PACKAGE_PREFIX}-libxml2"
        "${MINGW_PACKAGE_PREFIX}-libxslt"
        "${MINGW_PACKAGE_PREFIX}-fontconfig"
        "${MINGW_PACKAGE_PREFIX}-freetype"
        "${MINGW_PACKAGE_PREFIX}-openssl"
        "${MINGW_PACKAGE_PREFIX}-pcre"
        "${MINGW_PACKAGE_PREFIX}-qtbinpatcher"
        "${MINGW_PACKAGE_PREFIX}-sqlite3"
        "${MINGW_PACKAGE_PREFIX}-zlib")
makedepends=("bison"
            "flex"
            "gperf"
            "m4"
            "perl"
            "${MINGW_PACKAGE_PREFIX}-gcc"
            "${MINGW_PACKAGE_PREFIX}-libmariadbclient"
            "${MINGW_PACKAGE_PREFIX}-libfbclient"
            "${MINGW_PACKAGE_PREFIX}-make"
            "${MINGW_PACKAGE_PREFIX}-postgresql"
            "${MINGW_PACKAGE_PREFIX}-pkg-config"
            "${MINGW_PACKAGE_PREFIX}-python2"
            "${MINGW_PACKAGE_PREFIX}-ruby"
            #"${MINGW_PACKAGE_PREFIX}-perl"
            #"${MINGW_PACKAGE_PREFIX}-gperf"
            )
groups=("${MINGW_PACKAGE_PREFIX}-qt4")
options=('!strip' 'staticlibs')
_pkgfqn="qt-everywhere-opensource-src-${pkgver}"
source=("http://download.qt-project.org/official_releases/qt/${pkgver%.*}/${pkgver}/${_pkgfqn}.tar.gz"
        qt-4.6-demo-plugandpaint.patch
        qt-4.8.0-fix-include-windows-h.patch
        qt-4.8.0-fix-javascript-jit-on-mingw-x86_64.patch
        qt-4.8.0-fix-mysql-driver-build.patch
        qt-4.8.0-no-webkit-tests.patch
        qt-4.8.0-use-fbclient-instead-gds32.patch
        qt-4.8.1-fix-activeqt-compilation.patch
        qt-4.8.1-linguist_qmake-qt4.patch
        qt-4.8.3-assistant-4.8.2+gcc-4.7.patch
        qt-4.8.3-qmake-cmd-mkdir-slash-direction.patch
        qt-4.8.5-dont-set-qt-dll-define-for-static-builds.patch
        qt-4.8.x-win32-g++-mkspec-optimization.patch
        qt-merge-static-and-shared-library-trees.patch
        qt-4.8.6-use-force-with-shell-commands.patch
        qt-4-8-makefile_generator_gen_pkgconfig_fix_mingw.patch)
md5sums=('2edbe4d6c2eff33ef91732602f3518eb'
         '3795e9f26a38045b69bb411f307905ac'
         '63dc5a13265ed82b2ba3abd0aa7a59f7'
         '3fe6e419c1f21c59062db1f562c1f9bf'
         '30800db1953d8d47963620462fb38be9'
         '91d01b6d31887f78c7933c04544c5758'
         'f74b6c4e87cfc0961c351c9578bcf0e6'
         'ea506301c29218c94ff78c92ce5498b3'
         'b3499c08acecc386de972f02d11378da'
         '713796980a83ecbc3317f5e20255747b'
         'a6761724e2f471aba142c24333d6419a'
         'd13a1f5befd2f6326d3b4587d53dd47b'
         'f515f8ee7dd03ad1b8bd335b3b93e0c6'
         '840db5a7630dc40d82ed3891f372b4dc'
         'a6fb8d1869e43e13c177c9fca7c579a6'
         '7a9096c06a025c065a75c747752485f9')

prepare() {
  cd ${_pkgfqn}

  patch -p1 -i ${srcdir}/qt-4.6-demo-plugandpaint.patch
  patch -p1 -i ${srcdir}/qt-4.8.0-fix-include-windows-h.patch
  patch -p1 -i ${srcdir}/qt-4.8.0-fix-javascript-jit-on-mingw-x86_64.patch
  patch -p1 -i ${srcdir}/qt-4.8.0-fix-mysql-driver-build.patch
  patch -p1 -i ${srcdir}/qt-4.8.0-no-webkit-tests.patch
  patch -p1 -i ${srcdir}/qt-4.8.0-use-fbclient-instead-gds32.patch
  patch -p1 -i ${srcdir}/qt-4.8.1-fix-activeqt-compilation.patch
  #patch -p1 -i ${srcdir}/qt-4.8.1-linguist_qmake-qt4.patch
  patch -p1 -i ${srcdir}/qt-4.8.3-assistant-4.8.2+gcc-4.7.patch
  patch -p1 -i ${srcdir}/qt-4.8.3-qmake-cmd-mkdir-slash-direction.patch
  patch -p1 -i ${srcdir}/qt-4.8.5-dont-set-qt-dll-define-for-static-builds.patch
  patch -p1 -i ${srcdir}/qt-4.8.x-win32-g++-mkspec-optimization.patch
  #patch -p1 -i ${srcdir}/qt-merge-static-and-shared-library-trees.patch
  patch -p1 -i ${srcdir}/qt-4.8.6-use-force-with-shell-commands.patch
  patch -p0 -i ${srcdir}/qt-4-8-makefile_generator_gen_pkgconfig_fix_mingw.patch

  local _optim=
  case ${MINGW_CHOST} in
  i686*)
    _optim="-march=i686 -mtune=core2"
  ;;
  x86_64*)
    _optim="-march=nocona -mtune=core2"
  ;;
  esac

  local STATIC_LD=
  sed -e "s|%OPTIMIZE_OPT%|${_optim}|g" -i mkspecs/win32-g++/qmake.conf
  sed -e "s|%STATICFLAGS%|${STATIC_LD}|g" -i mkspecs/win32-g++/qmake.conf

  cd ${srcdir}
  mv ${_pkgfqn} ${CARCH}
}

build() {
  cd $srcdir/${CARCH}
  touch .gitignore

  mkdir -p ${pkgdir}${MINGW_PREFIX}
  pushd ${pkgdir}${MINGW_PREFIX} > /dev/null
  local QTDIR_WIN=$(pwd -W)
  popd > /dev/null

  INCLUDE="${MINGW_PREFIX}/${MINGW_CHOST}/include:${MINGW_PREFIX}/include:${MINGW_PREFIX}/include/mariadb"
  local pkg_conf_inc=$(pkg-config --cflags-only-I libxml-2.0 dbus-1)
  pkg_conf_inc=${pkg_conf_inc//-I/ }
  for _inc in ${pkg_conf_inc}; do
    INCLUDE="${INCLUDE}:${_inc}"
  done

  export INCLUDE
  export CPATH="${INCLUDE}"
  export LIB="${MINGW_PREFIX}/${MINGW_CHOST}/lib:${MINGW_PREFIX}/lib"
  export LIBRARY_PATH="${MINGW_PREFIX}/${MINGW_CHOST}/lib:${MINGW_PREFIX}/lib"
  export PATH=${srcdir}/${CARCH}/bin:${srcdir}/${CARCH}/lib:${PATH}

  ./configure.exe \
    -prefix ${QTDIR_WIN} \
    -opensource \
    -confirm-license \
    -debug-and-release \
    -platform win32-g++ \
    -plugin-sql-ibase \
    -plugin-sql-mysql \
    -plugin-sql-psql \
    -plugin-sql-odbc \
    -fontconfig \
    -openssl \
    -dbus \
    -shared \
    -iconv \
    -nomake tests \
    -nomake demos \
    -nomake examples

  # Fix building
  cp -rf mkspecs ${QTDIR_WIN}/

  ${MINGW_PREFIX}/bin/mingw32-make ${MAKEFLAGS}

}

package() {

  cd ${srcdir}/${CARCH}

  export PATH=${srcdir}/${CARCH}/bin:${PATH}

  ${MINGW_PREFIX}/bin/mingw32-make ${MAKEFLAGS} install

  plain "Install private headers"

  local PRIVATE_HEADERS=(
    phonon
    Qt3Support
    QtCore
    QtDBus
    QtDeclarative
    QtDesigner
    QtGui
    QtHelp
    QtMeeGoGraphicsSystemHelper
    QtMultimedia
    QtNetwork
    QtOpenGl
    QtOpenVG
    QtScript
    QtScriptTools
    QtSql
    QtSvg
    QtTest
    QtUiTools
    QtWebkit
    QtXmlPatterns
  )

  for priv_headers in ${PRIVATE_HEADERS[@]}
  do
    mkdir -p ${pkgdir}${MINGW_PREFIX}/include/${priv_headers}
    mkdir -p ${pkgdir}${MINGW_PREFIX}/include/${priv_headers}/private
  done

  plain "----> Qt3Support"
  cp -rfv `find src/qt3support -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt3Support/private
  cp -rfv `find src/qt3support -type f -name "*_pch.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt3Support/private

  plain "----> QtCore"
  cp -rfv `find src/corelib -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/QtCore/private
  cp -rfv `find src/corelib -type f -name "*_pch.h"` ${pkgdir}${MINGW_PREFIX}/include/QtCore/private

  plain "----> QtDBus"
  cp -rfv `find src/dbus -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/QtDBus/private

  plain "----> QtDeclarative"
  cp -rfv `find src/declarative -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/QtDeclarative/private

  plain "----> QtDesigner"
  cp -rfv `find tools/designer/src/lib -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/QtDesigner/private
  cp -rfv `find tools/designer/src/lib -type f -name "*_pch.h"` ${pkgdir}${MINGW_PREFIX}/include/QtDesigner/private

  plain "----> QtGui"
  cp -rfv `find src/gui -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/QtGui/private
  cp -rfv `find src/gui -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/QtGui/private

  plain "----> QtHelp"
  cp -rfv `find tools/assistant -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/QtHelp/private

  plain "----> QtMeeGoGraphicsSystemHelper"
  cp -rfv `find tools/qmeegographicssystemhelper -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/QtMeeGoGraphicsSystemHelper/private

  plain "----> QtMultimedia"
  cp -rfv `find src/multimedia -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/QtMultimedia/private

  plain "----> QtNetwork"
  cp -rfv `find src/network -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/QtNetwork/private

  plain "----> QtOpenGl"
  cp -rfv `find src/opengl -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/QtOpenGl/private

  plain "----> QtOpenVG"
  cp -rfv `find src/openvg -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/QtOpenVG/private

  plain "----> QtScript"
  cp -rfv `find src/script -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/QtScript/private

  plain "----> QtScriptTools"
  cp -rfv `find src/scripttools -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/QtScriptTools/private

  plain "----> QtSql"
  cp -rfv `find src/sql -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/QtSql/private

  plain "----> QtSvg"
  cp -rfv `find src/svg -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/QtSvg/private

  plain "----> QtTest"
  cp -rfv `find src/testlib -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/QtTest/private

  plain "----> QtUiTools"
  cp -rfv `find tools/designer/src/uitools -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/QtUiTools/private

  plain "----> QtWebkit"
  cp -rfv `find src/3rdparty/webkit -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/QtWebkit/private

  plain "----> QtXmlPatterns"
  cp -rfv `find src/xmlpatterns -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/QtXmlPatterns/private

  plain "----> phonon"
  cp -rfv `find src/3rdparty/phonon/phonon -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/phonon/private

  plain "---> Done install private headers"

  cp -rf lib/pkgconfig/* ${pkgdir}${MINGW_PREFIX}/lib/pkgconfig/

  #for tool in ${pkgdir}${MINGW_PREFIX}/bin/*.exe ; do
  #  mv ${pkgdir}${MINGW_PREFIX}/bin/${tool} ${pkgdir}${MINGW_PREFIX}/bin/${tool%.exe}-qt4.exe
  #done
}
