# Maintainer: Alexey Pavlov <alexpux@gmail.com>

_realname=qt4
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
pkgver=4.8.7
pkgrel=1
arch=('any')
url='http://qt-project.org/'
install=qt4-${CARCH}.install
license=('GPL3' 'LGPL' 'FDL' 'custom')
conflicts=("${MINGW_PACKAGE_PREFIX}-qt5")
depends=("${MINGW_PACKAGE_PREFIX}-gcc-libs"
        "${MINGW_PACKAGE_PREFIX}-dbus"
        "${MINGW_PACKAGE_PREFIX}-fontconfig"
        "${MINGW_PACKAGE_PREFIX}-freetype"
        "${MINGW_PACKAGE_PREFIX}-libiconv"
        "${MINGW_PACKAGE_PREFIX}-libjpeg"
        "${MINGW_PACKAGE_PREFIX}-libmng"
        "${MINGW_PACKAGE_PREFIX}-libpng"
        "${MINGW_PACKAGE_PREFIX}-libtiff"
        "${MINGW_PACKAGE_PREFIX}-libwebp"
        "${MINGW_PACKAGE_PREFIX}-libxml2"
        "${MINGW_PACKAGE_PREFIX}-libxslt"
        "${MINGW_PACKAGE_PREFIX}-openssl"
        "${MINGW_PACKAGE_PREFIX}-pcre"
        "${MINGW_PACKAGE_PREFIX}-qtbinpatcher"
        "${MINGW_PACKAGE_PREFIX}-sqlite3"
        "${MINGW_PACKAGE_PREFIX}-zlib")
makedepends=("bison"
            "flex"
            "gperf"
            "lndir"
            "m4"
            "perl"
            "${MINGW_PACKAGE_PREFIX}-gcc"
            "${MINGW_PACKAGE_PREFIX}-firebird"
            "${MINGW_PACKAGE_PREFIX}-libmariadbclient"
            "${MINGW_PACKAGE_PREFIX}-postgresql"
            "${MINGW_PACKAGE_PREFIX}-pkg-config"
            "${MINGW_PACKAGE_PREFIX}-python2"
            "${MINGW_PACKAGE_PREFIX}-ruby"
            "${MINGW_PACKAGE_PREFIX}-sqlite3"
            #"${MINGW_PACKAGE_PREFIX}-perl"
            #"${MINGW_PACKAGE_PREFIX}-gperf"
            )
groups=("${MINGW_PACKAGE_PREFIX}-qt4")
options=('!strip' 'staticlibs')
_pkgfqn="qt-everywhere-opensource-src-${pkgver}"
source=("http://download.qt-project.org/official_releases/qt/${pkgver%.*}/${pkgver}/${_pkgfqn}.tar.gz"
        qt-4.6-demo-plugandpaint.patch
        qt-4.8.0-fix-include-windows-h.patch
        qt-4.8.0-fix-javascript-jit-on-mingw-x86_64.patch
        qt-4.8.0-fix-mysql-driver-build.patch
        qt-4.8.0-no-webkit-tests.patch
        qt-4.8.0-use-fbclient-instead-gds32.patch
        qt-4.8.1-fix-activeqt-compilation.patch
        qt-4.8.1-linguist_qmake-qt4.patch
        qt-4.8.3-assistant-4.8.2+gcc-4.7.patch
        qt-4.8.3-qmake-cmd-mkdir-slash-direction.patch
        qt-4.8.5-dont-set-qt-dll-define-for-static-builds.patch
        qt-4.8.x-win32-g++-mkspec-optimization.patch
        qt4-merge-static-and-shared-library-trees.patch
        qt4-use-correct-pkg-config-static-flags.patch
        qt4-fix-linking-against-static-dbus.patch
        qt-4.8.6-use-force-with-shell-commands.patch
        qt-4-8-makefile_generator_gen_pkgconfig_fix_mingw.patch
        qt-4.8.7-dont-add-resource-files-to-qmake-libs.patch
        qt4-build-debug-qmake.patch
        qt-4.8.7-mingw-configure.patch
        qt-4.8.7-mingw-unix-tests.patch)
md5sums=('d990ee66bf7ab0c785589776f35ba6ad'
         '3795e9f26a38045b69bb411f307905ac'
         '63dc5a13265ed82b2ba3abd0aa7a59f7'
         '3fe6e419c1f21c59062db1f562c1f9bf'
         '30800db1953d8d47963620462fb38be9'
         '91d01b6d31887f78c7933c04544c5758'
         '1c4ab3c6e503c9bd5bfd220313b49317'
         'ea506301c29218c94ff78c92ce5498b3'
         'b3499c08acecc386de972f02d11378da'
         '713796980a83ecbc3317f5e20255747b'
         'a6761724e2f471aba142c24333d6419a'
         'd13a1f5befd2f6326d3b4587d53dd47b'
         'f515f8ee7dd03ad1b8bd335b3b93e0c6'
         'f627d9e2628f267dff3e1472ccc93efc'
         'd079529640f644d441bf953908efb324'
         '33958b73e555aa50387bee9edd2deb83'
         'a6fb8d1869e43e13c177c9fca7c579a6'
         '68657fc5b131e2c5e3532b61e2c3da42'
         '562ababd98ecca9e3a6cbc9b70e8f7f9'
         '49c33922e8f3c506cb7cc15cbe9b4a0a'
         '0f179f2ea5740f97345e10329c75d406'
         'fc3b3f45db0eda55d429310faf529ae9')

prepare() {
  cd ${srcdir}/${_pkgfqn}
  patch -p1 -i ${srcdir}/qt-4.6-demo-plugandpaint.patch
  patch -p1 -i ${srcdir}/qt-4.8.0-fix-include-windows-h.patch
  patch -p1 -i ${srcdir}/qt-4.8.0-fix-javascript-jit-on-mingw-x86_64.patch
  patch -p1 -i ${srcdir}/qt-4.8.0-fix-mysql-driver-build.patch
  patch -p1 -i ${srcdir}/qt-4.8.0-no-webkit-tests.patch
  patch -p1 -i ${srcdir}/qt-4.8.0-use-fbclient-instead-gds32.patch
  patch -p1 -i ${srcdir}/qt-4.8.1-fix-activeqt-compilation.patch
  #patch -p1 -i ${srcdir}/qt-4.8.1-linguist_qmake-qt4.patch
  patch -p1 -i ${srcdir}/qt-4.8.3-assistant-4.8.2+gcc-4.7.patch
  patch -p1 -i ${srcdir}/qt-4.8.3-qmake-cmd-mkdir-slash-direction.patch
  patch -p1 -i ${srcdir}/qt-4.8.5-dont-set-qt-dll-define-for-static-builds.patch
  #patch -p1 -i ${srcdir}/qt-4.8.x-win32-g++-mkspec-optimization.patch
  patch -p1 -i ${srcdir}/qt4-merge-static-and-shared-library-trees.patch
  patch -p1 -i ${srcdir}/qt4-use-correct-pkg-config-static-flags.patch
  patch -p1 -i ${srcdir}/qt4-fix-linking-against-static-dbus.patch
  patch -p1 -i ${srcdir}/qt-4.8.6-use-force-with-shell-commands.patch
  patch -p1 -i ${srcdir}/qt-4-8-makefile_generator_gen_pkgconfig_fix_mingw.patch
  patch -p1 -i ${srcdir}/qt-4.8.7-dont-add-resource-files-to-qmake-libs.patch
  patch -p1 -i ${srcdir}/qt-4.8.7-mingw-configure.patch
  patch -p1 -i ${srcdir}/qt-4.8.7-mingw-unix-tests.patch
  
  if check_option "debug" "y"; then
    patch -p1 -i ${srcdir}/qt4-build-debug-qmake.patch
  fi

  cd ${srcdir}
  mkdir ${CARCH}
  lndir ${srcdir}/${_pkgfqn} ${srcdir}/${CARCH}
  cd ${CARCH}
  
  local _optim=
  case ${MINGW_CHOST} in
  i686*)
    _optim+=" -march=i686 -mtune=core2"
  ;;
  x86_64*)
    _optim+=" -march=nocona -mtune=core2"
  ;;
  esac

  local STATIC_LD=
  
  sed -i "s|^QMAKE_CFLAGS		=\(.*\)$|QMAKE_CFLAGS		= \1 ${_optim} |g" mkspecs/win32-g++/qmake.conf
  sed -i "s|^QMAKE_LFLAGS		=\(.*\)$|QMAKE_LFLAGS		= \1 ${STATIC_LD}|g" mkspecs/win32-g++/qmake.conf
}

build() {
  cd $srcdir/${CARCH}

  mkdir -p ${pkgdir}${MINGW_PREFIX}
  local QTDIR_WIN=$(cygpath -wm ${pkgdir}${MINGW_PREFIX})

  local pkg_conf_inc=$(pkg-config --cflags-only-I libxml-2.0 dbus-1)
  export PATH=${srcdir}/${CARCH}/bin:${srcdir}/${CARCH}/lib:${PATH}

  ./configure \
    -prefix ${pkgdir}${MINGW_PREFIX} \
    -datadir ${QTDIR_WIN}/share/qt4 \
    -docdir ${QTDIR_WIN}/share/qt4/doc \
    -headerdir ${QTDIR_WIN}/include/qt4 \
    -plugindir ${QTDIR_WIN}/share/qt4/plugins \
    -importdir ${QTDIR_WIN}/share/qt4/imports \
    -translationdir ${QTDIR_WIN}/share/qt4/translations \
    -sysconfdir ${QTDIR_WIN}/etc \
    -examplesdir ${QTDIR_WIN}/share/qt4/examples \
    -demosdir ${QTDIR_WIN}/share/qt4/demos \
    -opensource \
    -confirm-license \
    -debug-and-release \
    -platform win32-g++ \
    -xplatform win32-g++ \
    -plugin-sql-ibase \
    -plugin-sql-mysql \
    -plugin-sql-psql \
    -plugin-sql-sqlite \
    -plugin-sql-odbc \
    -fontconfig \
    -freetype \
    -openssl \
    -dbus \
    -shared \
    -iconv \
    -qt3support \
    -optimized-qmake \
    -exceptions \
    -fast \
    -force-pkg-config \
    -little-endian \
    -xmlpatterns \
    -multimedia \
    -audio-backend \
    -phonon \
    -phonon-backend \
    -javascript-jit \
    -qt-libmng \
    -system-zlib \
    -system-libtiff \
    -system-libpng \
    -system-libjpeg \
    -system-sqlite \
    -no-sse3 -no-ssse3 -no-sse4.1 -no-sse4.2 -no-avx -no-neon \
    -nomake tests \
    -nomake demos \
    -nomake examples \
    -verbose \
    -I ${MINGW_PREFIX}/include/mariadb \
    ${pkg_conf_inc}

  # Fix building
  #cp -rf mkspecs ${pkgdir}${MINGW_PREFIX}/

  make

}

package() {

  cd ${srcdir}/${CARCH}
  export PATH=${srcdir}/${CARCH}/bin:${PATH}
  make install
  rm -f ${pkgdir}${MINGW_PREFIX}/lib/*.dll
  
  plain "Install private headers"
  local PRIVATE_HEADERS=(
    phonon
    Qt3Support
    QtCore
    QtDBus
    QtDeclarative
    QtDesigner
    QtGui
    QtHelp
    QtMeeGoGraphicsSystemHelper
    QtMultimedia
    QtNetwork
    QtOpenGl
    QtOpenVG
    QtScript
    QtScriptTools
    QtSql
    QtSvg
    QtTest
    QtUiTools
    QtWebkit
    QtXmlPatterns
  )

  for priv_headers in ${PRIVATE_HEADERS[@]}
  do
    mkdir -p ${pkgdir}${MINGW_PREFIX}/include/Qt4/${priv_headers}
    mkdir -p ${pkgdir}${MINGW_PREFIX}/include/Qt4/${priv_headers}/private
  done

  plain "----> Qt3Support"
  cp -rfv `find src/qt3support -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/Qt3Support/private
  cp -rfv `find src/qt3support -type f -name "*_pch.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/Qt3Support/private

  plain "----> QtCore"
  cp -rfv `find src/corelib -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/QtCore/private
  cp -rfv `find src/corelib -type f -name "*_pch.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/QtCore/private

  plain "----> QtDBus"
  cp -rfv `find src/dbus -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/QtDBus/private

  plain "----> QtDeclarative"
  cp -rfv `find src/declarative -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/QtDeclarative/private

  plain "----> QtDesigner"
  cp -rfv `find tools/designer/src/lib -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/QtDesigner/private
  cp -rfv `find tools/designer/src/lib -type f -name "*_pch.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/QtDesigner/private

  plain "----> QtGui"
  cp -rfv `find src/gui -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/QtGui/private
  cp -rfv `find src/gui -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/QtGui/private

  plain "----> QtHelp"
  cp -rfv `find tools/assistant -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/QtHelp/private

  plain "----> QtMeeGoGraphicsSystemHelper"
  cp -rfv `find tools/qmeegographicssystemhelper -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/QtMeeGoGraphicsSystemHelper/private

  plain "----> QtMultimedia"
  cp -rfv `find src/multimedia -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/QtMultimedia/private

  plain "----> QtNetwork"
  cp -rfv `find src/network -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/QtNetwork/private

  plain "----> QtOpenGl"
  cp -rfv `find src/opengl -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/QtOpenGl/private

  plain "----> QtOpenVG"
  cp -rfv `find src/openvg -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/QtOpenVG/private

  plain "----> QtScript"
  cp -rfv `find src/script -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/QtScript/private

  plain "----> QtScriptTools"
  cp -rfv `find src/scripttools -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/QtScriptTools/private

  plain "----> QtSql"
  cp -rfv `find src/sql -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/QtSql/private

  plain "----> QtSvg"
  cp -rfv `find src/svg -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/QtSvg/private

  plain "----> QtTest"
  cp -rfv `find src/testlib -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/QtTest/private

  plain "----> QtUiTools"
  cp -rfv `find tools/designer/src/uitools -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/QtUiTools/private

  plain "----> QtWebkit"
  cp -rfv `find src/3rdparty/webkit -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/QtWebkit/private

  plain "----> QtXmlPatterns"
  cp -rfv `find src/xmlpatterns -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/QtXmlPatterns/private

  plain "----> phonon"
  cp -rfv `find src/3rdparty/phonon/phonon -type f -name "*_p.h"` ${pkgdir}${MINGW_PREFIX}/include/Qt4/phonon/private

  plain "---> Done install private headers"

  cp -rf lib/pkgconfig/* ${pkgdir}${MINGW_PREFIX}/lib/pkgconfig/

  #for tool in ${pkgdir}${MINGW_PREFIX}/bin/*.exe ; do
  #  mv ${pkgdir}${MINGW_PREFIX}/bin/${tool} ${pkgdir}${MINGW_PREFIX}/bin/${tool%.exe}-qt4.exe
  #done
}
