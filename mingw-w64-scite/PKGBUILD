# Maintainer: David Macek <david.macek.0@gmail.com>

_realname=scite
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-defaults")
pkgver=5.5.7
pkgrel=1
arch=('any')
mingw_arch=('mingw64' 'ucrt64' 'clang64' 'clangarm64')
url='https://www.scintilla.org/SciTE.html'
license=('custom:scite')
makedepends=("${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-gtk3"
             "${MINGW_PACKAGE_PREFIX}-pkgconf")
source=("https://www.scintilla.org/${_realname}${pkgver//./}.tgz"
        "0001-Use-POSIX-tools-in-makefiles.patch"
        "0002-Prefix-library-names.patch"
        "0003-Use-FHS.patch")
sha256sums=('2ff51c7871858056f350fbdcd9505e8575c9366c32c8fc017e0c6fbafdd5c6ef'
            '1e63baafa55076d6d9053692a00a9c3c91915e638779f7958949c0b879eb75cc'
            'f852db70f127d55762aa84763ca1754873869115868fa3c6b6984949ad4188d7'
            'c7613d1f508403e56a85d57c91b4c590f0c5957abb7034c54dd0b6351d2892a9')

apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying ${_patch}"
    patch -Nbp1 -i "${srcdir}/${_patch}"
  done
}

prepare() {
  cd "${srcdir}"
  apply_patch_with_msg \
    0001-Use-POSIX-tools-in-makefiles.patch \
    0002-Prefix-library-names.patch \
    0003-Use-FHS.patch
}

build() {
  mkdir -p "${srcdir}"/build-${MSYSTEM}
  cp -r "${srcdir}"/{scite,scintilla,lexilla} "${srcdir}"/build-${MSYSTEM}/
  cd "${srcdir}"/build-${MSYSTEM}

  windir=1 make -C lexilla/src CC=${CC} CXX=${CXX}
  windir=1 GTK3=1 make -C scintilla/gtk CC=${CC} CXX=${CXX}
  windir=1 make -C scintilla/win32 CC=${CC} CXX=${CXX}
  # gnomeprefix=${MINGW_PREFIX} GTK3=1 make -C scite/gtk
  windir=1 make -C scite/win32 CC=${CC} CXX=${CXX}
}

package_scite() {
  pkgdesc="Editor with facilities for building and running programs (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-glib2"
           "${MINGW_PACKAGE_PREFIX}-gtk3")
  optdepends=("${MINGW_PACKAGE_PREFIX}-${_realname}-defaults: Default language files")
  provides=("${MINGW_PACKAGE_PREFIX}-scintilla-gtk3")
  conflicts=("${MINGW_PACKAGE_PREFIX}-scintilla-gtk3")
  replaces=("${MINGW_PACKAGE_PREFIX}-scintilla-gtk3")

  cd "${srcdir}"/build-${MSYSTEM}

  mkdir -p "${pkgdir}"${MINGW_PREFIX}/{bin,lib}

  cp lexilla/bin/liblexilla.dll "${pkgdir}"${MINGW_PREFIX}/bin
  cp lexilla/bin/liblexilla.dll.a "${pkgdir}"${MINGW_PREFIX}/lib

  cp scintilla/bin/libscintillaGtk.dll "${pkgdir}"${MINGW_PREFIX}/bin
  cp scintilla/bin/libscintillaGtk.dll.a "${pkgdir}"${MINGW_PREFIX}/lib

  cp scintilla/bin/libScintilla.dll "${pkgdir}"${MINGW_PREFIX}/bin
  cp scintilla/bin/libScintilla.dll.a "${pkgdir}"${MINGW_PREFIX}/lib

  cp scite/bin/SciTE.exe "${pkgdir}"${MINGW_PREFIX}/bin

  mkdir -p "${pkgdir}"${MINGW_PREFIX}/include/scintilla
  cp scintilla/include/{*.h,*.iface} "${pkgdir}"${MINGW_PREFIX}/include/scintilla

  mkdir -p "${pkgdir}"${MINGW_PREFIX}/share/scite
  cp scite/bin/SciTEGlobal.properties "${pkgdir}"${MINGW_PREFIX}/share/scite

  mkdir -p "${pkgdir}"${MINGW_PREFIX}/share/doc/scite
  cp scite/doc/{*.png,*.jpg,*.html} "${pkgdir}"${MINGW_PREFIX}/share/doc/scite

  mkdir -p "${pkgdir}"${MINGW_PREFIX}/share/man/man1
  cp scite/doc/scite.1 "${pkgdir}"${MINGW_PREFIX}/share/man/man1/SciTE.1

  mkdir -p "${pkgdir}"${MINGW_PREFIX}/share/licenses/scite
  cp scintilla/License.txt "${pkgdir}"${MINGW_PREFIX}/share/licenses/scite/LICENSE-scintilla
  cp scite/License.txt "${pkgdir}"${MINGW_PREFIX}/share/licenses/scite/LICENSE-scite
  cp scite/lua/COPYRIGHT "${pkgdir}"${MINGW_PREFIX}/share/licenses/scite/LICENSE-lua
}

package_scite-defaults() {
  pkgdesc="Default language files for the SciTE editor (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-${_realname}=${pkgver}")

  cd "${srcdir}"/build-${MSYSTEM}

  mkdir -p "${pkgdir}"${MINGW_PREFIX}/share/scite
  cp scite/bin/*.properties "${pkgdir}"${MINGW_PREFIX}/share/scite
  rm -f "${pkgdir}"${MINGW_PREFIX}/share/scite/SciTEGlobal.properties
}

# template start; name=mingw-w64-splitpkg-wrappers; version=1.0;
# vim: set ft=bash :

# generate wrappers
for _name in "${pkgname[@]}"; do
  _short="package_${_name#${MINGW_PACKAGE_PREFIX}-}"
  _func="$(declare -f "${_short}")"
  eval "${_func/#${_short}/package_${_name}}"
done
# template end;
