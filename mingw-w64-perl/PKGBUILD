# Maintainer: Alexey Pavlov <Alexpux@gmail.com>
# Contributor: Renato Silva <br.renatosilva@gmail.com>
# Contributor: Niklas Holm <jadedcyborg@gmail.com>

_realname=perl
url='https://www.perl.org'
pkgdesc='A highly capable, feature-rich programming language (mingw-w64)'
license=(GPL1+ Artistic1)
arch=(any)
pkgver=5.26.1
pkgrel=1
install="${_realname}-${CARCH}.install"
options=(staticlibs strip '!purge' emptydirs)
pkgbase=mingw-w64-${_realname}
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
makedepends=(
    ${MINGW_PACKAGE_PREFIX}-gcc
)
depends=(
    ${MINGW_PACKAGE_PREFIX}-gcc-libs
    ${MINGW_PACKAGE_PREFIX}-winpthreads
    ${MINGW_PACKAGE_PREFIX}-dmake
)
declare -rga _sources=(
    perlprofile.in
)
if [[ -z "${SRCURI:-}" ]]; then
declare -rga _patches=(
    001-fhs-directory-structure.patch
    002-relocate-html-documentation.patch
    003-replace-batch-scripts-with-bare-perl.patch
    004-fix-cpan-external-programs.patch
)
source=(
    "https://www.cpan.org/src/5.0/${_realname}-${pkgver}.tar.xz"
    "${_patches[@]}"
    "${_sources[@]}"
)
else
source=(
    "${_realname}-${pkgver}::${SRCURI}"
    "${_sources[@]}"
)
SKIPCHECKSUMS=1
fi

## Run updpkgsums to update
sha256sums=('fe8208133e73e47afc3251c08d2c21c5a60160165a8ab8b669c43a420e4ec680'
            '5649701907f663b348574bc9f1766521a422903c995c684be8a6d668272f55da'
            'e31dadc07b92b746934da881f85475516b74e4b4c83dc8b7f6e4c5b0c041d453'
            '9791b5ba1cc88c52674cf3e02896051a7b1952032a1955f830145c1b99f5953f'
            '70fac25c411353795fa7114f0f33c1f89c7c7ee4cb4695c314f93b1063d83b8e'
            '54d8a5fc218031ee1354c8780a7af5de64f712ad63abdf029b09d33b664d6b0f')

declare -rg _build="build-${CARCH}-${_realname}-${pkgver}"

prepare() {
    cd "${srcdir}/${_realname}-${pkgver}"
    attrib.exe -r //s
    local p
    for p in "${_patches[@]}"; do
        msg2 "Applying %s" "$p"
        patch -p1 -i "${srcdir}"/"$p"
    done
}

_make() {
    # Please read README.win32 in the source package
    local prefix="$(cygpath -w "${pkgdir}${MINGW_PREFIX}")"
    local cchome="$(cygpath -w "${MINGW_PREFIX}")"
    local sysroot="$(cygpath -u "${SYSTEMROOT}")"
    local -i jobs="${JOBS:-$(nproc)}"
    # README.win32 recommends bulding under Windows' default shell (cmd.exe)
    # and win32/makefile.mk recommends setting SHELL to it as well
    local cmd="$(cygpath -u "${COMSPEC}")"
    local cmdline=(
        "${cmd}" //C dmake
        -P"${jobs}"
        TEST_JOBS="${jobs}"
        CCTYPE=GCC
        CCHOME="${cchome}"
        INST_DRV="${prefix:0:2}"
        INST_TOP="${prefix}"
        SHELL="${COMSPEC}"
    )
    if [[ "$(uname --machine)" == "x86_64" && "${CARCH}" == "i686" ]]; then
        cmdline+=(WIN64=undef)
    fi
    cd "${srcdir}/${_build}/win32"
    msg2 "Running \"%s\"" "${cmdline[*]}$( (($#)) && echo -n " $*")"
    # Setting PATH here is not strictly necessary but it might make compilation
    # slightly faster to have the mostly used commands early on the PATH and
    # avoids interference with other programs on the PATH during tests.
    PATH="${sysroot}/system32:${sysroot}:${MINGW_PREFIX}/bin" "${cmdline[@]}" "$@"
}

build() {
    if [[ -e "${srcdir}/${_build}" ]]; then
        local -i i=1
        while [[ -e "${srcdir}/${_build}~${i}" ]]; do ((++i)); done
        mv -T "${srcdir}/${_build}" "${srcdir}/${_build}~${i}"
    fi
    mv -T "${srcdir}/${_realname}-${pkgver}" "${srcdir}/${_build}"
    pkgdir="${pkgdirbase}/${pkgname}"
    _make
}

check() {
    # Some tests will fail, this is expected on Windows. Still, it might be good
    # to have this information in the build logs.
    _make test || true
}

package() {
    _make install

    cd "${pkgdir}${MINGW_PREFIX}"
    attrib.exe -r //s

    msg2 "Cleaning up"
    find -O3 . \( -type f \( \
        -name '.packlist' -o -name 'perllocal.pod' -o -name '*.tmp' \
        -o -name '*.pod' ! -path '*/pods/*' \
        \) -o -type d -empty \) -delete

    msg2 "Post-install configuration"
    local config_heavy="$(find . -name Config_heavy.pl -print -quit)"

    # Path relocation. This is done by replacing hard-coded paths with relocate
    # patterns that will be resolved on package installation. The HTML
    # documentation is handled with a patch, the rest is handled below.

    local root_pattern
    local root_pattern_double
    local pkgdir_pattern
    local pkgdir_pattern_double

    root_pattern="$(cygpath -w /)"
    root_pattern="${root_pattern%\\}"
    root_pattern="${root_pattern//\\/\\\\}"
    root_pattern_double="${root_pattern//\\\\/\\\\\\\\}"
    pkgdir_pattern="$(cygpath -w "${pkgdir}")"
    pkgdir_pattern="${pkgdir_pattern//\\/\\\\}"
    pkgdir_pattern_double="${pkgdir_pattern//\\\\/\\\\\\\\}"

    msg2 "Creating relocate patterns for:"
    plain "%b" "${root_pattern}"
    plain "%b" "${root_pattern_double}"
    plain "%b" "${pkgdir_pattern}"
    plain "%b" "${pkgdir_pattern_double}"

    # Attach list of files containing relocate patterns for use in post-install script.
    # Update perl-*.install if changing the filename.
    local relocate_list="./share/perl/.relocate_list"
    install -Dvm644 <(grep -rilZ \
            -e "${pkgdir_pattern_double}" \
            -e "${pkgdir_pattern}" \
            -e "${root_pattern_double}" \
            -e "${root_pattern}" \
            . ) \
        "${relocate_list}"

    xargs -0 -a "${relocate_list}" sed -i \
        -e "s/${pkgdir_pattern_double}/@PERL_RELOCATE_DOUBLE@/g" \
        -e "s/${pkgdir_pattern}/@PERL_RELOCATE@/g" \
        -e "s/${root_pattern_double}/@PERL_RELOCATE_DOUBLE@/g" \
        -e "s/${root_pattern}/@PERL_RELOCATE@/g"

    msg2 "Getting PATH components"
    local skip_paths=("${MINGW_PREFIX}/bin")
    local path_arr=()
    # Parse the configuration for paths that should be added to PATH
    # The sorting is a bit hacky...
    local p
    while IFS='' read -r p; do
        p="${p//\\/\/}"
        if [[ -n "${p}" \
              && ! "$(printf '%s\n' "${skip_paths[@]}" "${path_arr[@]}")" \
              =~ (^|$'\n')"${p}"($'\n'|$) ]]; then
            path_arr+=("${p}")
        fi
    done < <(\
        sed -nr \
            -e "s/^installsitebin='@PERL_.*?@(.*)'/1\\t\\1/p" \
            -e "s/^installsitescript='@PERL_.*?@(.*)'/2\\t\\1/p" \
            -e "s/^installvendorbin='@PERL_.*?@(.*)'/3\\t\\1/p" \
            -e "s/^installvendorscript='@PERL_.*?@(.*)'/4\\t\\1/p" \
            -e "s/^installbin='@PERL_.*?@(.*)'/5\\t\\1/p" \
            -e "s/^installscript='@PERL_.*?@(.*)'/6\\t\\1/p" \
            "${config_heavy}" \
        | sort -n -k1,1 | cut -f2- | uniq
    )
    local path="$(IFS=':'; echo "${path_arr[*]}")"

    msg2 "Adding extra files"
    local profile="/etc/profile.d/z-${_realname}-${CARCH}.sh"
    install -Dvm644 <(sed \
            -e "/^\s*local\s\+mypath=/ s/=.*/=\"${path//\//\\\/}\"/" \
            -e "s/@PREFIX@/${MINGW_PREFIX//\//\\\/}/g" \
            -e "s/@FILENAME@/${profile//\//\\\/}/g" \
            -e "/@REM@/d" \
            "${srcdir}"/perlprofile.in) \
        "${pkgdir}${profile}"

    # Link perl executable to main bin directory
    local perldir="$(dirname "$(find ./bin -name "perl.exe" -print -quit)")"
    if [[ "${perldir}" != ./bin ]]; then
        ln -vt ./bin/ "${perldir}/perl"{.exe,5*.dll}
    fi

    # Add these so we have them on PATH before installing the first package
    sed -nr "s/^install(vendor|site)(bin|script|lib|arch|(man|html)[13]dir)='@PERL_.*?@(.*)'/\\4/p" "${config_heavy}" \
        | sort | uniq | while IFS='' read -r p; do p="${pkgdir}${p//\\/\/}"; [[ -e "${p}" ]] || echo "${p}"; done \
        | xargs -r install -dvm755

    # Licenses
    install -Dvm644 -t "share/licenses/${_realname}" "${srcdir}/${_build}/"{README,Copying,Artistic}

}

# vim: set ts=4 sw=4 et ai:
