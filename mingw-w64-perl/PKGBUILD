# Maintainer: Alexey Pavlov <Alexpux@gmail.com>
# Contributor: Renato Silva <br.renatosilva@gmail.com>

_realname=perl
pkgbase=mingw-w64-${_realname}
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
url='https://www.perl.org'
pkgdesc='A highly capable, feature-rich programming language (mingw-w64)'
license=(GPL1+ Artistic1)
arch=(any)
pkgver=5.26.0
pkgrel=1
install="perl-${CARCH}.install"
options=(staticlibs strip '!purge')
makedepends=(${MINGW_PACKAGE_PREFIX}-gcc)
depends=(${MINGW_PACKAGE_PREFIX}-gcc-libs
         ${MINGW_PACKAGE_PREFIX}-winpthreads
         ${MINGW_PACKAGE_PREFIX}-dmake)
source=("http://www.cpan.org/src/5.0/perl-${pkgver}.tar.bz2"
        001-fhs-directory-structure.patch
        002-relocate-html-documentation.patch
        003-replace-batch-scripts-with-bare-perl.patch
        004-fix-cpan-external-programs.patch)
sha256sums=('f21d66de84982175e95ad15fd8d0e22fed2cc2de7e4394f5d48dbe451be2f6f2'
            'a653499d8ede314713563100c7e7332ee7053d41c810695210d90b3ed7d40be4'
            '932a33d083c8f158004ba73e6cfa0c8f47cee41ccbbe3f6355757adce913b63d'
            '4c3f26d69f401881ab21d0a774f60c02575a1c74ef31f832a5d730444cc1ec59'
            '8e958e32df2bdac25c3e596a4492539e934c85ca06e921ebf2f929b7614dec7b')

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying $_patch"
    patch -Nbp1 -i "${srcdir}/$_patch"
  done
}

del_file_exists() {
  for _fname in "$@"
  do
    if [ -f $_fname ]; then
      rm -rf $_fname
    fi
  done
}
# =========================================== #


prepare() {
    cd "${srcdir}/${_realname}-${pkgver}"
    attrib.exe -r //s
    apply_patch_with_msg 001-fhs-directory-structure.patch \
      002-relocate-html-documentation.patch \
      003-replace-batch-scripts-with-bare-perl.patch \
      004-fix-cpan-external-programs.patch
    rm -rf "${srcdir}/build-${CARCH}-${_realname}-${pkgver}" || true
}

_build() {
    local win64
    local INST_TOP="$(cygpath -w ${pkgdir}/${MINGW_PREFIX})"
    unset SHELL
    cd "${srcdir}/build-${CARCH}-${_realname}-${pkgver}/win32"
    [[ "$(uname --machine)" = x86_64 && "${CARCH}" = i686 ]] && win64="WIN64=undef"
    PATH="${MINGW_PREFIX}/bin:${SYSTEMROOT}/system32:${SYSTEMROOT}:${PATH}" dmake \
        CCHOME="${INST_TOP}" INST_TOP="${INST_TOP}" \
        ${win64} ${_target}
}

build() {
    msg2 "Synchronizing build directory"
    rsync --recursive --times "${srcdir}/${_realname}-${pkgver}"/* "${srcdir}/build-${CARCH}-${_realname}-${pkgver}"
#   Note that you can NOT run _build here because pkgdir might equal a "mingw-w64-perl" which will NOT
#   match the value of that variable in the package routine.  You could use startdir but
#   that is depreciated and will not protect you from future changes in Pacman.
#    _build

}

package() {
    _target=install _build
    cd "${pkgdir}/${MINGW_PREFIX}"
    mkdir -p lib/perl5/vendor_perl
    attrib.exe -r //s

    # Licenses
    install -Dm644 "${srcdir}/${_realname}-${pkgver}/README"   share/licenses/${_realname}/README
    install -Dm644 "${srcdir}/${_realname}-${pkgver}/Copying"  share/licenses/${_realname}/Copying
    install -Dm644 "${srcdir}/${_realname}-${pkgver}/Artistic" share/licenses/${_realname}/Artistic

    # Path relocation. This is done by replacing hard-coded paths with relocate
    # patterns that will be resolved on package installation. The HTML
    # documentation is handled with a patch, the rest is handled below.

    local root_pattern
    local root_pattern_double
    local pkgdir_pattern
    local pkgdir_pattern_double

    root_pattern=$(cygpath -w /)
    root_pattern="${root_pattern%\\}"
    root_pattern="${root_pattern//\\/\\\\}"
    root_pattern_double="${root_pattern//\\\\/\\\\\\\\}"
    pkgdir_pattern=$(cygpath -w "${pkgdir}")
    pkgdir_pattern="${pkgdir_pattern//\\/\\\\}"
    pkgdir_pattern_double="${pkgdir_pattern//\\\\/\\\\\\\\}"

    msg2 "Creating relocate patterns for:"
    printf "     ${root_pattern}\n"
    printf "     ${root_pattern_double}\n"
    printf "     ${pkgdir_pattern}\n"
    printf "     ${pkgdir_pattern_double}\n"

    sed -i "s/${pkgdir_pattern}/@PERL_RELOCATE@/g"                lib/perl5/core_perl/.packlist
    sed -i "s/${pkgdir_pattern_double}/@PERL_RELOCATE_DOUBLE@/g"  lib/perl5/core_perl/CORE/config.h
    sed -i "s/${root_pattern}/@PERL_RELOCATE@/g"                  lib/perl5/core_perl/Config.pm
    sed -i "s/${root_pattern_double}/@PERL_RELOCATE_DOUBLE@/g"    lib/perl5/core_perl/Config.pm
    sed -i "s/${pkgdir_pattern_double}/@PERL_RELOCATE_DOUBLE@/g"  lib/perl5/core_perl/Config.pm
    sed -i "s/${root_pattern}/@PERL_RELOCATE@/g"                  lib/perl5/core_perl/Config_heavy.pl
    sed -i "s/${root_pattern_double}/@PERL_RELOCATE_DOUBLE@/g"    lib/perl5/core_perl/Config_heavy.pl
    sed -i "s/${pkgdir_pattern}/@PERL_RELOCATE@/g"                lib/perl5/core_perl/Config_heavy.pl

    for script in \
        corelist cpan enc2xs encguess exetype h2ph h2xs instmodsh json_pp libnetcfg \
        perlbug perldoc perlglob perlivp perlthanks piconv pl2bat pl2pm pod2html \
        pod2man pod2text pod2usage podchecker podselect prove ptar ptardiff ptargrep \
        runperl search shasum splain xsubpp zipdetails ; do

        sed -i "s/${pkgdir_pattern}/@PERL_RELOCATE@/g" bin/${script}
    done
}
