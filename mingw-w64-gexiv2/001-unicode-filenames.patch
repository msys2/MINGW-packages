From d92d7ff7fefcefcb037b5ae3b0675100f9fbf918 Mon Sep 17 00:00:00 2001
From: Jens Georg <mail@jensge.org>
Date: Sat, 14 Nov 2020 17:22:41 +0100
Subject: [PATCH 1/3] win32: Provide UTF16 filename for exiv2

Fixes #59
---
 gexiv2/gexiv2-metadata.cpp | 20 ++++++++++++++++++--
 1 file changed, 18 insertions(+), 2 deletions(-)

diff --git a/gexiv2/gexiv2-metadata.cpp b/gexiv2/gexiv2-metadata.cpp
index ab27b0f..21d47c1 100644
--- a/gexiv2/gexiv2-metadata.cpp
+++ b/gexiv2/gexiv2-metadata.cpp
@@ -361,9 +361,25 @@ static gboolean gexiv2_metadata_open_internal (GExiv2Metadata* self, GError** er
 
 gboolean gexiv2_metadata_open_path (GExiv2Metadata *self, const gchar *path, GError **error) {
     g_return_val_if_fail (GEXIV2_IS_METADATA (self), FALSE);
-    
+#ifdef EXV_UNICODE_PATH
+    std::wstring file;
+#else
+    std::string file;
+#endif
     try {
-        self->priv->image = Exiv2::ImageFactory::open (path);
+#ifdef EXV_UNICODE_PATH
+        wchar_t* wfile{nullptr};
+        wfile = reinterpret_cast<wchar_t*>(g_utf8_to_utf16(path, -1, nullptr, nullptr, error));
+        // Error is set by g_utf8_to_utf16()
+        if (wfile == nullptr) {
+            return FALSE;
+        }
+        file.append(wfile);
+        g_free(wfile);
+#else
+        file = path;
+#endif
+        self->priv->image = Exiv2::ImageFactory::open (file);
         
         return gexiv2_metadata_open_internal (self, error);
     } catch (Exiv2::Error &e) {
-- 
GitLab


From 6bebb0e953dc7d7b9e43d4876e7a1245380d105f Mon Sep 17 00:00:00 2001
From: Jens Georg <mail@jensge.org>
Date: Sat, 14 Nov 2020 17:39:04 +0100
Subject: [PATCH 2/3] win32: Handle non-unicode exiv2 case

If exiv2 is not compiled with windows unicode support, we need to
convert the path to the locale from utf8.

It can happen that this doesn't work (e.g. converting a russian filename
on a german locale)

Addresses #59
---
 gexiv2/gexiv2-metadata.cpp | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

diff --git a/gexiv2/gexiv2-metadata.cpp b/gexiv2/gexiv2-metadata.cpp
index 21d47c1..33ab675 100644
--- a/gexiv2/gexiv2-metadata.cpp
+++ b/gexiv2/gexiv2-metadata.cpp
@@ -23,6 +23,10 @@
 #include <glib-object.h>
 #include <gio/gio.h>
 
+#ifdef G_OS_WIN32
+#include <glib/gwin32.h>
+#endif
+
 #include <exiv2/exiv2.hpp>
 
 #if EXIV2_TEST_VERSION(0,27,99)
@@ -376,8 +380,22 @@ gboolean gexiv2_metadata_open_path (GExiv2Metadata *self, const gchar *path, GEr
         }
         file.append(wfile);
         g_free(wfile);
+#else
+#ifdef G_OS_WIN32
+        char* local_path = g_win32_locale_filename_from_utf8(path);
+        if (local_path == nullptr) {
+            char *msg = g_strdup_printf("Failed to convert \"%s\" to locale \"%s\"", path, g_win32_getlocale());
+            g_set_error_literal(error, G_IO_ERROR, G_IO_ERROR_INVALID_FILENAME, msg);
+
+            g_free(msg);
+
+            return FALSE;
+        }
+        file = local_path;
+        g_free(local_path);
 #else
         file = path;
+#endif
 #endif
         self->priv->image = Exiv2::ImageFactory::open (file);
         
-- 
GitLab


From 723dd01b410d1b1da9353ad2b4440d85fd3b967d Mon Sep 17 00:00:00 2001
From: Jens Georg <mail@jensge.org>
Date: Sun, 15 Nov 2020 17:53:43 +0100
Subject: [PATCH 3/3] win32: Convert paths for saving

---
 gexiv2/gexiv2-metadata.cpp | 94 ++++++++++++++++++++++++++------------
 1 file changed, 65 insertions(+), 29 deletions(-)

diff --git a/gexiv2/gexiv2-metadata.cpp b/gexiv2/gexiv2-metadata.cpp
index 33ab675..aa39c98 100644
--- a/gexiv2/gexiv2-metadata.cpp
+++ b/gexiv2/gexiv2-metadata.cpp
@@ -363,42 +363,58 @@ static gboolean gexiv2_metadata_open_internal (GExiv2Metadata* self, GError** er
     return TRUE;
 }
 
-gboolean gexiv2_metadata_open_path (GExiv2Metadata *self, const gchar *path, GError **error) {
-    g_return_val_if_fail (GEXIV2_IS_METADATA (self), FALSE);
 #ifdef EXV_UNICODE_PATH
-    std::wstring file;
+static std::wstring convert_path(const char* path, GError** error) {
+    wchar_t* wfile{nullptr};
+    wfile = reinterpret_cast<wchar_t*>(g_utf8_to_utf16(path, -1, nullptr, nullptr, error));
+    // Error is set by g_utf8_to_utf16()
+    if (wfile == nullptr) {
+        return {};
+    }
+
+    std::wstring file{wfile};
+    g_free(wfile);
+
+    return file;
+}
 #else
+static std::string convert_path(const char* path, GError** error) {
+#ifdef G_OS_WIN32
     std::string file;
+    char* local_path = g_win32_locale_filename_from_utf8(path);
+    if (local_path == nullptr) {
+        char* msg = g_strdup_printf("Failed to convert \"%s\" to locale \"%s\"", path, g_win32_getlocale());
+        g_set_error_literal(error, G_IO_ERROR, G_IO_ERROR_INVALID_FILENAME, msg);
+
+        g_free(msg);
+
+        return FALSE;
+    }
+    file = local_path;
+    g_free(local_path);
+
+    return file;
+#else
+    g_return_val_if_fail(error != nullptr && *error == nullptr, std::string());
+
+    return std::string{path};
+#endif
+}
 #endif
+
+gboolean gexiv2_metadata_open_path(GExiv2Metadata* self, const gchar* path, GError** error) {
+    g_return_val_if_fail(GEXIV2_IS_METADATA(self), FALSE);
     try {
-#ifdef EXV_UNICODE_PATH
-        wchar_t* wfile{nullptr};
-        wfile = reinterpret_cast<wchar_t*>(g_utf8_to_utf16(path, -1, nullptr, nullptr, error));
-        // Error is set by g_utf8_to_utf16()
-        if (wfile == nullptr) {
-            return FALSE;
-        }
-        file.append(wfile);
-        g_free(wfile);
-#else
-#ifdef G_OS_WIN32
-        char* local_path = g_win32_locale_filename_from_utf8(path);
-        if (local_path == nullptr) {
-            char *msg = g_strdup_printf("Failed to convert \"%s\" to locale \"%s\"", path, g_win32_getlocale());
-            g_set_error_literal(error, G_IO_ERROR, G_IO_ERROR_INVALID_FILENAME, msg);
+        GError* inner_error = nullptr;
 
-            g_free(msg);
+        auto converted_path = convert_path(path, &inner_error);
+        if (inner_error != nullptr) {
+            g_propagate_error(error, inner_error);
 
             return FALSE;
         }
-        file = local_path;
-        g_free(local_path);
-#else
-        file = path;
-#endif
-#endif
-        self->priv->image = Exiv2::ImageFactory::open (file);
-        
+        self->priv->image = Exiv2::ImageFactory::open(converted_path);
+
         return gexiv2_metadata_open_internal (self, error);
     } catch (Exiv2::Error &e) {
         g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
@@ -569,7 +585,18 @@ gboolean gexiv2_metadata_save_external (GExiv2Metadata *self, const gchar *path,
     g_return_val_if_fail (GEXIV2_IS_METADATA (self), FALSE);
 
     try {
-        return gexiv2_metadata_save_internal (self, Exiv2::ImageFactory::create(Exiv2::ImageType::xmp, path), error);
+        GError* inner_error = nullptr;
+
+        auto local_path = convert_path(path, &inner_error);
+        if (inner_error != nullptr) {
+            g_propagate_error(error, inner_error);
+
+            return FALSE;
+        }
+
+        return gexiv2_metadata_save_internal(self,
+                                             Exiv2::ImageFactory::create(Exiv2::ImageType::xmp, local_path),
+                                             error);
     } catch (Exiv2::Error &e) {
         g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
     }
@@ -581,7 +608,16 @@ gboolean gexiv2_metadata_save_file (GExiv2Metadata *self, const gchar *path, GEr
     g_return_val_if_fail (GEXIV2_IS_METADATA (self), FALSE);
     
     try {
-        return gexiv2_metadata_save_internal (self, Exiv2::ImageFactory::open (path), error);
+        GError* inner_error = nullptr;
+
+        auto local_path = convert_path(path, &inner_error);
+        if (inner_error != nullptr) {
+            g_propagate_error(error, inner_error);
+
+            return FALSE;
+        }
+
+        return gexiv2_metadata_save_internal(self, Exiv2::ImageFactory::open(local_path), error);
     } catch (Exiv2::Error &e) {
         g_set_error_literal (error, g_quark_from_string ("GExiv2"), e.code (), e.what ());
     }
-- 
GitLab

