From c486cf358a4c168b69e22490529dc3cb072cdfa3 Mon Sep 17 00:00:00 2001
From: taozuhong <taozuhong@hotmail.com>
Date: Sat, 7 Dec 2024 14:04:08 +0800
Subject: [PATCH] Fixed compile issue

---
 c/driver/sqlite/statement_reader.h  |  2 +-
 c/include/arrow-adbc/adbc.h         | 12 ++++++------
 go/adbc/drivermgr/arrow-adbc/adbc.h | 12 ++++++------
 3 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/c/driver/sqlite/statement_reader.h b/c/driver/sqlite/statement_reader.h
index 2e6b19086c..b47c6bd2f7 100644
--- a/c/driver/sqlite/statement_reader.h
+++ b/c/driver/sqlite/statement_reader.h
@@ -28,7 +28,7 @@ extern "C" {
 #endif
 
 /// \brief Helper to manage binding data to a SQLite statement.
-struct ADBC_EXPORT AdbcSqliteBinder {
+struct AdbcSqliteBinder {
   // State
   struct ArrowSchema schema;
   struct ArrowArrayStream params;
diff --git a/c/include/arrow-adbc/adbc.h b/c/include/arrow-adbc/adbc.h
index b965672e6f..646554b3a4 100644
--- a/c/include/arrow-adbc/adbc.h
+++ b/c/include/arrow-adbc/adbc.h
@@ -266,7 +266,7 @@ typedef uint8_t AdbcStatusCode;
 /// ADBC_ERROR_VENDOR_CODE_PRIVATE_DATA.  Clients are required to initialize
 /// this struct to avoid the possibility of uninitialized values confusing the
 /// driver.
-struct ADBC_EXPORT AdbcError {
+struct AdbcError {
   /// \brief The error message.
   char* message;
 
@@ -347,7 +347,7 @@ struct ADBC_EXPORT AdbcError {
 /// called.
 ///
 /// \since ADBC API revision 1.1.0
-struct ADBC_EXPORT AdbcErrorDetail {
+struct AdbcErrorDetail {
   /// \brief The metadata key.
   const char* key;
   /// \brief The binary metadata value.
@@ -805,7 +805,7 @@ const struct AdbcError* AdbcErrorFromArrayStream(struct ArrowArrayStream* stream
 /// \brief An instance of a database.
 ///
 /// Must be kept alive as long as any connections exist.
-struct ADBC_EXPORT AdbcDatabase {
+struct AdbcDatabase {
   /// \brief Opaque implementation-defined state.
   /// This field is NULLPTR iff the connection is unintialized/freed.
   void* private_data;
@@ -828,7 +828,7 @@ struct ADBC_EXPORT AdbcDatabase {
 /// Connections are not required to be thread-safe, but they can be
 /// used from multiple threads so long as clients take care to
 /// serialize accesses to a connection.
-struct ADBC_EXPORT AdbcConnection {
+struct AdbcConnection {
   /// \brief Opaque implementation-defined state.
   /// This field is NULLPTR iff the connection is unintialized/freed.
   void* private_data;
@@ -866,7 +866,7 @@ struct ADBC_EXPORT AdbcConnection {
 /// Statements are not required to be thread-safe, but they can be
 /// used from multiple threads so long as clients take care to
 /// serialize accesses to a statement.
-struct ADBC_EXPORT AdbcStatement {
+struct AdbcStatement {
   /// \brief Opaque implementation-defined state.
   /// This field is NULLPTR iff the connection is unintialized/freed.
   void* private_data;
@@ -933,7 +933,7 @@ struct AdbcPartitions {
 /// initialization routines. Drivers should populate this struct, and
 /// applications can call ADBC functions through this struct, without
 /// worrying about multiple definitions of the same symbol.
-struct ADBC_EXPORT AdbcDriver {
+struct AdbcDriver {
   /// \brief Opaque driver-defined state.
   /// This field is NULL if the driver is unintialized/freed (but
   /// it need not have a value even if the driver is initialized).
diff --git a/go/adbc/drivermgr/arrow-adbc/adbc.h b/go/adbc/drivermgr/arrow-adbc/adbc.h
index b965672e6f..646554b3a4 100644
--- a/go/adbc/drivermgr/arrow-adbc/adbc.h
+++ b/go/adbc/drivermgr/arrow-adbc/adbc.h
@@ -266,7 +266,7 @@ typedef uint8_t AdbcStatusCode;
 /// ADBC_ERROR_VENDOR_CODE_PRIVATE_DATA.  Clients are required to initialize
 /// this struct to avoid the possibility of uninitialized values confusing the
 /// driver.
-struct ADBC_EXPORT AdbcError {
+struct AdbcError {
   /// \brief The error message.
   char* message;
 
@@ -347,7 +347,7 @@ struct ADBC_EXPORT AdbcError {
 /// called.
 ///
 /// \since ADBC API revision 1.1.0
-struct ADBC_EXPORT AdbcErrorDetail {
+struct AdbcErrorDetail {
   /// \brief The metadata key.
   const char* key;
   /// \brief The binary metadata value.
@@ -805,7 +805,7 @@ const struct AdbcError* AdbcErrorFromArrayStream(struct ArrowArrayStream* stream
 /// \brief An instance of a database.
 ///
 /// Must be kept alive as long as any connections exist.
-struct ADBC_EXPORT AdbcDatabase {
+struct AdbcDatabase {
   /// \brief Opaque implementation-defined state.
   /// This field is NULLPTR iff the connection is unintialized/freed.
   void* private_data;
@@ -828,7 +828,7 @@ struct ADBC_EXPORT AdbcDatabase {
 /// Connections are not required to be thread-safe, but they can be
 /// used from multiple threads so long as clients take care to
 /// serialize accesses to a connection.
-struct ADBC_EXPORT AdbcConnection {
+struct AdbcConnection {
   /// \brief Opaque implementation-defined state.
   /// This field is NULLPTR iff the connection is unintialized/freed.
   void* private_data;
@@ -866,7 +866,7 @@ struct ADBC_EXPORT AdbcConnection {
 /// Statements are not required to be thread-safe, but they can be
 /// used from multiple threads so long as clients take care to
 /// serialize accesses to a statement.
-struct ADBC_EXPORT AdbcStatement {
+struct AdbcStatement {
   /// \brief Opaque implementation-defined state.
   /// This field is NULLPTR iff the connection is unintialized/freed.
   void* private_data;
@@ -933,7 +933,7 @@ struct AdbcPartitions {
 /// initialization routines. Drivers should populate this struct, and
 /// applications can call ADBC functions through this struct, without
 /// worrying about multiple definitions of the same symbol.
-struct ADBC_EXPORT AdbcDriver {
+struct AdbcDriver {
   /// \brief Opaque driver-defined state.
   /// This field is NULL if the driver is unintialized/freed (but
   /// it need not have a value even if the driver is initialized).
