diff -urN src_orig/pardiso.c src/pardiso.c
--- src_orig/pardiso.c	2023-07-29 10:49:53.000000000 +0200
+++ src/pardiso.c	2023-07-29 17:06:32.810872800 +0200
@@ -34,6 +34,50 @@
 ITG mthread_mkl=0;
 char envMKL[32];
 
+
+/* Added by Victor Kemp 2022-11-18 to enable Out-Of-Core (OOC) mode. */
+void initialize_iparm(ITG *symmetryflag){
+
+  ITG i;
+  char *env;
+
+  // Most values are 0
+  for(i=0;i<=63;i++){
+    iparm[i]=0;
+  }
+
+  // iparm(1) = 1 means all other values are specified instead of being defaults.
+  iparm[0]=1;
+
+  // Non-zero default values
+  iparm[1]=2;
+  if(*symmetryflag==0){
+    iparm[9]=8;
+    iparm[10]=0;
+    iparm[12]=0;
+  }else{
+    iparm[9]=13;
+    iparm[10]=1;
+    iparm[12]=1;
+  }    
+  iparm[17]=-1;
+  iparm[20]=1;
+
+  // iparm(60)
+  env=getenv("MKL_PARDISO_OOC_MAX_CORE_SIZE");
+  if(env) {
+    // PARDISO chooses IC/OOC (In-Core / Out-Of-Core) mode according to the
+    // environment variables
+    // MKL_PARDISO_OOC_MAX_CORE_SIZE and
+    // MKL_PARDISO_OOC_MAX_SWAP_SIZE.
+    iparm[59]=1;
+  }else{
+    // Default. IC mode only.
+    iparm[59]=0;
+  }
+
+}
+
 void pardiso_factor(double *ad, double *au, double *adb, double *aub, 
 		    double *sigma,ITG *icol, ITG *irow, 
 		    ITG *neq, ITG *nzs, ITG *symmetryflag, ITG *inputformat,
@@ -55,6 +99,10 @@
 
   iparm[0]=0;
   iparm[1]=3;
+  
+  /* Added by Victor Kemp 2022-11-18 to enable Out-Of-Core (OOC) mode. */
+  initialize_iparm(symmetryflag);
+  
   /* set MKL_NUM_THREADS to min(CCX_NPROC_EQUATION_SOLVER,OMP_NUM_THREADS)
      must be done once  */
   if (mthread_mkl == 0) {
diff -urN src_orig/uamplitude.f src/uamplitude.f
--- src_orig/uamplitude.f	2023-07-29 10:49:53.000000000 +0200
+++ src/uamplitude.f	2023-07-29 16:55:06.310789300 +0200
@@ -33,11 +33,31 @@
       implicit none
 !
       character*80 name
+      integer(4) time2
 !
-      real*8 time,amplitude
+      real*8 time,amplitude,pi
 !
       if(name(1:9).eq.'QUADRATIC') then
          amplitude=time**2
+      else if(name(1:3).eq.'SIN') then
+         pi=4.d0*datan(1.d0)
+         amplitude=sin(time*pi/2)
+      else if(name(1:4).eq.'QSIN') then
+         pi=4.d0*datan(1.d0)
+         amplitude=sin(time*pi/2)**2
+      else if(name(1:6).eq.'ABSSIN') then
+         pi=4.d0*datan(1.d0)
+         amplitude=abs(sin(time*pi/2))
+      else if(name(1:3).eq.'COS') then
+         pi=4.d0*datan(1.d0)
+         amplitude=cos(time*pi/2)
+      else if(name(1:7).eq.'ONEZERO') then
+         time2=time
+	     if(modulo(time2,2).eq.0) THEN
+	        amplitude=(time-time2)	
+            else		
+                amplitude=1-(time-time2)
+	     endif
       else
          write(*,*) '*ERROR in uamplitude: unknown amplitude'
          call exit(201)
