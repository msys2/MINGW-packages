From 9779ee0fd3c8891d80b0a75edc1ce673d7a82b0a Mon Sep 17 00:00:00 2001
From: John Beard <john.j.beard@gmail.com>
Date: Tue, 10 Sep 2024 12:08:12 +0100
Subject: [PATCH] Fix Boost 1.86 SHA1 one last time

There's a change in Boost 1.86 that breaks the SHA1 hashing
in 3D cache.

The master KiCad branch ditches SHA1 entirely here, but it's quite
an invasive change to backport. So apply a sticking plaster for
the remainder of v8.

Relates-To: https://gitlab.archlinux.org/archlinux/packaging/packages/kicad/-/issues/1
---
 3d-viewer/3d_cache/3d_cache.cpp | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/3d-viewer/3d_cache/3d_cache.cpp b/3d-viewer/3d_cache/3d_cache.cpp
index 33c04d0fff..72dd50d734 100644
--- a/3d-viewer/3d_cache/3d_cache.cpp
+++ b/3d-viewer/3d_cache/3d_cache.cpp
@@ -381,7 +381,13 @@ bool S3D_CACHE::getSHA1( const wxString& aFileName, unsigned char* aSHA1Sum )
 
     fclose( fp );
     unsigned int digest[5];
-    dblock.get_digest( digest );
+    // V8 only
+    // Boost 1.86 and later changed digest_type from uchar[20] from int[5]
+    // But KiCad 8.99 and later use MurmurHash3 here, so just do a fairly ugly cast to keep
+    // this going for another few months.
+    static_assert( sizeof( digest ) == sizeof( boost::uuids::detail::sha1::digest_type& ),
+                   "SHA1 digest size mismatch" );
+    dblock.get_digest( reinterpret_cast<boost::uuids::detail::sha1::digest_type&>( digest ) );
 
     // ensure MSB order
     for( int i = 0; i < 5; ++i )
-- 
2.45.2.windows.1

