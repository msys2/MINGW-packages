From a025bec27eea01ac0c53afab4d891de7a0e79502 Mon Sep 17 00:00:00 2001
From: Tim Stahlhut <stahta01@gmail.com>
Date: Sun, 3 Jul 2022 10:36:59 -0400
Subject: MSys2 fixes for waf configure

Allows the environmental setting of CC_NAME to change compiler to gcc or
clang from the default of msvc under Windows OS.
---
 buildtools/config.py |  5 ++++-
 wscript              | 16 +++++++++++-----
 2 files changed, 15 insertions(+), 6 deletions(-)

diff --git a/buildtools/config.py b/buildtools/config.py
index e7691a69..03327e74 100644
--- a/buildtools/config.py
+++ b/buildtools/config.py
@@ -69,7 +69,10 @@ class Configuration(object):
     WXDLLVER = None
     # Version part of wxWidgets LIB/DLL names
 
-    COMPILER = 'msvc'
+    if os.getenv('CC_NAME') in ['gcc', 'clang']:
+        COMPILER = 'mingw32'
+    else:
+        COMPILER = 'msvc'
     # Used to select which compiler will be used on Windows.  This not
     # only affects distutils, but also some of the default flags and
     # other assumptions in this script.  Current supported values are
diff --git a/wscript b/wscript
index 5ea9cb2e..d19c80c5 100644
--- a/wscript
+++ b/wscript
@@ -24,6 +24,7 @@ cfg = Config(True)
 APPNAME = 'wxPython'
 VERSION = cfg.VERSION
 
+skipMSVC = os.getenv('CC_NAME') in ['gcc', 'clang']
 isWindows = sys.platform.startswith('win')
 isDarwin = sys.platform == "darwin"
 
@@ -32,7 +33,7 @@ out = 'build/waf'
 
 
 def options(opt):
-    if isWindows:
+    if isWindows and not skipMSVC:
         opt.load('msvc')
     else:
         opt.load('compiler_c compiler_cxx')
@@ -64,7 +65,7 @@ def options(opt):
 
 
 def configure(conf):
-    if isWindows:
+    if isWindows and not skipMSVC:
         # For now simply choose the compiler version based on the Python
         # version. We have a chicken-egg problem here. The compiler needs to
         # be selected before the Python stuff can be configured, but we need
@@ -95,6 +96,11 @@ def configure(conf):
         conf.env['MSVC_VERSIONS'] = ['msvc ' + msvc_version]
         conf.env['MSVC_TARGETS'] = [conf.options.msvc_arch]
         conf.load('msvc')
+    elif isWindows:
+        if os.getenv('CC_NAME') == 'gcc':
+            conf.load('gcc gxx winres')
+        elif os.getenv('CC_NAME') == 'clang':
+            conf.load('clang clangxx winres')
     else:
         conf.load('compiler_c compiler_cxx')
 
@@ -117,7 +123,7 @@ def configure(conf):
     # Ensure that the headers in siplib and Phoenix's src dir can be found
     conf.env.INCLUDES_WXPY = ['sip/siplib', 'wx/include', 'src']
 
-    if isWindows:
+    if isWindows and not skipMSVC:
         # Windows/MSVC specific stuff
 
         cfg.finishSetup(debug=conf.env.debug)
@@ -668,7 +674,7 @@ def copyFileToPkg(task):
     open(tgt, "wb").close() # essentially just a unix 'touch' command
     tgt = opj(cfg.PKGDIR, os.path.basename(src))
     copy_file(src, tgt, verbose=1)
-    if isWindows and task.env.msvc_relwithdebug:
+    if isWindows and not skipMSVC and task.env.msvc_relwithdebug:
         # also copy the .pdb file
         src = src.replace('.pyd', '.pdb')
         tgt = opj(cfg.PKGDIR, os.path.basename(src))
@@ -722,7 +728,7 @@ def makeETGRule(bld, etgScript, moduleName, libFlags):
 
 # Add flags to create .pdb files for debugging with MSVC
 def addRelwithdebugFlags(bld, moduleName):
-    if isWindows and bld.env.msvc_relwithdebug:
+    if isWindows and not skipMSVC and bld.env.msvc_relwithdebug:
         compile_flags = ['/Zi', '/Fd_tmp_{}.pdb'.format(moduleName)]
         if sys.version_info > (3,5):
             # It looks like the /FS flag doesn't exist in the compilers used
-- 
