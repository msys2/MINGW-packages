# Maintainer: Alexey Pavlov <alexpux@gmail.com>

# mingw logic lives in gcc.jam, so we always need to use the 'gcc' toolset
_toolset=gcc

_realname=boost
pkgbase=mingw-w64-${_realname}
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
pkgver=1.82.0
_boostver=${pkgver//./_}
pkgrel=2
pkgdesc="Free peer-reviewed portable C++ source libraries (mingw-w64)"
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clang32' 'clangarm64')
url="https://www.boost.org/"
license=('custom')
depends=("${MINGW_PACKAGE_PREFIX}-gcc-libs"
         "${MINGW_PACKAGE_PREFIX}-bzip2"
         "${MINGW_PACKAGE_PREFIX}-icu"
         "${MINGW_PACKAGE_PREFIX}-xz"
         "${MINGW_PACKAGE_PREFIX}-zstd"
         "${MINGW_PACKAGE_PREFIX}-zlib")
optdepends=("${MINGW_PACKAGE_PREFIX}-python: For Boost.Python"
            "${MINGW_PACKAGE_PREFIX}-python-numpy: For Boost.Python (NumPy)")
makedepends=("${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-python"
             "${MINGW_PACKAGE_PREFIX}-python-numpy")
source=(https://boostorg.jfrog.io/artifactory/main/release/${pkgver}/source/boost_${_boostver}.tar.bz2
        boost-1.63.0-python-test-PyImport_AppendInittab.patch
        boost-1.57.0-build-optflags.patch
        boost-1.68.0-pool-test_linking.patch
        boost-1.57.0-python-abi_letters.patch
        boost-1.57.0-python-libpython_dep.patch
        boost-1.70.0-fix-python-install.patch
        using-mingw-w64-python.patch
        msys2-mingw-folders-bootstrap.patch
        boost-1.81.0-remove-duplicate-UUIDs.patch
        0010-cmake-prefer-shared-libs-over-static-on-MINGW.patch)
sha256sums=('a6e1ab9b0860e6a2881dd7b21fe9f737a095e5f33a3a874afc6a345228597ee6'
            'b22196b6415f5e1c0fe56b49a12ea7c20073b15a5f31907f363c7be38d70d628'
            '366580b3bc7da1fcac83660db5cf52b6f14831aebdf23968a998ec1b04ed8d25'
            'c84cbb02321b4df379769f3a3cd03c38c76bdb13abaa3d3f04264ed37c99f2c7'
            'cf46e9b791b45937d5af26b0f35dcdfa416cd9b62ef6c29e3064464835634628'
            '01758929643f92530512230d37df9793e6481cd6ce6310e3a79cee5ba287858c'
            '5e5fc9e04482903e1a0e7c6c4e81b57448b8dc86c707d1436d69ddc5010219ff'
            '5c38e08ba63695afa79a29d5d3ea22ef1ecf79f91d48ae922e1a489e83782742'
            '5117629ee577de0da800b6923675683ba69422cdbe958e70c9081fdc6886402e'
            '4d714aa3cef6551fe91392821e7b7cb3e963d363187f942b5289b71cfb31b001'
            '87e3a33aa402b2f3ea23dc75c6522111ea81b86019aff2ca3779999b82e1acbe')

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying ${_patch}"
    patch -Nbp1 -i "${srcdir}/${_patch}"
  done
}

prepare() {
  cd "${srcdir}/boost_${_boostver}"

  # https://svn.boost.org/trac/boost/ticket/9038
  apply_patch_with_msg \
    boost-1.68.0-pool-test_linking.patch

  # https://bugzilla.redhat.com/show_bug.cgi?id=1102667
  apply_patch_with_msg \
    boost-1.57.0-python-libpython_dep.patch \
    boost-1.57.0-python-abi_letters.patch \
    boost-1.63.0-python-test-PyImport_AppendInittab.patch

  # https://bugzilla.redhat.com/show_bug.cgi?id=1190039
  apply_patch_with_msg \
    boost-1.57.0-build-optflags.patch

  # Use our own build Python
  apply_patch_with_msg \
    using-mingw-w64-python.patch

  apply_patch_with_msg \
    msys2-mingw-folders-bootstrap.patch

  # Fix installation of both Python versions
  apply_patch_with_msg \
    boost-1.70.0-fix-python-install.patch

  apply_patch_with_msg \
    boost-1.81.0-remove-duplicate-UUIDs.patch

  # https://github.com/msys2/MINGW-packages/pull/14790#issuecomment-1519141235
  apply_patch_with_msg \
    0010-cmake-prefer-shared-libs-over-static-on-MINGW.patch
}

setb2args() {
    case ${CARCH} in
    i686|armv7)
      local _model=32
      ;;
    x86_64|aarch64)
      local _model=64
      ;;
    esac

    if check_option "debug" "y"; then
        local variant=debug
    else
        local variant=release
    fi

    # Extract names of ICU libraries from the pkg-config configuration file.
    # Note that the acual order of the libraries in the array is irrelevant.
    # They are all linked in the same way.
    local -a icu_i18n_libs
    local -a icu_uc_libs
    IFS=" " read -r -a icu_i18n_libs <<< "$(pkgconf --libs-only-l icu-i18n)"
    IFS=" " read -r -a icu_uc_libs <<< "$(pkgconf --libs-only-l icu-uc)"
    local -a icu_libs
    icu_libs=("${icu_i18n_libs[@]}" "${icu_uc_libs[@]}")
    local -a icu_libs_unique
    while IFS= read -r -d '' x
    do
        icu_libs_unique+=("$x")
    done < <(printf "%s\0" "${icu_libs[@]}" | sort -uz)
    # Remove -l prefix.
    icu_libs=("${icu_libs_unique[@]/#-l/}")

    b2args="address-model=${_model} \
    link=shared,static \
    pch=off \
    runtime-link=shared \
    threading=multi \
    threadapi=win32 \
    toolset=$_toolset \
    variant=${variant} \
    python=${_pyver} \
    --prefix=${pkgdir}${MINGW_PREFIX} \
    --layout=tagged-1.66 \
    -sHAVE_ICU=1 \
    -sICU_PATH=${MINGW_PREFIX} \
    -sICU_ICUDT_NAME=${icu_libs[0]} \
    -sICU_ICUIN_NAME=${icu_libs[1]} \
    -sICU_ICUUC_NAME=${icu_libs[2]} \
    -sICONV_PATH=${MINGW_PREFIX} \
    -sICONV_LINK=\"-L${MINGW_PREFIX}/lib -liconv\" \
    -sNO_BZIP2 \
    -sBZIP2_BINARY=bz2 \
    -sBZIP2_INCLUDE=${MINGW_PREFIX}/include \
    -sBZIP2_LIBPATH=${MINGW_PREFIX}/lib \
    -sNO_ZLIB \
    -sZLIB_BINARY=z \
    -sZLIB_INCLUDE=${MINGW_PREFIX}/include \
    -sZLIB_LIBPATH=${MINGW_PREFIX}/lib \
    -q"
    if [[ "${CARCH}" == "aarch64" ]]; then
      # boost context does not yet have an implementation for Windows ARM64
      # coroutine and fiber depend on context
      b2args+=" --without-context --without-coroutine --without-fiber"
    fi
}

build() {
  local PREFIX_DEPS=$(cygpath -am ${MINGW_PREFIX})

  [[ -d ${srcdir}/build-${MSYSTEM} ]] && rm -rf ${srcdir}/build-${MSYSTEM}
  cp -rf "${srcdir}/boost_${_boostver}" "${srcdir}/build-${MSYSTEM}"
  cd "${srcdir}/build-${MSYSTEM}"

  local _pyver=$(${MINGW_PREFIX}/bin/python -c "import sys;sys.stdout.write('.'.join(map(str, sys.version_info[:2])))")

  echo "using python : ${_pyver} : ${PREFIX_DEPS}/bin/python.exe : ${PREFIX_DEPS}/include/python${_pyver} : ${PREFIX_DEPS}/lib/python${_pyver}/config-${_pyver} ;" >> ./tools/build/src/user-config.jam
  # configure b2 to use c++ rather than g++, as the latter no longer exists in
  # clang prefixes
  echo "using gcc : : ${PREFIX_DEPS}/bin/c++.exe ;" >> ./tools/build/src/user-config.jam

  ./tools/build/src/engine/build.sh --cxx="${CXX}" gcc
  cp ./tools/build/src/engine/b2 .

  ./bootstrap.sh --with-icu=${MINGW_PREFIX} --with-python=${MINGW_PREFIX} --with-toolset=$_toolset --with-bjam="$(pwd)/b2"

  setb2args
  ./b2 $b2args -d1 -j$(nproc) \
    cflags="$CFLAGS" \
    cxxflags="$CXXFLAGS -Wno-deprecated-declarations -Wno-ignored-attributes -Wno-unused-command-line-argument" \
    linkflags="$LDFLAGS"
}

package() {
  cd "${srcdir}/build-${MSYSTEM}"

  local _pyver=$(${MINGW_PREFIX}/bin/python -c "import sys;sys.stdout.write('.'.join(map(str, sys.version_info[:2])))")

  setb2args
  ./b2 $b2args -d0 install

  mkdir -p ${pkgdir}${MINGW_PREFIX}/bin
  mv ${pkgdir}${MINGW_PREFIX}/lib/*.dll ${pkgdir}${MINGW_PREFIX}/bin

  # install b2 and bjam
  install -Dm755 b2.exe "${pkgdir}${MINGW_PREFIX}"/bin/b2.exe
  cp -rf "${pkgdir}${MINGW_PREFIX}"/bin/b2.exe "${pkgdir}${MINGW_PREFIX}"/bin/bjam.exe
}
