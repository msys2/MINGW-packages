# Maintainer: Alexey Pavlov <alexpux@gmail.com>

_realname=boost
pkgbase=mingw-w64-${_realname}
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
pkgver=1.82.0
pkgrel=2
pkgdesc="Free peer-reviewed portable C++ source libraries (mingw-w64)"
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clang32' 'clangarm64')
url="https://www.boost.org/"
license=('spdx:BSL-1.0')
depends=("${MINGW_PACKAGE_PREFIX}-gcc-libs"
         "${MINGW_PACKAGE_PREFIX}-bzip2"
         "${MINGW_PACKAGE_PREFIX}-icu"
         "${MINGW_PACKAGE_PREFIX}-xz"
         "${MINGW_PACKAGE_PREFIX}-zstd"
         "${MINGW_PACKAGE_PREFIX}-zlib")
optdepends=("${MINGW_PACKAGE_PREFIX}-python: For Boost.Python"
            "${MINGW_PACKAGE_PREFIX}-python-numpy: For Boost.Python (NumPy)")
makedepends=("${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-ninja"
             "${MINGW_PACKAGE_PREFIX}-python"
             "${MINGW_PACKAGE_PREFIX}-python-numpy")
source=(https://github.com/boostorg/boost/releases/download/boost-${pkgver}/boost-${pkgver}.tar.xz
        boost-1.63.0-python-test-PyImport_AppendInittab.patch
        boost-1.81.0-remove-duplicate-UUIDs.patch
        0011-Fix-building-with-cmake-on-MINGW.patch)
sha256sums=('fd60da30be908eff945735ac7d4d9addc7f7725b1ff6fcdcaede5262d511d21e'
            'b22196b6415f5e1c0fe56b49a12ea7c20073b15a5f31907f363c7be38d70d628'
            '09fa9eab0dcbd1a07145a9a5602f20f55f21f0e7b0f031efa1b78e4ab6e6603c'
            '790854f29a177a9636d1b06b7194272fe9c9e1132867c8e6320d579df5efcac1')

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying ${_patch}"
    patch -Nbp1 -i "${srcdir}/${_patch}"
  done
}

prepare() {
  cd "${srcdir}/boost-${pkgver}"

  # https://bugzilla.redhat.com/show_bug.cgi?id=1102667
  apply_patch_with_msg \
    boost-1.63.0-python-test-PyImport_AppendInittab.patch

  apply_patch_with_msg \
    boost-1.81.0-remove-duplicate-UUIDs.patch

  apply_patch_with_msg \
    0011-Fix-building-with-cmake-on-MINGW.patch
}

build() {
  mkdir -p "${srcdir}"/build-${MSYSTEM} && cd "${srcdir}"/build-${MSYSTEM}

  declare -a _extra_config
  if check_option "debug" "n"; then
    _extra_config+=("-DCMAKE_BUILD_TYPE=Release")
  else
    _extra_config+=("-DCMAKE_BUILD_TYPE=Debug")
  fi

  if [[ "${CARCH}" == "aarch64" ]]; then
    # boost context does not yet have an implementation for Windows ARM64
    # coroutine and fiber depend on context
    _extra_config+=('-DBOOST_EXCLUDE_LIBRARIES="context;coroutine;fiber"')
  fi

  CXXFLAGS+=" -Wno-deprecated-declarations -Wno-ignored-attributes -Wno-unused-command-line-argument" \
  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
    ${MINGW_PREFIX}/bin/cmake.exe \
      -G'Ninja' \
      -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
      "${extra_config[@]}" \
      -DBUILD_SHARED_LIBS="ON" \
      -DBOOST_INSTALL_LAYOUT=system \
      -DBOOST_ENABLE_PYTHON=ON \
      -DPython_EXECUTABLE=${MINGW_PREFIX}/bin/python \
      ../boost-${pkgver}

  ${MINGW_PREFIX}/bin/cmake --build .
}

package() {
  cd "${srcdir}"/build-${MSYSTEM}
  DESTDIR="${pkgdir}" ${MINGW_PREFIX}/bin/cmake.exe --install .
}
