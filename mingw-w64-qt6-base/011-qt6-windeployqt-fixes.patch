--- a/src/tools/windeployqt/main.cpp
+++ b/src/tools/windeployqt/main.cpp
@@ -557,9 +557,6 @@
     options->quickImports = !parser->isSet(noQuickImportOption);
 
     // default to deployment of compiler runtime for windows desktop configurations
-    if (options->platform == WindowsDesktopMinGW || options->platform.testFlags(WindowsDesktopMsvc)
-            || parser->isSet(compilerRunTimeOption))
-        options->compilerRunTime = true;
     if (parser->isSet(noCompilerRunTimeOption))
         options->compilerRunTime = false;
 
@@ -1301,7 +1301,7 @@
     QStringList result;
     switch (platform) {
     case WindowsDesktopMinGW: {
-        const QStringList minGWRuntimes = { "*gcc_"_L1, "*stdc++"_L1, "*winpthread"_L1 };
+        const QStringList minGWRuntimes = { "*gcc_s_"_L1, "*stdc++"_L1, "*winpthread"_L1 };
         result.append(findMinGWRuntimePaths(qtBinDir, platform, minGWRuntimes));
         break;
     }
@@ -1479,7 +1476,7 @@
         *errorMessage = QDir::toNativeSeparators(options.binaries.first()) +  QStringLiteral(" does not seem to be a Qt executable.");
         return result;
     }
-
+#if 0
     // Some Windows-specific checks: Qt5Core depends on ICU when configured with "-icu". Other than
     // that, Qt5WebKit has a hard dependency on ICU.
     if (options.platform.testFlag(WindowsBased))  {
@@ -1519,7 +1516,7 @@
             } // !icuLibs.isEmpty()
         } // Qt6Core/Qt6WebKit
     } // Windows
-
+#endif
     // Scan Quick2 imports
     QmlImportScanResult qmlScanResult;
     if (options.quickImports && usesQml2) {
--- a/src/tools/windeployqt/utils.cpp.orig	Thu Jul  6 12:02:03 2023
+++ b/src/tools/windeployqt/utils.cpp	Mon Aug  7 19:27:50 2023
@@ -101,12 +101,12 @@
     const QFileInfoList &dlls = directory.entryInfoList(QStringList(nameFilter), QDir::Files);
     for (const QFileInfo &dllFi : dlls) {
         const QString dllPath = dllFi.absoluteFilePath();
+        bool isMinGW = platform == WindowsDesktopMinGW || platform == WindowsDesktopClangMinGW;
         bool matches = true;
         if (debugMatchMode != MatchDebugOrRelease && (platform & WindowsBased)) {
             bool debugDll;
-            if (readPeExecutable(dllPath, &errorMessage, 0, 0, &debugDll,
-                                 (platform == WindowsDesktopMinGW))) {
-                matches = debugDll == (debugMatchMode == MatchDebug);
+            if (readPeExecutable(dllPath, &errorMessage, 0, 0, &debugDll, isMinGW)) {
+                matches = debugDll == (debugMatchMode == MatchDebug) || isMinGW;
             } else {
                 std::wcerr << "Warning: Unable to read " << QDir::toNativeSeparators(dllPath)
                            << ": " << errorMessage;
