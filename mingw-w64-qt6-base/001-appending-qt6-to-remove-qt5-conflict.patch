--- a/qmake/CMakeLists.txt
+++ b/qmake/CMakeLists.txt
@@ -58,7 +58,6 @@
     TRY_RUN
     TOOLS_TARGET Core
     USER_FACING
-    INSTALL_VERSIONED_LINK
     SOURCES
         cachekeys.h
         generators/mac/pbuilder_pbx.cpp generators/mac/pbuilder_pbx.h
@@ -145,3 +144,7 @@
 qt_internal_add_docs(${target_name}
     doc/qmake.qdocconf
 )
+
+set_target_properties(${target_name} PROPERTIES
+    OUTPUT_NAME qmake-qt6
+)
--- a/src/tools/qtpaths/CMakeLists.txt
+++ b/src/tools/qtpaths/CMakeLists.txt
@@ -10,7 +10,6 @@
     TRY_RUN
     TARGET_DESCRIPTION "Qt tool that provides the standard paths of the Qt framework"
     TOOLS_TARGET Core
-    INSTALL_VERSIONED_LINK
     SOURCES
         qtpaths.cpp
     DEFINES
@@ -31,3 +30,7 @@
         WIN32_EXECUTABLE FALSE
     )
 endif()
+
+set_target_properties(${target_name} PROPERTIES
+    OUTPUT_NAME qtpaths-qt6
+)
--- a/src/tools/qdbuscpp2xml/CMakeLists.txt
+++ b/src/tools/qdbuscpp2xml/CMakeLists.txt
@@ -34,3 +34,7 @@
         Qt::DBusPrivate
 )
 qt_internal_return_unless_building_tools()
+
+set_target_properties(${target_name} PROPERTIES
+    OUTPUT_NAME qdbuscpp2xml-qt6
+)
--- a/src/tools/qdbusxml2cpp/CMakeLists.txt
+++ b/src/tools/qdbusxml2cpp/CMakeLists.txt
@@ -20,3 +20,7 @@
         Qt::DBusPrivate
 )
 qt_internal_return_unless_building_tools()
+
+set_target_properties(${target_name} PROPERTIES
+    OUTPUT_NAME qdbusxml2cpp-qt6
+)
--- a/src/tools/windeployqt/CMakeLists.txt
+++ b/src/tools/windeployqt/CMakeLists.txt
@@ -9,7 +9,6 @@
 qt_internal_add_tool(${target_name}
     TOOLS_TARGET Core
     USER_FACING
-    INSTALL_VERSIONED_LINK
     TARGET_DESCRIPTION "Qt Windows Deployment Tool"
     SOURCES
         qmlutils.cpp qmlutils.h
@@ -30,3 +29,7 @@
     PUBLIC_LIBRARIES
         shlwapi
 )
+
+set_target_properties(${target_name} PROPERTIES
+    OUTPUT_NAME "windeployqt-qt6"
+)
--- a/src/tools/windeployqt/utils.cpp
--- b/src/tools/windeployqt/utils.cpp
@@ -422,7 +422,7 @@
 
 QMap<QString, QString> queryQtPaths(const QString &qtpathsBinary, QString *errorMessage)
 {
-    const QString binary = !qtpathsBinary.isEmpty() ? qtpathsBinary : QStringLiteral("qtpaths");
+    const QString binary = !qtpathsBinary.isEmpty() ? qtpathsBinary : QStringLiteral("qtpaths6");
     const QString colonSpace = QStringLiteral(": ");
     QByteArray stdOut;
     QByteArray stdErr;
--- a/src/tools/windeployqt/main.cpp
--- b/src/tools/windeployqt/main.cpp
@@ -1109,7 +1109,7 @@
     // Run lconvert to concatenate all files into a single named "qt_<prefix>.qm" in the application folder
     // Use QT_INSTALL_TRANSLATIONS as working directory to keep the command line short.
     const QString absoluteTarget = QFileInfo(target).absoluteFilePath();
-    const QString binary = QStringLiteral("lconvert");
+    const QString binary = QStringLiteral("lconvert-qt6");
     QStringList arguments;
     for (const QString &prefix : std::as_const(prefixes)) {
         arguments.clear();
--- a/src/corelib/Qt6CoreMacros.cmake.old	Sun Aug  6 12:22:24 2023
+++ b/src/corelib/Qt6CoreMacros.cmake	Sun Aug  6 12:22:40 2023
@@ -2622,7 +2622,7 @@
             "$<TARGET_FILE:$<IF:${have_deploy_tool},${target_if_exists},${target}>>")
         set(__QT_DEPLOY_TOOL "$<IF:${have_deploy_tool},${safe_target_file},${fallback}>")
     elseif(WIN32)
-        find_program(WINDEPLOYQT_EXECUTABLE windeployqt
+        find_program(WINDEPLOYQT_EXECUTABLE windeployqt-qt6
             ${find_program_hints})
         set(fallback "$<$<BOOL:${WINDEPLOYQT_EXECUTABLE}>:${WINDEPLOYQT_EXECUTABLE}>")
         set(target_if_exists "$<TARGET_NAME_IF_EXISTS:${QT_CMAKE_EXPORT_NAMESPACE}::windeployqt>")
