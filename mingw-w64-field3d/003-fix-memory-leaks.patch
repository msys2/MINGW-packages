From c2221b81d14960dabaa8e1b27a61e2db588d5fbc Mon Sep 17 00:00:00 2001
From: Morten Bojsen-Hansen <morten@alas.dk>
Date: Wed, 21 Mar 2018 13:37:58 +0100
Subject: [PATCH] Fix memory leaks in static variable pointers.

---
 export/ClassFactory.h | 3 ++-
 export/FieldCache.h   | 7 ++++---
 export/SparseFile.h   | 3 ++-
 src/ClassFactory.cpp  | 7 ++++---
 src/FieldCache.cpp    | 2 +-
 src/SparseFile.cpp    | 6 +++---
 6 files changed, 16 insertions(+), 12 deletions(-)

diff --git a/export/ClassFactory.h b/export/ClassFactory.h
index db08bbe..744a2e8 100644
--- a/export/ClassFactory.h
+++ b/export/ClassFactory.h
@@ -44,6 +44,7 @@
 #ifndef _INCLUDED_Field3D_ClassFactory_H_
 #define _INCLUDED_Field3D_ClassFactory_H_
 
+#include <boost/scoped_ptr.hpp>
 #include <map>
 #include <vector>
 
@@ -161,7 +162,7 @@ class FIELD3D_API ClassFactory
   NameVec m_fieldMappingIONames;
 
   //! Pointer to static instance
-  static ClassFactory *ms_instance;
+  static boost::scoped_ptr<ClassFactory> ms_instance;
 
 };
 
diff --git a/export/FieldCache.h b/export/FieldCache.h
index 34913cf..cecfd72 100644
--- a/export/FieldCache.h
+++ b/export/FieldCache.h
@@ -46,6 +46,7 @@
 
 //----------------------------------------------------------------------------//
 
+#include <boost/scoped_ptr.hpp>
 #include <boost/thread/mutex.hpp>
 #include <boost/foreach.hpp>
 
@@ -119,7 +120,7 @@ class FieldCache
   //! The cache itself. Maps a 'key' to a weak pointer and a raw pointer.
   Cache m_cache;
   //! The singleton instance
-  static FieldCache *ms_singleton;
+  static boost::scoped_ptr<FieldCache> ms_singleton;
   //! Mutex to prevent multiple allocaation of the singleton
   static boost::mutex ms_creationMutex;
   //! Mutex to prevent reading from and writing to the cache concurrently.
@@ -134,8 +135,8 @@ template <typename Data_T>
 FieldCache<Data_T>& FieldCache<Data_T>::singleton()
 {
   boost::mutex::scoped_lock lock(ms_creationMutex);
-  if (!ms_singleton) {
-    ms_singleton = new FieldCache;
+  if (ms_singleton.get() == NULL) {
+    ms_singleton.reset(new FieldCache);
   }
   return *ms_singleton;
 }
diff --git a/export/SparseFile.h b/export/SparseFile.h
index 9a12b39..44f0b68 100644
--- a/export/SparseFile.h
+++ b/export/SparseFile.h
@@ -46,6 +46,7 @@
 
 //----------------------------------------------------------------------------//
 
+#include <boost/scoped_ptr.hpp>
 #include <deque>
 #include <list>
 #include <vector>
@@ -494,7 +495,7 @@ class FIELD3D_API SparseFileManager
   SparseFileManager();
 
   //! Pointer to singleton
-  static SparseFileManager *ms_singleton;
+  static boost::scoped_ptr<SparseFileManager> ms_singleton;
 
   //! Adds the newly loaded block to the cache, managed by the paging algorithm
   void addBlockToCache(DataTypeEnum blockType, int fileId, int blockIdx);
diff --git a/src/ClassFactory.cpp b/src/ClassFactory.cpp
index e231f35..8debdc0 100644
--- a/src/ClassFactory.cpp
+++ b/src/ClassFactory.cpp
@@ -56,7 +56,7 @@ FIELD3D_NAMESPACE_OPEN
 // Static instances
 //----------------------------------------------------------------------------//
 
-ClassFactory* ClassFactory::ms_instance = NULL;
+boost::scoped_ptr<ClassFactory> ClassFactory::ms_instance;
 
 //----------------------------------------------------------------------------//
 // ClassFactory implementations
@@ -277,8 +277,9 @@ ClassFactory::createFieldMappingIO(const std::string &className) const
 ClassFactory& 
 ClassFactory::singleton()
 { 
-  if (!ms_instance)
-    ms_instance = new ClassFactory;
+  if (ms_instance.get() == NULL) {
+    ms_instance.reset(new ClassFactory);
+  }
   return *ms_instance;
 }
 
diff --git a/src/FieldCache.cpp b/src/FieldCache.cpp
index d9f30f9..a479e09 100644
--- a/src/FieldCache.cpp
+++ b/src/FieldCache.cpp
@@ -58,7 +58,7 @@ boost::mutex FieldCache<Data_T>::ms_creationMutex;
 template <typename Data_T>
 boost::mutex FieldCache<Data_T>::ms_accessMutex;
 template <typename Data_T>
-FieldCache<Data_T>* FieldCache<Data_T>::ms_singleton;
+boost::scoped_ptr<FieldCache<Data_T> > FieldCache<Data_T>::ms_singleton;
 
 template class FieldCache<half>;
 template class FieldCache<float>;
diff --git a/src/SparseFile.cpp b/src/SparseFile.cpp
index 7b4ec99..4110a0e 100644
--- a/src/SparseFile.cpp
+++ b/src/SparseFile.cpp
@@ -57,7 +57,7 @@ FIELD3D_NAMESPACE_OPEN
 // Static instances
 //----------------------------------------------------------------------------//
 
-SparseFileManager *SparseFileManager::ms_singleton = 0;
+boost::scoped_ptr<SparseFileManager> SparseFileManager::ms_singleton;
 
 //----------------------------------------------------------------------------//
 // SparseFileManager
@@ -65,8 +65,8 @@ SparseFileManager *SparseFileManager::ms_singleton = 0;
 
 SparseFileManager & SparseFileManager::singleton()
 { 
-  if (!ms_singleton) {
-    ms_singleton = new SparseFileManager;
+  if (ms_singleton.get() == NULL) {
+    ms_singleton.reset(new SparseFileManager);
   }
   return *ms_singleton;
 }
