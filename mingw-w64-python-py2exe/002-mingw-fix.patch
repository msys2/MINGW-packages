diff --git a/py2exe/hooks.py b/py2exe/hooks.py
index e02c1f4..31e66b4 100644
--- a/py2exe/hooks.py
+++ b/py2exe/hooks.py
@@ -18,6 +18,7 @@ _curses
 _dummy_threading
 _emx_link
 _gestalt
+_posixshmem
 _posixsubprocess
 ce
 clr
@@ -29,6 +30,7 @@ org
 os2
 posix
 pwd
+resource
 site
 termios
 vms_lib
diff --git a/py2exe/runtime.py b/py2exe/runtime.py
index c7de608..bfe99c0 100755
--- a/py2exe/runtime.py
+++ b/py2exe/runtime.py
@@ -3,7 +3,6 @@
 import pkg_resources
 from .dllfinder import Scanner, pydll
 
-import imp
 import io
 import logging
 import marshal
@@ -307,11 +306,11 @@ class Runtime(object):
     def get_runstub_bytes(self, target):
         from sysconfig import get_platform
         if target.exe_type in ("console_exe", "service"):
-            run_stub = 'run%s-py%s.%s-%s.exe' % (RUNTIME_SUFFIX, sys.version_info[0], sys.version_info[1], get_platform())
+            run_stub = 'run%s-py%s%s-%s.exe' % (RUNTIME_SUFFIX, sys.version_info[0], sys.version_info[1], get_platform())
         elif target.exe_type == "windows_exe":
-            run_stub = 'run_w%s-py%s.%s-%s.exe' % (RUNTIME_SUFFIX, sys.version_info[0], sys.version_info[1], get_platform())
+            run_stub = 'run_w%s-py%s%s-%s.exe' % (RUNTIME_SUFFIX, sys.version_info[0], sys.version_info[1], get_platform())
         elif target.exe_type == "ctypes_comdll":
-            run_stub = 'run_ctypes_dll%s-py%s.%s-%s.dll' % (RUNTIME_SUFFIX, sys.version_info[0], sys.version_info[1], get_platform())
+            run_stub = 'run_ctypes_dll%s-py%s%s-%s.dll' % (RUNTIME_SUFFIX, sys.version_info[0], sys.version_info[1], get_platform())
         else:
             raise ValueError("Unknown exe_type %r" % target.exe_type)
         ## if self.options.verbose:
diff --git a/source/python-dynload.c b/source/python-dynload.c
index ccc1817..d20c892 100644
--- a/source/python-dynload.c
+++ b/source/python-dynload.c
@@ -31,7 +31,7 @@ static HMODULE hmod_pydll;
 
 #define FUNC(res, name, args) \
   static res(*proc)args; \
-  if (!proc) (FARPROC)proc = MyGetProcAddress(hmod_pydll, #name)
+  if (!proc) proc = (res(*)args)MyGetProcAddress(hmod_pydll, #name)
 
 #define DATA(type, name)				\
   static type pflag; \
@@ -261,7 +261,7 @@ int PyArg_ParseTuple(PyObject *args, const char *format, ...)
   va_start(marker, format);
   result = proc(args, format, marker);
   va_end(marker);
-  return -1;
+  return result;
 }
 
 PyObject *PyUnicode_FromFormat(const char *format, ...)
@@ -434,13 +434,13 @@ void Py_ExitStatusException(PyStatus status)
 
 int PyStatus_Exception(PyStatus status)
 {
-  FUNC(int, PyStatus_Exception, (status));
+  FUNC(int, PyStatus_Exception, (PyStatus));
   return proc(status);
 }
 
 int PyStatus_IsExit(PyStatus status)
 {
-  FUNC(int, PyStatus_IsExit, (status));
+  FUNC(int, PyStatus_IsExit, (PyStatus));
   return proc(status);
 }
 
diff --git a/source/run.c b/source/run.c
index 3cb9abb..5da2ab4 100644
--- a/source/run.c
+++ b/source/run.c
@@ -42,7 +42,7 @@ void SystemError(int error, char *msg)
 			0,
 			NULL
 			);
-		strncpy(Buffer, lpMsgBuf, sizeof(Buffer));
+		strncpy(Buffer, lpMsgBuf, sizeof(Buffer) - 1);
 		LocalFree(lpMsgBuf);
 		fprintf(stderr, Buffer);
 	}
diff --git a/source/run_ctypes_dll.c b/source/run_ctypes_dll.c
index 91b78f9..cede64f 100644
--- a/source/run_ctypes_dll.c
+++ b/source/run_ctypes_dll.c
@@ -65,7 +65,7 @@ void SystemError(int error, char *msg)
 			0,
 			NULL 
 			);
-		strncpy(Buffer, lpMsgBuf, sizeof(Buffer));
+		strncpy(Buffer, lpMsgBuf, sizeof(Buffer) - 1);
 		LocalFree(lpMsgBuf);
 	} else
 		Buffer[0] = '\0';
diff --git a/source/run_w.c b/source/run_w.c
index b3f8389..6aaa054 100644
--- a/source/run_w.c
+++ b/source/run_w.c
@@ -41,7 +41,7 @@ void SystemError(int error, char *msg)
 			0,
 			NULL
 			);
-		strncpy(Buffer, lpMsgBuf, sizeof(Buffer));
+		strncpy(Buffer, lpMsgBuf, sizeof(Buffer) - 1);
 		LocalFree(lpMsgBuf);
 	} else
 		Buffer[0] = '\0';
diff --git a/source/start.c b/source/start.c
index 0bc843b..70c0eac 100644
--- a/source/start.c
+++ b/source/start.c
@@ -128,7 +128,8 @@ BOOL locate_script(HMODULE hmod)
 		SystemError(GetLastError(), "Could not load script resource:");
 		return FALSE;
 	}
-	p_script_info = (struct scriptinfo *)pScript = LockResource(hgbl);
+	struct scriptinfo *pScript;
+	p_script_info = pScript = LockResource(hgbl);
 	if (!pScript)  {
 		SystemError(GetLastError(), "Could not lock script resource:");
 		return FALSE;
@@ -142,7 +143,7 @@ BOOL locate_script(HMODULE hmod)
 	}
 
 	// let pScript point to the start of the python script resource
-	pScript = p_script_info->zippath + strlen(p_script_info->zippath) + 1;
+	pScript = (struct scriptinfo *)p_script_info->zippath + strlen(p_script_info->zippath) + 1;
 
 	// get full pathname of the 'library.zip' file
 	if (p_script_info->zippath[0]) {
@@ -307,8 +308,8 @@ int init_with_instance(HMODULE hmod_exe, char *frozen, int argc, wchar_t **argv)
 	int rc = 0;
 	HMODULE hmod_pydll;
 
-/*	Py_NoSiteFlag = 1; /* Suppress 'import site' */
-/*	Py_InspectFlag = 1; /* Needed to determine whether to exit at SystemExit */
+//	Py_NoSiteFlag = 1; /* Suppress 'import site' */
+//	Py_InspectFlag = 1; /* Needed to determine whether to exit at SystemExit */
 
 	calc_dirname(hmod_exe);
 //	wprintf(L"modulename %s\n", modulename);
