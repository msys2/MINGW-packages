--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -50,8 +50,9 @@
 elseif (WIN32)
     set(DEPENDENCIES acceleratedcryptographichash.cpp dependencies/mountutils/src/windows/functions.cpp dependencies/drivelist/src/windows/list.cpp
         windows/winfile.cpp windows/winfile.h windows/winwlancredentials.h windows/winwlancredentials.cpp
-        windows/rpi-imager.rc wlanapi_delayed.lib)
-    set(EXTRALIBS setupapi ${CMAKE_CURRENT_BINARY_DIR}/wlanapi_delayed.lib)
+        windows/rpi-imager.rc)
+    set(EXTRALIBS setupapi wlanapi)
+    if(MSVC)
     add_custom_command(
         OUTPUT wlanapi_delayed.lib
         COMMAND ${CMAKE_DLLTOOL} --input-def "${CMAKE_CURRENT_SOURCE_DIR}/windows/wlanapi.def"
@@ -59,6 +60,7 @@ elseif (WIN32)
         DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/windows/wlanapi.def
         VERBATIM
     )
+    endif(MSVC)
 endif()
 
 include_directories(BEFORE .)
@@ -171,17 +173,29 @@
 
     find_package(OpenSSL REQUIRED)
 
+    find_package(ZLIB REQUIRED)
+    if(ZLIB_FOUND)
+        set(EXTRALIBS ${EXTRALIBS} ZLIB::ZLIB)
+    else()
     # Bundled zlib
     add_subdirectory(dependencies/zlib-1.2.13)
     set(ZLIB_LIBRARY zlibstatic)
     set(ZLIB_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/dependencies/zlib-1.2.13 CACHE PATH "zlib include dir")
+    endif()
 
+    find_package(CURL REQUIRED)
+    if(NOT CURL_FOUND)
     # Bundled libcurl
     set(CMAKE_CURL_INCLUDES)
     set(CURL_LIBRARIES cmcurl)
     add_subdirectory(dependencies/cmcurl)
     set(CURL_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/dependencies/cmcurl/include)
+    endif()
 
+    find_package(LibLZMA REQUIRED)
+    if(LIBLZMA_FOUND)
+        set(EXTRALIBS ${EXTRALIBS} LibLZMA::LibLZMA)
+    else()
     # Bundled liblzma
     add_subdirectory(dependencies/cmliblzma)
     set(LIBLZMA_HAS_AUTO_DECODER 1)
@@ -189,14 +203,22 @@
     set(LIBLZMA_HAS_LZMA_PRESET 1)
     set(LIBLZMA_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/dependencies/cmliblzma/liblzma/api)
     set(LIBLZMA_LIBRARY cmliblzma)
+    endif()
 
+    find_package(zstd REQUIRED)
+    if(zstd_FOUND)
+        set(EXTRALIBS ${EXTRALIBS} zstd::libzstd_shared)
+    else()
     # Bundled zstd
     set(ZSTD_BUILD_PROGRAMS OFF)
     set(ZSTD_BUILD_SHARED OFF)
     add_subdirectory(dependencies/zstd-1.5.4/build/cmake)
     set(ZSTD_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/dependencies/zstd-1.5.4/lib CACHE PATH "zstd include dir")
     set(ZSTD_LIBRARY libzstd_static)
+    endif()
 
+    find_package(LibArchive REQUIRED)
+    if(NOT LibArchive_FOUND)
     # Bundled libarchive
     set(ENABLE_TEST OFF CACHE BOOL "")
     set(ENABLE_TAR OFF CACHE BOOL "")
@@ -207,11 +229,13 @@
     set_target_properties(archive PROPERTIES EXCLUDE_FROM_ALL 1)
     set(LibArchive_LIBRARIES archive_static)
     set(LibArchive_INCLUDE_DIR dependencies/libarchive-3.6.2/libarchive)
+    endif()
 
     # Bundled fat32format
     add_subdirectory(dependencies/fat32format)
     add_dependencies(${PROJECT_NAME} fat32format)
 
+    if(MSVC)
     # Strip debug symbols
     add_custom_command(TARGET ${PROJECT_NAME}
         POST_BUILD
@@ -271,6 +295,7 @@
             "${CMAKE_BINARY_DIR}/deploy/imageformats/qtiff.dll"
             "${CMAKE_BINARY_DIR}/deploy/imageformats/qwebp.dll"
             "${CMAKE_BINARY_DIR}/deploy/imageformats/qgif.dll")
+    endif(MSVC)
 
 elseif(APPLE)
     find_package(ZLIB REQUIRED)
