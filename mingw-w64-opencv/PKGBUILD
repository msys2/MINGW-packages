# Maintainer: Alexey Pavlov <alexpux@gmail.com>

_realname=opencv
pkgbase=mingw-w64-${_realname}
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
pkgver=4.6.0
pkgrel=1
pkgdesc="Open Source Computer Vision Library (mingw-w64)"
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clang32' 'clangarm64')
url="https://opencv.org/"
license=("BSD")
depends=(#"${MINGW_PACKAGE_PREFIX}-gst-plugins-base
         "${MINGW_PACKAGE_PREFIX}-ceres-solver"
         "${MINGW_PACKAGE_PREFIX}-ffmpeg"
         "${MINGW_PACKAGE_PREFIX}-freetype"
         "${MINGW_PACKAGE_PREFIX}-gflags"
         "${MINGW_PACKAGE_PREFIX}-glog"
         "${MINGW_PACKAGE_PREFIX}-harfbuzz"
         "${MINGW_PACKAGE_PREFIX}-hdf5"
         "${MINGW_PACKAGE_PREFIX}-intel-tbb"
         "${MINGW_PACKAGE_PREFIX}-jasper"
         "${MINGW_PACKAGE_PREFIX}-libiconv"
         "${MINGW_PACKAGE_PREFIX}-libjpeg"
         "${MINGW_PACKAGE_PREFIX}-libpng"
         "${MINGW_PACKAGE_PREFIX}-libtiff"
         "${MINGW_PACKAGE_PREFIX}-libwebp"
         "${MINGW_PACKAGE_PREFIX}-ogre3d"
         "${MINGW_PACKAGE_PREFIX}-openblas"
         "${MINGW_PACKAGE_PREFIX}-openjpeg2"
         "${MINGW_PACKAGE_PREFIX}-openexr"
         "${MINGW_PACKAGE_PREFIX}-protobuf"
         "${MINGW_PACKAGE_PREFIX}-tesseract-ocr"
         "${MINGW_PACKAGE_PREFIX}-zlib"
         #"${MINGW_PACKAGE_PREFIX}-gtkglext"
         )
makedepends=("${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-ninja"
             "${MINGW_PACKAGE_PREFIX}-cereal"
             "${MINGW_PACKAGE_PREFIX}-python-numpy"
             "${MINGW_PACKAGE_PREFIX}-python-flake8"
             "${MINGW_PACKAGE_PREFIX}-python-pylint"
             "${MINGW_PACKAGE_PREFIX}-qt5-base"
             "${MINGW_PACKAGE_PREFIX}-tiny-dnn"
             "${MINGW_PACKAGE_PREFIX}-vtk"
            )
optdepends=("${MINGW_PACKAGE_PREFIX}-python-numpy: Python 3.x interface"
            "${MINGW_PACKAGE_PREFIX}-qt5-base: for the HighGUI module"
            "${MINGW_PACKAGE_PREFIX}-vtk: opencv_viz module"
            )
source=("${_realname}-${pkgver}.tar.gz"::https://github.com/opencv/opencv/archive/${pkgver}.tar.gz
        "${_realname}_contrib-${pkgver}.tar.gz"::https://github.com/opencv/opencv_contrib/archive/${pkgver}.tar.gz
        https://github.com/opencv/opencv_contrib/commit/57db17eca22d72ebe8ddc1f26e6adc2c421a9611.patch
        https://github.com/opencv/opencv_contrib/commit/e182fc8675a167044b129a3bdf3c4ad2d3399f68.patch
        '0001-mingw-w64-cmake.patch'
        '0002-solve_deg3-underflow.patch'
        '0004-generate-proper-pkg-config-file.patch'
        '0008-mingw-w64-cmake-lib-path.patch'
        '0010-find-libpng-header.patch'
        '0012-make-header-usable-with-C-compiler.patch'
        '0014-python-install-path.patch'
        '0015-windres-cant-handle-spaces-in-defines.patch'
        '0016-use-pkgconfig-and-link-pthread.patch'
        '0018-aarch64-fp16-mingw.patch'
        '0101-somehow-uint-not-detected.patch'
        '0102-mingw-w64-have-sincos.patch'
        '0104-rgbd-module-missing-include.patch'
        '0105-wechat-iconv-dependency.patch')
sha256sums=('1ec1cba65f9f20fe5a41fda1586e01c70ea0c9a6d7b67c9e13edf0cfe2239277'
            '1777d5fd2b59029cf537e5fd6f8aa68d707075822f90bde683fcde086f85f7a7'
            'd64b7d35a2cb630237d21b40561a7afb04da754e11b84806c22f9c2725a36f07'
            '06b158abc07004b336dfd73fef33fb7433911cffdfef7e2014652e9105131e92'
            '8a4053bcecb4c4781a4d87c74eb1cd3f03ad9288deaa22424f71a5e5cdc518c3'
            '400f17bde074677566660b1baab52842c1a3d7024129a2d75af6015f6b55ba4f'
            'fcb3a4a469b09475dc2dad0c49bcaade8b80aa155eeaf0645398a77cd8c940cc'
            '7398e66f80be37382bd427b5eb3a1201a23113c14e71435a44df8779ea1b8a34'
            'd6ad5a0865eefe662ca4c7aceb6aa7b1fd5fcd27e1e65ca839d442f054095e69'
            '9f918a974e9d5227fce3702b1f38716a7fb79586dda9256b5df44dcc0f858c3b'
            '0c310a580d6700601d4b4f824b849c0f0d64d3953e249f04c6a91f15aa8bee0a'
            '11522ffedb22980ba8d09ff715a25327fe14806e55588bffa761e39e1d035ea5'
            '4b0b9ee5f93e3c26397badf6b296a674b8f115129520a845d9f50d77d2c086d7'
            'cedb7593a377eb9e40c72762e79b2af56415ec410309ae8ff698557fe3f953f5'
            '7d2ff25f97c84b59793502786dd64e25c8ca991b0523ffea56b45ce031e80c3f'
            '2001804c5245af1894a308d6521f9cd044fb6dbd713b6e2e45106399a409c14d'
            'c6c92cf39dfe45b8fb41d80ac0de3cd304e8b695420b307fd4320a105d8fe9f4'
            '3cf6a17b234ddf4f20e042acce329823e970aa06873d63652fa132c46ee56739')

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying ${_patch}"
    patch -Nbp1 -i "${srcdir}/${_patch}"
  done
}

del_file_exists() {
  for _fname in "$@"
  do
    if [ -f ${_fname} ]; then
      rm -rf ${_fname}
    fi
  done
}
# =========================================== #

prepare() {
  cd "${srcdir}/${_realname}-${pkgver}"
  apply_patch_with_msg \
        0001-mingw-w64-cmake.patch \
        0002-solve_deg3-underflow.patch \
        0004-generate-proper-pkg-config-file.patch \
        0008-mingw-w64-cmake-lib-path.patch \
        0010-find-libpng-header.patch \
        0012-make-header-usable-with-C-compiler.patch \
        0014-python-install-path.patch \
        0015-windres-cant-handle-spaces-in-defines.patch \
        0016-use-pkgconfig-and-link-pthread.patch \
        0018-aarch64-fp16-mingw.patch

  cd "${srcdir}/${_realname}_contrib-${pkgver}"
  apply_patch_with_msg \
        0101-somehow-uint-not-detected.patch \
        0102-mingw-w64-have-sincos.patch \
        0104-rgbd-module-missing-include.patch \
        0105-wechat-iconv-dependency.patch \
        57db17eca22d72ebe8ddc1f26e6adc2c421a9611.patch \
        e182fc8675a167044b129a3bdf3c4ad2d3399f68.patch
}

build() {
  [[ -d ${srcdir}/build-${MSYSTEM} ]] && rm -rf ${srcdir}/build-${MSYSTEM}
  mkdir -p ${srcdir}/build-${MSYSTEM} && cd ${srcdir}/build-${MSYSTEM}

  CFLAGS+=" -D_POSIX_SOURCE -Wno-attributes"
  CXXFLAGS+=" -D_POSIX_SOURCE -Wno-attributes"

  export OpenEXR_HOME=${MINGW_PREFIX}
  export OpenBLAS_HOME=${MINGW_PREFIX}
  export TINYDNN_ROOT=${MINGW_PREFIX}/include/tiny_dnn

  local -a extra_config
  if check_option "debug" "n"; then
    extra_config+=("-DCMAKE_BUILD_TYPE=Release")
  else
    extra_config+=("-DCMAKE_BUILD_TYPE=Debug")
  fi

  if [ ${MSYSTEM} == "CLANG64" ]; then
    extra_config+=("-DCPU_DISPATCH=SSE4_1;SSE4_2;AVX;FP16;AVX2")
  fi

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=;-DPYTHON2_PACKAGES_PATH=;-DPYTHON3_PACKAGES_PATH=" \
  ${MINGW_PREFIX}/bin/cmake.exe -Wno-dev \
    -G"Ninja" \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    -DCMAKE_SKIP_RPATH=ON \
    -DINSTALL_C_EXAMPLES=OFF \
    -DINSTALL_PYTHON_EXAMPLES=OFF \
    -DBUILD_WITH_DEBUG_INFO=OFF \
    -DBUILD_DOCS=OFF \
    -DBUILD_TESTS=OFF \
    -DBUILD_PERF_TESTS=OFF \
    -DBUILD_PROTOBUF=OFF \
    -DBUILD_EXAMPLES=OFF \
    -DBUILD_JAVA=OFF \
    -DBUILD_opencv_python3=ON \
    -DBUILD_opencv_bioinspired=OFF \
    -DBUILD_opencv_python2=OFF \
    -DWITH_TBB=ON \
    -DWITH_FFMPEG=ON \
    -DWITH_FREETYPE=ON \
    -DWITH_OPENCL=ON \
    -DWITH_OPENGL=ON \
    -DWITH_OPENJPEG=ON \
    -DWITH_QT=ON \
    -DWITH_VTK=ON \
    -DWITH_GDAL=OFF \
    -DWITH_GSTREAMER=OFF \
    -DWITH_GTK=OFF \
    -DWITH_MSMF=OFF \
    -DWITH_OPENCL_D3D11_NV=OFF \
    -DWITH_XINE=OFF \
    -DOPENCV_EXTRA_MODULES_PATH=../${_realname}_contrib-${pkgver}/modules \
    -DOPENCV_PYTHON3_VERSION=$(${MINGW_PREFIX}/bin/python -c "import sys;sys.stdout.write('.'.join(map(str, sys.version_info[:2])))") \
    -DOPENCV_SKIP_PYTHON_LOADER=ON \
    -DOPENCV_GENERATE_PKGCONFIG=ON \
    -DOPENCV_PYTHON_INSTALL_PATH=lib \
    -DOPENCV_SKIP_CMAKE_ROOT_CONFIG=ON \
    -DOPENCV_FFMPEG_USE_FIND_PACKAGE=ON \
    -DOPENCV_FFMPEG_SKIP_DOWNLOAD=ON \
    -DOPENCV_FORCE_VTK=ON \
    -DPYTHON_DEFAULT_EXECUTABLE=${MINGW_PREFIX}/bin/python \
    -DPYTHON3_EXECUTABLE=${MINGW_PREFIX}/bin/python \
    -DPYTHON3_PACKAGES_PATH=$(cygpath -u $(${MINGW_PREFIX}/bin/python -c "import sysconfig; print(sysconfig.get_path('purelib'))")) \
    -DPROTOBUF_UPDATE_FILES=ON \
    -DENABLE_PRECOMPILED_HEADERS=OFF \
    ${extra_config[@]} \
    ../${_realname}-${pkgver}

  ${MINGW_PREFIX}/bin/cmake --build .
}

package() {
  cd "${srcdir}/build-${MSYSTEM}"
  DESTDIR=${pkgdir} ${MINGW_PREFIX}/bin/cmake --install .

  # install missing headers https://github.com/opencv/opencv/issues/13201
  for _module in imgcodecs videoio photo; do
    cp -r "${srcdir}"/${_realname}-${pkgver}/modules/${_module}/include/opencv2/${_module}/legacy \
      "${pkgdir}${MINGW_PREFIX}"/include/opencv4/opencv2/${_module}
  done
}
