# Maintainer: Alexey Pavlov <alexpux@gmail.com>

_realname=opencv
pkgbase=mingw-w64-${_realname}
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
pkgver=3.2.0
pkgrel=4
pkgdesc="Open Source Computer Vision Library (mingw-w64)"
arch=('any')
url="http://opencv.org/"
license=("BSD")
depends=(#"${MINGW_PACKAGE_PREFIX}-gst-plugins-base
         "${MINGW_PACKAGE_PREFIX}-intel-tbb"
         "${MINGW_PACKAGE_PREFIX}-jasper"
         "${MINGW_PACKAGE_PREFIX}-libjpeg"
         "${MINGW_PACKAGE_PREFIX}-libpng"
         "${MINGW_PACKAGE_PREFIX}-libtiff"
         "${MINGW_PACKAGE_PREFIX}-libwebp"
         "${MINGW_PACKAGE_PREFIX}-openexr"
         "${MINGW_PACKAGE_PREFIX}-zlib"
         "${MINGW_PACKAGE_PREFIX}-libwebp"
         #"${MINGW_PACKAGE_PREFIX}-qt5"
         #"${MINGW_PACKAGE_PREFIX}-gtkglext"
         #"${MINGW_PACKAGE_PREFIX}-gtk2"
         )
makedepends=("${MINGW_PACKAGE_PREFIX}-cmake"
             #"${MINGW_PACKAGE_PREFIX}-qt5"
             "${MINGW_PACKAGE_PREFIX}-eigen3"
             "${MINGW_PACKAGE_PREFIX}-ffmpeg"
             "${MINGW_PACKAGE_PREFIX}-python2-numpy"
             "${MINGW_PACKAGE_PREFIX}-python3-numpy"
             "${MINGW_PACKAGE_PREFIX}-tesseract-ocr"
             "${MINGW_PACKAGE_PREFIX}-hdf5"
             "${MINGW_PACKAGE_PREFIX}-vtk")
optdepends=("${MINGW_PACKAGE_PREFIX}-eigen3"
            "${MINGW_PACKAGE_PREFIX}-ffmpeg: support to read and write video files"
            "${MINGW_PACKAGE_PREFIX}-python2-numpy: Python 2.x interface"
            "${MINGW_PACKAGE_PREFIX}-python3-numpy: Python 3.x interface"
            "${MINGW_PACKAGE_PREFIX}-hdf5: opencv_hdf module"
            "${MINGW_PACKAGE_PREFIX}-tesseract-ocr: opencv_text module"
            "${MINGW_PACKAGE_PREFIX}-vtk: opencv_viz module")
source=("${_realname}-${pkgver}.tar.gz"::https://github.com/opencv/opencv/archive/${pkgver}.tar.gz
        "${_realname}_contrib-${pkgver}.tar.gz"::https://github.com/opencv/opencv_contrib/archive/${pkgver}.tar.gz
        '0001-mingw-w64-cmake.patch'
        '0002-solve_deg3-underflow.patch'
        '0003-issue-4107.patch'
        '0004-generate-proper-pkg-config-file.patch'
        '0005-opencv-support-python-3.5.patch'
        '0006-somehow-uint-not-detected.patch'
        '0007-mingw-w64-have-sincos.patch'
        '0008-mingw-w64-cmake-lib-path.patch')
sha256sums=('b9d62dfffb8130d59d587627703d5f3e6252dce4a94c1955784998da7a39dd35'
            '1e2bb6c9a41c602904cc7df3f8fb8f98363a88ea564f2a087240483426bf8cbe'
            '9ce9cd5cbf76aea9f007f388dd71ccd7c9a656a274a84ef9a4e45af77b211fc0'
            'fd4e095c3c879413184fc6b91a7b0a77dbb128612341a8be2c99d804a203e362'
            '52ebc8875b9ef3ea70897f34509228daeff73d0cab0aa9eb8b931be6a7d32d7f'
            '47447c78acc810cd0604b641644f1c546c29e925b7b9671a4fa18468ff3ad330'
            'e50f69c6c1fbce255b3e7ef4b489bf1a01ba28cf828a6adb80c73a7f9c08a666'
            '7d2ff25f97c84b59793502786dd64e25c8ca991b0523ffea56b45ce031e80c3f'
            'ba227bb88c7e6948c54c5a3c8347daf5e2c930e99fb155047015bc5cfa2b33e5'
            '434b3bb1f6fd3af31952de5c4af95eb726f4e45b077e98195f8c204732bc9754')

prepare() {
  cd "${srcdir}/${_realname}-${pkgver}"

  patch -Np1 -i "${srcdir}/0001-mingw-w64-cmake.patch"
  patch -Np1 -i "${srcdir}/0002-solve_deg3-underflow.patch"
  patch -Np1 -i "${srcdir}/0003-issue-4107.patch"
  patch -Np1 -i "${srcdir}/0004-generate-proper-pkg-config-file.patch"
  patch -Np1 -i "${srcdir}/0005-opencv-support-python-3.5.patch"

  patch -Np1 -i "${srcdir}/0008-mingw-w64-cmake-lib-path.patch"
  
  cd "${srcdir}/${_realname}_contrib-${pkgver}"
  patch -Np1 -i "${srcdir}/0006-somehow-uint-not-detected.patch"
  patch -Np1 -i "${srcdir}/0007-mingw-w64-have-sincos.patch"
}

build() {
  [[ "${CARCH}" = "i686" ]] && {
    # SSE only available from Pentium 3 onwards (i686 is way older)
    _cmakeopts=('-DENABLE_SSE=OFF'
      '-DENABLE_SSE2=OFF'
      '-DENABLE_SSE3=OFF')
    CXXFLAGS+=" -DEIGEN_DONT_VECTORIZE"
    _ffmpeg_plugin='opencv_ffmpeg.dll'
  }

  [[ "${CARCH}" = "x86_64" ]] && {
    # all x64 CPUs support SSE2 but not SSE3
    _cmakeopts+=('-DENABLE_SSE3=OFF')
    _ffmpeg_plugin='opencv_ffmpeg_64.dll'
  }

  # pushd ${srcdir}/${_realname}-${pkgver}/3rdparty/ffmpeg > /dev/null
  # rm -f ./*.dll
  # gcc -Wall -shared -o ${_ffmpeg_plugin} ${CXXFLAGS} -x c++ \
    # -I../include -I../../modules/highgui/src -I../../modules/videoio/src ffopencv.c \
    # -lavformat -lavcodec -lavdevice -lswscale -lavutil -lws2_32
  # popd > /dev/null

  [[ -d ${srcdir}/build-${CARCH} ]] && rm -rf ${srcdir}/build-${CARCH}
  mkdir -p ${srcdir}/build-${CARCH} && cd ${srcdir}/build-${CARCH}

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  ${MINGW_PREFIX}/bin/cmake.exe -Wno-dev \
    -G"MSYS Makefiles" \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    -DPKG_CONFIG_WITHOUT_PREFIX=ON \
    -DWITH_OPENCL=ON \
    -DWITH_OPENGL=ON \
    -DWITH_TBB=ON \
    -DWITH_XINE=OFF \
    -DBUILD_WITH_DEBUG_INFO=OFF \
    -DBUILD_DOCS=OFF \
    -DBUILD_TESTS=OFF \
    -DBUILD_PERF_TESTS=OFF \
    -DBUILD_EXAMPLES=ON \
    -DINSTALL_C_EXAMPLES=ON \
    -DINSTALL_PYTHON_EXAMPLES=ON \
    -DWITH_GTK=OFF \
    -DWITH_QT=OFF \
    -DWITH_VTK=ON \
    -DWITH_GDAL=OFF \
    -DWITH_FFMPEG=ON \
    -DWITH_GSTREAMER=OFF \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_SKIP_RPATH=ON \
    -DENABLE_PRECOMPILED_HEADERS=OFF \
    -DOPENCV_EXTRA_MODULES_PATH=../${_realname}_contrib-${pkgver}/modules \
    -DBUILD_opencv_bioinspired=OFF \
    ${_cmakeopts[@]} \
    ../${_realname}-${pkgver}

  make
}

package() {
  cd "${srcdir}/build-${CARCH}"
  make DESTDIR=${pkgdir} install
}
