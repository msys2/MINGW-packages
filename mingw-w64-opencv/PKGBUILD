# Maintainer: Alexey Pavlov <alexpux@gmail.com>

_realname=opencv
pkgbase=mingw-w64-${_realname}
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
pkgver=4.5.5
pkgrel=9
pkgdesc="Open Source Computer Vision Library (mingw-w64)"
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64')
url="https://opencv.org/"
license=("BSD;GPL")
depends=(
  # imgcodec
  "${MINGW_PACKAGE_PREFIX}-zlib"
  "${MINGW_PACKAGE_PREFIX}-libjpeg-turbo"
  "${MINGW_PACKAGE_PREFIX}-libwebp"
  "${MINGW_PACKAGE_PREFIX}-libpng"
  "${MINGW_PACKAGE_PREFIX}-libtiff"
  "${MINGW_PACKAGE_PREFIX}-openjpeg2"
  "${MINGW_PACKAGE_PREFIX}-jasper"
  "${MINGW_PACKAGE_PREFIX}-openexr"
  "${MINGW_PACKAGE_PREFIX}-gdal"
  "${MINGW_PACKAGE_PREFIX}-gdcm"

  # highgui
  #"${MINGW_PACKAGE_PREFIX}-gtk3"
  #"${MINGW_PACKAGE_PREFIX}-gtk2"
  #"${MINGW_PACKAGE_PREFIX}-gtkglext"
  #"${MINGW_PACKAGE_PREFIX}-qt5-base"
  #"${MINGW_PACKAGE_PREFIX}-qt6-base"
  #"${MINGW_PACKAGE_PREFIX}-vtk"

  # videoio
  #"${MINGW_PACKAGE_PREFIX}-gst-plugins-base"
  #"${MINGW_PACKAGE_PREFIX}-ffmpeg"
  #"${MINGW_PACKAGE_PREFIX}-libmfx"
  #"${MINGW_PACKAGE_PREFIX}-gphoto2"

  # core
  "${MINGW_PACKAGE_PREFIX}-intel-tbb"
  "${MINGW_PACKAGE_PREFIX}-eigen3"
  "${MINGW_PACKAGE_PREFIX}-lapack"
  "${MINGW_PACKAGE_PREFIX}-openblas"

  # dnn
  "${MINGW_PACKAGE_PREFIX}-protobuf"
  "${MINGW_PACKAGE_PREFIX}-tiny-dnn"

  # sfm module
  "${MINGW_PACKAGE_PREFIX}-ceres-solver"
  "${MINGW_PACKAGE_PREFIX}-gflags"
  "${MINGW_PACKAGE_PREFIX}-glog"
  "${MINGW_PACKAGE_PREFIX}-suitesparse"

  # extra modules
  #"${MINGW_PACKAGE_PREFIX}-ogre3d"
  #"${MINGW_PACKAGE_PREFIX}-vulkan"
  #"${MINGW_PACKAGE_PREFIX}-julia"
  "${MINGW_PACKAGE_PREFIX}-tesseract-ocr"
  "${MINGW_PACKAGE_PREFIX}-harfbuzz"
  "${MINGW_PACKAGE_PREFIX}-freetype"
  "${MINGW_PACKAGE_PREFIX}-hdf5"

  # python
  "${MINGW_PACKAGE_PREFIX}-python-numpy"
  #"${MINGW_PACKAGE_PREFIX}-python-pylint"
  #"${MINGW_PACKAGE_PREFIX}-python-flake8"
  
)
makedepends=(
  "${MINGW_PACKAGE_PREFIX}-cmake"
  "${MINGW_PACKAGE_PREFIX}-cc"
  "${MINGW_PACKAGE_PREFIX}-ccache"

)
optdepends=(
  #"${MINGW_PACKAGE_PREFIX}-ceres-solver: SFM module"
  #"${MINGW_PACKAGE_PREFIX}-gflags: SFM module"
  #"${MINGW_PACKAGE_PREFIX}-glog: SFM module"
  #"${MINGW_PACKAGE_PREFIX}-ffmpeg: support to read and write video files"
  #"${MINGW_PACKAGE_PREFIX}-tesseract-ocr: opencv_text module"
  #"${MINGW_PACKAGE_PREFIX}-qt5-base: gui backend"
  #"${MINGW_PACKAGE_PREFIX}-gtk3: gui backend"
  #"${MINGW_PACKAGE_PREFIX}-gtk2: gui backend"
  #"${MINGW_PACKAGE_PREFIX}-vtk: opencv_viz module"
  #"${MINGW_PACKAGE_PREFIX}-ogre3d: ovis module"
  #"${MINGW_PACKAGE_PREFIX}-vulkan: vulkan framework"
  #"${MINGW_PACKAGE_PREFIX}-protobuf"
  #"${MINGW_PACKAGE_PREFIX}-tiny-dnn"
  #"${MINGW_PACKAGE_PREFIX}-python-numpy"
)
source=("${_realname}-${pkgver}.tar.gz"::https://github.com/opencv/opencv/archive/${pkgver}.tar.gz
        "${_realname}_contrib-${pkgver}.tar.gz"::https://github.com/opencv/opencv_contrib/archive/${pkgver}.tar.gz

        '0001-mingw-w64-cmake.patch'
        '0002-solve_deg3-underflow.patch'
        '0003-issue-4107.patch'
        '0004-generate-proper-pkg-config-file.patch'
        '0008-mingw-w64-cmake-lib-path.patch'
        '0010-find-libpng-header.patch'
        '0012-make-header-usable-with-C-compiler.patch'
        '0014-python-install-path.patch'
        '0015-windres-cant-handle-spaces-in-defines.patch'
        '0016-find_package_pfkconfig-msys.patch'
        '0017-detect_gstreamer_with_pkg_config_first.patch'
        '0018-highgui_link_opengl_libraries.patch'
        '0019-build_msmf_with_mingw.patch'

        '0101-somehow-uint-not-detected.patch'
        '0102-mingw-w64-have-sincos.patch'
        '0103-sfm-module-linking.patch'
        #'0104-rgbd-module-missing-include.patch'
        '0105-wechat-iconv-dependency.patch'
		)
sha256sums=('a1cfdcf6619387ca9e232687504da996aaa9f7b5689986b8331ec02cb61d28ad'
			'a97c2eaecf7a23c6dbd119a609c6d7fae903e5f9ff5f1fe678933e01c67a6c11'

      '3d31b0eb6f66ec314017db221655f917c126d026a7c0220b9620818793cfe4f2' #0001-mingw-w64-cmake.patch
      '400f17bde074677566660b1baab52842c1a3d7024129a2d75af6015f6b55ba4f' #0002-solve_deg3-underflow.patch
      '480e45906b54c5b6079f437de50ebf2152a83860327613048b53d038526b8ad2' #0003-issue-4107.patch
      'bab4362a9651553c5d608c7d0d81a9dec6c7f400a1e004562ed96f4d121093ee' #0004-generate-proper-pkg-config-file.patch
      '4ee5f28b72834871bbf300a06c5f13a1f12f7d35d1b44b64b03b8347fe56b512' #0008-mingw-w64-cmake-lib-path.patch
      'd6ad5a0865eefe662ca4c7aceb6aa7b1fd5fcd27e1e65ca839d442f054095e69' #0010-find-libpng-header.patch
      'bbd4bd0783df8851ffa9faf4e1a6d26b90d4e4a39e118e444d17a1d0a3fd27ca' #0012-make-header-usable-with-C-compiler.patch
      '754eae1dfe0e8f1e1ea96a5bcdc44b25bedc2f8780f0ed058a8d1270b4f5572c' #0014-python-install-path.patch
      '113235a691576232614515d18569e016ec720f67093be79291bb4db1a36bf140' #0015-windres-cant-handle-spaces-in-defines.patch
      'e696e6efa983c45b03e518d994108eff9e10d42e959c2b2904695081d2392f61' #0016-find_package_pfkconfig-msys.patch
      '3125493590a61a1d07d6bf4c47c31125a15a9858e9486a9a07be159e3557c3fa' #0017-detect_gstreamer_with_pkg_config_first.patch
      'a4ff9f0784c060843192eb7dc400c2ff7517153bbfe0235313733d7b616910dd' #0018-highgui_link_opengl_libraries.patch
      '1fe30547263d76c6afbe48ab34226c0b39ccb4011c8817dc89b4d79f641b424f' #0019-build_msmf_with_mingw.patch

      '7d2ff25f97c84b59793502786dd64e25c8ca991b0523ffea56b45ce031e80c3f' #0101-somehow-uint-not-detected.patch
      '2001804c5245af1894a308d6521f9cd044fb6dbd713b6e2e45106399a409c14d' #0102-mingw-w64-have-sincos.patch
      '0422317096007b72ab4928b48762da4252addf3e4f8066ba94e29344f5975ab8' #0103-sfm-module-linking.patch
      #'c6c92cf39dfe45b8fb41d80ac0de3cd304e8b695420b307fd4320a105d8fe9f4' #0104-rgbd-module-missing-include.patch
      '5c087f6bacc2de581901e55bc984e24c240140d4132ae87063c3a99b016f5247' #0105-wechat-iconv-dependency.patch
			)

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying ${_patch}"
    patch -Nbp1 -i "${srcdir}/${_patch}"
  done
}

del_file_exists() {
  for _fname in "$@"
  do
    if [ -f ${_fname} ]; then
      rm -rf ${_fname}
    fi
  done
}
# =========================================== #

prepare() {
  cd "${srcdir}/${_realname}-${pkgver}"
  apply_patch_with_msg 0001-mingw-w64-cmake.patch
  apply_patch_with_msg 0002-solve_deg3-underflow.patch
  apply_patch_with_msg 0003-issue-4107.patch
  apply_patch_with_msg 0004-generate-proper-pkg-config-file.patch
  apply_patch_with_msg 0008-mingw-w64-cmake-lib-path.patch
  apply_patch_with_msg 0010-find-libpng-header.patch
  apply_patch_with_msg 0012-make-header-usable-with-C-compiler.patch
  apply_patch_with_msg 0014-python-install-path.patch
  apply_patch_with_msg 0015-windres-cant-handle-spaces-in-defines.patch
  apply_patch_with_msg 0016-find_package_pfkconfig-msys.patch
  apply_patch_with_msg 0017-detect_gstreamer_with_pkg_config_first.patch
  apply_patch_with_msg 0018-highgui_link_opengl_libraries.patch
  apply_patch_with_msg 0019-build_msmf_with_mingw.patch

  cd "${srcdir}/${_realname}_contrib-${pkgver}"
  apply_patch_with_msg 0101-somehow-uint-not-detected.patch
  apply_patch_with_msg 0102-mingw-w64-have-sincos.patch
  apply_patch_with_msg 0103-sfm-module-linking.patch
  #apply_patch_with_msg 0104-rgbd-module-missing-include.patch
  apply_patch_with_msg 0105-wechat-iconv-dependency.patch  
}

build() {
  [[ -d ${srcdir}/build-${CARCH} ]] && rm -rf ${srcdir}/build-${CARCH}
  mkdir -p ${srcdir}/build-${CARCH} && cd ${srcdir}/build-${CARCH}

#  CFLAGS+=" -D_POSIX_SOURCE -Wno-attributes"
#  CXXFLAGS+=" -D_POSIX_SOURCE -Wno-attributes"
#  CFLAGS+=" -D_POSIX_SOURCE -w -lopengl32 -lglu32 -lmf -ldxva2"
#  CXXFLAGS+=" -D_POSIX_SOURCE -w -lopengl32 -lglu32 -lmf -ldxva2"
  CFLAGS+=" -D_POSIX_SOURCE -w -flarge-source-files"
  CXXFLAGS+=" -D_POSIX_SOURCE -w -flarge-source-files"

  export OpenEXR_HOME=${MINGW_PREFIX}
  export OpenBLAS_HOME=${MINGW_PREFIX}
  export TBBROOT=${MINGW_PREFIX}
  export TINYDNN_ROOT=${MINGW_PREFIX}/include/tiny_dnn
  #export ANT_DIR=C:/etc/apache-ant-1.10.12

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=;-DPYTHON2_PACKAGES_PATH=;-DPYTHON3_PACKAGES_PATH=" \
  ${MINGW_PREFIX}/bin/cmake.exe -Wno-dev \
    -G"MSYS Makefiles" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    -DENABLE_PRECOMPILED_HEADERS=ON \
    -DENABLE_CCACHE=ON \
    -DOPENCV_SKIP_CMAKE_ROOT_CONFIG=ON \
    -DOPENCV_ENABLE_PKG_CONFIG=ON \
    -DOPENCV_GENERATE_PKGCONFIG=ON \
    -DOPENCV_GENERATE_SETUPVARS=ON \
    -DOPENCV_ENABLE_MEMORY_SANITIZER=ON \
    -DOPENCV_ENABLE_ALLOCATOR_STATS=ON \
    -DOPENCV_ALLOCATOR_STATS_COUNTER_TYPE=int64_t \
    -DBUILD_WITH_DEBUG_INFO=OFF \
    -DBUILD_SHARED_LIBS=ON \
    -DBUILD_opencv_apps=ON \
    -DBUILD_DOCS=OFF \
    -DBUILD_TESTS=OFF \
    -DBUILD_PERF_TESTS=OFF \
    -DBUILD_EXAMPLES=OFF \
    -DINSTALL_C_EXAMPLES=OFF \
    -DINSTALL_PYTHON_EXAMPLES=OFF \
    -DOPENCV_ENABLE_NONFREE=ON \
    -DOPENCV_EXTRA_MODULES_PATH=../${_realname}_contrib-${pkgver}/modules \
    -DWITH_PNG=ON \
    -DWITH_JPEG=ON \
    -DWITH_TIFF=ON \
    -DWITH_WEBP=ON \
    -DWITH_OPENJPEG=ON \
    -DWITH_JASPER=ON \
    -DWITH_OPENEXR=ON \
    -DWITH_IMGCODEC_HDR=ON \
    -DWITH_IMGCODEC_SUNRASTER=ON \
    -DWITH_IMGCODEC_PXM=ON \
    -DWITH_IMGCODEC_PFM=ON \
    -DWITH_GDAL=ON \
    -DWITH_GDCM=ON \
    -DVIDEOIO_ENABLE_PLUGINS=OFF \
    -DWITH_FFMPEG=OFF \
    -DWITH_GSTREAMER=OFF \
    -DWITH_MSMF=ON \
    -DWITH_MSMF_DXVA=ON \
    -DWITH_DSHOW=ON \
    -DWITH_MFX=OFF \
    -DWITH_GPHOTO2=OFF \
    -DHIGHGUI_ENABLE_PLUGINS=OFF \
    -DWITH_WIN32UI=ON \
    -DWITH_GTK=OFF \
    -DWITH_QT=OFF \
    -DWITH_VTK=OFF \
    -DWITH_OPENGL=ON \
    -DWITH_DIRECTX=ON \
    -DPARALLEL_ENABLE_PLUGINS=ON \
    -DWITH_TBB=ON \
    -DWITH_CUDA=OFF \
    -DWITH_OPENCL=ON \
    -DWITH_INF_ENGINE=ON \
    -DOPENCV_DNN_OPENCL=ON \
    -DWITH_EIGEN=ON \
    -DWITH_OPENBLAS=ON \
    -DWITH_PROTOBUF=ON \
    -DPROTOBUF_UPDATE_FILES=OFF \
    -DWITH_VULKAN=OFF \
    -DWITH_JULIA=OFF \
    -DBUILD_opencv_bioinspired=ON \
    -DOPENCV_SKIP_PYTHON_LOADER=ON \
    -DBUILD_opencv_python2=OFF \
    -DBUILD_opencv_python3=ON \
    -DPYTHON_DEFAULT_EXECUTABLE=${MINGW_PREFIX}/bin/python \
    -DPYTHON3_EXECUTABLE=${MINGW_PREFIX}/bin/python \
    -DPYTHON3_PACKAGES_PATH=$(cygpath -u $(${MINGW_PREFIX}/bin/python -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())")) \
    -DOPENCV_PYTHON3_VERSION=$(${MINGW_PREFIX}/bin/python -c "import sys;sys.stdout.write('.'.join(map(str, sys.version_info[:2])))") \
    -DOPENCV_PYTHON_INSTALL_PATH=lib \
    -DBUILD_JAVA=OFF \
    -DOPENCV_JNI_INSTALL_PATH=lib \
    ../${_realname}-${pkgver}

  make
}

package() {
  cd "${srcdir}/build-${CARCH}"
  make DESTDIR=${pkgdir} install

  # install missing headers https://github.com/opencv/opencv/issues/13201
  for _module in imgcodecs videoio photo; do
    cp -r "${srcdir}"/${_realname}-${pkgver}/modules/${_module}/include/opencv2/${_module}/legacy \
      "${pkgdir}${MINGW_PREFIX}"/include/opencv4/opencv2/${_module}
  done
}
