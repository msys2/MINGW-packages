From 36b1168d068a346aacdc1edaf0c860284e97227a Mon Sep 17 00:00:00 2001
From: Ugur Kurnaz <ugur.kurnaz@free.fr>
Date: Sat, 5 Mar 2022 20:08:27 +0100
Subject: [PATCH] opencv-4.5.5-patch-mingw

---
 CMakeLists.txt                                | 32 ++++++-------------
 cmake/OpenCVCompilerOptions.cmake             |  1 -
 cmake/OpenCVDetectPython.cmake                |  2 +-
 cmake/OpenCVFindLibsGrfmt.cmake               |  4 +--
 cmake/OpenCVFindOpenEXR.cmake                 |  4 ++-
 cmake/OpenCVGenPkgconfig.cmake                |  2 +-
 cmake/OpenCVInstallLayout.cmake               |  2 +-
 cmake/OpenCVModule.cmake                      |  4 ++-
 cmake/OpenCVUtils.cmake                       |  4 ++-
 .../OpenCVConfig.root-WIN32.cmake.in          |  4 +++
 modules/calib3d/src/polynom_solver.cpp        |  2 +-
 modules/core/CMakeLists.txt                   |  2 +-
 modules/core/include/opencv2/core/cvdef.h     |  4 +++
 modules/imgcodecs/src/grfmt_png.cpp           |  2 +-
 modules/python/common.cmake                   |  2 +-
 15 files changed, 35 insertions(+), 36 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index f05adb3..3bf2db8 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -195,20 +195,6 @@ if(UNIX AND NOT ANDROID)
   endif()
 endif()
 
-# Add these standard paths to the search paths for FIND_PATH
-# to find include files from these locations first
-if(MINGW)
-  if(EXISTS /mingw)
-      list(APPEND CMAKE_INCLUDE_PATH /mingw)
-  endif()
-  if(EXISTS /mingw32)
-      list(APPEND CMAKE_INCLUDE_PATH /mingw32)
-  endif()
-  if(EXISTS /mingw64)
-      list(APPEND CMAKE_INCLUDE_PATH /mingw64)
-  endif()
-endif()
-
 # ----------------------------------------------------------------------------
 # OpenCV cmake options
 # ----------------------------------------------------------------------------
@@ -217,14 +203,14 @@ OCV_OPTION(OPENCV_ENABLE_NONFREE "Enable non-free algorithms" OFF)
 
 # 3rd party libs
 OCV_OPTION(OPENCV_FORCE_3RDPARTY_BUILD   "Force using 3rdparty code from source" OFF)
-OCV_OPTION(BUILD_ZLIB               "Build zlib from source"             (WIN32 OR APPLE OR OPENCV_FORCE_3RDPARTY_BUILD) )
-OCV_OPTION(BUILD_TIFF               "Build libtiff from source"          (WIN32 OR ANDROID OR APPLE OR OPENCV_FORCE_3RDPARTY_BUILD) )
-OCV_OPTION(BUILD_OPENJPEG           "Build OpenJPEG from source"         (WIN32 OR ANDROID OR APPLE OR OPENCV_FORCE_3RDPARTY_BUILD) )
-OCV_OPTION(BUILD_JASPER             "Build libjasper from source"        (WIN32 OR ANDROID OR APPLE OR OPENCV_FORCE_3RDPARTY_BUILD) )
-OCV_OPTION(BUILD_JPEG               "Build libjpeg from source"          (WIN32 OR ANDROID OR APPLE OR OPENCV_FORCE_3RDPARTY_BUILD) )
-OCV_OPTION(BUILD_PNG                "Build libpng from source"           (WIN32 OR ANDROID OR APPLE OR OPENCV_FORCE_3RDPARTY_BUILD) )
-OCV_OPTION(BUILD_OPENEXR            "Build openexr from source"          (OPENCV_FORCE_3RDPARTY_BUILD) )
-OCV_OPTION(BUILD_WEBP               "Build WebP from source"             (((WIN32 OR ANDROID OR APPLE) AND NOT WINRT) OR OPENCV_FORCE_3RDPARTY_BUILD) )
+OCV_OPTION(BUILD_ZLIB               "Build zlib from source"             (MSVC OR APPLE OR OPENCV_FORCE_3RDPARTY_BUILD) )
+OCV_OPTION(BUILD_TIFF               "Build libtiff from source"          (MSVC OR ANDROID OR APPLE OR OPENCV_FORCE_3RDPARTY_BUILD) )
+OCV_OPTION(BUILD_OPENJPEG           "Build OpenJPEG from source"         (MSVC OR ANDROID OR APPLE OR OPENCV_FORCE_3RDPARTY_BUILD) )
+OCV_OPTION(BUILD_JASPER             "Build libjasper from source"        (MSVC OR ANDROID OR APPLE OR OPENCV_FORCE_3RDPARTY_BUILD) )
+OCV_OPTION(BUILD_JPEG               "Build libjpeg from source"          (MSVC OR ANDROID OR APPLE OR OPENCV_FORCE_3RDPARTY_BUILD) )
+OCV_OPTION(BUILD_PNG                "Build libpng from source"           (MSVC OR ANDROID OR APPLE OR OPENCV_FORCE_3RDPARTY_BUILD) )
+OCV_OPTION(BUILD_OPENEXR            "Build openexr from source"          (((WIN32 OR ANDROID OR APPLE) AND NOT WINRT AND NOT MINGW) OR OPENCV_FORCE_3RDPARTY_BUILD) )
+OCV_OPTION(BUILD_WEBP               "Build WebP from source"             (((WIN32 OR ANDROID OR APPLE) AND NOT WINRT AND NOT MINGW) OR OPENCV_FORCE_3RDPARTY_BUILD) )
 OCV_OPTION(BUILD_TBB                "Download and build TBB from source" (ANDROID OR OPENCV_FORCE_3RDPARTY_BUILD) )
 OCV_OPTION(BUILD_IPP_IW             "Build IPP IW from source"           (NOT MINGW OR OPENCV_FORCE_3RDPARTY_BUILD) IF (X86_64 OR X86) AND NOT WINRT )
 OCV_OPTION(BUILD_ITT                "Build Intel ITT from source"
@@ -1006,7 +992,7 @@ if(NOT OPENCV_LICENSE_FILE)
 endif()
 
 # for UNIX it does not make sense as LICENSE and readme will be part of the package automatically
-if(ANDROID OR NOT UNIX)
+if((ANDROID OR NOT UNIX) AND NOT MINGW)
   install(FILES ${OPENCV_LICENSE_FILE}
         PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ
         DESTINATION ./ COMPONENT libs)
diff --git a/cmake/OpenCVCompilerOptions.cmake b/cmake/OpenCVCompilerOptions.cmake
index 037c7fb..ea6498e 100644
--- a/cmake/OpenCVCompilerOptions.cmake
+++ b/cmake/OpenCVCompilerOptions.cmake
@@ -120,7 +120,6 @@ if(CV_GCC OR CV_CLANG)
     add_extra_compiler_option(-Wall)
   endif()
   add_extra_compiler_option(-Werror=return-type)
-  add_extra_compiler_option(-Werror=non-virtual-dtor)
   add_extra_compiler_option(-Werror=address)
   add_extra_compiler_option(-Werror=sequence-point)
   add_extra_compiler_option(-Wformat)
diff --git a/cmake/OpenCVDetectPython.cmake b/cmake/OpenCVDetectPython.cmake
index 6e7bb18..61cf494 100644
--- a/cmake/OpenCVDetectPython.cmake
+++ b/cmake/OpenCVDetectPython.cmake
@@ -176,7 +176,7 @@ if(NOT ${found})
     endif()
 
     if(NOT ANDROID AND NOT IOS)
-      if(CMAKE_HOST_UNIX)
+      if(CMAKE_HOST_UNIX OR MINGW)
         execute_process(COMMAND ${_executable} -c "from sysconfig import *; print(get_path('purelib'))"
                         RESULT_VARIABLE _cvpy_process
                         OUTPUT_VARIABLE _std_packages_path
diff --git a/cmake/OpenCVFindLibsGrfmt.cmake b/cmake/OpenCVFindLibsGrfmt.cmake
index 95d1d92..a0e2e55 100644
--- a/cmake/OpenCVFindLibsGrfmt.cmake
+++ b/cmake/OpenCVFindLibsGrfmt.cmake
@@ -228,9 +228,9 @@ if(WITH_PNG)
     include(FindPNG)
     if(PNG_FOUND)
       include(CheckIncludeFile)
-      check_include_file("${PNG_PNG_INCLUDE_DIR}/libpng/png.h" HAVE_LIBPNG_PNG_H)
+      check_include_file("${PNG_PNG_INCLUDE_DIR}/libpng16/png.h" HAVE_LIBPNG_PNG_H)
       if(HAVE_LIBPNG_PNG_H)
-        ocv_parse_header("${PNG_PNG_INCLUDE_DIR}/libpng/png.h" PNG_VERSION_LINES PNG_LIBPNG_VER_MAJOR PNG_LIBPNG_VER_MINOR PNG_LIBPNG_VER_RELEASE)
+        ocv_parse_header("${PNG_PNG_INCLUDE_DIR}/libpng16/png.h" PNG_VERSION_LINES PNG_LIBPNG_VER_MAJOR PNG_LIBPNG_VER_MINOR PNG_LIBPNG_VER_RELEASE)
       else()
         ocv_parse_header("${PNG_PNG_INCLUDE_DIR}/png.h" PNG_VERSION_LINES PNG_LIBPNG_VER_MAJOR PNG_LIBPNG_VER_MINOR PNG_LIBPNG_VER_RELEASE)
       endif()
diff --git a/cmake/OpenCVFindOpenEXR.cmake b/cmake/OpenCVFindOpenEXR.cmake
index 0df626a..5e498eb 100644
--- a/cmake/OpenCVFindOpenEXR.cmake
+++ b/cmake/OpenCVFindOpenEXR.cmake
@@ -29,7 +29,9 @@ SET(OPENEXR_LIBRARIES "")
 SET(OPENEXR_LIBSEARCH_SUFFIXES "")
 file(TO_CMAKE_PATH "$ENV{ProgramFiles}" ProgramFiles_ENV_PATH)
 
-if(WIN32)
+if(MINGW)
+    SET(OPENEXR_ROOT $ENV{OpenEXR_HOME} CACHE STRING "Path to the OpenEXR install folder")
+elseif(MSVC)
     SET(OPENEXR_ROOT "C:/Deploy" CACHE STRING "Path to the OpenEXR \"Deploy\" folder")
     if(X86_64)
         SET(OPENEXR_LIBSEARCH_SUFFIXES x64/Release x64 x64/Debug)
diff --git a/cmake/OpenCVGenPkgconfig.cmake b/cmake/OpenCVGenPkgconfig.cmake
index 43d6a87..8d36b74 100644
--- a/cmake/OpenCVGenPkgconfig.cmake
+++ b/cmake/OpenCVGenPkgconfig.cmake
@@ -103,7 +103,7 @@ add_custom_target(gen-pkgconfig ALL SOURCES "${CMAKE_BINARY_DIR}/unix-install/${
 add_dependencies(developer_scripts gen-pkgconfig)
 
 
-if(UNIX AND NOT ANDROID)
+if((UNIX AND NOT ANDROID) OR MINGW)
   install(FILES ${CMAKE_BINARY_DIR}/unix-install/${OPENCV_PC_FILE_NAME} DESTINATION ${OPENCV_LIB_INSTALL_PATH}/pkgconfig COMPONENT dev)
 endif()
 
diff --git a/cmake/OpenCVInstallLayout.cmake b/cmake/OpenCVInstallLayout.cmake
index d5f3579..4722de0 100644
--- a/cmake/OpenCVInstallLayout.cmake
+++ b/cmake/OpenCVInstallLayout.cmake
@@ -20,7 +20,7 @@ if(ANDROID)
   ocv_update(OPENCV_JNI_INSTALL_PATH            "${OPENCV_LIB_INSTALL_PATH}")
   ocv_update(OPENCV_JNI_BIN_INSTALL_PATH        "${OPENCV_JNI_INSTALL_PATH}")
 
-elseif(WIN32 AND CMAKE_HOST_SYSTEM_NAME MATCHES Windows)
+elseif(MSVC AND CMAKE_HOST_SYSTEM_NAME MATCHES Windows)
 
   if(DEFINED OpenCV_RUNTIME AND DEFINED OpenCV_ARCH)
     ocv_update(OPENCV_INSTALL_BINARIES_PREFIX "${OpenCV_ARCH}/${OpenCV_RUNTIME}/")
diff --git a/cmake/OpenCVModule.cmake b/cmake/OpenCVModule.cmake
index 9981620..92a0076 100644
--- a/cmake/OpenCVModule.cmake
+++ b/cmake/OpenCVModule.cmake
@@ -996,7 +996,9 @@ macro(_ocv_create_module)
   endif()
 
   set_target_properties(${the_module} PROPERTIES
-    OUTPUT_NAME "${the_module}${OPENCV_DLLVERSION}"
+    OUTPUT_NAME "${the_module}"
+    RUNTIME_OUTPUT_NAME "${the_module}${OPENCV_DLLVERSION}"
+    ARCHIVE_OUTPUT_NAME "${the_module}"
     DEBUG_POSTFIX "${OPENCV_DEBUG_POSTFIX}"
     COMPILE_PDB_NAME "${the_module}${OPENCV_DLLVERSION}"
     COMPILE_PDB_NAME_DEBUG "${the_module}${OPENCV_DLLVERSION}${OPENCV_DEBUG_POSTFIX}"
diff --git a/cmake/OpenCVUtils.cmake b/cmake/OpenCVUtils.cmake
index d7097fd..3df0d3f 100644
--- a/cmake/OpenCVUtils.cmake
+++ b/cmake/OpenCVUtils.cmake
@@ -1635,9 +1635,11 @@ endfunction()
 macro(ocv_get_libname var_name)
   get_filename_component(__libname "${ARGN}" NAME)
   # libopencv_core.so.3.3 -> opencv_core
-  string(REGEX REPLACE "^lib(.+)\\.(a|so|dll)(\\.[.0-9]+)?$" "\\1" __libname "${__libname}")
+  string(REGEX REPLACE "^lib(.+)\\.(a|so)(\\.[.0-9]+)?$" "\\1" __libname "${__libname}")
   # MacOSX: libopencv_core.3.3.1.dylib -> opencv_core
   string(REGEX REPLACE "^lib(.+[^.0-9])\\.([.0-9]+\\.)?dylib$" "\\1" __libname "${__libname}")
+  # Windows/MINGW: libopencv_core331.dll -> opencv_core
+  string(REGEX REPLACE "^lib(.+[^.0-9])([0-9]+\\.)?dll$" "\\1" __libname "${__libname}")
   set(${var_name} "${__libname}")
 endmacro()
 
diff --git a/cmake/templates/OpenCVConfig.root-WIN32.cmake.in b/cmake/templates/OpenCVConfig.root-WIN32.cmake.in
index b0f254e..67d427a 100644
--- a/cmake/templates/OpenCVConfig.root-WIN32.cmake.in
+++ b/cmake/templates/OpenCVConfig.root-WIN32.cmake.in
@@ -63,6 +63,7 @@ function(check_one_config RES)
     return()
   endif()
   set(candidates)
+  if(MSVC)
   if(OpenCV_STATIC)
     list(APPEND candidates "${OpenCV_ARCH}/${OpenCV_RUNTIME}/staticlib")
   endif()
@@ -73,6 +74,9 @@ function(check_one_config RES)
     list(APPEND candidates "gpu/${OpenCV_ARCH}/${OpenCV_RUNTIME}/staticlib")
   endif()
   list(APPEND candidates "${OpenCV_ARCH}/${OpenCV_RUNTIME}/lib")
+  else()
+  list(APPEND candidates "lib")
+  endif()
   foreach(c ${candidates})
     set(p "${OpenCV_CONFIG_PATH}/${c}")
     if(EXISTS "${p}/OpenCVConfig.cmake")
diff --git a/modules/calib3d/src/polynom_solver.cpp b/modules/calib3d/src/polynom_solver.cpp
index 5025199..d8779a7 100644
--- a/modules/calib3d/src/polynom_solver.cpp
+++ b/modules/calib3d/src/polynom_solver.cpp
@@ -59,7 +59,7 @@ int solve_deg3(double a, double b, double c, double d,
   double D = Q3 + R * R;
   double b_a_3 = (1. / 3.) * b_a;
 
-  if (Q == 0) {
+  if (Q3 == 0) {
     if(R == 0) {
       x0 = x1 = x2 = - b_a_3;
       return 3;
diff --git a/modules/core/CMakeLists.txt b/modules/core/CMakeLists.txt
index b78bb98..654fceb 100644
--- a/modules/core/CMakeLists.txt
+++ b/modules/core/CMakeLists.txt
@@ -128,7 +128,7 @@ elseif(HAVE_CXX11 OR DEFINED OPENCV_ALLOCATOR_STATS_COUNTER_TYPE)
   endif()
   if(DEFINED OPENCV_ALLOCATOR_STATS_COUNTER_TYPE)
     message(STATUS "Allocator metrics storage type: '${OPENCV_ALLOCATOR_STATS_COUNTER_TYPE}'")
-    add_definitions("-DOPENCV_ALLOCATOR_STATS_COUNTER_TYPE=${OPENCV_ALLOCATOR_STATS_COUNTER_TYPE}")
+    # add_definitions("-DOPENCV_ALLOCATOR_STATS_COUNTER_TYPE=\"${OPENCV_ALLOCATOR_STATS_COUNTER_TYPE}\"")
   endif()
 endif()
 
diff --git a/modules/core/include/opencv2/core/cvdef.h b/modules/core/include/opencv2/core/cvdef.h
index f785f32..b557f08 100644
--- a/modules/core/include/opencv2/core/cvdef.h
+++ b/modules/core/include/opencv2/core/cvdef.h
@@ -805,6 +805,7 @@ __CV_ENUM_FLAGS_BITWISE_XOR_EQ   (EnumType, EnumType)
 #endif
 
 // Integer types portatibility
+#if defined __cplusplus
 #ifdef OPENCV_STDINT_HEADER
 #include OPENCV_STDINT_HEADER
 #elif defined(__cplusplus)
@@ -847,6 +848,9 @@ typedef ::uint64_t uint64_t;
 #else // pure C
 #include <stdint.h>
 #endif
+#else
+#include <stdint.h>
+#endif
 
 #ifdef __cplusplus
 namespace cv
diff --git a/modules/imgcodecs/src/grfmt_png.cpp b/modules/imgcodecs/src/grfmt_png.cpp
index 9e1a2d4..bfb23d1 100644
--- a/modules/imgcodecs/src/grfmt_png.cpp
+++ b/modules/imgcodecs/src/grfmt_png.cpp
@@ -59,7 +59,7 @@
 #endif
 
 #ifdef HAVE_LIBPNG_PNG_H
-#include <libpng/png.h>
+#include <libpng16/png.h>
 #else
 #include <png.h>
 #endif
diff --git a/modules/python/common.cmake b/modules/python/common.cmake
index c5df8bc..99a85e3 100644
--- a/modules/python/common.cmake
+++ b/modules/python/common.cmake
@@ -138,7 +138,7 @@ else()
   set(PYTHON_INSTALL_CONFIGURATIONS "")
 endif()
 
-if(WIN32)
+if(MSVC)
   set(PYTHON_INSTALL_ARCHIVE "")
 else()
   set(PYTHON_INSTALL_ARCHIVE ARCHIVE DESTINATION ${${PYTHON}_PACKAGES_PATH} COMPONENT python)
-- 
2.35.1

