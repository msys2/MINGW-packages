# Maintainer: Alexey Pavlov <alexpux@gmail.com>

_realname=openimageio
pkgbase=mingw-w64-${_realname}
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
pkgver=2.3.10.0
pkgrel=1
pkgdesc="A library for reading and writing images, including classes, utilities, and applications (mingw-w64)"
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64')
url="https://www.openimageio.org/"
license=("custom")
depends=("${MINGW_PACKAGE_PREFIX}-boost"
         "${MINGW_PACKAGE_PREFIX}-field3d"
         "${MINGW_PACKAGE_PREFIX}-freetype"
         "${MINGW_PACKAGE_PREFIX}-fmt"
         "${MINGW_PACKAGE_PREFIX}-jasper"
         "${MINGW_PACKAGE_PREFIX}-giflib"
         "${MINGW_PACKAGE_PREFIX}-glew"
         "${MINGW_PACKAGE_PREFIX}-hdf5"
         "${MINGW_PACKAGE_PREFIX}-libheif"
         "${MINGW_PACKAGE_PREFIX}-libjpeg"
         "${MINGW_PACKAGE_PREFIX}-libpng"
         "${MINGW_PACKAGE_PREFIX}-libraw"
         "${MINGW_PACKAGE_PREFIX}-libsquish"
         "${MINGW_PACKAGE_PREFIX}-ffmpeg"
         "${MINGW_PACKAGE_PREFIX}-libtiff"
         "${MINGW_PACKAGE_PREFIX}-libwebp"
         "${MINGW_PACKAGE_PREFIX}-opencolorio"
         "${MINGW_PACKAGE_PREFIX}-opencv"
         "${MINGW_PACKAGE_PREFIX}-openexr"
         "${MINGW_PACKAGE_PREFIX}-openjpeg2"
         "${MINGW_PACKAGE_PREFIX}-openssl"
         "${MINGW_PACKAGE_PREFIX}-openvdb"
         "${MINGW_PACKAGE_PREFIX}-ptex"
         "${MINGW_PACKAGE_PREFIX}-pugixml"
         "${MINGW_PACKAGE_PREFIX}-zlib")
makedepends=("${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-qt5-base"
             "${MINGW_PACKAGE_PREFIX}-boost"
             "${MINGW_PACKAGE_PREFIX}-ninja"
             "${MINGW_PACKAGE_PREFIX}-python"
             "${MINGW_PACKAGE_PREFIX}-pybind11"
             "${MINGW_PACKAGE_PREFIX}-python-numpy")
optdepends=("${MINGW_PACKAGE_PREFIX}-qt5-base: iv image viewer"
            "${MINGW_PACKAGE_PREFIX}-python: bindings support")
options=('strip' 'buildflags' '!debug')
source=(${_realname}-${pkgver}.tar.gz::https://github.com/OpenImageIO/oiio/archive/v${pkgver}.tar.gz
        0000-workaround-ansidecl-h-PTR-define-conflict.patch
        0008-find-openjpeg.patch
        0012-maybe-uninitialized-errors.patch
        0018-link-hdf5.patch
        0020-set-import-prefix.patch
        0021-sched_yield-clang.patch
        https://github.com/OpenImageIO/oiio/pull/3214.patch)
sha256sums=('3b8a43135792373da7d8897a5937dce96cfd2a2bfb92ff8c51a870df1e9cfbd9'
            '9e4e21333676268a91c0f4e7676aeab7658e5f748e7e5cfe43a92f0fd7931229'
            '819668751fbced6dc583eb94c34119131ec13211097fffef2aef11955c4c4770'
            'bc37ea8326f7f5f26068051b537f2491e9554a380e6584bf55aaad111d33eb81'
            '8228acf86ca69dc462aa398efdf509bc3c7568bdcbe0dbd3dc229c11234618e4'
            '59db23c0c5e77f05ab9f237dfd967a86af24564132d23424e3c1355d047b10ba'
            '56612918a5075bde9ab2c7c32b4eb5ee463e56cc2511c706de82f4178d436ae9'
            '63da555fbe2c49811fa1e1f542e63c951cf9d0a91e3288e5c2a862a1f07acce7')

prepare() {
  cd ${srcdir}/oiio-${pkgver}
  patch -p1 -i ${srcdir}/0000-workaround-ansidecl-h-PTR-define-conflict.patch
  patch -p1 -i ${srcdir}/0008-find-openjpeg.patch
  patch -p1 -i ${srcdir}/0012-maybe-uninitialized-errors.patch
  patch -p1 -i ${srcdir}/0018-link-hdf5.patch
  # I have no idea if this is the right/best way to fix this.
  # Makes openshadinglanguage happy at finding oiio at least
  patch -p1 -i ${srcdir}/0020-set-import-prefix.patch

  patch -p1 -i ${srcdir}/0021-sched_yield-clang.patch
  patch -p1 -i ${srcdir}/3214.patch
}

build() {
  [[ -d "build-${MSYSTEM}" ]] && rm -rf "build-${MSYSTEM}"
  mkdir -p build-${MSYSTEM} && cd build-${MSYSTEM}

  declare -a extra_config
  if check_option "debug" "n"; then
    extra_config+=("-DCMAKE_BUILD_TYPE=Release")
  else
    extra_config+=("-DCMAKE_BUILD_TYPE=Debug")
  fi

  local _pyver=$(${MINGW_PREFIX}/bin/python -c "import sys;sys.stdout.write('.'.join(map(str, sys.version_info[:2])))")
  unset CI GITHUB_ACTIONS # otherwise it forces -Werror

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  ${MINGW_PREFIX}/bin/cmake.exe \
    -Wno-dev \
    -G"Ninja" \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    -DUSE_FREETYPE=ON \
    -DUSE_OPENCV=ON \
    -DUSE_FIELD3D=ON \
    -DUSE_OPENGL=ON \
    -DUSE_QT=ON \
    -DUSE_FFMPEG=ON \
    -DPYTHON_VERSION=${_pyver} \
    -DUSE_EXTERNAL_PUGIXML=ON \
    -DOIIO_BUILD_TESTS=OFF \
    -DSTOP_ON_WARNING=OFF \
    ${extra_config} \
    ../oiio-${pkgver}

  ${MINGW_PREFIX}/bin/cmake --build .
}

package() {
  cd "${srcdir}"/build-${MSYSTEM}

  DESTDIR="${pkgdir}" ${MINGW_PREFIX}/bin/cmake --install .

  local PREFIX_WIN=$(cygpath -wm ${MINGW_PREFIX})
  for _f in "${pkgdir}${MINGW_PREFIX}"/lib/cmake/OpenImageIO/*.cmake; do
    sed -e "s|${PREFIX_WIN}|\$\{_IMPORT_PREFIX\}|g" -i ${_f}
    sed -e "s|${MINGW_PREFIX}|\$\{_IMPORT_PREFIX\}|g" -i ${_f}
  done

  install -Dm644 ${srcdir}/oiio-${pkgver}/LICENSE.md "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}/LICENSE.md"
}
