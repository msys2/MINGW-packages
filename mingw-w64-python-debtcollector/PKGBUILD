# Maintainer: J. Peter Mugaas <jpmugaas@suddenlink.net>

_realname=debtcollector
pkgbase=mingw-w64-python-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-python2-${_realname}"  "${MINGW_PACKAGE_PREFIX}-python3-${_realname}")
pkgver=1.21.0
pkgrel=1
pkgdesc="A collection of Python deprecation patterns and strategies that help you collect your technical debt in a non-destructive manner. (mingw-w64)"
arch=('any')
url='http://docs.openstack.org/developer/debtcollector'
license=('Apache')
options=('staticlibs' 'strip' '!debug')
makedepends=("${MINGW_PACKAGE_PREFIX}-python3-setuptools" 
             "${MINGW_PACKAGE_PREFIX}-python2-setuptools" 
             "${MINGW_PACKAGE_PREFIX}-python3-pbr"
             "${MINGW_PACKAGE_PREFIX}-python2-pbr"
             "${MINGW_PACKAGE_PREFIX}-python3-babel"
             "${MINGW_PACKAGE_PREFIX}-python2-babel"
             "${MINGW_PACKAGE_PREFIX}-python3-wrapt"
             "${MINGW_PACKAGE_PREFIX}-python2-wrapt"
             "${MINGW_PACKAGE_PREFIX}-python2-funcsigs")
#checkdepends=("${MINGW_PACKAGE_PREFIX}-python3-oslotest" 
#              "${MINGW_PACKAGE_PREFIX}-python2-oslotest")
source=("$pkgbase-$pkgver.tar.gz::https://github.com/openstack/debtcollector/archive/$pkgver.tar.gz")
sha512sums=('ff0288fcb9010d29a75c7a008d6d28fc19088d7a5934eef8b0d262609a1eee385394e4763dcefae1a4d2e30977fa6122a62cde5ecd618ee12ad4b8e68a98f16e')

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying $_patch"
    patch -Nbp1 -i "${srcdir}/$_patch"
  done
}

del_file_exists() {
  for _fname in "$@"
  do
    if [ -f $_fname ]; then
      rm -rf $_fname
    fi
  done
}
# =========================================== #

prepare() {
  cd "${srcdir}"
  for builddir in python{2,3}-build-${CARCH}; do
    rm -rf ${builddir} | true
    cp -r "${_realname}-${pkgver}" "${builddir}"
  done
  # Set version for setuptools_scm
  export SETUPTOOLS_SCM_PRETEND_VERSION=$pkgver
  # for python-pbr
  export PBR_VERSION=$pkgver
}

# Note that build() is sometimes skipped because it's done in 
# the packages setup.py install for simplicity if you can do so.
# but sometimes, you want to do a check before install which would
# also trigger the build.
build() {
  for pver in {2,3}; do  
    msg "Python ${pver} build for ${CARCH}"  
    cd "${srcdir}/python${pver}-build-${CARCH}"
    ${MINGW_PREFIX}/bin/python${pver} setup.py build
  done  
}

check() {
  for pver in {2,3}; do
    msg "Python ${pver} test for ${CARCH}"
    cd "${srcdir}/python${pver}-build-${CARCH}"
    ${MINGW_PREFIX}/bin/python${pver} setup.py check
  done
}

package_python3-debtcollector() {
  depends=("${MINGW_PACKAGE_PREFIX}-python3"
           "${MINGW_PACKAGE_PREFIX}-python3-six"
           "${MINGW_PACKAGE_PREFIX}-python3-pbr"
           "${MINGW_PACKAGE_PREFIX}-python3-babel" 
           "${MINGW_PACKAGE_PREFIX}-python3-wrapt")

  cd "${srcdir}/python3-build-${CARCH}"
  MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
  ${MINGW_PREFIX}/bin/python3 setup.py install --prefix=${MINGW_PREFIX} \
    --root="${pkgdir}" --optimize=1 --skip-build
}

package_python2-debtcollector() {
  depends=("${MINGW_PACKAGE_PREFIX}-python2"
           "${MINGW_PACKAGE_PREFIX}-python2-six"
           "${MINGW_PACKAGE_PREFIX}-python2-pbr"
           "${MINGW_PACKAGE_PREFIX}-python2-babel" 
           "${MINGW_PACKAGE_PREFIX}-python2-wrapt")

  cd "${srcdir}/python2-build-${CARCH}"
  MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
  ${MINGW_PREFIX}/bin/python2 setup.py install --prefix=${MINGW_PREFIX} \
    --root="${pkgdir}" --optimize=1 --skip-build
}

package_mingw-w64-i686-python2-debtcollector() {
  package_python2-debtcollector
}

package_mingw-w64-i686-python3-debtcollector() {
  package_python3-debtcollector
}

package_mingw-w64-x86_64-python2-debtcollector() {
  package_python2-debtcollector
}

package_mingw-w64-x86_64-python3-debtcollector() {
  package_python3-debtcollector
}
