--- a/cmake/SociConfig.cmake
+++ b/cmake/SociConfig.cmake
@@ -10,20 +10,20 @@
 
 include(CheckCXXSymbolExists)
 
-if(WIN32)
+if(MSVC)
   check_cxx_symbol_exists("_M_AMD64" "" SOCI_TARGET_ARCH_X64)
   if(NOT RTC_ARCH_X64)
     check_cxx_symbol_exists("_M_IX86" "" SOCI_TARGET_ARCH_X86)
   endif(NOT RTC_ARCH_X64)
   # add check for arm here
   # see http://msdn.microsoft.com/en-us/library/b0084kay.aspx
-else(WIN32)
+else()
   check_cxx_symbol_exists("__i386__" "" SOCI_TARGET_ARCH_X86)
   check_cxx_symbol_exists("__x86_64__" "" SOCI_TARGET_ARCH_X64)
   check_cxx_symbol_exists("__arm__" "" SOCI_TARGET_ARCH_ARM)
-endif(WIN32)
+endif()
 
-if(NOT DEFINED LIB_SUFFIX)
+if(NOT DEFINED LIB_SUFFIX AND NOT MINGW)
   if(SOCI_TARGET_ARCH_X64)
     set(_lib_suffix "64")
   else()
@@ -77,6 +77,21 @@
   set(SOCI_GCC_CLANG_COMMON_FLAGS
     "-pedantic -Wno-error=parentheses -Wall -Wextra -Wpointer-arith -Wcast-align -Wcast-qual -Wfloat-equal -Woverloaded-virtual -Wredundant-decls -Wno-long-long")
 
+  if (MINGW)
+     add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
+     add_definitions(-D_CRT_SECURE_NO_WARNINGS)
+     add_definitions(-D_CRT_NONSTDC_NO_WARNING)
+     add_definitions(-D_SCL_SECURE_NO_WARNINGS)
+
+     if("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
+        add_definitions(-DCATCH_CONFIG_CPP11_NO_IS_ENUM)
+     endif()
+
+     set(SOCI_CXX11 ON)
+     set(SOCI_CXX_VERSION_FLAGS "-std=c++14")
+     set(SOCI_GCC_CLANG_COMMON_FLAGS "${SOCI_GCC_CLANG_COMMON_FLAGS} -Wno-deprecated-copy")
+     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${SOCI_GCC_CLANG_COMMON_FLAGS} ${SOCI_CXX_VERSION_FLAGS}")
+  else()
 
   if (SOCI_CXX11)
     set(SOCI_CXX_VERSION_FLAGS "-std=c++11")
@@ -115,6 +130,7 @@
   else()
 	message(WARNING "Unknown toolset - using default flags to build SOCI")
   endif()
+  endif()
 
 endif()
 
