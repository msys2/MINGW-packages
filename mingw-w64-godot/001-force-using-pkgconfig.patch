--- a/platform/windows/detect.py
+++ b/platform/windows/detect.py
@@ -1,5 +1,7 @@
 import methods
+import platform
 import os
+import sys
 
 # To match other platforms
 STACK_SIZE = 8388608
@@ -305,6 +306,12 @@
     # http://www.scons.org/wiki/LongCmdLinesOnWin32
     env.use_windows_spawn_fix()
 
+    ## Architecture
+
+    is64 = sys.maxsize > 2 ** 32
+    if env["bits"] == "default":
+        env["bits"] = "64" if is64 else "32"
+
     ## Build type
 
     if env["target"] == "release":
@@ -431,6 +438,96 @@
     # resrc
     env.Append(BUILDERS={"RES": env.Builder(action=build_res_file, suffix=".o", src_suffix=".rc")})
 
+    # freetype depends on libpng and zlib, so bundling one of them while keeping others
+    # as shared libraries leads to weird issues
+    if env["builtin_freetype"] or env["builtin_libpng"] or env["builtin_zlib"]:
+        env["builtin_freetype"] = True
+        env["builtin_libpng"] = True
+        env["builtin_zlib"] = True
+
+    if not env["builtin_freetype"]:
+        env.ParseConfig("pkg-config freetype2 --cflags --libs")
+
+    if not env["builtin_libpng"]:
+        env.ParseConfig("pkg-config libpng16 --cflags --libs")
+
+    if not env["builtin_bullet"]:
+        # We need at least version 2.89
+        import subprocess
+
+        bullet_version = subprocess.check_output(["pkg-config", "bullet", "--modversion"]).strip()
+        if str(bullet_version) < "2.89":
+            # Abort as system bullet was requested but too old
+            print(
+                "Bullet: System version {0} does not match minimal requirements ({1}). Aborting.".format(
+                    bullet_version, "2.89"
+                )
+            )
+            sys.exit(255)
+        env.ParseConfig("pkg-config bullet --cflags --libs")
+
+    if not env["builtin_enet"]:
+        env.ParseConfig("pkg-config libenet --cflags --libs")
+
+    if not env["builtin_squish"]:
+        env.ParseConfig("pkg-config libsquish --cflags --libs")
+
+    if not env["builtin_zstd"]:
+        env.ParseConfig("pkg-config libzstd --cflags --libs")
+
+    # Sound and video libraries
+    # Keep the order as it triggers chained dependencies (ogg needed by others, etc.)
+
+    if not env["builtin_libtheora"]:
+        env["builtin_libogg"] = False  # Needed to link against system libtheora
+        env["builtin_libvorbis"] = False  # Needed to link against system libtheora
+        env.ParseConfig("pkg-config theora theoradec --cflags --libs")
+    else:
+        list_of_x86 = ["x86_64", "x86", "i386", "i586"]
+        if any(platform.machine() in s for s in list_of_x86):
+            env["x86_libtheora_opt_gcc"] = True
+
+    if not env["builtin_libvpx"]:
+        env.ParseConfig("pkg-config vpx --cflags --libs")
+
+    if not env["builtin_libvorbis"]:
+        env["builtin_libogg"] = False  # Needed to link against system libvorbis
+        env.ParseConfig("pkg-config vorbis vorbisfile --cflags --libs")
+
+    if not env["builtin_opus"]:
+        env["builtin_libogg"] = False  # Needed to link against system opus
+        env.ParseConfig("pkg-config opus opusfile --cflags --libs")
+
+    if not env["builtin_libogg"]:
+        env.ParseConfig("pkg-config ogg --cflags --libs")
+
+    if not env["builtin_libwebp"]:
+        env.ParseConfig("pkg-config libwebp --cflags --libs")
+
+    if not env["builtin_mbedtls"]:
+        # mbedTLS does not provide a pkgconfig config yet. See https://github.com/ARMmbed/mbedtls/issues/228
+        env.Append(LIBS=["mbedtls", "mbedcrypto", "mbedx509"])
+
+    if not env["builtin_wslay"]:
+        env.ParseConfig("pkg-config libwslay --cflags --libs")
+
+    if not env["builtin_miniupnpc"]:
+        # No pkgconfig file so far, hardcode default paths.
+        # env.Prepend(CPPPATH=["/usr/include/miniupnpc"])
+        env.Append(LIBS=["miniupnpc"])
+
+    if not env["builtin_pcre2"]:
+        env.ParseConfig("pkg-config libpcre2-32 libpcre2-16 --cflags --libs")
+
+    # Embree is only used in tools build on x86_64 and aarch64.
+    if env["tools"] and not env["builtin_embree"] and is64:
+        # No pkgconfig file so far, hardcode expected lib name.
+        env.Append(LIBS=["embree3"])
+
+    # Linkflags below this line should typically stay the last ones
+    if not env["builtin_zlib"]:
+        env.ParseConfig("pkg-config zlib --cflags --libs")
+
 
 def configure(env):
     # At this point the env has been set up with basic tools/compilers.
