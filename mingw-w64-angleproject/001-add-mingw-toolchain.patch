diff --git a/config/BUILD.gn b/config/BUILD.gn
index 265d4bc07..b0030b8ff 100644
--- a/config/BUILD.gn
+++ b/config/BUILD.gn
@@ -112,13 +112,13 @@ config("debug") {
     defines += [ "DYNAMIC_ANNOTATIONS_PREFIX=NACL_" ]
   }
 
-  if (is_win) {
+  if (is_msvs) {
     if (!enable_iterator_debugging && !use_custom_libcxx) {
       # Iterator debugging is enabled by default by the compiler on debug
       # builds, and we have to tell it to turn it off.
       defines += [ "_HAS_ITERATOR_DEBUGGING=0" ]
     }
-  } else if ((is_linux || is_chromeos) && current_cpu == "x64" &&
+  } else if ((is_linux || is_chromeos || is_mingw) && current_cpu == "x64" &&
              enable_iterator_debugging) {
     # Enable libstdc++ debugging facilities to help catch problems early, see
     # http://crbug.com/65151 .
@@ -158,25 +158,25 @@ config("default_libs") {
     # instead the targets that use the less common ones (e.g. wininet or
     # winspool) should include those explicitly.
     libs = [
-      "advapi32.lib",
-      "comdlg32.lib",
-      "dbghelp.lib",
-      "dnsapi.lib",
-      "gdi32.lib",
-      "msimg32.lib",
-      "odbc32.lib",
-      "odbccp32.lib",
-      "oleaut32.lib",
-      "shell32.lib",
-      "shlwapi.lib",
-      "user32.lib",
-      "usp10.lib",
-      "uuid.lib",
-      "version.lib",
-      "wininet.lib",
-      "winmm.lib",
-      "winspool.lib",
-      "ws2_32.lib",
+      "advapi32",
+      "comdlg32",
+      "dbghelp",
+      "dnsapi",
+      "gdi32",
+      "msimg32",
+      "odbc32",
+      "odbccp32",
+      "oleaut32",
+      "shell32",
+      "shlwapi",
+      "user32",
+      "usp10",
+      "uuid",
+      "version",
+      "wininet",
+      "winmm",
+      "winspool",
+      "ws2_32",
 
       # Please don't add more stuff here. We should actually be making this
       # list smaller, since all common things should be covered. If you need
@@ -192,9 +192,9 @@ config("default_libs") {
     } else {
       # These libraries are not compatible with Windows UWP (i.e. store apps.)
       libs += [
-        "delayimp.lib",
-        "kernel32.lib",
-        "ole32.lib",
+        "delayimp",
+        "kernel32",
+        "ole32",
       ]
     }
   } else if (is_android) {
@@ -283,9 +283,13 @@ group("shared_library_deps") {
 # Windows linker setup for EXEs and DLLs.
 if (is_win) {
   _windows_linker_configs = [
-    "//build/config/win:sdk_link",
     "//build/config/win:common_linker_setup",
   ]
+  if (is_msvs) {
+    _windows_linker_configs += [
+      "//build/config/win:sdk_link",
+    ]
+  }
 }
 
 # This config defines the configs applied to all executables.
@@ -361,7 +365,7 @@ config("shared_library_config") {
 # Recommend precompiled headers for targets with more than 50 .cc files.
 config("precompiled_headers") {
   if (enable_precompiled_headers) {
-    if (is_win) {
+    if (is_msvs) {
       # This is a string rather than a file GN knows about. It has to match
       # exactly what's in the /FI flag below, and what might appear in the
       # source code in quotes for an #include directive.
diff --git a/config/BUILDCONFIG.gn b/config/BUILDCONFIG.gn
index efba84719..bb4069e5d 100644
--- a/config/BUILDCONFIG.gn
+++ b/config/BUILDCONFIG.gn
@@ -135,12 +135,16 @@ declare_args() {
   # set "is_official_build" to true for any build intended to ship to end-users.
   is_official_build = false
 
+  # Set to true when compiling with the MinGW GCC compiler on the MSYS2 environment.
+  is_mingw = getenv("MSYSTEM") != "" && getenv("MSYSTEM") != "MSYS"
+
   # Set to true when compiling with the Clang compiler.
-  is_clang = current_os != "linux" ||
+  is_clang = (current_os != "linux" ||
              (current_cpu != "s390x" && current_cpu != "s390" &&
               current_cpu != "ppc64" && current_cpu != "ppc" &&
               current_cpu != "mips" && current_cpu != "mips64" &&
-              current_cpu != "riscv64")
+              current_cpu != "riscv64")) &&
+              (getenv("CC") == "clang" || getenv("CC") == "clang-cl")
 
   # Allows the path to a custom target toolchain to be injected as a single
   # argument, and set as the default toolchain.
@@ -211,13 +215,17 @@ if (host_toolchain == "") {
     # configurations we support this will always work and it saves build steps.
     # Windows ARM64 targets require an x64 host for cross build.
     if (target_cpu == "x86" || target_cpu == "x64") {
-      if (is_clang) {
+      if (is_clang && !is_mingw) {
         host_toolchain = "//build/toolchain/win:win_clang_$target_cpu"
+      } else if (is_mingw) {
+        host_toolchain = "//build/toolchain/win:mingw_$target_cpu"
       } else {
         host_toolchain = "//build/toolchain/win:$target_cpu"
       }
-    } else if (is_clang) {
+    } else if (!is_clang && !is_mingw) {
       host_toolchain = "//build/toolchain/win:win_clang_$host_cpu"
+    } else if (is_mingw) {
+      host_toolchain = "//build/toolchain/win:mingw_$host_cpu"
     } else {
       host_toolchain = "//build/toolchain/win:$host_cpu"
     }
@@ -253,8 +261,10 @@ if (target_os == "android") {
 } else if (target_os == "win") {
   # On Windows, we use the same toolchain for host and target by default.
   # Beware, win cross builds have some caveats, see docs/win_cross.md
-  if (is_clang) {
+  if (is_clang && !is_mingw) {
     _default_toolchain = "//build/toolchain/win:win_clang_$target_cpu"
+  } else if (is_mingw) {
+    _default_toolchain = "//build/toolchain/win:mingw_$target_cpu"
   } else {
     _default_toolchain = "//build/toolchain/win:$target_cpu"
   }
@@ -309,6 +319,7 @@ is_win = current_os == "win" || current_os == "winuwp"
 
 is_apple = is_ios || is_mac
 is_posix = !is_win && !is_fuchsia
+is_msvs = is_win && !is_mingw
 
 # =============================================================================
 # TARGET DEFAULTS
@@ -411,7 +422,7 @@ set_defaults("rust_proc_macro") {
 
 # Compute the set of configs common to all linked targets (shared libraries,
 # loadable modules, executables) to avoid duplication below.
-if (is_win) {
+if (is_msvs) {
   # Many targets remove these configs, so they are not contained within
   # //build/config:executable_config for easy removal.
   _linker_configs = [
@@ -433,7 +444,7 @@ default_executable_configs = default_compiler_configs + [
                                "//build/config:executable_config",
                              ] + _linker_configs
 
-if (is_win) {
+if (is_msvs) {
   # Turn on linker CFI for executables, and position it so it can be removed
   # if needed.
   default_executable_configs += [ "//build/config/win:cfi_linker" ]
@@ -449,7 +460,7 @@ default_shared_library_configs = default_compiler_configs + [
                                    "//build/config:default_libs",
                                    "//build/config:shared_library_config",
                                  ] + _linker_configs
-if (is_win) {
+if (is_msvs) {
   # Turn on linker CFI for DLLs, and position it so it can be removed if needed.
   default_shared_library_configs += [ "//build/config/win:cfi_linker" ]
 }
diff --git a/config/clang/BUILD.gn b/config/clang/BUILD.gn
index 8fd6760f3..0dae22f48 100644
--- a/config/clang/BUILD.gn
+++ b/config/clang/BUILD.gn
@@ -4,6 +4,10 @@
 
 import("clang.gni")
 
+if (is_mingw) {
+  clang_use_chrome_plugins = false
+}
+
 config("find_bad_constructs") {
   if (clang_use_chrome_plugins) {
     cflags = []
diff --git a/config/compiler/BUILD.gn b/config/compiler/BUILD.gn
index 7183544ea..23e27efbf 100644
--- a/config/compiler/BUILD.gn
+++ b/config/compiler/BUILD.gn
@@ -304,13 +304,13 @@ config("compiler") {
 
   # In general, Windows is totally different, but all the other builds share
   # some common compiler and linker configuration.
-  if (!is_win) {
+  if (!is_msvs) {
     # Common POSIX compiler flags setup.
     # --------------------------------
     cflags += [ "-fno-strict-aliasing" ]  # See http://crbug.com/32204
 
     # Stack protection.
-    if (is_apple) {
+    if (is_apple || is_mingw) {
       # The strong variant of the stack protector significantly increases
       # binary size, so only enable it in debug mode.
       if (is_debug) {
@@ -364,7 +364,7 @@ config("compiler") {
 
   # Non-Apple Posix and Fuchsia compiler flags setup.
   # -----------------------------------
-  if ((is_posix && !is_apple) || is_fuchsia) {
+  if ((is_posix && !is_apple) || is_fuchsia || is_mingw) {
     if (enable_profiling) {
       if (!is_debug) {
         cflags += [ "-g" ]
@@ -514,11 +514,11 @@ config("compiler") {
     # TODO(thakis): Make the driver pass --color-diagnostics to the linker
     # if -fcolor-diagnostics is passed to it, and pass -fcolor-diagnostics
     # in ldflags instead.
-    if (is_win) {
+    if (is_msvs) {
       # On Windows, we call the linker directly, instead of calling it through
       # the driver.
       ldflags += [ "--color-diagnostics" ]
-    } else {
+    } else if (!is_clang) {
       ldflags += [ "-Wl,--color-diagnostics" ]
     }
   }
@@ -545,7 +545,7 @@ config("compiler") {
       "-instcombine-lower-dbg-declare=0",
     ]
     if (!is_debug && use_thin_lto && is_a_target_toolchain) {
-      if (is_win) {
+      if (is_msvs) {
         ldflags += [ "-mllvm:-instcombine-lower-dbg-declare=0" ]
       } else {
         ldflags += [ "-Wl,-mllvm,-instcombine-lower-dbg-declare=0" ]
@@ -553,7 +553,7 @@ config("compiler") {
     }
 
     # TODO(crbug.com/1235145): Investigate why/if this should be needed.
-    if (is_win) {
+    if (is_msvs) {
       cflags += [ "/clang:-ffp-contract=off" ]
     } else {
       cflags += [ "-ffp-contract=off" ]
@@ -567,7 +567,7 @@ config("compiler") {
 
   # C11/C++11 compiler flags setup.
   # ---------------------------
-  if (is_linux || is_chromeos || is_android || (is_nacl && is_clang) ||
+  if (is_linux || is_mingw || is_chromeos || is_android || (is_nacl && is_clang) ||
       current_os == "aix") {
     if (is_clang) {
       standard_prefix = "c"
@@ -612,7 +612,7 @@ config("compiler") {
       # support "c++20"/"gnu++20".
       cflags_cc += [ "-std=${standard_prefix}++2a" ]
     }
-  } else if (is_win) {
+  } else if (is_msvs) {
     cflags_c += [ "/std:c11" ]
     if (!is_clang && defined(msvc_use_cxx17) && msvc_use_cxx17) {
       cflags_cc += [ "/std:c++17" ]
@@ -673,7 +673,7 @@ config("compiler") {
     # should be able to better manage binary size increases on its own.
     import_instr_limit = 30
 
-    if (is_win) {
+    if (is_msvs) {
       ldflags += [
         "/opt:lldltojobs=all",
         "-mllvm:-import-instr-limit=$import_instr_limit",
@@ -731,7 +731,7 @@ config("compiler") {
     # arm32.
     if (!is_android || current_cpu == "arm64") {
       cflags += [ "-fwhole-program-vtables" ]
-      if (!is_win) {
+      if (!is_msvs) {
         ldflags += [ "-fwhole-program-vtables" ]
       }
     }
@@ -749,7 +749,7 @@ config("compiler") {
   if (compiler_timing) {
     if (is_clang && !is_nacl) {
       cflags += [ "-ftime-trace" ]
-    } else if (is_win) {
+    } else if (is_msvs) {
       cflags += [
         # "Documented" here:
         # http://aras-p.info/blog/2017/10/23/Best-unknown-MSVC-flag-d2cgsummary/
@@ -774,7 +774,7 @@ config("compiler") {
   # present. On Android this increases binary size due to more thinks for long
   # jumps. Turn it off by default and enable selectively for targets where it's
   # beneficial.
-  if (use_lld && !enable_call_graph_profile_sort) {
+  if (use_lld && !is_mingw && !enable_call_graph_profile_sort) {
     if (is_win) {
       ldflags += [ "/call-graph-profile-sort:no" ]
     } else {
@@ -783,7 +783,7 @@ config("compiler") {
   }
 
   if (is_clang && !is_nacl && show_includes) {
-    if (is_win) {
+    if (is_msvs) {
       # TODO(crbug.com/1223741): Goma mixes the -H and /showIncludes output.
       assert(!use_goma, "show_includes on Windows is not reliable with goma")
       cflags += [
@@ -901,7 +901,7 @@ config("thinlto_optimize_default") {
   if (!is_debug && use_thin_lto && is_a_target_toolchain) {
     lto_opt_level = 0
 
-    if (is_win) {
+    if (is_msvs) {
       ldflags = [ "/opt:lldlto=" + lto_opt_level ]
     } else {
       ldflags = [ "-Wl,--lto-O" + lto_opt_level ]
@@ -925,7 +925,7 @@ config("thinlto_optimize_max") {
       lto_opt_level = 0
     }
 
-    if (is_win) {
+    if (is_msvs) {
       ldflags = [ "/opt:lldlto=" + lto_opt_level ]
     } else {
       ldflags = [ "-Wl,--lto-O" + lto_opt_level ]
@@ -1298,7 +1298,7 @@ config("compiler_deterministic") {
   # Eliminate build metadata (__DATE__, __TIME__ and __TIMESTAMP__) for
   # deterministic build.  See https://crbug.com/314403
   if (!is_official_build) {
-    if (is_win && !is_clang) {
+    if (is_msvs && !is_clang) {
       cflags += [
         "/wd4117",  # Trying to define or undefine a predefined macro.
         "/D__DATE__=",
@@ -1341,7 +1341,7 @@ config("compiler_deterministic") {
       asmflags = [ "-Wa,-fdebug-compilation-dir,." ]
     }
 
-    if (is_win && use_lld) {
+    if (is_msvs && use_lld) {
       if (symbol_level == 2 || (is_clang && using_sanitizer)) {
         # Absolutize source file paths for PDB. Pass the real build directory
         # if the pdb contains source-level debug information and if linker
@@ -1367,14 +1367,14 @@ config("compiler_deterministic") {
     # directly there, not through the compiler driver.
     # We don't link on goma, so this change is just for cleaner
     # internal linker invocations, for people who work on the build.
-    if (!is_win) {
+    if (!is_msvs) {
       ldflags += [ "-no-canonical-prefixes" ]
     }
   }
 }
 
 config("clang_revision") {
-  if (is_clang && clang_base_path == default_clang_base_path) {
+  if (is_msvs && is_clang && clang_base_path == default_clang_base_path) {
     update_args = [
       "--print-revision",
       "--verify-version=$clang_version",
@@ -1495,7 +1495,7 @@ config("default_warnings") {
   cflags_cc = []
   ldflags = []
 
-  if (is_win) {
+  if (is_msvs) {
     if (treat_warnings_as_errors) {
       cflags += [ "/WX" ]
     }
@@ -1570,10 +1570,30 @@ config("default_warnings") {
       # files.
       cflags += [ "-Wno-packed-not-aligned" ]
     }
+
+    if (is_mingw) {
+      cflags += [
+        "-Wno-attributes",           # "__decspec(dllimport) inline"
+        "-Wno-format",               # PRIu64 llu support on MinGW
+        "-Wno-parentheses",
+        "-Wno-unknown-pragmas",
+      ]
+      if (!is_clang) {
+        cflags += [
+          "-Wno-array-bounds",
+          "-Wno-conversion-null",
+          "-Wno-dangling-pointer",
+          "-Wno-sign-compare",
+          "-Wno-stringop-truncation",
+          "-Wno-unused-but-set-variable",
+          "-Wno-stringop-overflow",    # False positive overflow error on gcc 10
+        ]
+      }
+    }
   }
 
   # Common Clang and GCC warning setup.
-  if (!is_win || is_clang) {
+  if (!is_msvs || is_clang) {
     cflags += [
       # Disables.
       "-Wno-missing-field-initializers",  # "struct foo f = {0};"
@@ -1675,7 +1695,7 @@ config("prevent_unsafe_narrowing") {
 # part of Chromium.
 
 config("chromium_code") {
-  if (is_win) {
+  if (is_msvs) {
     if (is_clang) {
       cflags = [ "/W4" ]  # Warning level 4.
 
@@ -1762,7 +1782,7 @@ config("no_chromium_code") {
   cflags_cc = []
   defines = []
 
-  if (is_win) {
+  if (is_msvs) {
     if (is_clang) {
       cflags += [ "/W3" ]  # Warning level 3.
     }
@@ -1829,7 +1849,7 @@ config("noshadowing") {
 # Allows turning Run-Time Type Identification on or off.
 
 config("rtti") {
-  if (is_win) {
+  if (is_msvs) {
     cflags_cc = [ "/GR" ]
   } else {
     cflags_cc = [ "-frtti" ]
@@ -1839,7 +1859,7 @@ config("rtti") {
 config("no_rtti") {
   # Some sanitizer configs may require RTTI to be left enabled globally
   if (!use_rtti) {
-    if (is_win) {
+    if (is_msvs) {
       cflags_cc = [ "/GR-" ]
     } else {
       cflags_cc = [ "-fno-rtti" ]
@@ -1883,7 +1903,7 @@ config("thin_archive") {
   # confuses lldb.
   if ((is_posix && !is_nacl && !is_apple) || is_fuchsia) {
     arflags = [ "-T" ]
-  } else if (is_win && use_lld) {
+  } else if (is_msvs && use_lld) {
     arflags = [ "/llvmlibthin" ]
   }
 }
@@ -1894,7 +1914,7 @@ config("thin_archive") {
 # Note: exceptions are disallowed in Google code.
 
 config("exceptions") {
-  if (is_win) {
+  if (is_msvs) {
     # Enables exceptions in the STL.
     if (!use_custom_libcxx) {
       defines = [ "_HAS_EXCEPTIONS=1" ]
@@ -1907,7 +1927,7 @@ config("exceptions") {
 }
 
 config("no_exceptions") {
-  if (is_win) {
+  if (is_msvs) {
     # Disables exceptions in the STL.
     # libc++ uses the __has_feature macro to control whether to use exceptions,
     # so defining this macro is unnecessary. Defining _HAS_EXCEPTIONS to 0 also
@@ -1973,7 +1993,7 @@ config("no_incompatible_pointer_warnings") {
 
 # Shared settings for both "optimize" and "optimize_max" configs.
 # IMPORTANT: On Windows "/O1" and "/O2" must go before the common flags.
-if (is_win) {
+if (is_msvs) {
   common_optimize_on_cflags = [
     "/Ob2",  # Both explicit and auto inlining.
     "/Oy-",  # Disable omitting frame pointers, must be after /O2.
@@ -2052,7 +2072,7 @@ if (is_win) {
 }
 
 config("default_stack_frames") {
-  if (is_posix || is_fuchsia) {
+  if (is_posix || is_fuchsia || is_mingw) {
     if (enable_frame_pointers) {
       cflags = [ "-fno-omit-frame-pointer" ]
 
@@ -2079,7 +2099,7 @@ config("default_stack_frames") {
 
 # Default "optimization on" config.
 config("optimize") {
-  if (is_win) {
+  if (is_msvs) {
     if (chrome_pgo_phase != 2) {
       # Favor size over speed, /O1 must be before the common flags.
       # /O1 implies /Os and /GF.
@@ -2138,7 +2158,7 @@ config("optimize") {
 
 # Turn off optimizations.
 config("no_optimize") {
-  if (is_win) {
+  if (is_msvs) {
     cflags = [
       "/Od",  # Disable optimization.
       "/Ob0",  # Disable all inlining (on by default).
@@ -2190,7 +2210,7 @@ config("optimize_max") {
     configs = [ "//build/config/nacl:irt_optimize" ]
   } else {
     ldflags = common_optimize_on_ldflags
-    if (is_win) {
+    if (is_msvs) {
       # Favor speed over size, /O2 must be before the common flags.
       # /O2 implies /Ot, /Oi, and /GF.
       cflags = [ "/O2" ] + common_optimize_on_cflags
@@ -2223,7 +2243,7 @@ config("optimize_speed") {
     configs = [ "//build/config/nacl:irt_optimize" ]
   } else {
     ldflags = common_optimize_on_ldflags
-    if (is_win) {
+    if (is_msvs) {
       # Favor speed over size, /O2 must be before the common flags.
       # /O2 implies /Ot, /Oi, and /GF.
       cflags = [ "/O2" ] + common_optimize_on_cflags
@@ -2357,7 +2377,7 @@ config("win_pdbaltpath") {
 
 # Full symbols.
 config("symbols") {
-  if (is_win) {
+  if (is_msvs) {
     if (is_clang) {
       cflags = [
         # Debug information in the .obj files.
@@ -2445,7 +2465,7 @@ config("symbols") {
     # DWARF info may be corrupt; offsets in a range list entry are in different
     # sections" there.  Maybe just a bug in nacl_switch_32.S.
     _enable_gdb_index =
-        symbol_level == 2 && !is_apple && !is_nacl && current_cpu != "x86" &&
+        symbol_level == 2 && !is_apple && !is_mingw && !is_nacl && current_cpu != "x86" &&
         current_os != "zos" && (use_gold || use_lld) &&
         # Disable on non-fission 32-bit Android because it pushes
         # libcomponents_unittests over the 4gb size limit.
@@ -2496,7 +2516,7 @@ config("symbols") {
 # This config guarantees to hold symbol for stack trace which are shown to user
 # when crash happens in unittests running on buildbot.
 config("minimal_symbols") {
-  if (is_win) {
+  if (is_msvs) {
     # Functions, files, and line tables only.
     cflags = []
 
@@ -2569,7 +2589,7 @@ config("minimal_symbols") {
 # told to not generate debug information and the linker then just puts function
 # names in the final debug information.
 config("no_symbols") {
-  if (is_win) {
+  if (is_msvs) {
     ldflags = [ "/DEBUG" ]
 
     # All configs using /DEBUG should include this:
@@ -2665,6 +2685,11 @@ buildflag_header("compiler_buildflags") {
 config("cet_shadow_stack") {
   if (enable_cet_shadow_stack && is_win) {
     assert(target_cpu == "x64")
-    ldflags = [ "/CETCOMPAT" ]
+    if (is_mingw) {
+      ldflags = [ "-fcf-protection=full" ]
+      cflags = [ "-fcf-protection=full" ]
+    } else {
+      ldflags = [ "/CETCOMPAT" ]
+    }
   }
 }
diff --git a/config/linux/pkg-config.py b/config/linux/pkg-config.py
index f4133637f..ad43144c0 100755
--- a/config/linux/pkg-config.py
+++ b/config/linux/pkg-config.py
@@ -41,6 +41,11 @@ from optparse import OptionParser
 # Additionally, you can specify the option --atleast-version. This will skip
 # the normal outputting of a dictionary and instead print true or false,
 # depending on the return value of pkg-config for the given package.
+#
+# --pkg_config_libdir=<path> allows direct override
+# of the PKG_CONFIG_LIBDIR environment library.
+#
+# --full-path-libs causes lib names to include their full path.
 
 
 def SetConfigPath(options):
@@ -104,12 +109,29 @@ def RewritePath(path, strip_prefix, sysroot):
   else:
     return path
 
+flag_regex = re.compile("(-.)(.+)")
+
+def FlagReplace(matchobj):
+  if matchobj.group(1) == '-I':
+     return matchobj.group(1) + subprocess.check_output([u'cygpath',u'-w',matchobj.group(2)]).strip().decode("utf-8")
+  if matchobj.group(1) == '-L':
+     return matchobj.group(1) + subprocess.check_output([u'cygpath',u'-w',matchobj.group(2)]).strip().decode("utf-8")
+  if matchobj.group(1) == '-l':
+     return matchobj.group(1) + matchobj.group(2) + '.lib'
+  return matchobj.group(0)
+
+def ConvertGCCToMSVC(flags):
+  """Rewrites GCC flags into MSVC flags."""
+  # need a better way to determine mingw vs msvc build
+  if 'win32' not in sys.platform or "GCC" in sys.version:
+    return flags
+  return [ flag_regex.sub(FlagReplace,flag) for flag in flags]
 
 def main():
   # If this is run on non-Linux platforms, just return nothing and indicate
   # success. This allows us to "kind of emulate" a Linux build from other
   # platforms.
-  if "linux" not in sys.platform:
+  if "linux" not in sys.platform and "win32" not in sys.platform:
     print("[[],[],[],[],[]]")
     return 0
 
@@ -122,12 +144,15 @@ def main():
   parser.add_option('-a', action='store', dest='arch', type='string')
   parser.add_option('--system_libdir', action='store', dest='system_libdir',
                     type='string', default='lib')
+  parser.add_option('--pkg_config_libdir', action='store', dest='pkg_config_libdir',
+                    type='string')
   parser.add_option('--atleast-version', action='store',
                     dest='atleast_version', type='string')
   parser.add_option('--libdir', action='store_true', dest='libdir')
   parser.add_option('--dridriverdir', action='store_true', dest='dridriverdir')
   parser.add_option('--version-as-components', action='store_true',
                     dest='version_as_components')
+  parser.add_option('--full-path-libs', action='store_true', dest='full_path_libs')
   (options, args) = parser.parse_args()
 
   # Make a list of regular expressions to strip out.
@@ -144,6 +169,10 @@ def main():
   else:
     prefix = ''
 
+  # Override PKG_CONFIG_LIBDIR
+  if options.pkg_config_libdir:
+    os.environ['PKG_CONFIG_LIBDIR'] = options.pkg_config_libdir
+
   if options.atleast_version:
     # When asking for the return value, just run pkg-config and print the return
     # value, no need to do other work.
@@ -203,7 +232,7 @@ def main():
   # For now just split on spaces to get the args out. This will break if
   # pkgconfig returns quoted things with spaces in them, but that doesn't seem
   # to happen in practice.
-  all_flags = flag_string.strip().split(' ')
+  all_flags = ConvertGCCToMSVC(flag_string.strip().split(' '))
 
 
   sysroot = options.sysroot
@@ -220,7 +249,10 @@ def main():
       continue;
 
     if flag[:2] == '-l':
-      libs.append(RewritePath(flag[2:], prefix, sysroot))
+      library = RewritePath(flag[2:], prefix, sysroot)
+      # Skip math library on MSVC
+      if library != 'm.lib':
+        libs.append(library)
     elif flag[:2] == '-L':
       lib_dirs.append(RewritePath(flag[2:], prefix, sysroot))
     elif flag[:2] == '-I':
@@ -237,6 +269,14 @@ def main():
     else:
       cflags.append(flag)
 
+  if options.full_path_libs:
+    full_path_libs = []
+    for lib_dir in lib_dirs:
+      for lib in libs:
+        if os.path.isfile(lib_dir+"/"+lib):
+          full_path_libs.append(lib_dir+"/"+lib)
+    libs = full_path_libs
+
   # Output a GN array, the first one is the cflags, the second are the libs. The
   # JSON formatter prints GN compatible lists when everything is a list of
   # strings.
diff --git a/config/linux/pkg_config.gni b/config/linux/pkg_config.gni
index cb9b46003..e2428abbe 100644
--- a/config/linux/pkg_config.gni
+++ b/config/linux/pkg_config.gni
@@ -45,6 +45,9 @@ declare_args() {
   # in similar fashion by setting the `system_libdir` variable in the build's
   # args.gn file to 'lib' or 'lib64' as appropriate for the target architecture.
   system_libdir = "lib"
+
+  # Allow directly overriding the PKG_CONFIG_LIBDIR enviroment variable
+  pkg_config_libdir = ""
 }
 
 pkg_config_script = "//build/config/linux/pkg-config.py"
@@ -88,6 +91,17 @@ if (host_pkg_config != "") {
   host_pkg_config_args = pkg_config_args
 }
 
+if (pkg_config_libdir != "") {
+  pkg_config_args += [
+    "--pkg_config_libdir",
+    pkg_config_libdir,
+  ]
+  host_pkg_config_args += [
+    "--pkg_config_libdir",
+    pkg_config_libdir,
+  ]
+}
+
 template("pkg_config") {
   assert(defined(invoker.packages),
          "Variable |packages| must be defined to be a list in pkg_config.")
diff --git a/config/sanitizers/BUILD.gn b/config/sanitizers/BUILD.gn
index cb07c5471..7bf474639 100644
--- a/config/sanitizers/BUILD.gn
+++ b/config/sanitizers/BUILD.gn
@@ -58,7 +58,7 @@ group("deps") {
 assert(!(is_win && is_asan && current_cpu == "x86"),
        "ASan is only supported in 64-bit builds on Windows.")
 
-if ((is_apple || is_win) && is_asan) {
+if ((is_apple || is_msvs) && is_asan) {
   if (is_mac || (is_ios && target_environment == "catalyst")) {
     _clang_rt_dso_path = "darwin/libclang_rt.asan_osx_dynamic.dylib"
   } else if (is_ios) {
@@ -155,7 +155,7 @@ config("default_sanitizer_ldflags") {
     "//tools/ipc_fuzzer/fuzzer:ipc_fuzzer",
   ]
 
-  if (is_posix || is_fuchsia) {
+  if (is_posix || is_fuchsia || is_mingw) {
     ldflags = []
     if (is_asan) {
       ldflags += [ "-fsanitize=address" ]
@@ -210,7 +210,7 @@ config("default_sanitizer_ldflags") {
         }
       }
     }
-  } else if (is_win) {
+  } else if (is_msvs) {
     # Windows directly calls link.exe instead of the compiler driver when
     # linking.  Hence, pass the runtime libraries instead of -fsanitize=address
     # or -fsanitize=fuzzer.
@@ -273,14 +273,14 @@ config("asan_flags") {
 }
 
 config("link_executable") {
-  if (is_asan && is_win && !is_component_build) {
+  if (is_asan && is_msvs && !is_component_build) {
     assert(current_cpu == "x64", "WinASan unsupported architecture")
     ldflags = [ "-wholearchive:clang_rt.asan-x86_64.lib" ]
   }
 }
 
 config("link_shared_library") {
-  if (is_asan && is_win && !is_component_build) {
+  if (is_asan && is_msvs && !is_component_build) {
     assert(current_cpu == "x64", "WinASan unsupported architecture")
     libs = [ "clang_rt.asan_dll_thunk-x86_64.lib" ]
   }
@@ -311,7 +311,7 @@ config("cfi_flags") {
 
     if (use_cfi_diag) {
       cflags += [ "-fno-sanitize-trap=cfi" ]
-      if (is_win) {
+      if (is_msvs) {
         cflags += [
           "/Oy-",
           "/Ob0",
diff --git a/config/win/BUILD.gn b/config/win/BUILD.gn
index a5075393b..bc8f4e2c6 100644
--- a/config/win/BUILD.gn
+++ b/config/win/BUILD.gn
@@ -52,6 +52,7 @@ declare_args() {
 # is applied to all targets. It is here to separate out the logic that is
 # Windows-only.
 config("compiler") {
+  if (is_msvs) {
   if (current_cpu == "x86") {
     asmflags = [
       # When /safeseh is specified, the linker will only produce an image if it
@@ -214,6 +215,17 @@ config("compiler") {
     # the source file is a no-op.
     "/ignore:4221",
   ]
+  } else {
+    if (current_cpu == "x86" || current_cpu == "x64") {
+      cflags = [ "-msse3" ]
+    }
+    if (current_cpu == "x86") {
+      ldflags = [ "-m32" ]
+      ldflags += [ "-Wl,--enable-stdcall-fixup" ]
+    } else if (current_cpu == "x64") {
+      ldflags = [ "-m64" ]
+    }
+  }
 }
 
 # This is included by reference in the //build/config/compiler:runtime_library
@@ -317,19 +326,27 @@ config("sdk_link") {
 # targets who want different library configurations can remove this and specify
 # their own.
 config("common_linker_setup") {
-  ldflags = [
-    "/FIXED:NO",
-    "/ignore:4199",
-    "/ignore:4221",
-    "/NXCOMPAT",
-    "/DYNAMICBASE",
-  ]
-
-  if (win_linker_timing) {
-    ldflags += [
-      "/time",
-      "/verbose:incr",
+  if (is_mingw) {
+    # Enable DEP and ASLR
+    ldflags = [
+      "-Wl,-dynamicbase",
+      "-Wl,-nxcompat",
+     ]
+  } else {
+    ldflags = [
+      "/FIXED:NO",
+      "/ignore:4199",
+      "/ignore:4221",
+      "/NXCOMPAT",
+      "/DYNAMICBASE",
     ]
+
+    if (win_linker_timing) {
+      ldflags += [
+        "/time",
+        "/verbose:incr",
+      ]
+    }
   }
 }
 
@@ -338,7 +355,7 @@ config("default_cfg_compiler") {
   # This is needed to allow functions to be called by code that is built
   # with CFG enabled, such as system libraries.
   # The CFG guards are only emitted if |win_enable_cfg_guards| is enabled.
-  if (is_clang) {
+  if (is_msvs && is_clang) {
     if (win_enable_cfg_guards) {
       cflags = [ "/guard:cf" ]
     } else {
@@ -353,7 +370,7 @@ config("disable_guards_cfg_compiler") {
   # Emit table of address-taken functions for Control-Flow Guard (CFG).
   # This is needed to allow functions to be called by code that is built
   # with CFG enabled, such as system libraries.
-  if (is_clang) {
+  if (is_msvs && is_clang) {
     cflags = [ "/guard:cf,nochecks" ]
   }
 }
@@ -457,6 +474,7 @@ config("delayloads_not_for_child_dll") {
 # See https://msdn.microsoft.com/en-us/library/2kzt1wy3.aspx for a reference of
 # what each value does.
 config("default_crt") {
+if (is_msvs) {
   if (is_component_build) {
     # Component mode: dynamic CRT. Since the library is shared, it requires
     # exceptions or will give errors about things not matching, so keep
@@ -474,12 +492,14 @@ config("default_crt") {
     }
   }
 }
+}
 
 # Use this to force use of the release CRT when building perf-critical build
 # tools that need to be fully optimized even in debug builds, for those times
 # when the debug CRT is part of the bottleneck. This also avoids *implicitly*
 # defining _DEBUG.
 config("release_crt") {
+if (is_msvs) {
   if (is_component_build) {
     cflags = [ "/MD" ]
 
@@ -495,8 +515,10 @@ config("release_crt") {
     }
   }
 }
+}
 
 config("dynamic_crt") {
+if (is_msvs) {
   if (is_debug) {
     # This pulls in the DLL debug CRT and defines _DEBUG
     cflags = [ "/MDd" ]
@@ -510,8 +532,10 @@ config("dynamic_crt") {
     }
   }
 }
+}
 
 config("static_crt") {
+if (is_msvs) {
   if (is_debug) {
     # This pulls in the static debug CRT and defines _DEBUG
     cflags = [ "/MTd" ]
@@ -525,27 +549,34 @@ config("static_crt") {
     }
   }
 }
+}
 
 # Subsystem --------------------------------------------------------------------
 
 # This is appended to the subsystem to specify a minimum version.
-if (current_cpu == "x64") {
-  # The number after the comma is the minimum required OS version.
-  # 5.02 = Windows Server 2003.
-  subsystem_version_suffix = ",5.02"
-} else if (current_cpu == "arm64") {
-  # Windows ARM64 requires Windows 10.
-  subsystem_version_suffix = ",10.0"
-} else {
-  # 5.01 = Windows XP.
-  subsystem_version_suffix = ",5.01"
+if (is_msvs) {
+  if (current_cpu == "x64") {
+    # The number after the comma is the minimum required OS version.
+    # 5.02 = Windows Server 2003.
+    subsystem_version_suffix = ",5.02"
+  } else if (current_cpu == "arm64") {
+    # Windows ARM64 requires Windows 10.
+    subsystem_version_suffix = ",10.0"
+  } else {
+    # 5.01 = Windows XP.
+    subsystem_version_suffix = ",5.01"
+  }
 }
 
 config("console") {
-  ldflags = [ "/SUBSYSTEM:CONSOLE$subsystem_version_suffix" ]
+  if (is_msvs) {
+    ldflags = [ "/SUBSYSTEM:CONSOLE$subsystem_version_suffix" ]
+  }
 }
 config("windowed") {
-  ldflags = [ "/SUBSYSTEM:WINDOWS$subsystem_version_suffix" ]
+  if (is_msvs) {
+    ldflags = [ "/SUBSYSTEM:WINDOWS$subsystem_version_suffix" ]
+  }
 }
 
 # Incremental linking ----------------------------------------------------------
@@ -599,3 +630,20 @@ config("lean_and_mean") {
 config("nominmax") {
   defines = [ "NOMINMAX" ]
 }
+
+# Let unit tests see all "for_testing" dll symbols.
+config("export_all_symbols") {
+  if (is_mingw) {
+    ldflags = [ "-Wl,--export-all-symbols" ]
+  }
+}
+
+# Workaround a Mingw ld bug where large debug symbol data
+# causes the produced executable to be corrupted
+# https://stackoverflow.com/questions/22261539/ld-exe-crashing-in-mingw
+# this affects mksnapshot and v8 component.
+config("strip_all_symbols_at_link_time") {
+  if (is_mingw) {
+    ldflags = [ "-Wl,--strip-all" ]
+  }
+}
diff --git a/config/win/manifest.gni b/config/win/manifest.gni
index e1859eacd..bc52040b6 100644
--- a/config/win/manifest.gni
+++ b/config/win/manifest.gni
@@ -72,7 +72,7 @@ segment_heap_manifest = "//build/win/segment_heap.manifest"
 #     ...
 #   }
 
-if (is_win) {
+if (is_msvs) {
   template("windows_manifest") {
     config_name = "${target_name}__config"
     source_set_name = target_name
diff --git a/config/win/visual_studio_version.gni b/config/win/visual_studio_version.gni
index d90244682..bef86cc13 100644
--- a/config/win/visual_studio_version.gni
+++ b/config/win/visual_studio_version.gni
@@ -20,9 +20,12 @@ declare_args() {
   # This value is the default location, override if you have a different
   # installation location.
   windows_sdk_path = "C:\Program Files (x86)\Windows Kits\10"
+  if (is_mingw) {
+    windows_sdk_path = ""
+  }
 }
 
-if (visual_studio_path == "") {
+if (visual_studio_path == "" && !is_mingw) {
   toolchain_data =
       exec_script("../../vs_toolchain.py", [ "get_toolchain_dir" ], "scope")
   visual_studio_path = toolchain_data.vs_path
@@ -30,7 +33,7 @@ if (visual_studio_path == "") {
   visual_studio_version = toolchain_data.vs_version
   wdk_path = toolchain_data.wdk_dir
   visual_studio_runtime_dirs = toolchain_data.runtime_dirs
-} else {
+} else if (!is_mingw) {
   assert(visual_studio_version != "",
          "You must set the visual_studio_version if you set the path")
   assert(wdk_path != "",
diff --git a/toolchain/gcc_solink_wrapper.py b/toolchain/gcc_solink_wrapper.py
index 193f4fe19..cef19eb5d 100755
--- a/toolchain/gcc_solink_wrapper.py
+++ b/toolchain/gcc_solink_wrapper.py
@@ -24,6 +24,8 @@ def CollectSONAME(args):
   # TODO(crbug.com/1259067): Come up with a way to get this info without having
   # to bundle readelf in the toolchain package.
   toc = ''
+  if ('GCC' in sys.version and sys.platform=='win32'): # Mingw's readelf doesn't work on PE files
+    return 0, toc
   readelf = subprocess.Popen(wrapper_utils.CommandToRun(
       [args.readelf, '-d', args.sofile]),
                              stdout=subprocess.PIPE,
@@ -38,6 +40,10 @@ def CollectSONAME(args):
 def CollectDynSym(args):
   """Replaces: nm --format=posix -g -D -p $sofile | cut -f1-2 -d' '"""
   toc = ''
+
+  if ('GCC' in sys.version and sys.platform=='win32'): # Mingw's nm doesn't work on PE/COFF files
+    return 0, toc
+
   nm = subprocess.Popen(wrapper_utils.CommandToRun(
       [args.nm, '--format=posix', '-g', '-D', '-p', args.sofile]),
                         stdout=subprocess.PIPE,
@@ -103,6 +109,9 @@ def main():
                       help='The strip binary to run',
                       metavar='PATH')
   parser.add_argument('--dwp', help='The dwp binary to run', metavar='PATH')
+  parser.add_argument('--objcopy',
+                      help='The objcopy binary to run',
+                      metavar='PATH')
   parser.add_argument('--sofile',
                       required=True,
                       help='Shared object file produced by linking command',
@@ -194,9 +203,19 @@ def main():
 
     # Finally, strip the linked shared object file (if desired).
     if args.strip:
+      if args.objcopy:
+        result = subprocess.call(wrapper_utils.CommandToRun(
+            [args.objcopy, '--only-keep-debug', args.sofile, args.output + '.debug']))
+        if result != 0:
+          return result
       result = subprocess.call(
           wrapper_utils.CommandToRun(
               [args.strip, '-o', args.output, args.sofile]))
+    if result != 0:
+      return result
+    if args.objcopy:
+      result = subprocess.call(wrapper_utils.CommandToRun(
+          [args.objcopy, '--add-gnu-debuglink', args.output + '.debug',args.output]))
 
   if dwp_proc:
     dwp_result = dwp_proc.wait()
diff --git a/toolchain/gcc_toolchain.gni b/toolchain/gcc_toolchain.gni
index 7abfd87f1..9a90944de 100644
--- a/toolchain/gcc_toolchain.gni
+++ b/toolchain/gcc_toolchain.gni
@@ -61,6 +61,7 @@ if (enable_resource_allowlist_generation) {
 #  - cc
 #  - cxx
 #  - ld
+#  - rc (mingw only)
 #
 # Optional parameters that control the tools:
 #
@@ -113,6 +114,9 @@ template("gcc_toolchain") {
     assert(defined(invoker.cc), "gcc_toolchain() must specify a \"cc\" value")
     assert(defined(invoker.cxx), "gcc_toolchain() must specify a \"cxx\" value")
     assert(defined(invoker.ld), "gcc_toolchain() must specify a \"ld\" value")
+    if (is_mingw) {
+      assert(defined(invoker.rc), "gcc_toolchain() must specify a \"rc\" value")
+    }
 
     # This define changes when the toolchain changes, forcing a rebuild.
     # Nothing should ever use this define.
@@ -306,6 +310,9 @@ template("gcc_toolchain") {
     } else {
       nm = "nm"
     }
+    if (is_mingw) {
+      rc = invoker.rc
+    }
     if (defined(invoker.dwp)) {
       dwp_switch = " --dwp=\"${invoker.dwp}\""
     } else {
@@ -395,6 +402,14 @@ template("gcc_toolchain") {
       outputs = [ "$object_subdir/{{source_name_part}}.o" ]
     }
 
+    tool("rc") {
+      depfile = "{{output}}.d"
+      command = "$rc -i {{source}} -o {{output}} -O coff"
+      depsformat = "gcc"
+      description = "RC {{output}}"
+      outputs = [ "$object_subdir/{{source_name_part}}.rc.o" ]
+    }
+
     tool("asm") {
       # For GCC we can just use the C compiler to compile assembly.
       depfile = "{{output}}.d"
@@ -417,12 +432,12 @@ template("gcc_toolchain") {
 
       # Remove the output file first so that ar doesn't try to modify the
       # existing file.
-      if (host_os == "win") {
+      if (is_msvs) {
         tool_wrapper_path =
             rebase_path("//build/toolchain/win/tool_wrapper.py", root_build_dir)
         command = "cmd /c $python_path $tool_wrapper_path delete-file {{output}} && $command"
       } else {
-        command = "rm -f {{output}} && $command"
+        command = "$command"
       }
 
       # Almost all targets build with //build/config/compiler:thin_archive which
@@ -457,9 +472,12 @@ template("gcc_toolchain") {
       tocfile = sofile + ".TOC"
 
       soname_flag = ""
-      if (current_os != "aix") {
+      if (current_os != "aix" && current_os != "win") {
         # -soname flag is not available on aix ld
         soname_flag = "-Wl,-soname=\"$soname\""
+      } else if (is_mingw) {
+        # Have MinGW linker generate an import library
+        soname_flag = "-Wl,--out-implib=\"$sofile\".a "
       }
       link_command = "$ld -shared $soname_flag {{ldflags}}${extra_ldflags} -o \"$unstripped_sofile\" @\"$rspfile\""
 
@@ -467,7 +485,7 @@ template("gcc_toolchain") {
       # Map file adds ~10% to the link time on a z620.
       # With target_os="android", libchrome.so.map.gz is ~20MB.
       map_switch = ""
-      if (enable_linker_map) {
+      if (enable_linker_map && !is_mingw) {
         map_file = "$unstripped_sofile.map.gz"
         map_switch = " --map-file \"$map_file\""
       }
diff --git a/toolchain/toolchain.gni b/toolchain/toolchain.gni
index 844bc8e54..c29d874b6 100644
--- a/toolchain/toolchain.gni
+++ b/toolchain/toolchain.gni
@@ -52,7 +52,7 @@ if (is_apple) {
 }
 
 # Prefix for shared library files.
-if (is_posix || is_fuchsia) {
+if (is_posix || is_fuchsia || is_mingw) {
   shlib_prefix = "lib"
 } else {
   shlib_prefix = ""
diff --git a/toolchain/win/BUILD.gn b/toolchain/win/BUILD.gn
index 612938527..c6a9f0f33 100644
--- a/toolchain/win/BUILD.gn
+++ b/toolchain/win/BUILD.gn
@@ -4,6 +4,7 @@
 
 import("//build/config/win/visual_studio_version.gni")
 import("//build/toolchain/win/toolchain.gni")
+import("//build/toolchain/gcc_toolchain.gni")
 
 assert(is_win, "Should only be running on Windows")
 
@@ -21,16 +22,18 @@ if (current_toolchain == default_toolchain) {
   } else {
     configuration_name = "Release"
   }
-  exec_script("../../vs_toolchain.py",
-              [
-                "copy_dlls",
-                rebase_path(root_build_dir),
-                configuration_name,
-                target_cpu,
-              ])
+  if (is_msvs) {
+    exec_script("../../vs_toolchain.py",
+                [
+                  "copy_dlls",
+                  rebase_path(root_build_dir),
+                  configuration_name,
+                  target_cpu,
+                ])
+  }
 }
 
-if (target_cpu == "x86" || target_cpu == "x64") {
+if (is_msvs && (target_cpu == "x86" || target_cpu == "x64")) {
   win_toolchains("x86") {
     toolchain_arch = "x86"
   }
@@ -39,7 +42,7 @@ if (target_cpu == "x86" || target_cpu == "x64") {
   }
 }
 
-if (target_cpu == "arm64") {
+if (is_msvs && target_cpu == "arm64") {
   win_toolchains("arm64") {
     toolchain_arch = "arm64"
   }
@@ -53,10 +56,12 @@ if (target_cpu == "arm64") {
 # The only reason it's a separate toolchain is so that it can force
 # is_component_build to false in the toolchain_args() block, because
 # building nacl64.exe in component style does not work.
-win_toolchains("nacl_win64") {
-  toolchain_arch = "x64"
-  toolchain_args = {
-    is_component_build = false
+if (!is_mingw) {
+  win_toolchains("nacl_win64") {
+    toolchain_arch = "x64"
+    toolchain_args = {
+      is_component_build = false
+    }
   }
 }
 
@@ -87,3 +92,29 @@ if (target_os == "winuwp") {
     }
   }
 }
+
+template("mingw_toolchain") {
+  gcc_toolchain("mingw_" + target_name) {
+    forward_variables_from(invoker, "*")
+    cc = getenv("CC")
+    cxx = getenv("CXX")
+    ar = getenv("AR")
+    ld = cxx
+    rc = "windres"
+    strip = "strip"
+    executable_extension = ".exe"
+    toolchain_args = {
+      current_cpu = target_name
+      current_os = "win"
+    }
+  }
+}
+
+mingw_toolchain("arm64") {
+}
+
+mingw_toolchain("x64") {
+}
+
+mingw_toolchain("x86") {
+}
diff --git a/util/lastchange.py b/util/lastchange.py
index 2caf94506..e289dccc0 100755
--- a/util/lastchange.py
+++ b/util/lastchange.py
@@ -192,7 +192,10 @@ def GetGitTopDirectory(source_dir):
   Returns:
     The output of "git rev-parse --show-toplevel" as a string
   """
-  return _RunGitCommand(source_dir, ['rev-parse', '--show-toplevel'])
+  directory = _RunGitCommand(source_dir, ['rev-parse', '--show-toplevel'])
+  if "GCC" in sys.version and sys.platform=='win32':
+    return subprocess.check_output(["cygpath", "-w", directory]).strip(b"\n").decode()
+  return directory
 
 
 def WriteIfChanged(file_name, contents):
diff --git a/win/BUILD.gn b/win/BUILD.gn
index ed5548083..585175a0a 100644
--- a/win/BUILD.gn
+++ b/win/BUILD.gn
@@ -16,7 +16,7 @@ windows_manifest("default_exe_manifest") {
   ]
 }
 
-if (is_win) {
+if (is_msvs) {
   assert(host_os != "mac" || target_cpu != "x86",
          "Windows cross-builds from Mac must be 64-bit.")
 
@@ -172,4 +172,8 @@ if (is_win) {
       }
     }
   }
+} else {
+  group("runtime_libs") {
+    data = []
+  }
 }
