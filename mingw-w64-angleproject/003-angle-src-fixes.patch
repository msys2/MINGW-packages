diff --git a/src/common/serializer/JsonSerializer.cpp b/src/common/serializer/JsonSerializer.cpp
index 0028331d9b..e675c406b8 100644
--- a/src/common/serializer/JsonSerializer.cpp
+++ b/src/common/serializer/JsonSerializer.cpp
@@ -173,7 +173,7 @@ void JsonSerializer::addValue(const std::string &name, rapidjson::Value &&value)
     }
     else
     {
-        rapidjson::Value nameValue(name, mAllocator);
+        rapidjson::Value nameValue;
         mDoc.AddMember(nameValue, std::move(value), mAllocator);
     }
 }
diff --git a/src/libANGLE/renderer/gl/renderergl_utils.cpp b/src/libANGLE/renderer/gl/renderergl_utils.cpp
index c62bb468dd..1fb6e91716 100644
--- a/src/libANGLE/renderer/gl/renderergl_utils.cpp
+++ b/src/libANGLE/renderer/gl/renderergl_utils.cpp
@@ -2288,9 +2288,9 @@ void InitializeFeatures(const FunctionsGL *functions, angle::FeaturesGL *feature
     // Mesa always exposes ASTC extension but only Intel Gen9, Gen11, and Gen12 have hardware
     // support for it. Newer Intel GPUs (Gen12.5+) do not support ASTC.
     ANGLE_FEATURE_CONDITION(features, allowAstcFormats,
-                            !isMesa || isIntel && (Is9thGenIntel(device) || IsGeminiLake(device) ||
+                            !isMesa || (isIntel && (Is9thGenIntel(device) || IsGeminiLake(device) ||
                                                    IsCoffeeLake(device) || Is11thGenIntel(device) ||
-                                                   Is12thGenIntel(device)));
+                                                   Is12thGenIntel(device))));
 
     // Ported from gpu_driver_bug_list.json (#183)
     ANGLE_FEATURE_CONDITION(features, emulateAbsIntFunction, IsApple() && isIntel);
diff --git a/src/libANGLE/renderer/vulkan/CommandQueue.h b/src/libANGLE/renderer/vulkan/CommandQueue.h
index bd2bb019a8..6f46f8c9da 100644
--- a/src/libANGLE/renderer/vulkan/CommandQueue.h
+++ b/src/libANGLE/renderer/vulkan/CommandQueue.h
@@ -591,8 +591,8 @@ class [[nodiscard]] ScopedPrimaryCommandBuffer final
 
     DeviceScoped<PrimaryCommandBuffer> unlockAndRelease()
     {
-        ASSERT(mCommandBuffer.get().valid() && mPoolLock.owns_lock() ||
-               !mCommandBuffer.get().valid() && mPoolLock.mutex() == nullptr);
+        ASSERT((mCommandBuffer.get().valid() && mPoolLock.owns_lock()) ||
+               (!mCommandBuffer.get().valid() && mPoolLock.mutex() == nullptr));
         mPoolLock = {};
         return std::move(mCommandBuffer);
     }
diff --git a/src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp b/src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp
index 124155117c..ee33f139cf 100644
--- a/src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp
+++ b/src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp
@@ -2037,11 +2037,6 @@ angle::Result ProgramExecutableVk::updateTexturesDescriptorSet(
         if (newSharedCacheKey)
         {
             ASSERT(newSharedCacheKey->valid());
-            ANGLE_TRY(UpdateFullTexturesDescriptorSet(
-                context, mVariableInfoMap, mTextureWriteDescriptorDescs, updateBuilder,
-                *mExecutable, textures, samplers,
-                mDescriptorSets[DescriptorSetIndex::Texture]->getDescriptorSet()));
-
             const gl::ActiveTextureMask &activeTextureMask = mExecutable->getActiveSamplersMask();
             for (size_t textureUnit : activeTextureMask)
             {
@@ -2056,10 +2051,6 @@ angle::Result ProgramExecutableVk::updateTexturesDescriptorSet(
             context, *mDescriptorSetLayouts[DescriptorSetIndex::Texture],
             &mDescriptorSets[DescriptorSetIndex::Texture]));
         ASSERT(mDescriptorSets[DescriptorSetIndex::Texture]);
-
-        ANGLE_TRY(UpdateFullTexturesDescriptorSet(
-            context, mVariableInfoMap, mTextureWriteDescriptorDescs, updateBuilder, *mExecutable,
-            textures, samplers, mDescriptorSets[DescriptorSetIndex::Texture]->getDescriptorSet()));
     }
 
     mValidDescriptorSetIndices.set(DescriptorSetIndex::Texture);
diff --git a/util/capture/frame_capture_test_utils.cpp b/util/capture/frame_capture_test_utils.cpp
index 13dc463dc6..9941adb4c4 100644
--- a/util/capture/frame_capture_test_utils.cpp
+++ b/util/capture/frame_capture_test_utils.cpp
@@ -170,7 +170,7 @@ bool LoadTraceInfoFromJSON(const std::string &traceName,
         return false;
     }
 
-    const rapidjson::Document::Object &meta = doc["TraceMetadata"].GetObj();
+    const rapidjson::Document::Object &meta = doc["TraceMetadata"].GetObject();
 
     strncpy(traceInfoOut->name, traceName.c_str(), kTraceInfoMaxNameLen);
     traceInfoOut->frameEnd               = meta["FrameEnd"].GetInt();
