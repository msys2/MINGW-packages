--- a/icd_windows_hkr.h	2019-01-21 23:29:54.652497400 +0100
+++ b/icd_windows_hkr.h	2019-01-21 23:28:42.455736800 +0100
@@ -36,5 +36,46 @@
  */
 
 #include <stdbool.h>
+#include <guiddef.h>
 
 bool khrIcdOsVendorsEnumerateHKR(void);
+
+typedef unsigned long int DEVPROPTYPE, *PDEVPROPTYPE;
+
+typedef GUID  DEVPROPGUID, *PDEVPROPGUID;
+typedef unsigned long int DEVPROPID,   *PDEVPROPID;
+
+typedef struct _DEVPROPKEY {
+    DEVPROPGUID fmtid;
+    DEVPROPID   pid;
+} DEVPROPKEY, *PDEVPROPKEY;
+
+#define CM_GETIDLIST_FILTER_PRESENT             (0x00000100)
+#define CM_GETIDLIST_FILTER_CLASS               (0x00000200)
+
+#define DEFINE_DEVPROPKEY(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8, pid) extern const DEVPROPKEY DECLSPEC_SELECTANY name = { { l, w1, w2, { b1, b2,  b3,  b4,  b5,  b6,  b7,  b8 } }, pid }
+
+DEFINE_DEVPROPKEY(DEVPKEY_Device_ClassGuid,              0xa45c254e, 0xdf1c, 0x4efd, 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0, 10);    // DEVPROP_TYPE_GUID
+#if !defined(__MINGW64__)
+#include <windows.h>
+
+#if defined (CMAPI)
+#undef CMAPI
+#endif
+
+#define CMAPI __stdcall 
+
+typedef _Return_type_success_(return == 0) DWORD        RETURN_TYPE;
+typedef RETURN_TYPE CONFIGRET;
+typedef DWORD DEVNODE, DEVINST;
+
+CMAPI CONFIGRET CM_Get_DevNode_PropertyW(
+  DEVINST          dnDevInst,
+  const DEVPROPKEY *PropertyKey,
+  DEVPROPTYPE      *PropertyType,
+  PBYTE            PropertyBuffer,
+  PULONG           PropertyBufferSize,
+  ULONG            ulFlags
+);
+
+#endif
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,41 +1,93 @@
-cmake_minimum_required (VERSION 2.6)
-
-project (OPENCL_ICD_LOADER)
-
-set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
-set (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
-
-set (OPENCL_ICD_LOADER_SOURCES icd.c icd_dispatch.c)
-
-if (WIN32)
-    list (APPEND OPENCL_ICD_LOADER_SOURCES icd_windows.c icd_windows_hkr.c OpenCL.def OpenCL.rc)
-    include_directories ($ENV{DXSDK_DIR}/Include)
-else ()
-    list (APPEND OPENCL_ICD_LOADER_SOURCES icd_linux.c icd_exports.map)
-endif ()
-
-# Change this to point to a directory containing OpenCL header directory "CL"
-# OR copy OpenCL headers to ./inc/CL/
-if (NOT DEFINED OPENCL_INCLUDE_DIRS)
-    set (OPENCL_INCLUDE_DIRS ./inc)
-endif ()
-
-include_directories (${OPENCL_INCLUDE_DIRS})
-
-add_library (OpenCL SHARED ${OPENCL_ICD_LOADER_SOURCES})
-set_target_properties (OpenCL PROPERTIES VERSION "1.2" SOVERSION "1")
-
-if (WIN32)
-    target_link_libraries (OpenCL cfgmgr32.lib)
-else()
-    if (APPLE)
-        set_target_properties (OpenCL PROPERTIES LINK_FLAGS "-pthread")
-    else ()
-        set_target_properties (OpenCL PROPERTIES LINK_FLAGS "-pthread -Wl,--version-script -Wl,${CMAKE_CURRENT_SOURCE_DIR}/icd_exports.map")
-    endif ()
-endif ()
-
-target_link_libraries (OpenCL ${CMAKE_DL_LIBS})
-
-enable_testing()
-add_subdirectory (test)
+cmake_minimum_required (VERSION 3.1)
+
+project(OpenCL VERSION 2.1)
+
+option(BUILD_SHARED_LIBS "Build shared libs" ON)
+option(OPENCL_TESTS "Enable building tests" ON)
+
+set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
+set (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
+
+set (OPENCL_ICD_LOADER_SOURCES icd.c icd_dispatch.c)
+
+if ("${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")
+    list (APPEND OPENCL_ICD_LOADER_SOURCES icd_linux.c icd_exports.map)
+else ()
+    list (APPEND OPENCL_ICD_LOADER_SOURCES icd_windows.c icd_windows_hkr.c OpenCL.rc)
+    include_directories ($ENV{DXSDK_DIR}/Include)
+endif ()
+
+if(EXISTS "${CMAKE_CURRENT_LIST_DIR}/inc")
+    file(RENAME "${CMAKE_CURRENT_LIST_DIR}/inc" "${CMAKE_CURRENT_LIST_DIR}/include")
+endif()
+
+if(APPLE) #for some reason on apple opencl is expected under OpenCL. And oddly enough, still need the include/CL version for ICD to build
+    set(opencl_include_dir "${CMAKE_CURRENT_BINARY_DIR}/include")
+    if(EXISTS "${CMAKE_CURRENT_LIST_DIR}/include/CL")
+        file(COPY "${CMAKE_CURRENT_LIST_DIR}/include/CL/" DESTINATION "${opencl_include_dir}/OpenCL")
+    endif()
+    include_directories("${opencl_include_dir}")
+else()
+    if (NOT DEFINED OPENCL_INCLUDE_DIRS)
+        set (OPENCL_INCLUDE_DIRS ./include)
+    endif ()
+endif()
+
+include_directories (${OPENCL_INCLUDE_DIRS})
+
+
+add_library (OpenCL ${OPENCL_ICD_LOADER_SOURCES})
+set_target_properties (OpenCL PROPERTIES VERSION "2.1" SOVERSION "1")
+
+if ("${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")
+    set_target_properties (OpenCL PROPERTIES LINK_FLAGS "-Wl,--version-script -Wl,${CMAKE_SOURCE_DIR}/icd_exports.map")
+endif ()
+
+find_package(Threads REQUIRED)
+if (WIN32)
+    target_link_libraries (OpenCL cfgmgr32.lib)
+else()
+    target_link_libraries(OpenCL PRIVATE Threads::Threads ${CMAKE_DL_LIBS})
+endif()
+
+#Installation
+set(generated_dir "${CMAKE_CURRENT_BINARY_DIR}/generated")
+set(config_install_dir "lib/cmake/${PROJECT_NAME}")
+set(include_install_dir "include")
+
+set(version_config "${generated_dir}/${PROJECT_NAME}ConfigVersion.cmake")
+set(project_config "${generated_dir}/${PROJECT_NAME}Config.cmake")
+set(targets_export_name "${PROJECT_NAME}Targets")
+set(namespace "${PROJECT_NAME}::")
+
+include(CMakePackageConfigHelpers)
+write_basic_package_version_file(
+    "${version_config}" COMPATIBILITY SameMajorVersion
+)
+
+configure_file("Config.cmake.in" "${project_config}" @ONLY)
+
+install(
+    TARGETS OpenCL
+    EXPORT "${targets_export_name}"
+    LIBRARY DESTINATION "lib"
+    ARCHIVE DESTINATION "lib"
+    RUNTIME DESTINATION "bin"
+    INCLUDES DESTINATION "${include_install_dir}"
+)
+
+install(
+    FILES "${project_config}" "${version_config}"
+    DESTINATION "${config_install_dir}"
+)
+
+install(
+    EXPORT "${targets_export_name}"
+    NAMESPACE "${namespace}"
+    DESTINATION "${config_install_dir}"
+)
+
+if(OPENCL_TESTS)
+    enable_testing()
+    add_subdirectory(test)
+endif ()
--- /dev/null
+++ b/Config.cmake.in
@@ -0,0 +1,3 @@
+include(CMakeFindDependencyMacro)
+find_dependency(Threads)
+include("${CMAKE_CURRENT_LIST_DIR}/@targets_export_name@.cmake")
--- a/icd_dispatch.c
+++ b/icd_dispatch.c
@@ -1442,8 +1442,9 @@ clGetExtensionFunctionAddressForPlatform(cl_platform_id platform,
 
     // fall back to vendor extension detection
 
-    // FIXME Now that we have a platform id here, we need to validate that it isn't NULL, so shouldn't we have an errcode_ret
-    // KHR_ICD_VALIDATE_HANDLE_RETURN_HANDLE(platform, CL_INVALID_PLATFORM);   
+    // Now that we have a platform id here, we need to validate that it isn't NULL.
+    KHR_ICD_VALIDATE_HANDLE_RETURN_ERROR(platform, CL_INVALID_PLATFORM);   
+
     return platform->dispatch->clGetExtensionFunctionAddressForPlatform(
         platform,
         function_name);
--- a/test/loader_test/test_create_calls.c
+++ b/test/loader_test/test_create_calls.c
@@ -174,12 +174,17 @@ int test_clGetPlatformIDs(const struct clGetPlatformIDs_st* data)
                 &param_val_ret_size );  
 
         if (ret_val == CL_SUCCESS ){
-            if(!strcmp(platform_name, "ICD_LOADER_TEST_OPENCL_STUB")) {
+            if (!strcmp(platform_name, "ICD_LOADER_TEST_OPENCL_STUB")) {
                 platform = all_platforms[i];                
             }
         }
     }
 
+    if (!platform) {
+        // The stub OpenCL not found.
+        return -2;
+    }
+
 #if ENABLE_MISMATCHING_PRINTS
     test_icd_app_log("Value returned: %d\n", ret_val);
 #endif
--- a/test/loader_test/test_program_objects.c
+++ b/test/loader_test/test_program_objects.c
@@ -165,6 +165,11 @@ int test_clGetExtensionFunctionAddressForPlatform(const struct clGetExtensionFun
                      platform,  
                      data->func_name);
 
+    if (!platform) {
+        test_icd_app_log("No stub platform\n");
+        return -2;
+    }
+
     return_value=clGetExtensionFunctionAddressForPlatform(platform,
                                                         data->func_name);
 
