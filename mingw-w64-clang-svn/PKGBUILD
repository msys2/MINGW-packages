# Maintainer: Martell Malone <MartellMalone@gmail.com>
# Contributor: Ray Donnelly <mingw.android@gmail.com>

# libc++ is in a seperate folder becuase it wont build with gcc
# Will leave the code here for it though incase we ever switch to clang
# I may add a bootstrap option for this case soon

_realname=clang
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}-svn"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-analyzer-svn"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-tools-extra-svn"
         "${MINGW_PACKAGE_PREFIX}-compiler-rt-svn"
         #"${MINGW_PACKAGE_PREFIX}-libc++abi-svn"
         #"${MINGW_PACKAGE_PREFIX}-libc++-svn"
         "${MINGW_PACKAGE_PREFIX}-lld-svn"
         "${MINGW_PACKAGE_PREFIX}-llvm-svn"
        )
pkgver=57765.6c5a911
pkgrel=1
pkgdesc="C language family frontend for LLVM (mingw-w64)"
arch=('any')
url="http://llvm.org"
license=("custom:University of Illinois/NCSA Open Source License")
makedepends=("${MINGW_PACKAGE_PREFIX}-gcc"
             "${MINGW_PACKAGE_PREFIX}-pkg-config"
             "${MINGW_PACKAGE_PREFIX}-python3-sphinx"
             "python2" "tar" "subversion" "git")
depends=("${MINGW_PACKAGE_PREFIX}-gcc")
options=('staticlibs' 'strip')
source=("llvm"::"git+http://llvm.org/git/llvm.git"
        "lld"::"git+http://llvm.org/git/lld.git"
        "clang"::"git+http://llvm.org/git/clang.git"
        "clang-tools-extra"::"git+http://llvm.org/git/clang-tools-extra.git"
        "compiler-rt"::"git+http://llvm.org/git/compiler-rt.git"
        "testsuite"::"git+http://llvm.org/git/test-suite.git"
        "libcxxabi"::git+http://llvm.org/git/test-suite.git
        "libcxxabi"::"git+http://llvm.org/git/libcxxabi.git"
        "libcxx"::"git+http://llvm.org/git/libcxx.git"
        0001-Fix-asminfo-for-mingw-arm-and-cygwin-arm.patch
        0002-Fix-GetHostTriple-for-mingw-w64-in-msys.patch
        0011-Add-Clang-MinGW-w64-driver.patch
        0012-Fixup-all-windows-ARM-targets.patch
        0013-Set-the-x86-arch-name-to-i686-for-mingw-w64.patch
        0021-add-support-for-mingw-w64-in-builtins.patch
        0022-builtins-implement-_chkstk-routine-for-windows.patch
        0031-COFF-add-the-mingw-alias-for-ImageBase.patch
        0032-PECOFF-add-the-mingw-alias-for-ImageBase.patch
        0033-PECOFF-add-searchLibrary-function-with-sysroot-suppo.patch
        0034-GNU-add-support-for-linking-PECOFF.patch)

# Some patch notes :)
#0001-0009 -> llvm
#0011-0019 -> clang
#0021-0029 -> rt
#0031-0039 -> lld
#0041-0049 -> c++

md5sums=('SKIP'
         'SKIP'
         'SKIP'
         'SKIP'
         'SKIP'
         'SKIP'
         'SKIP'
         'SKIP'
         'SKIP'
         '9b93c8e61c7480c551564d06c08291aa'
         'a384d4607d9dcdfdcac6912ac413ec58'
         'a22508be75294c02b678a2309a72eff9'
         '6c31dc05b01f038d10ceb5e88c5fe9f5'
         'e6ce086a33256043af99a5690b251be8'
         '259b2ca36651bff1cb3e095608129ddf'
         'e9fb6994de197f8f05da1396be520085'
         'a1e06d17915f1cedb1d784ecfdfa60be'
         '76b01f572c404c7245d227d758cdf7fc'
         '559b5b75d4efd50079d76dda592fb1b7'
         '72404042ab22a9c52bc77d24a22f7c01')

pkgver_internal() {
  if [ ! -d "$1" ]; then
    plain "No such directory $1"
    exit 1
  fi
  pushd "$1" > /dev/null 2>&1
  printf "%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
  popd > /dev/null 2>&1
}

pkgver() {
  pkgver_internal "${srcdir}"/clang
}

prepare() {
  cd "${srcdir}"/llvm
  git am "${srcdir}"/0001-Fix-asminfo-for-mingw-arm-and-cygwin-arm.patch
  git am "${srcdir}"/0002-Fix-GetHostTriple-for-mingw-w64-in-msys.patch

  # Fix docs installation directory
  sed -i 's:$(PROJ_prefix)/docs/llvm:$(PROJ_prefix)/share/doc/llvm:' \
    Makefile.config.in

  # Fix definition of LLVM_CMAKE_DIR in LLVMConfig.cmake
  sed -i '/@LLVM_CONFIG_CMAKE_DIR@/s:$(PROJ_cmake):$(PROJ_prefix)/share/llvm/cmake:' \
    cmake/modules/Makefile

  cd "${srcdir}"/clang
  git am "${srcdir}"/0011-Add-Clang-MinGW-w64-driver.patch
  git am "${srcdir}"/0012-Fixup-all-windows-ARM-targets.patch
  git am "${srcdir}"/0013-Set-the-x86-arch-name-to-i686-for-mingw-w64.patch

  cd "${srcdir}"/compiler-rt
  git am "${srcdir}"/0021-add-support-for-mingw-w64-in-builtins.patch
  git am "${srcdir}"/0022-builtins-implement-_chkstk-routine-for-windows.patch

  cd "${srcdir}"/lld
  #git am "${srcdir}"/0031-COFF-add-the-mingw-alias-for-ImageBase.patch
  git am "${srcdir}"/0032-PECOFF-add-the-mingw-alias-for-ImageBase.patch
  git am "${srcdir}"/0033-PECOFF-add-searchLibrary-function-with-sysroot-suppo.patch
  git am "${srcdir}"/0034-GNU-add-support-for-linking-PECOFF.patch  

  cd "${srcdir}"
  mv lld               llvm/tools/lld
  mv clang             llvm/tools/clang
  mv clang-tools-extra llvm/tools/clang/tools/extra
  mv compiler-rt       llvm/projects/compiler-rt
# mv libcxxabi         llvm/projects/libcxxabi
# mv libcxx            llvm/projects/libcxx
# mv testsuite         llvm/projects/test-suite

}

build() {
  mkdir -p ${srcdir}/build-${CARCH} && cd ${srcdir}/build-${CARCH}

  # Include location of libffi headers in CPPFLAGS
  #CPPFLAGS+=" $(pkg-config --cflags libffi)"
  FFI_INCLUDE_DIR="$(pkg-config --cflags libffi)"
  FFI_INCLUDE_DIR=$(echo $FFI_INCLUDE_DIR | sed 's|-I||g')

  # "Ninja" cant install each component seperately
  # https://github.com/martine/ninja/issues/932

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  ${MINGW_PREFIX}/bin/cmake.exe \
    -G"MSYS Makefiles" \
    -DCMAKE_MAKE_PROGRAM="/usr/bin/make.exe" \
    -DCMAKE_C_COMPILER="${MINGW_PREFIX}/bin/gcc.exe" \
    -DCMAKE_CXX_COMPILER="${MINGW_PREFIX}/bin/g++.exe" \
    -DFFI_INCLUDE_DIR="${FFI_INCLUDE_DIR}" \
    -DCMAKE_C_FLAGS="${CFLAGS}" \
    -DCMAKE_CXX_FLAGS="${CXXFLAGS} ${CPPFLAGS}" \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    -DCMAKE_BUILD_TYPE=Release \
    -DLLVM_TARGETS_TO_BUILD="ARM;CppBackend;X86" \
    -DLLVM_ENABLE_ASSERTIONS=OFF \
    -DLLVM_ENABLE_THREADS=0 \
    -DPYTHON_EXECUTABLE=${MINGW_PREFIX}/bin/python2.exe \
    -DLLVM_ENABLE_FFI=ON \
    -DLLVM_ENABLE_SPHINX=ON \
    ../llvm

  make
}

#check() {
#  cd "${srcdir}"/build-${CARCH}
#  # Remove || true once testcase doesn't cause failures.
#  make check || true
#}

package_clang(){
  pkgdesc="C language family frontend for LLVM (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-llvm-svn")
  provides=("${MINGW_PACKAGE_PREFIX}-clang")
  conflicts=("${MINGW_PACKAGE_PREFIX}-clang")
  pkgver=$(pkgver_internal "${srcdir}"/llvm/tools/clang)

  # Move ..
  cd "${srcdir}"
  mv llvm/tools/clang/tools/extra           clang-tools-extra
  mv build-${CARCH}/tools/clang/tools/extra clang-tools-extra-${CARCH}

  cd build-${CARCH}/tools/clang
  make -j1 DESTDIR="$pkgdir" rebuild_cache install

  # .. Unmove
  cd "${srcdir}"
  mv clang-tools-extra                      llvm/tools/clang/tools/extra
  mv clang-tools-extra-${CARCH}             build-${CARCH}/tools/clang/tools/extra
}

package_clang-tools-extra(){
  pkgdesc="Extra tools built using Clang's tooling APIs (mingw-w64)"
  url="http://clang.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-clang-svn")
  provides=("${MINGW_PACKAGE_PREFIX}-clang-tools-extra")
  conflicts=("${MINGW_PACKAGE_PREFIX}-clang-tools-extra")
  pkgver=$(pkgver_internal "${srcdir}"/llvm/tools/clang/tools/extra)

  cd "${srcdir}"/build-${CARCH}/tools/clang/tools/extra
  make -j1 DESTDIR="$pkgdir" rebuild_cache install
}

 package_compiler-rt(){
  pkgdesc="Runtime libraries for Clang and LLVM (mingw-w64)"
  url="http://compiler-rt.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-llvm-svn")
  provides=("${MINGW_PACKAGE_PREFIX}-compiler-rt")
  conflicts=("${MINGW_PACKAGE_PREFIX}-compiler-rt")
  pkgver=$(pkgver_internal "${srcdir}"/llvm/projects/compiler-rt)

  cd "${srcdir}"/build-${CARCH}/projects/compiler-rt
  make -j1 DESTDIR="$pkgdir" rebuild_cache install
 }

package_libcxxabi(){
  pkgdesc="C++ Standard Library Support (mingw-w64)"
  provides=("${MINGW_PACKAGE_PREFIX}-libc++abi")
  conflicts=("${MINGW_PACKAGE_PREFIX}-libc++abi")
  pkgver=$(pkgver_internal "${srcdir}"/llvm/projects/libcxxabi)

  cd "${srcdir}"/build-${CARCH}/projects/libcxxabi
  make -j1 DESTDIR="$pkgdir" rebuild_cache install
}

package_libcxx(){
  pkgdesc="C++ Standard Library (mingw-w64)"
  provides=("${MINGW_PACKAGE_PREFIX}-libc++")
  conflicts=("${MINGW_PACKAGE_PREFIX}-libc++")
  pkgver=$(pkgver_internal "${srcdir}"/llvm/projects/libcxx)

  cd "${srcdir}"/build-${CARCH}/projects/libcxx
  make -j1 DESTDIR="$pkgdir" rebuild_cache install
}

package_lld(){
  pkgdesc="Linker tools for LLVM (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-llvm-svn")
  provides=("${MINGW_PACKAGE_PREFIX}-lld")
  conflicts=("${MINGW_PACKAGE_PREFIX}-lld")
  pkgver=$(pkgver_internal "${srcdir}"/llvm/tools/lld)

  cd "${srcdir}"/build-${CARCH}/tools/lld
  make -j1 DESTDIR="$pkgdir" rebuild_cache install
}

package_llvm(){
  pkgdesc="Low Level Virtual Machine (mingw-w64)"
  #depends=("${MINGW_PACKAGE_PREFIX}-gcc") # "${MINGW_PACKAGE_PREFIX}-compiler-rt"
  provides=("${MINGW_PACKAGE_PREFIX}-llvm")
  conflicts=("${MINGW_PACKAGE_PREFIX}-llvm")
  install=llvm-${CARCH}.install
  pkgver=$(pkgver_internal "${srcdir}"/llvm)

  # Move ..
  cd "${srcdir}"
  mv llvm/tools/clang           clang
  mv build-${CARCH}/tools/clang clang-${CARCH}

  mv llvm/tools/lld             lld
  mv build-${CARCH}/tools/lld   lld-${CARCH}

  mv llvm/projects/compiler-rt             compiler-rt
  mv build-${CARCH}/projects/compiler-rt   compiler-rt-${CARCH}

#  mv llvm/projects/libcxxabi               libcxxabi
#  mv build-${CARCH}/projects/libcxxabi     libcxxabi-${CARCH}

#  mv llvm/projects/libcxx                  libcxx
#  mv build-${CARCH}/projects/libcxx        libcxx-${CARCH}

  cd build-${CARCH}
  make -j1 DESTDIR="$pkgdir" install

  # .. Unmove
  cd "${srcdir}"
  mv clang                      llvm/tools/clang
  mv clang-${CARCH}             build-${CARCH}/tools/clang

  mv lld                        llvm/tools/lld
  mv lld-${CARCH}               build-${CARCH}/tools/lld

  mv compiler-rt                llvm/projects/compiler-rt
  mv compiler-rt-${CARCH}       build-${CARCH}/projects/compiler-rt

#  mv libcxxabi                  llvm/projects/libcxxabi
#  mv libcxxabi-${CARCH}         build-${CARCH}/projects/libcxxabi

#  mv libcxx                     llvm/projects/libcxx
#  mv libcxx-${CARCH}            build-${CARCH}/projects/libcxx

  # Install CMake stuff
  install -d "${pkgdir}"${MINGW_PREFIX}/share/llvm/cmake/{modules,platforms}
  install -Dm644 "${srcdir}"/llvm/cmake/modules/*.cmake "${pkgdir}${MINGW_PREFIX}/share/llvm/cmake/modules/"
  install -Dm644 "${srcdir}"/llvm/cmake/platforms/*.cmake "${pkgdir}${MINGW_PREFIX}/share/llvm/cmake/platforms/"
  install -Dm644 "${srcdir}/build-${CARCH}"/share/llvm/cmake/LLVMConfig.cmake "${pkgdir}"${MINGW_PREFIX}/share/llvm/cmake/LLVMConfig.cmake
}

package_clang-analyzer() {
  pkgdesc="A source code analysis framework (mingw-w64)"
  url="http://clang-analyzer.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-clang-svn" "${MINGW_PACKAGE_PREFIX}-python2")
  provides=("${MINGW_PACKAGE_PREFIX}-clang-analyzer")
  conflicts=("${MINGW_PACKAGE_PREFIX}-clang-analyzer")
  pkgver=$(pkgver_internal "${srcdir}"/llvm/tools/clang)

  cd "${srcdir}"/llvm/tools/clang

  install -d "${pkgdir}"${MINGW_PREFIX}/{bin,lib/clang-analyzer}
  for _tool in scan-{build,view}; do
    cp -r tools/$_tool "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer/
    ln -s "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer/$_tool/$_tool "${pkgdir}"${MINGW_PREFIX}/bin/
  done

  # scan-build looks for clang within the same directory
  install -d "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer/scan-build/
  ln -s "${srcdir}"/build-${CARCH}/bin/clang.exe "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer/scan-build/

  # Relocate man page
  install -d "${pkgdir}"${MINGW_PREFIX}/share/man/man1
  mv "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer/scan-build/scan-build.1 \
     "${pkgdir}"${MINGW_PREFIX}/share/man/man1/

  # Use Python 2
  #sed -i \
  #  -e 's|env python$|&2|' \
  #  -e 's|/usr/bin/python$|&2|' \
  #  "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer/scan-view/scan-view \
  #  "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer/scan-build/set-xcode-analyzer

  # Compile Python scripts
  python2 -m compileall "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer
  python2 -O -m compileall "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer
  install -Dm644 LICENSE.TXT "${pkgdir}"${MINGW_PREFIX}/share/licenses/clang-analyzer/LICENSE
}

package_mingw-w64-i686-clang-svn(){
  package_clang
}

package_mingw-w64-i686-clang-analyzer-svn(){
  package_clang-analyzer
}

package_mingw-w64-i686-clang-tools-extra-svn(){
  package_clang-tools-extra
}

package_mingw-w64-i686-compiler-rt-svn(){
  package_compiler-rt
}

package_mingw-w64-i686-libc++abi-svn(){
  package_libcxxabi
}

package_mingw-w64-i686-libc++-svn(){
  package_libcxx
}

package_mingw-w64-i686-lld-svn(){
  package_lld
}

package_mingw-w64-i686-llvm-svn(){
  package_llvm
}

package_mingw-w64-x86_64-clang-svn(){
  package_clang
}

package_mingw-w64-x86_64-clang-analyzer-svn(){
  package_clang-analyzer
}

package_mingw-w64-x86_64-clang-tools-extra-svn(){
  package_clang-tools-extra
}

package_mingw-w64-x86_64-compiler-rt-svn(){
  package_compiler-rt
}

package_mingw-w64-x86_64-libc++abi-svn(){
  package_libcxxabi
}

package_mingw-w64-x86_64-libc++-svn(){
  package_libcxx
}

package_mingw-w64-x86_64-lld-svn(){
  package_lld
}

package_mingw-w64-x86_64-llvm-svn(){
  package_llvm
}
