# HG changeset patch
# User Markus MÃ¼tzel <markus.muetzel@gmx.de>
# Date 1635333328 -7200
#      Wed Oct 27 13:15:28 2021 +0200
# Branch stable
# Node ID 42110084b7a814201ff1d442ee65a3162bbff26c
# Parent  1f41d3fbc3da24f824683386331d6df27571b357
Don't use P_OVERLAY to spawn main process from wrapper executable on Windows.

* liboctave/wrappers/unistd-wrappers.c (octave_execv_wrapper): Spawning a
  process with P_OVERLAY returns the control to the terminal on Windows. Instead
  wait for the child process to finish in the wrapper executable.
* src/main.in.cc: Only print error message for status = -1 on Windows.

diff -r 1f41d3fbc3da -r 42110084b7a8 liboctave/wrappers/unistd-wrappers.c
--- a/liboctave/wrappers/unistd-wrappers.c	Sun Aug 29 14:05:04 2021 +0200
+++ b/liboctave/wrappers/unistd-wrappers.c	Wed Oct 27 13:15:28 2021 +0200
@@ -252,9 +252,9 @@
 
   char **sanitized_argv = prepare_spawn (argv);
 
-  int status = spawnv (P_OVERLAY, file, sanitized_argv);
+  int status = spawnv (P_WAIT, file, sanitized_argv);
 
-  // This only happens if spawnv fails.
+  // This happens when the spawned process terminates.
 
   char **p = sanitized_argv;
   while (*p)
diff -r 1f41d3fbc3da -r 42110084b7a8 src/main.in.cc
--- a/src/main.in.cc	Sun Aug 29 14:05:04 2021 +0200
+++ b/src/main.in.cc	Wed Oct 27 13:15:28 2021 +0200
@@ -186,6 +186,10 @@
 {
   int status = octave_execv_wrapper (file.c_str (), argv);
 
+#if defined (OCTAVE_USE_WINDOWS_API)
+  // The above wrapper uses spawn(P_WAIT,...) instead of exec on Windows.
+  if (status == -1)
+#endif
   std::cerr << argv[0] << ": failed to exec '" << file << "'" << std::endl;
 
   return status;
