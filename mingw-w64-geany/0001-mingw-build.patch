diff --git a/ctags/gnu_regex/regex_internal.h b/ctags/gnu_regex/regex_internal.h
index 71c4a38a2..edbd80419 100644
--- a/ctags/gnu_regex/regex_internal.h
+++ b/ctags/gnu_regex/regex_internal.h
@@ -418,7 +418,7 @@ static unsigned int re_string_context_at (const re_string_t *input, int idx,
 #define re_string_skip_bytes(pstr,idx) ((pstr)->cur_idx += (idx))
 #define re_string_set_index(pstr,idx) ((pstr)->cur_idx = (idx))
 
-#ifdef WIN32
+#ifdef _WIN32
 # include <malloc.h>
 #else
 # include <alloca.h>
diff --git a/ctags/main/entry.c b/ctags/main/entry.c
index 23ce97fdc..bd36d2174 100644
--- a/ctags/main/entry.c
+++ b/ctags/main/entry.c
@@ -74,7 +74,7 @@
 
 /*  Hack for ridiculous practice of Microsoft Visual C++.
  */
-#if defined (WIN32) && defined (_MSC_VER)
+#ifdef _MSC_VER
 # define chsize         _chsize
 # define open           _open
 # define close          _close
@@ -1529,7 +1529,7 @@ static void writeTagEntry (const tagEntryInfo *const tag)
 
 	DebugStatement ( debugEntry (tag); )
 
-#ifdef WIN32
+#ifdef _WIN32
 	if (getFilenameSeparator(Option.useSlashAsFilenameSeparator) == FILENAME_SEP_USE_SLASH)
 	{
 		Assert (((const tagEntryInfo *)tag)->inputFileName);
diff --git a/ctags/main/general.h b/ctags/main/general.h
index 1b2acf747..14318f8fa 100644
--- a/ctags/main/general.h
+++ b/ctags/main/general.h
@@ -14,7 +14,7 @@
 */
 #if defined (HAVE_CONFIG_H)
 # include <config.h>
-#elif defined (WIN32)
+#elif defined (_WIN32)
 # include "e_msoft.h"
 #endif
 
diff --git a/ctags/main/main.c b/ctags/main/main.c
index 6536a2161..94d555837 100644
--- a/ctags/main/main.c
+++ b/ctags/main/main.c
@@ -552,7 +552,7 @@ extern int ctags_cli_main (int argc CTAGS_ATTR_UNUSED, char **argv)
 {
 	cookedArgs *args;
 
-#if defined(WIN32) && defined(HAVE_MKSTEMP)
+#if defined(_WIN32) && defined(HAVE_MKSTEMP)
 	/* MinGW-w64's mkstemp() uses rand() for generating temporary files. */
 	srand ((unsigned int) clock ());
 #endif
diff --git a/ctags/main/options.c b/ctags/main/options.c
index c84909104..40af8a3b9 100644
--- a/ctags/main/options.c
+++ b/ctags/main/options.c
@@ -174,7 +174,7 @@ optionValues Option = {
 	.maxRecursionDepth = 0xffffffff,
 	.interactive = false,
 	.fieldsReset = false,
-#ifdef WIN32
+#ifdef _WIN32
 	.useSlashAsFilenameSeparator = FILENAME_SEP_UNSET,
 #endif
 #ifdef DEBUG
@@ -343,7 +343,7 @@ static optionDescription LongOptionDescription [] = {
  {0,0,"       Should paths be relative to location of tag file [no; yes when -e]?"},
  {0,0,"       always: be relative even if input files are passed in with absolute paths" },
  {0,0,"       never:  be absolute even if input files are passed in with relative paths" },
-#ifdef WIN32
+#ifdef _WIN32
  {1,0,"  --use-slash-as-filename-separator[=(yes|no)]"},
  {1,0,"       Use slash as filename separator [yes] for u-ctags output format."},
 #endif
@@ -548,7 +548,7 @@ static struct Feature {
 	const char *name;
 	const char *description;
 } Features [] = {
-#ifdef WIN32
+#ifdef _WIN32
 	{"win32", "TO BE WRITTEN"},
 #endif
 	/* Following two features are always available on universal ctags */
@@ -567,7 +567,7 @@ static struct Feature {
 #ifdef CUSTOM_CONFIGURATION_FILE
 	{"custom-conf", "read \"" CUSTOM_CONFIGURATION_FILE "\" as config file"},
 #endif
-#if defined (WIN32)
+#if defined (_WIN32)
 	{"unix-path-separator", "can use '/' as file name separator"},
 #endif
 #ifdef HAVE_ICONV
@@ -1181,7 +1181,7 @@ static void processExcludeOptionCommon (
 	else
 	{
 		vString *const item = vStringNewInit (parameter);
-#if defined (WIN32)
+#if defined (_WIN32)
 		vStringTranslate(item, PATH_SEPARATOR, OUTPUT_PATH_SEPARATOR);
 #endif
 		if (*list == NULL)
@@ -2627,7 +2627,7 @@ static void processIgnoreOption (const char *const list, int IgnoreOrDefine)
 		const char* fileName = (*list == '@') ? list + 1 : list;
 		addIgnoreListFromFile (fileName);
 	}
-#if defined (WIN32)
+#if defined (_WIN32)
 	else if (isalpha (list [0])  &&  list [1] == ':')
 		addIgnoreListFromFile (list);
 #endif
@@ -2921,7 +2921,7 @@ static booleanOption BooleanOptions [] = {
 	{ "recurse",        &Option.recurse,                false, STAGE_ANY },
 #endif
 	{ "verbose",        &ctags_verbose,                false, STAGE_ANY },
-#ifdef WIN32
+#ifdef _WIN32
 	{ "use-slash-as-filename-separator", (bool *)&Option.useSlashAsFilenameSeparator, false, STAGE_ANY },
 #endif
 	{ "with-list-header", &localOption.withListHeader,       true,  STAGE_ANY },
@@ -3671,7 +3671,7 @@ static char* prependEnvvar (const char *path, const char* envvar)
 	return full_path;
 }
 
-#ifndef WIN32
+#ifndef _WIN32
 static char *getConfigForXDG (const char *path CTAGS_ATTR_UNUSED,
 							  const char* extra CTAGS_ATTR_UNUSED)
 {
@@ -3683,7 +3683,7 @@ static char *getConfigForXDG (const char *path CTAGS_ATTR_UNUSED,
 }
 #endif
 
-#ifdef WIN32
+#ifdef _WIN32
 static char *getConfigAtHomeOnWindows (const char *path,
 									   const char* extra CTAGS_ATTR_UNUSED)
 {
@@ -3757,7 +3757,7 @@ static struct preloadPathElt preload_path_list [] = {
 		.stage = OptionLoadingStageCustom,
 	},
 #endif
-#ifndef WIN32
+#ifndef _WIN32
 	{
 		.path = NULL,
 		.isDirectory = true,
@@ -3772,7 +3772,7 @@ static struct preloadPathElt preload_path_list [] = {
 		.extra = "HOME",
 		.stage = OptionLoadingStageHomeRecursive,
 	},
-#ifdef WIN32
+#ifdef _WIN32
 	{
 		.path = "ctags.d",
 		.isDirectory = true,
diff --git a/ctags/main/options_p.h b/ctags/main/options_p.h
index 4fe8a77b9..067ec214c 100644
--- a/ctags/main/options_p.h
+++ b/ctags/main/options_p.h
@@ -108,7 +108,7 @@ typedef struct sOptionValues {
 	enum interactiveMode { INTERACTIVE_NONE = 0,
 						   INTERACTIVE_DEFAULT,
 						   INTERACTIVE_SANDBOX, } interactive; /* --interactive */
-#ifdef WIN32
+#ifdef _WIN32
 	enum filenameSepOp { FILENAME_SEP_NO_REPLACE = false,
 						 FILENAME_SEP_USE_SLASH  = true,
 						 FILENAME_SEP_UNSET,
diff --git a/ctags/main/routines.c b/ctags/main/routines.c
index 6c5a59296..be967c00c 100644
--- a/ctags/main/routines.c
+++ b/ctags/main/routines.c
@@ -121,7 +121,7 @@
 
 /*  Hack for ridiculous practice of Microsoft Visual C++.
  */
-#if defined (WIN32)
+#if defined (_WIN32)
 # if defined (_MSC_VER) || defined (__MINGW32__)
 #  ifndef stat
 #   define stat    _stat
@@ -163,7 +163,7 @@ extern int stat (const char *, struct stat *);
 #ifdef NEED_PROTO_LSTAT
 extern int lstat (const char *, struct stat *);
 #endif
-#if defined (WIN32)
+#if defined (_WIN32)
 # define lstat(fn,buf) stat(fn,buf)
 #endif
 
@@ -204,7 +204,7 @@ extern const char *getExecutablePath (void)
  */
 static bool fnmChEq (int c1, int c2)
 {
-#ifdef WIN32
+#ifdef _WIN32
 	return tolower( c1 ) == tolower( c2 );  /* case-insensitive */
 #else
 	return          c1   ==          c2  ;  /* case-  sensitive */
@@ -904,7 +904,7 @@ extern MIO *tempFile (const char *const mode, char **const pName)
 	const char *const pattern = "tags.XXXXXX";
 	const char *tmpdir = NULL;
 	fileStatus *file = eStat (ExecutableProgram);
-# ifdef WIN32
+# ifdef _WIN32
 	tmpdir = getenv ("TMP");
 # else
 	if (! file->isSetuid)
@@ -915,7 +915,7 @@ extern MIO *tempFile (const char *const mode, char **const pName)
 	name = xMalloc (strlen (tmpdir) + 1 + strlen (pattern) + 1, char);
 	sprintf (name, "%s%c%s", tmpdir, OUTPUT_PATH_SEPARATOR, pattern);
 	fd = mkstemp (name);
-# ifdef WIN32
+# ifdef _WIN32
 	if (fd == -1)
 	{
 		/* mkstemp() sometimes fails with unknown reasons.
@@ -931,7 +931,7 @@ extern MIO *tempFile (const char *const mode, char **const pName)
 	eStatFree (file);
 #elif defined(HAVE_TEMPNAM)
 	const char *tmpdir = NULL;
-# ifdef WIN32
+# ifdef _WIN32
 	tmpdir = getenv ("TMP");
 # endif
 	if (tmpdir == NULL)
diff --git a/ctags/main/sort.c b/ctags/main/sort.c
index d6b0171c0..1749d9139 100644
--- a/ctags/main/sort.c
+++ b/ctags/main/sort.c
@@ -67,7 +67,7 @@ extern void catFile (MIO *mio)
 */
 static void appendCstringWithQuotes (vString *dest, const char* cstr)
 {
-#ifdef WIN32
+#ifdef _WIN32
 	vStringCatS (dest, cstr);
 #else
 	vStringPut (dest, '\'');
diff --git a/ctags/main/strlist.c b/ctags/main/strlist.c
index 75e250dfc..9ec079ab4 100644
--- a/ctags/main/strlist.c
+++ b/ctags/main/strlist.c
@@ -255,7 +255,7 @@ extern vString* stringListFileFinds (
 	unsigned int i;
 	const char * normalized = fileName;
 
-#if defined (WIN32)
+#if defined (_WIN32)
 	vString *tmp = vStringNewInit (fileName);
 	vStringTranslate (tmp, PATH_SEPARATOR, OUTPUT_PATH_SEPARATOR);
 	normalized = vStringValue (tmp);
@@ -267,7 +267,7 @@ extern vString* stringListFileFinds (
 		matched = fileNameMatched (vstr, normalized);
 	}
 
-#if defined (WIN32)
+#if defined (_WIN32)
 	vStringDelete (tmp);
 #endif
 
diff --git a/ctags/main/writer-ctags.c b/ctags/main/writer-ctags.c
index 541ba5c04..4a1abe7d1 100644
--- a/ctags/main/writer-ctags.c
+++ b/ctags/main/writer-ctags.c
@@ -37,9 +37,9 @@ static int writeCtagsPtagEntry (tagWriter *writer CTAGS_ATTR_UNUSED,
 static bool treatFieldAsFixed (int fieldType);
 static void checkCtagsOptions (tagWriter *writer, bool fieldsWereReset);
 
-#ifdef WIN32
+#ifdef _WIN32
 static enum filenameSepOp overrideFilenameSeparator (enum filenameSepOp currentSetting);
-#endif	/* WIN32 */
+#endif	/* _WIN32 */
 
 struct rejection {
 	bool rejectionInThisInput;
@@ -54,7 +54,7 @@ tagWriter uCtagsWriter = {
 	.rescanFailedEntry = NULL,
 	.treatFieldAsFixed = treatFieldAsFixed,
 	.checkOptions = checkCtagsOptions,
-#ifdef WIN32
+#ifdef _WIN32
 	.overrideFilenameSeparator = overrideFilenameSeparator,
 #endif
 	.defaultFileName = CTAGS_FILE,
@@ -77,7 +77,7 @@ static bool endECTagsFile (tagWriter *writer, MIO * mio CTAGS_ATTR_UNUSED, const
 	return rej->rejectionInThisInput;
 }
 
-#ifdef WIN32
+#ifdef _WIN32
 static enum filenameSepOp overrideFilenameSeparator (enum filenameSepOp currentSetting)
 {
 	if (currentSetting == FILENAME_SEP_UNSET)
diff --git a/ctags/main/writer.c b/ctags/main/writer.c
index e8ba67a60..f109682be 100644
--- a/ctags/main/writer.c
+++ b/ctags/main/writer.c
@@ -124,7 +124,7 @@ extern bool writerDoesTreatFieldAsFixed (int fieldType)
 	return false;
 }
 
-#ifdef WIN32
+#ifdef _WIN32
 extern enum filenameSepOp getFilenameSeparator (enum filenameSepOp currentSetting)
 {
 	if (writer->overrideFilenameSeparator)
@@ -138,7 +138,7 @@ extern bool ptagMakeCtagsOutputFilesep (ptagDesc *desc,
 										const void *data)
 {
 	const char *sep = "slash";
-#ifdef WIN32
+#ifdef _WIN32
 	const optionValues *opt = data;
 	if (getFilenameSeparator (opt->useSlashAsFilenameSeparator)
 		!= FILENAME_SEP_USE_SLASH)
diff --git a/ctags/main/writer_p.h b/ctags/main/writer_p.h
index 236774821..e52aa591c 100644
--- a/ctags/main/writer_p.h
+++ b/ctags/main/writer_p.h
@@ -54,9 +54,9 @@ struct sTagWriter {
 
 	void (* checkOptions) (tagWriter *writer, bool fieldsWereReset);
 
-#ifdef WIN32
+#ifdef _WIN32
 	enum filenameSepOp (* overrideFilenameSeparator) (enum filenameSepOp currentSetting);
-#endif	/* WIN32 */
+#endif	/* _WIN32 */
 
 	const char *defaultFileName;
 
@@ -100,7 +100,7 @@ extern bool writerDoesTreatFieldAsFixed (int fieldType);
 extern void writerCheckOptions (bool fieldsWereReset);
 extern bool writerPrintPtagByDefault (void);
 
-#ifdef WIN32
+#ifdef _WIN32
 extern enum filenameSepOp getFilenameSeparator (enum filenameSepOp currentSetting);
-#endif	/* WIN32 */
+#endif	/* _WIN32 */
 #endif	/* CTAGS_MAIN_WRITER_PRIVATE_H */
diff --git a/meson.build b/meson.build
index 23fc6af28..34b10ec89 100644
--- a/meson.build
+++ b/meson.build
@@ -135,8 +135,8 @@ endif
 cdata.set('HAVE_PLUGINS', get_option('plugins'))
 cdata.set('HAVE_SOCKET', get_option('socket'))
 if (host_machine.system() == 'windows')
-	cdata.set('GEANY_DATA_DIR', join_paths(prefix, 'data'))
-	cdata.set('GEANY_DOC_DIR', join_paths(prefix))
+	cdata.set('GEANY_DATA_DIR', 'share/geany')
+	cdata.set('GEANY_DOC_DIR', 'share/doc/geany')
 else
 	cdata.set('GEANY_DATA_DIR', join_paths(prefix, get_option('datadir'), 'geany'))
 	cdata.set('GEANY_DOC_DIR', join_paths(prefix, get_option('datadir'), 'doc', 'geany'))
@@ -443,7 +443,7 @@ dep_scintilla = declare_dependency(
 	include_directories: include_directories('scintilla/include')
 )
 
-if cdata.get('HAVE_FNMATCH') == 1
+if cdata.get('HAVE_FNMATCH') == true
 	dep_fnmatch = dependency('', required: false)
 else
 	# use fnmatch bundled with ctags
@@ -456,7 +456,7 @@ else
 	dep_fnmatch = declare_dependency(link_with: [fnmatch], include_directories: [ifnmatch])
 endif
 
-if cdata.get('HAVE_REGCOMP') == 1
+if cdata.get('HAVE_REGCOMP') == true
 	dep_regex = dependency('', required: false)
 else
 	# use regcomp bundled with ctags
@@ -897,7 +897,6 @@ subdir('data')
 subdir('doc')
 subdir('icons')
 subdir('plugins')
-subdir('tests')
 
 install_data('COPYING', rename: 'GPL-2')
 install_data(
@@ -907,27 +906,9 @@ install_data(
 		'ScintillaLicense.txt',
 		'LexillaLicense.txt'
 	],
-	install_dir: cdata.get('GEANY_DOC_DIR')
+	install_dir: 'share/licenses/geany'
 )
 misc = [
-	'AUTHORS',
 	'COPYING',
-	'ChangeLog',
-	'NEWS',
-	'README',
-	'THANKS',
-	'TODO'
 ]
-install_data(misc, install_dir: cdata.get('GEANY_DOC_DIR'))
-if host_machine.system() == 'windows'
-misc_rename = [
-	'Authors.txt',
-	'Changelog.txt',
-	'Copying.txt',
-	'Readme.txt',
-	'News.txt',
-	'Thanks.txt',
-	'Todo.txt'
-]
-install_data(misc, install_dir: prefix, rename: misc_rename)
-endif
+install_data(misc, install_dir: 'share/licenses/geany')
