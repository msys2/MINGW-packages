From 24947051435f45ae80cd650b848a8914feb25998 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Hannes=20M=C3=BCller?= <>
Date: Sun, 13 Nov 2022 20:12:52 +0100
Subject: [PATCH] Fix environ manipulation for ucrt on MinGW

Ucrt on MinGW for CLANG32 defines environ different than char**. For detailed
discussion see
https://github.com/msys2/MINGW-packages/issues/13925
Related tests in test-suite/tests/time.test for localtime() and mktime() pass
now also on CLANG32.

strftime() with ucrt has %z, but implementation is not according to standard.
Therefore typically let have-strftime-%z in test-suite/tests/time.test throw
UNSUPPORTED. This simple workaround to have no failed test will probably
work only, if guile is built on system which is not in GMT/UTC timezone.
diff --git a/stime.c.orig b/stime.c
index 31435c9..3b253f7 100644
--- a/libguile/stime.c
+++ b/libguile/stime.c
@@ -98,7 +98,14 @@ extern char *strptime ();
 # define timet long
 #endif
 
-extern char ** environ;
+#ifndef _UCRT
+extern char **environ;
+#else
+/* environ is a macro which expands to  (* __p__environ()), further
+ * implementation is hidden. So modification of environ shall be done only
+ * via putenv()
+ */
+#endif
 
 /* On Apple Darwin in a shared library there's no "environ" to access
    directly, instead the address of that variable must be obtained with
@@ -326,20 +333,44 @@ setzone (SCM zone, int pos, const char *subr)
 
   if (!SCM_UNBNDP (zone))
     {
-      static char *tmpenv[2];
       char *buf;
       size_t zone_len;
       
       zone_len = scm_to_locale_stringbuf (zone, NULL, 0);
+
+#ifdef _UCRT
+      static char *old_putenv;
+      char *old_getenv = getenv (tzvar);
+      if(old_getenv ==  NULL) {
+        old_putenv = scm_malloc (zone_len + 2);
+        strcpy (old_putenv, tzvar);
+        strcat (old_putenv, "=");
+      }
+      else {
+        old_putenv = scm_malloc (zone_len + strlen(old_getenv) + 2);
+        strcpy (old_putenv, tzvar);
+        strcat (old_putenv, "=");
+        strcat (old_putenv, old_getenv);
+      }
+#endif
+
       buf = scm_malloc (zone_len + sizeof (tzvar) + 1);
       strcpy (buf, tzvar);
       buf[sizeof(tzvar)-1] = '=';
       scm_to_locale_stringbuf (zone, buf+sizeof(tzvar), zone_len);
       buf[sizeof(tzvar)+zone_len] = '\0';
+
+#ifdef _UCRT
+      putenv (buf);
+      free (buf);
+      oldenv = &old_putenv;
+#else
       oldenv = environ;
+      static char *tmpenv[2];
       tmpenv[0] = buf;
       tmpenv[1] = 0;
       environ = tmpenv;
+#endif
     }
   return oldenv;
 }
@@ -349,8 +380,13 @@ restorezone (SCM zone, char **oldenv, const char *subr SCM_UNUSED)
 {
   if (!SCM_UNBNDP (zone))
     {
+#ifdef _UCRT
+      putenv (*oldenv);
+      free (*oldenv);
+#else
       free (environ[0]);
       environ = oldenv;
+#endif
 #ifdef HAVE_TZSET
       /* for the possible benefit of user code linked with libguile.  */
       tzset();
@@ -661,7 +697,7 @@ SCM_DEFINE (scm_strftime, "strftime", 2, 0, 0,
 
   tbuf = scm_malloc (size);
   {
-#if !defined (HAVE_TM_ZONE)
+#if !defined (HAVE_TM_ZONE) && !defined (_UCRT)
     /* it seems the only way to tell non-GNU versions of strftime what
        zone to use (for the %Z format) is to set TZ in the
        environment.  interrupts and thread switching must be deferred
@@ -700,7 +736,7 @@ SCM_DEFINE (scm_strftime, "strftime", 2, 0, 0,
 	tbuf = scm_malloc (size);
       }
 
-#if !defined (HAVE_TM_ZONE)
+#if !defined (HAVE_TM_ZONE) && !defined (_UCRT)
     if (have_zone)
       {
 	restorezone (zone_spec, oldenv, FUNC_NAME);
