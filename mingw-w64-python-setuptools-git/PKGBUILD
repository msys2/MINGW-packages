# Maintainer: J. Peter Mugaas <jpmugaas@suddenlink.net>

_realname=setuptools-git
pkgbase=mingw-w64-python-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-python2-${_realname}"  "${MINGW_PACKAGE_PREFIX}-python3-${_realname}")
pkgver=1.2
pkgrel=1
pkgdesc="Setuptools revision control system plugin for Git (mingw-w64)"
arch=('any')
url='https://github.com/msabramo/setuptools-git'
license=('BSD')
makedepends=("${MINGW_PACKAGE_PREFIX}-python2"
             "${MINGW_PACKAGE_PREFIX}-python3"
             "${MINGW_PACKAGE_PREFIX}-python3-setuptools"
             "${MINGW_PACKAGE_PREFIX}-python2-setuptools"
             "git")
options=('staticlibs' 'strip' '!debug')
source=("${_realname}-$pkgver.tar.gz"::"https://github.com/msabramo/setuptools-git/archive/$pkgver.tar.gz")
sha512sums=('368d56003a440c5be00685356b0aef97fdea4a84a6d4e56d59964833b55de4916353e061f2eebf2de4dac2df4783a0a1b2d58ba88e1a93979b38a2b62900c1c1')

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying $_patch"
    patch -Nbp1 -i "${srcdir}/$_patch"
  done
}

del_file_exists() {
  for _fname in "$@"
  do
    if [ -f $_fname ]; then
      rm -rf $_fname
    fi
  done
}
# =========================================== #

prepare() {
  cd "${srcdir}"
#  pushd "${_realname}-${pkgver}"
#    apply_patch_with_msg 0001-A-really-important-fix.patch \
#      0002-A-less-important-fix.patch
#  popd 
  for builddir in python{2,3}-build-${CARCH}; do
    rm -rf ${builddir} | true
    cp -r "${_realname}-${pkgver}" "${builddir}"
  done
  # Set version for setuptools_scm
  export SETUPTOOLS_SCM_PRETEND_VERSION=$pkgver
}

# Note that build() is sometimes skipped because it's done in 
# the packages setup.py install for simplicity if you can do so.
# but sometimes, you want to do a check before install which would
# also trigger the build.
build() {
  for pver in {2,3}; do  
    msg "Python ${pver} build for ${CARCH}"  
    cd "${srcdir}/python${pver}-build-${CARCH}"
    ${MINGW_PREFIX}/bin/python${pver} setup.py build
  done  
}

check() {
  local _git_usr="$(git config user.email)"
  if [[ -z "$_git_usr" ]]; then
    warning "git config must be set."   
  else
    for pver in {2,3}; do
      msg "Python ${pver} test for ${CARCH}"
      cd "${srcdir}/python${pver}-build-${CARCH}"
      ${MINGW_PREFIX}/bin/python${pver} setup.py test || warning "Tests failed!!!"
    done
  fi
}

package_python3-setuptools-git() {
  depends=("${MINGW_PACKAGE_PREFIX}-python3"
           "${MINGW_PACKAGE_PREFIX}-python3-setuptools"
           "git")

  cd "${srcdir}/python3-build-${CARCH}"
  MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
  ${MINGW_PREFIX}/bin/python3 setup.py install --prefix=${MINGW_PREFIX} \
    --root="${pkgdir}" --optimize=1 --skip-build

  install -Dm644 LICENSE.txt "${pkgdir}${MINGW_PREFIX}/share/licenses/python3-${_realname}/LICENSE.txt"
}

package_python2-setuptools-git() {
  depends=("${MINGW_PACKAGE_PREFIX}-python2" 
           "${MINGW_PACKAGE_PREFIX}-python2-setuptools"
            "git")

  cd "${srcdir}/python2-build-${CARCH}"
  MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
  ${MINGW_PREFIX}/bin/python2 setup.py install --prefix=${MINGW_PREFIX} \
    --root="${pkgdir}" --optimize=1 --skip-build

  install -Dm644 LICENSE.txt "${pkgdir}${MINGW_PREFIX}/share/licenses/python2-${_realname}/LICENSE.txt"
}

package_mingw-w64-i686-python2-setuptools-git() {
  package_python2-setuptools-git
}

package_mingw-w64-i686-python3-setuptools-git() {
  package_python3-setuptools-git
}

package_mingw-w64-x86_64-python2-setuptools-git() {
  package_python2-setuptools-git
}

package_mingw-w64-x86_64-python3-setuptools-git() {
  package_python3-setuptools-git
}
