From df3a62750823577293c010901bee8302b8d74d55 Mon Sep 17 00:00:00 2001
From: Jon Turney <jon.turney@dronecode.org.uk>
Date: Tue, 11 Feb 2014 23:48:28 +0000
Subject: [PATCH 12/23] Fix building windows client unit-tests with gcc

- MinGW doesn't have  _CrtSetReportMode

- Trying to call PureVirtual() on a base class object give a linker error

(Presumably gcc can see that base class will be used for virtual function call,
so requires  an implementation (which is prohibited because it's pure virtual)
at link time.)

XXX: crash_generatation_app manages to contain a pure virtual call without
tripping over this, so look how it does that...

Signed-off-by: Jon Turney <jon.turney@dronecode.org.uk>
---
 src/client/windows/unittests/exception_handler_death_test.cc | 6 +++++-
 src/client/windows/unittests/exception_handler_test.cc       | 6 +++++-
 2 files changed, 10 insertions(+), 2 deletions(-)

diff --git a/src/client/windows/unittests/exception_handler_death_test.cc b/src/client/windows/unittests/exception_handler_death_test.cc
index 079ca3d..e9f605e 100644
--- a/src/client/windows/unittests/exception_handler_death_test.cc
+++ b/src/client/windows/unittests/exception_handler_death_test.cc
@@ -242,8 +242,10 @@ TEST_F(ExceptionHandlerDeathTest, InvalidParameterTest) {
   ExceptionHandler handler(temp_path_, NULL, NULL, NULL,
                            ExceptionHandler::HANDLER_INVALID_PARAMETER);
 
+#ifdef _MSC_VER
   // Disable the message box for assertions
   _CrtSetReportMode(_CRT_ASSERT, 0);
+#endif
 
   // Call with a bad argument. The invalid parameter will be swallowed
   // and a dump will be generated, the process will exit(0).
@@ -255,7 +257,7 @@ struct PureVirtualCallBase {
   PureVirtualCallBase() {
     // We have to reinterpret so the linker doesn't get confused because the
     // method isn't defined.
-    reinterpret_cast<PureVirtualCallBase*>(this)->PureFunction();
+    reinterpret_cast<PureVirtualCallBase*>(0)->PureFunction();
   }
   virtual ~PureVirtualCallBase() {}
   virtual void PureFunction() const = 0;
@@ -276,8 +278,10 @@ TEST_F(ExceptionHandlerDeathTest, PureVirtualCallTest) {
   ExceptionHandler handler(temp_path_, NULL, NULL, NULL,
                            ExceptionHandler::HANDLER_PURECALL);
 
+#ifdef _MSC_VER
   // Disable the message box for assertions
   _CrtSetReportMode(_CRT_ASSERT, 0);
+#endif
 
   // Calls a pure virtual function.
   EXPECT_EXIT(DoCrashPureVirtualCall(), ::testing::ExitedWithCode(0), "");
diff --git a/src/client/windows/unittests/exception_handler_test.cc b/src/client/windows/unittests/exception_handler_test.cc
index 5527532..a482379 100644
--- a/src/client/windows/unittests/exception_handler_test.cc
+++ b/src/client/windows/unittests/exception_handler_test.cc
@@ -180,8 +180,10 @@ void ExceptionHandlerTest::DoCrashInvalidParameter() {
           google_breakpad::ExceptionHandler::HANDLER_INVALID_PARAMETER,
           kFullDumpType, kPipeName, NULL);
 
+#ifdef _MSC_VER
   // Disable the message box for assertions
   _CrtSetReportMode(_CRT_ASSERT, 0);
+#endif
 
   // Although this is executing in the child process of the death test,
   // if it's not true we'll still get an error rather than the crash
@@ -195,7 +197,7 @@ struct PureVirtualCallBase {
   PureVirtualCallBase() {
     // We have to reinterpret so the linker doesn't get confused because the
     // method isn't defined.
-    reinterpret_cast<PureVirtualCallBase*>(this)->PureFunction();
+    reinterpret_cast<PureVirtualCallBase*>(0)->PureFunction();
   }
   virtual ~PureVirtualCallBase() {}
   virtual void PureFunction() const = 0;
@@ -212,8 +214,10 @@ void ExceptionHandlerTest::DoCrashPureVirtualCall() {
           google_breakpad::ExceptionHandler::HANDLER_PURECALL,
           kFullDumpType, kPipeName, NULL);
 
+#ifdef _MSC_VER
   // Disable the message box for assertions
   _CrtSetReportMode(_CRT_ASSERT, 0);
+#endif
 
   // Although this is executing in the child process of the death test,
   // if it's not true we'll still get an error rather than the crash
-- 
2.7.0

