diff -urN emacs-emacs-28.0.90-orig/nt/cmdproxy.c emacs-emacs-28.0.90/nt/cmdproxy.c
--- emacs-emacs-28.0.90-orig/nt/cmdproxy.c	2021-12-02 04:12:11.000000000 +0800
+++ emacs-emacs-28.0.90/nt/cmdproxy.c	2022-01-09 11:59:46.232154600 +0800
@@ -37,7 +37,9 @@
 
 /* We don't want to include stdio.h because we are already duplicating
    lots of it here */
+#ifdef _MSC_VER
 extern int _snprintf (char *buffer, size_t count, const char *format, ...);
+#endif
 
 /*******  Mock C library routines  *********************************/
 
@@ -51,10 +53,12 @@
 #else
 void fail (const char *, ...);
 #endif
+void warn (const char *, ...);
+
+#ifdef _MSC_VER
 int vfprintf (HANDLE, const char *, va_list);
 int fprintf (HANDLE, const char *, ...);
 int printf (const char *, ...);
-void warn (const char *, ...);
 
 int
 vfprintf (HANDLE hnd, const char * msg, va_list args)
@@ -91,6 +95,9 @@
 
   return rc;
 }
+#else
+#include <stdio.h>
+#endif
 
 void
 fail (const char * msg, ...)
diff -urN emacs-emacs-28.0.90-orig/nt/inc/ms-w32.h emacs-emacs-28.0.90/nt/inc/ms-w32.h
--- emacs-emacs-28.0.90-orig/nt/inc/ms-w32.h	2021-12-02 04:12:11.000000000 +0800
+++ emacs-emacs-28.0.90/nt/inc/ms-w32.h	2022-01-11 22:03:21.966871200 +0800
@@ -229,7 +229,7 @@
 /* The following is needed for recovery from C stack overflows.  */
 #include <setjmp.h>
 typedef jmp_buf sigjmp_buf;
-#ifdef MINGW_W64
+#if defined(MINGW_W64) && !defined(__clang__)
 /* Evidently, MinGW64's longjmp crashes when invoked from an exception
    handler, see https://sourceforge.net/p/mingw-w64/mailman/message/32421953/.
    This seems to be an unsolved problem in the MinGW64 runtime.  So we
diff -urN emacs-emacs-28.0.90-orig/src/w32fns.c emacs-emacs-28.0.90/src/w32fns.c
--- emacs-emacs-28.0.90-orig/src/w32fns.c	2021-12-02 04:12:11.000000000 +0800
+++ emacs-emacs-28.0.90/src/w32fns.c	2022-01-11 20:50:46.877024300 +0800
@@ -10798,7 +10798,7 @@
      too nested calls to mark_object.  No way to survive.  */
   if (gc_in_progress)
     terminate_due_to_signal (SIGSEGV, 40);
-#ifdef _WIN64
+#if defined(_WIN64) && !defined(__clang__)
   /* See ms-w32.h: MinGW64's longjmp crashes if invoked in this context.  */
   __builtin_longjmp (return_to_command_loop, 1);
 #else
diff -urN emacs-emacs-28.0.91-orig/src/w32heap.c emacs-emacs-28.0.91/src/w32heap.c
--- emacs-emacs-28.0.91-orig/src/w32heap.c	2022-01-08 20:09:29.000000000 +0800
+++ emacs-emacs-28.0.91/src/w32heap.c	2022-01-20 00:55:20.737999600 +0800
@@ -115,7 +115,7 @@
    than half of the size stated below.  It would be nice to find a way
    to build only the first bootstrap-emacs.exe with the large size,
    and reset that to a lower value afterwards.  */
-#ifndef HAVE_UNEXEC
+#if !defined HAVE_UNEXEC && !defined HAVE_PDUMPER
 /* We don't use dumped_data[], so define to a small size that won't
    matter.  */
 # define DUMPED_HEAP_SIZE 10
