diff -urN emacs-emacs-28.0.91-orig/m4/stdlib_h.m4 emacs-emacs-28.0.91/m4/stdlib_h.m4
--- emacs-emacs-28.0.91-orig/m4/stdlib_h.m4	2022-01-08 20:09:29.000000000 +0800
+++ emacs-emacs-28.0.91/m4/stdlib_h.m4	2022-01-20 21:23:36.737820300 +0800
@@ -137,8 +137,8 @@
   HAVE_MKOSTEMPS=1;          AC_SUBST([HAVE_MKOSTEMPS])
   HAVE_MKSTEMP=1;            AC_SUBST([HAVE_MKSTEMP])
   HAVE_MKSTEMPS=1;           AC_SUBST([HAVE_MKSTEMPS])
-  HAVE_POSIX_MEMALIGN=1;     AC_SUBST([HAVE_POSIX_MEMALIGN])
-  HAVE_POSIX_OPENPT=1;       AC_SUBST([HAVE_POSIX_OPENPT])
+  HAVE_POSIX_MEMALIGN=0;     AC_SUBST([HAVE_POSIX_MEMALIGN])
+  HAVE_POSIX_OPENPT=0;       AC_SUBST([HAVE_POSIX_OPENPT])
   HAVE_PTSNAME=1;            AC_SUBST([HAVE_PTSNAME])
   HAVE_PTSNAME_R=1;          AC_SUBST([HAVE_PTSNAME_R])
   HAVE_QSORT_R=1;            AC_SUBST([HAVE_QSORT_R])
diff -urN emacs-emacs-28.0.91-orig/src/alloc.c emacs-emacs-28.0.91/src/alloc.c
--- emacs-emacs-28.0.91-orig/src/alloc.c	2022-01-08 20:09:29.000000000 +0800
+++ emacs-emacs-28.0.91/src/alloc.c	2022-01-20 21:21:34.151808800 +0800
@@ -1197,7 +1197,7 @@
 
 #ifdef USE_ALIGNED_ALLOC
       verify (ABLOCKS_BYTES % BLOCK_ALIGN == 0);
-      abase = base = aligned_alloc (BLOCK_ALIGN, ABLOCKS_BYTES);
+      abase = base = _aligned_malloc (BLOCK_ALIGN, ABLOCKS_BYTES);
 #else
       base = malloc (ABLOCKS_BYTES);
       abase = pointer_align (base, BLOCK_ALIGN);
@@ -1230,7 +1230,7 @@
 	  if ((char *) XCONS (tem) != end)
 	    {
 	      lisp_malloc_loser = base;
-	      free (base);
+	      _aligned_free (base);
 	      MALLOC_UNBLOCK_INPUT;
 	      memory_full (SIZE_MAX);
 	    }
@@ -1352,7 +1352,7 @@
 #ifdef USE_ALIGNED_ALLOC
   if (! MALLOC_IS_LISP_ALIGNED && size % LISP_ALIGNMENT == 0)
     {
-      void *p = aligned_alloc (LISP_ALIGNMENT, size);
+      void *p = _aligned_malloc (LISP_ALIGNMENT, size);
       if (clearit && p)
 	memclear (p, size);
       return p;
@@ -1364,7 +1364,7 @@
       void *p = clearit ? calloc (1, size) : malloc (size);
       if (laligned (p, size))
 	return p;
-      free (p);
+      _aligned_free (p);
       size_t bigger = size + LISP_ALIGNMENT;
       if (size < bigger)
 	size = bigger;
