--- curl-8.15.0/lib/CMakeLists.txt.orig	2025-07-16 08:22:04.000000000 +0200
+++ curl-8.15.0/lib/CMakeLists.txt	2025-07-16 11:34:57.412045200 +0200
@@ -26,6 +26,7 @@
 
 set_property(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS "BUILDING_LIBCURL")
 set_property(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS "${CURL_DEBUG_MACROS}")
+set(CURL_BINDIR "${CMAKE_INSTALL_PREFIX}/bin")
 
 configure_file("curl_config.h.cmake" "${CMAKE_CURRENT_BINARY_DIR}/curl_config.h")
 
@@ -59,6 +60,8 @@
   add_custom_target(curlu-unitprotos ALL DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/unitprotos.h")
 endif()
 
+set_source_files_properties(pathtools.c PROPERTIES SKIP_UNITY_BUILD_INCLUSION ON)
+
 ## Library definition
 
 if(NOT DEFINED IMPORT_LIB_SUFFIX)
--- a/lib/curl_config.h.cmake
+++ b/lib/curl_config.h.cmake
@@ -35,6 +35,9 @@
 /* Default SSL backend */
 #cmakedefine CURL_DEFAULT_SSL_BACKEND "${CURL_DEFAULT_SSL_BACKEND}"
 
+/* Location of executable */
+#cmakedefine CURL_BINDIR "${CURL_BINDIR}"
+
 /* disables alt-svc */
 #cmakedefine CURL_DISABLE_ALTSVC 1
 
--- a/lib/Makefile.inc
+++ b/lib/Makefile.inc
@@ -197,6 +197,7 @@
   noproxy.c          \
   openldap.c         \
   parsedate.c        \
+  pathtools.c        \
   pingpong.c         \
   pop3.c             \
   progress.c         \
@@ -333,6 +334,7 @@
   nonblock.h         \
   noproxy.h          \
   parsedate.h        \
+  pathtools.h        \
   pingpong.h         \
   pop3.h             \
   progress.h         \
--- a/lib/url.c
+++ b/lib/url.c
@@ -125,6 +125,10 @@
 #include "curl_memory.h"
 #include "memdebug.h"
 
+#if defined(__MINGW32__)
+#include "pathtools.h"
+#endif
+
 #ifdef USE_NGHTTP2
 static void data_priority_cleanup(struct Curl_easy *data);
 #else
@@ -430,22 +434,47 @@
   if(Curl_ssl_backend() != CURLSSLBACKEND_SCHANNEL &&
      Curl_ssl_backend() != CURLSSLBACKEND_SECURETRANSPORT) {
 #ifdef CURL_CA_BUNDLE
+#if defined(__MINGW32__)
+    char *relocated_bundle = single_path_relocation_lib(CURL_BINDIR, CURL_CA_BUNDLE);
+    result = Curl_setstropt(&set->str[STRING_SSL_CAFILE], relocated_bundle);
+    free(relocated_bundle);
+#else
     result = Curl_setstropt(&set->str[STRING_SSL_CAFILE], CURL_CA_BUNDLE);
+#endif /* defined(__MINGW32__) */
     if(result)
       return result;
 #ifndef CURL_DISABLE_PROXY
+#if defined(__MINGW32__)
+    relocated_bundle = single_path_relocation_lib(CURL_BINDIR, CURL_CA_BUNDLE);
+    result = Curl_setstropt(&set->str[STRING_SSL_CAFILE_PROXY],
+                            relocated_bundle);
+    free(relocated_bundle);
+#else
     result = Curl_setstropt(&set->str[STRING_SSL_CAFILE_PROXY],
                             CURL_CA_BUNDLE);
+#endif
     if(result)
       return result;
 #endif
 #endif
 #ifdef CURL_CA_PATH
+#if defined(__MINGW32__)
+    char *relocated_ca_path = single_path_relocation_lib(CURL_BINDIR, CURL_CA_PATH);
+    result = Curl_setstropt(&set->str[STRING_SSL_CAPATH], relocated_ca_path);
+    free(relocated_ca_path);
+#else
     result = Curl_setstropt(&set->str[STRING_SSL_CAPATH], CURL_CA_PATH);
+#endif /* defined(__MINGW32__) */
     if(result)
       return result;
 #ifndef CURL_DISABLE_PROXY
+#if defined(__MINGW32__)
+    relocated_ca_path = single_path_relocation_lib(CURL_BINDIR, CURL_CA_PATH);
+    result = Curl_setstropt(&set->str[STRING_SSL_CAPATH_PROXY], relocated_ca_path);
+    free(relocated_ca_path);
+#else
     result = Curl_setstropt(&set->str[STRING_SSL_CAPATH_PROXY], CURL_CA_PATH);
+#endif
     if(result)
       return result;
 #endif
