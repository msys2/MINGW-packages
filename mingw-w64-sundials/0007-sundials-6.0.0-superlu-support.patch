diff -Naur sundials-6.0.0.orig/examples/arkode/CXX_superludist/ark_brusselator1D_FEM_sludist.cpp sundials-6.0.0/examples/arkode/CXX_superludist/ark_brusselator1D_FEM_sludist.cpp
--- sundials-6.0.0.orig/examples/arkode/CXX_superludist/ark_brusselator1D_FEM_sludist.cpp	2021-12-15 18:03:50.000000000 -0600
+++ sundials-6.0.0/examples/arkode/CXX_superludist/ark_brusselator1D_FEM_sludist.cpp	2021-12-18 12:37:12.666928800 -0600
@@ -196,8 +196,8 @@
 
   // Create the SUNDIALS context object for this simulation
   SUNContext ctx;
-  flag = SUNContext_Create(NULL, &ctx);
-  if (check_flag(&flag, "SUNContext_Create", 1)) return 1;
+  retval = SUNContext_Create(NULL, &ctx);
+  if (check_retval(&retval, "SUNContext_Create", 1)) return 1;
 
   /* This example only allows 1 MPI rank because we are demonstrating
    * SuperLU_DIST on one node. */
@@ -299,7 +299,7 @@
      specify the right-hand side function in y'=f(t,y), the inital time
      T0, and the initial dependent variable vector y.  Note: since this
      problem is fully implicit, we set f_E to NULL and f_I to f. */
-  arkode_mem = ARKStepCreate(NULL, f, T0, y, NULL, ctx);
+  arkode_mem = ARKStepCreate(NULL, f, T0, y, ctx);
   if (check_retval((void *)arkode_mem, "ARKStepCreate", 0)) MPI_Abort(grid.comm, 1);
 
   /* Set routines */
diff -Naur sundials-6.0.0.orig/examples/cvode/superludist/cvAdvDiff_sludist.cpp sundials-6.0.0/examples/cvode/superludist/cvAdvDiff_sludist.cpp
--- sundials-6.0.0.orig/examples/cvode/superludist/cvAdvDiff_sludist.cpp	2021-12-15 18:05:43.000000000 -0600
+++ sundials-6.0.0/examples/cvode/superludist/cvAdvDiff_sludist.cpp	2021-12-18 12:34:45.233811100 -0600
@@ -142,7 +142,7 @@
 
   /* Create the SUNDIALS context */
   retval = SUNContext_Create(NULL, &sunctx);
-  if(check_retval(&retval, "SUNContext_Create", 1)) return(1);
+  if(check_retval(&retval, "SUNContext_Create", 1, my_pe)) return(1);
 
   /* check for nprow and npcol arguments */
   if (argc < 2) {
diff -Naur sundials-6.0.0.orig/examples/sunmatrix/slunrloc/test_sunmatrix_slunrloc.cpp sundials-6.0.0/examples/sunmatrix/slunrloc/test_sunmatrix_slunrloc.cpp
--- sundials-6.0.0.orig/examples/sunmatrix/slunrloc/test_sunmatrix_slunrloc.cpp	2021-12-15 18:03:49.000000000 -0600
+++ sundials-6.0.0/examples/sunmatrix/slunrloc/test_sunmatrix_slunrloc.cpp	2021-12-18 12:33:00.929920800 -0600
@@ -67,6 +67,7 @@
   sunindextype fst_row;                     /* global. index of 1st local row   */
   int square;                               /* is A a square matrix             */
   sunindextype i, j, k;                     /* just some iteration variables    */
+  SUNContext sunctx;
 
   MPI_Init(&argc, &argv);
 
diff -Naur sundials-6.0.0.orig/src/sunmatrix/slunrloc/sunmatrix_slunrloc.c sundials-6.0.0/src/sunmatrix/slunrloc/sunmatrix_slunrloc.c
--- sundials-6.0.0.orig/src/sunmatrix/slunrloc/sunmatrix_slunrloc.c	2021-12-15 18:03:49.000000000 -0600
+++ sundials-6.0.0/src/sunmatrix/slunrloc/sunmatrix_slunrloc.c	2021-12-18 12:32:02.475668200 -0600
@@ -76,7 +76,7 @@
  * ----------------------------------------------------------------------------
  */
 
-SUNMatrix SUNMatrix_SLUNRloc(SuperMatrix *A_super, gridinfo_t *grid)
+SUNMatrix SUNMatrix_SLUNRloc(SuperMatrix *A_super, gridinfo_t *grid, SUNContext sunctx)
 {
   SUNMatrix A;
   SUNMatrix_Ops ops;
@@ -93,7 +93,7 @@
 
   /* Create the matrix */
   A = NULL;
-  A = (SUNMatrix) malloc(sizeof(*A));
+  A = SUNMatNewEmpty(sunctx);
   if (A == NULL) return(NULL);
 
   /* Create the matrix operations structure */
@@ -193,7 +193,7 @@
 
   /* create the new SUNMatrix */
   B = NULL;
-  B = SUNMatrix_SLUNRloc(B_super, SM_GRID_SLUNRLOC(A));
+  B = SUNMatrix_SLUNRloc(B_super, SM_GRID_SLUNRLOC(A), A->sunctx);
   if (B == NULL) {
     /* call SuperLU-DIST destroy function */
     Destroy_CompRowLoc_Matrix_dist(B_super);
