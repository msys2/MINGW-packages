# Maintainer: Sarah Ottinger <schalaalexiazeal@gmail.com>

_realname=google-auth
pkgbase=mingw-w64-python-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-python-${_realname}")
pkgver=2.40.3
pkgrel=2
pkgdesc='Google Authentication Library (mingw-w64)'
arch=('any')
mingw_arch=('mingw64' 'ucrt64' 'clang64' 'clangarm64')
url='https://googleapis.dev/python/google-auth/latest/'
msys2_repository_url='https://github.com/googleapis/google-auth-library-python'
msys2_references=(
  'archlinux: python-google-auth'
  'purl: pkg:pypi/google-auth'
)
license=('spdx:Apache-2.0')
depends=("${MINGW_PACKAGE_PREFIX}-ca-certificates"
         "${MINGW_PACKAGE_PREFIX}-python-cachetools"
         "${MINGW_PACKAGE_PREFIX}-python-pyasn1-modules"
         "${MINGW_PACKAGE_PREFIX}-python-rsa")
checkdepends=("${MINGW_PACKAGE_PREFIX}-python-flask"
              "${MINGW_PACKAGE_PREFIX}-python-freezegun"
              "${MINGW_PACKAGE_PREFIX}-python-mock"
              "${MINGW_PACKAGE_PREFIX}-python-oauth2client"
              "${MINGW_PACKAGE_PREFIX}-python-pyopenssl"
              "${MINGW_PACKAGE_PREFIX}-python-pytest"
              "${MINGW_PACKAGE_PREFIX}-python-pytest-cov"
              "${MINGW_PACKAGE_PREFIX}-python-pytest-localserver"
              "${MINGW_PACKAGE_PREFIX}-python-pyu2f"
              "${MINGW_PACKAGE_PREFIX}-python-requests"
              "${MINGW_PACKAGE_PREFIX}-python-urllib3"
              "${MINGW_PACKAGE_PREFIX}-python-cryptography"
              "${MINGW_PACKAGE_PREFIX}-python-responses")
makedepends=("${MINGW_PACKAGE_PREFIX}-python-build"
             "${MINGW_PACKAGE_PREFIX}-python-installer"
             "${MINGW_PACKAGE_PREFIX}-python-setuptools")
source=("https://pypi.org/packages/source/${_realname::1}/${_realname/-/_}/${_realname/-/_}-${pkgver}.tar.gz"
        af18060d521baf86c219d66a26631decb3b28e79.patch)
sha256sums=('500c3a29adedeb36ea9cf24b8d10858e152f2412e3ca37829b3fa18e33d63b77'
            '33a4c06fa0e765e3639f4b037231b9d19dc1ebc973cfc6b6e52e9c3e101f97ab')

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying $_patch"
    patch -Nbp1 -i "${srcdir}/$_patch"
  done
}
# =========================================== #

prepare() {
  cd "${srcdir}"/"${_realname/-/_}-${pkgver}"
  apply_patch_with_msg \
    af18060d521baf86c219d66a26631decb3b28e79.patch
}

build() {
  cp -r "${_realname/-/_}-${pkgver}" "python-build-${MSYSTEM}" && cd "python-build-${MSYSTEM}"
  ${MINGW_PREFIX}/bin/python -m build --wheel --skip-dependency-check --no-isolation
}

check() {
  cd "${srcdir}/python-build-${MSYSTEM}"
  ${MINGW_PREFIX}/bin/python -m pytest tests || warning "Tests failed"
}

package() {
  cd "${srcdir}/python-build-${MSYSTEM}"
  MSYS2_ARG_CONV_EXCL="--prefix=" \
    ${MINGW_PREFIX}/bin/python -m installer --prefix=${MINGW_PREFIX} \
    --destdir="${pkgdir}" dist/*.whl
  install -Dm644 LICENSE "${pkgdir}${MINGW_PREFIX}/share/licenses/python-${_realname}/LICENSE"
}
