From 0a90f1ac41cff4fde53c0a024934c2f8ff6ac03f Mon Sep 17 00:00:00 2001
From: Naveen M K <naveen521kk@gmail.com>
Date: Sun, 28 Nov 2021 21:22:16 +0530
Subject: [PATCH] add mingw toolchain skia

Signed-off-by: Naveen M K <naveen521kk@gmail.com>
---
 BUILD.gn              | 76 ++++++++++++++++++++++++++++++--------
 gn/BUILDCONFIG.gn     | 11 ++++--
 gn/is_mingw.py        | 52 ++++++++++++++++++++++++++
 gn/skia/BUILD.gn      | 86 ++++++++++++++++++++++++++++---------------
 gn/toolchain/BUILD.gn | 21 ++++++++++-
 5 files changed, 195 insertions(+), 51 deletions(-)
 create mode 100644 gn/is_mingw.py

diff --git a/BUILD.gn b/BUILD.gn
index bc25bfaf..2b16eec2 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -176,6 +176,9 @@ opts("sse2") {
   sources = skia_opts.sse2_sources
   if (!is_clang && is_win) {
     defines = [ "SK_CPU_SSE_LEVEL=SK_CPU_SSE_LEVEL_SSE2" ]
+    if (is_mingw) {
+        cflags = [ "-msse2" ]
+    }
   } else {
     cflags = [ "-msse2" ]
   }
@@ -186,6 +189,9 @@ opts("ssse3") {
   sources = skia_opts.ssse3_sources
   if (!is_clang && is_win) {
     defines = [ "SK_CPU_SSE_LEVEL=SK_CPU_SSE_LEVEL_SSSE3" ]
+    if (is_mingw) {
+        cflags = [ "-mssse3" ]
+    }
   } else {
     cflags = [ "-mssse3" ]
   }
@@ -196,6 +202,9 @@ opts("sse41") {
   sources = skia_opts.sse41_sources
   if (!is_clang && is_win) {
     defines = [ "SK_CPU_SSE_LEVEL=SK_CPU_SSE_LEVEL_SSE41" ]
+    if (is_mingw) {
+        cflags = [ "-msse4.1" ]
+    }
   } else {
     cflags = [ "-msse4.1" ]
   }
@@ -206,6 +215,9 @@ opts("sse42") {
   sources = skia_opts.sse42_sources
   if (!is_clang && is_win) {
     defines = [ "SK_CPU_SSE_LEVEL=SK_CPU_SSE_LEVEL_SSE42" ]
+    if (is_mingw) {
+        cflags = [ "-msse4.2" ]
+    }
   } else {
     cflags = [ "-msse4.2" ]
   }
@@ -214,7 +226,7 @@ opts("sse42") {
 opts("avx") {
   enabled = is_x86
   sources = skia_opts.avx_sources
-  if (is_win) {
+  if (is_win && !is_mingw) {
     cflags = [ "/arch:AVX" ]
   } else {
     cflags = [ "-mavx" ]
@@ -227,7 +239,7 @@ opts("avx") {
 opts("hsw") {
   enabled = is_x86
   sources = skia_opts.hsw_sources
-  if (is_win) {
+  if (is_win && !is_mingw) {
     cflags = [ "/arch:AVX2" ]
   } else {
     cflags = [ "-march=haswell" ]
@@ -240,7 +252,7 @@ opts("hsw") {
 opts("skx") {
   enabled = is_x86
   sources = skia_opts.skx_sources
-  if (is_win) {
+  if (is_win && !is_mingw) {
     cflags = [ "/arch:AVX512" ]
   } else {
     cflags = [ "-march=skylake-avx512" ]
@@ -566,7 +578,11 @@ optional("fontmgr_win_gdi") {
 
   public = [ "include/ports/SkTypeface_win.h" ]
   sources = [ "src/ports/SkFontHost_win.cpp" ]
-  libs = [ "Gdi32.lib" ]
+  if (!is_mingw){
+    libs = [ "Gdi32.lib" ]
+  } else {
+    libs = [ "gdi32" ]
+  }
 }
 
 if (skia_lex) {
@@ -879,7 +895,11 @@ optional("gpu") {
     } else if (is_win && !skia_enable_winuwp) {
       sources += [ "src/gpu/gl/win/GrGLMakeNativeInterface_win.cpp" ]
       if (target_cpu != "arm64") {
-        libs += [ "OpenGL32.lib" ]
+        if (!is_mingw){
+            libs += [ "OpenGL32.lib" ]
+        } else {
+            libs += [ "opengl32" ]
+        }
       }
     } else {
       sources += [ "src/gpu/gl/GrGLMakeNativeInterface_none.cpp" ]
@@ -1301,17 +1321,33 @@ skia_component("skia") {
       "src/ports/SkOSFile_win.cpp",
       "src/ports/SkOSLibrary_win.cpp",
     ]
-    libs += [
-      "Ole32.lib",
-      "OleAut32.lib",
-    ]
+    if (!is_mingw){
+        libs += [
+          "Ole32.lib",
+          "OleAut32.lib",
+        ]
+    } else {
+        libs += [
+          "ole32",
+          "oleaut32",
+          "uuid"
+        ]
+    }
 
     if (!skia_enable_winuwp) {
-      libs += [
-        "FontSub.lib",
-        "User32.lib",
-        "Usp10.lib",
-      ]
+      if (!is_mingw){
+          libs += [
+            "FontSub.lib",
+            "User32.lib",
+            "Usp10.lib",
+          ]
+      } else {
+          libs += [
+            "fontsub",
+            "user32",
+            "usp10"
+          ]
+      }
     }
   } else {
     sources += [
@@ -1748,9 +1784,17 @@ if (skia_enable_tools) {
         ]
       } else if (is_win) {
         sources += [ "tools/gpu/gl/win/CreatePlatformGLTestContext_win.cpp" ]
-        libs += [ "Gdi32.lib" ]
+        if (!is_mingw){
+            libs += [ "Gdi32.lib" ]
+        } else {
+            libs += [ "gdi32" ]
+        }
         if (target_cpu != "arm64") {
-          libs += [ "OpenGL32.lib" ]
+            if (!is_mingw){
+                libs += [ "OpenGL32.lib" ]
+            } else {
+                libs += [ "opengl32" ]
+            }
         }
       }
     }
diff --git a/gn/BUILDCONFIG.gn b/gn/BUILDCONFIG.gn
index 5f800a67..3d78296a 100644
--- a/gn/BUILDCONFIG.gn
+++ b/gn/BUILDCONFIG.gn
@@ -61,6 +61,11 @@ is_linux = current_os == "linux"
 is_mac = current_os == "mac"
 is_win = current_os == "win"
 
+# Set to true when compiling with the MinGW GCC compiler on the MSYS2 environment
+is_mingw = exec_script("//gn/is_mingw.py",
+                [cc],
+                "value")
+
 # This is just to make the Dawn build files happy. Skia itself uses target_os = "linux"
 # for ChromeOS, so this variable will not affect Skia proper.
 is_chromeos = false
@@ -120,7 +125,7 @@ if (is_android) {
   }
 }
 
-if (target_os == "win") {
+if (target_os == "win" && !is_mingw) {
   # By default we look for 2017 (Enterprise, Pro, and Community), then 2015. If MSVC is installed in a
   # non-default location, you can set win_vc to inform us where it is.
 
@@ -131,7 +136,7 @@ if (target_os == "win") {
                         # directory.
 }
 
-if (target_os == "win") {
+if (target_os == "win" && !is_mingw) {
   if (win_toolchain_version == "") {
     win_toolchain_version = exec_script("//gn/highest_version_dir.py",
                                         [
@@ -221,7 +226,7 @@ if (!is_official_build) {
       [ "//gn/skia:warnings_for_public_headers" ]
 }
 
-if (is_win) {
+if (is_win && !is_mingw) {
   # Windows tool chain
   set_default_toolchain("//gn/toolchain:msvc")
   default_toolchain_name = "msvc"
diff --git a/gn/is_mingw.py b/gn/is_mingw.py
new file mode 100644
index 00000000..4598484a
--- /dev/null
+++ b/gn/is_mingw.py
@@ -0,0 +1,52 @@
+# A program to check if the compiler passed
+# is a Mingw-w64 based compiler.
+
+import os
+import subprocess
+import argparse
+import sys
+
+
+def is_mingw(CC):
+    if sys.platform != 'win32':
+        # Let's check only if we are in Windows
+        return False
+
+    # Check if the compiler in VS
+    if os.path.basename(CC) in ['cl', 'cl.exe']:
+        return False
+
+    try:
+        com = subprocess.run(
+            [CC, '--version'], check=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True
+        )
+    except FileNotFoundError:
+        return False
+
+    if com.returncode != 0:
+        # Both gcc and clang compilers from mingw should understand that argument
+        # and should return a status code of 0.
+        return False
+
+    out, err = com.stdout, com.stderr
+    if 'clang' in out or 'Clang' in out:
+        # Check it's not clang-cl wrapper
+        if 'CL.EXE COMPATIBILITY' in out:
+            return False
+
+        return True
+
+    if 'gcc.exe' in out:
+        return True
+
+    return True
+
+
+if __name__ == '__main__':
+    parser = argparse.ArgumentParser(
+        description='Check if the compiler passed in a mingw based compiler.')
+    parser.add_argument('compiler', help='path to the compiler to check.')
+
+    args = parser.parse_args()
+    CC = args.compiler
+    print('true' if is_mingw(CC) else 'false')
diff --git a/gn/skia/BUILD.gn b/gn/skia/BUILD.gn
index 57235a61..a3e4b138 100644
--- a/gn/skia/BUILD.gn
+++ b/gn/skia/BUILD.gn
@@ -56,7 +56,7 @@ config("default") {
   # Disable warnings about unknown attributes.
   # (These unknown attribute warnings are on by default, so we don't make
   # disabling them part of :warnings, as some targets remove :warnings.)
-  if (is_win && !is_clang) {
+  if (is_win && !is_clang && !is_mingw) {
     cflags += [ "/wd5030" ]
   } else {
     cflags += [ "-Wno-attributes" ]
@@ -86,27 +86,50 @@ config("default") {
     if (is_clang && target_cpu == "arm64") {
       cflags += [ "--target=arm64-windows" ]
     }
-    cflags += [
-      "/bigobj",  # Some of our files are bigger than the regular limits.
-      "/utf-8",  # Set Source and Executable character sets to UTF-8.
-    ]
-    cflags_cc += [ "/std:c++17" ]
+    if (!is_mingw){
+      cflags += [
+        "/bigobj",  # Some of our files are bigger than the regular limits.
+        "/utf-8",  # Set Source and Executable character sets to UTF-8.
+      ]
+    } else {
+      cflags += [
+        "-fstrict-aliasing",
+        "-fPIC",
+        "-fvisibility=hidden",
+      ]
+    }
+
+    if (is_mingw){
+      cflags_c += [
+        "-fvisibility-inlines-hidden",
+      ]
+      cflags_cc += [
+        "-std=c++17",
+      ]
+    } else {
+        cflags_cc += [ "/std:c++17" ]
+    }
+
     defines += [
       "_CRT_SECURE_NO_WARNINGS",  # Disables warnings about sscanf().
       "_HAS_EXCEPTIONS=0",  # Disables exceptions in MSVC STL.
       "WIN32_LEAN_AND_MEAN",
       "NOMINMAX",
     ]
+ 
+    if (!is_mingw){
+        _include_dirs = [
+          "$win_vc/Tools/MSVC/$win_toolchain_version/include",
+          "$win_sdk/Include/$win_sdk_version/shared",
+          "$win_sdk/Include/$win_sdk_version/ucrt",
+          "$win_sdk/Include/$win_sdk_version/um",
+          "$win_sdk/Include/$win_sdk_version/winrt",
+        ]
+    } else {
+      _include_dirs = []
+    }
 
-    _include_dirs = [
-      "$win_vc/Tools/MSVC/$win_toolchain_version/include",
-      "$win_sdk/Include/$win_sdk_version/shared",
-      "$win_sdk/Include/$win_sdk_version/ucrt",
-      "$win_sdk/Include/$win_sdk_version/um",
-      "$win_sdk/Include/$win_sdk_version/winrt",
-    ]
-
-    if (is_clang) {
+    if (is_clang && !is_mingw) {
       foreach(dir, _include_dirs) {
         cflags += [
           "-imsvc",
@@ -116,12 +139,15 @@ config("default") {
     } else {
       include_dirs = _include_dirs
     }
-
-    lib_dirs = [
-      "$win_sdk/Lib/$win_sdk_version/ucrt/$target_cpu",
-      "$win_sdk/Lib/$win_sdk_version/um/$target_cpu",
-      "$win_vc/Tools/MSVC/$win_toolchain_version/lib/$target_cpu",
-    ]
+    if (!is_mingw){
+      lib_dirs = [
+        "$win_sdk/Lib/$win_sdk_version/ucrt/$target_cpu",
+        "$win_sdk/Lib/$win_sdk_version/um/$target_cpu",
+        "$win_vc/Tools/MSVC/$win_toolchain_version/lib/$target_cpu",
+      ]
+    } else {
+      lib_dirs = []
+    }
   } else {
     cflags += [
       "-fstrict-aliasing",
@@ -140,7 +166,7 @@ config("default") {
       "-mfpu=neon",
       "-mthumb",
     ]
-  } else if (current_cpu == "x86" && !is_win) {
+  } else if (current_cpu == "x86" && is_mingw) {
     asmflags += [ "-m32" ]
     cflags += [
       "-m32",
@@ -150,7 +176,7 @@ config("default") {
     ldflags += [ "-m32" ]
   }
 
-  if (malloc != "" && !is_win) {
+  if (malloc != "" && is_mingw) {
     cflags += [
       "-fno-builtin-malloc",
       "-fno-builtin-calloc",
@@ -334,7 +360,7 @@ config("recover_pointer_overflow") {
 
 config("no_exceptions") {
   # Exceptions are disabled by default on Windows.  (Use /EHsc to enable them.)
-  if (!is_win) {
+  if (is_mingw || !is_win) {
     cflags_cc = [ "-fno-exceptions" ]
   }
 }
@@ -346,14 +372,14 @@ config("warnings") {
   cflags_objcc = []
 
   if (werror) {
-    if (is_win) {
+    if (!is_mingw && is_win) {
       cflags += [ "/WX" ]
     } else {
       cflags += [ "-Werror" ]
     }
   }
 
-  if (is_win) {
+  if (is_win && !is_mingw) {
     cflags += [
       "/W3",  # Turn on lots of warnings.
 
@@ -553,7 +579,7 @@ config("debug_symbols") {
       "-gline-tables-only",
       "-funwind-tables",  # Helps make in-process backtraces fuller.
     ]
-  } else if (is_win) {
+  } else if (is_win && !is_mingw) {
     cflags = [ "/Z7" ]
     if (is_clang) {
       cflags += [ "-gcodeview-ghash" ]
@@ -568,7 +594,7 @@ config("debug_symbols") {
 
 config("no_rtti") {
   if (sanitize != "ASAN") {  # -fsanitize=vptr requires RTTI
-    if (is_win) {
+    if (is_win && !is_mingw) {
       cflags_cc = [ "/GR-" ]
     } else {
       cflags_cc = [ "-fno-rtti" ]
@@ -577,7 +603,7 @@ config("no_rtti") {
 }
 
 config("optimize") {
-  if (is_win) {
+  if (is_win && !is_mingw) {
     cflags = [
       "/O2",
       "/Zc:inline",
@@ -624,7 +650,7 @@ config("executable") {
       "-rdynamic",
       "-Wl,-rpath,\$ORIGIN",
     ]
-  } else if (is_win) {
+  } else if (is_win && !is_mingw) {
     ldflags = [
       "/SUBSYSTEM:CONSOLE",  # Quiet "no subsystem specified; CONSOLE assumed".
       "/INCREMENTAL:NO",  # Quiet warnings about failing to incrementally link
diff --git a/gn/toolchain/BUILD.gn b/gn/toolchain/BUILD.gn
index 8029086e..3f34bc8d 100644
--- a/gn/toolchain/BUILD.gn
+++ b/gn/toolchain/BUILD.gn
@@ -319,6 +319,9 @@ template("gcc_like_toolchain") {
       if (is_mac || is_ios) {
         rpath = "-Wl,-install_name,@rpath/$soname"
       }
+      if (is_mingw) {
+        rpath = ""  # For PE/COFF the soname argument has no effect
+      }
 
       rspfile = "{{output}}.rsp"
       rspfile_content = "{{inputs}}"
@@ -336,10 +339,24 @@ template("gcc_like_toolchain") {
         _end_group = ""
       }
 
-      command = "$link -shared {{ldflags}} $_start_group @$rspfile {{frameworks}} {{solibs}} $_end_group {{libs}} $rpath -o {{output}}"
+      _mingw_flags = ""
+      if (is_mingw) {
+        # Have MinGW linker generate a .def file and a .a import library
+        if (!is_clang) {
+          _mingw_flags += " -Wl,--dll "
+        }
+        _mingw_flags +=
+            " -Wl,--output-def=$soname.def -Wl,--out-implib=$soname.a "
+      }
+
+      command = "$link -shared {{ldflags}} $_start_group @$rspfile {{frameworks}} {{solibs}} $_end_group $_mingw_flags {{libs}} $rpath -o {{output}}"
       outputs = [ "{{root_out_dir}}/$soname" ]
       output_prefix = "lib"
-      default_output_extension = ".so"
+      if (!is_mingw) {
+        default_output_extension = ".so"
+      } else {
+        default_output_extension = ".dll"
+      }
       description = "link {{output}}"
       if (0 <= link_pool_depth) {
         pool = ":link_pool($default_toolchain)"
-- 
2.34.1.windows.1

