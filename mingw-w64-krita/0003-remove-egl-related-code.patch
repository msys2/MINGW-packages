From 317ef80cb8d9e513c3c2c49107c8f4e71c434cbc Mon Sep 17 00:00:00 2001
From: Naveen M K <naveen521kk@gmail.com>
Date: Fri, 12 Nov 2021 13:17:28 +0530
Subject: [PATCH 3/5] remove egl related code

Signed-off-by: Naveen M K <naveen521kk@gmail.com>
---
 .../ui/opengl/KisScreenInformationAdapter.cpp | 116 +++++++++---------
 1 file changed, 58 insertions(+), 58 deletions(-)

diff --git a/libs/ui/opengl/KisScreenInformationAdapter.cpp b/libs/ui/opengl/KisScreenInformationAdapter.cpp
index e4c3c075..031a9263 100644
--- a/libs/ui/opengl/KisScreenInformationAdapter.cpp
+++ b/libs/ui/opengl/KisScreenInformationAdapter.cpp
@@ -33,8 +33,8 @@
 #include <d3d11.h>
 #include <wrl/client.h>
 #include <dxgi1_6.h>
-#include "EGL/egl.h"
-#include "EGL/eglext.h"
+// #include "EGL/egl.h"
+// #include "EGL/eglext.h"
 #endif
 
 namespace {
@@ -59,9 +59,9 @@ void getProcAddressSafe(QOpenGLContext *context, const char *funcName, FuncType
     }
 }
 
-#ifdef Q_OS_WIN
-typedef const char *(EGLAPIENTRYP PFNEGLQUERYSTRINGPROC) (EGLDisplay dpy, EGLint name);
-#endif
+// #ifdef Q_OS_WIN
+// typedef const char *(EGLAPIENTRYP PFNEGLQUERYSTRINGPROC) (EGLDisplay dpy, EGLint name);
+// #endif
 }
 
 
@@ -102,75 +102,75 @@ void KisScreenInformationAdapter::Private::initialize(QOpenGLContext *newContext
             throw EGLException("the context is not OpenGL ES");
         }
 
-        PFNEGLQUERYSTRINGPROC queryString = nullptr;
-        getProcAddressSafe(context, "eglQueryString", queryString);
+        // PFNEGLQUERYSTRINGPROC queryString = nullptr;
+        // getProcAddressSafe(context, "eglQueryString", queryString);
 
-        const char* client_extensions = queryString(EGL_NO_DISPLAY, EGL_EXTENSIONS);
-        const QList<QByteArray> extensions = QByteArray(client_extensions).split(' ');
+        // const char* client_extensions = queryString(EGL_NO_DISPLAY, EGL_EXTENSIONS);
+        // const QList<QByteArray> extensions = QByteArray(client_extensions).split(' ');
 
-        if (!extensions.contains("EGL_ANGLE_platform_angle_d3d") ||
-            !extensions.contains("EGL_ANGLE_device_creation_d3d11")) {
+        // if (!extensions.contains("EGL_ANGLE_platform_angle_d3d") ||
+        //    !extensions.contains("EGL_ANGLE_device_creation_d3d11")) {
 
-            throw EGLException("the context is not Angle + D3D11");
-        }
+        //    throw EGLException("the context is not Angle + D3D11");
+        //}
 
-        PFNEGLQUERYDISPLAYATTRIBEXTPROC queryDisplayAttribEXT = nullptr;
-        PFNEGLQUERYDEVICEATTRIBEXTPROC queryDeviceAttribEXT = nullptr;
+        // PFNEGLQUERYDISPLAYATTRIBEXTPROC queryDisplayAttribEXT = nullptr;
+        // PFNEGLQUERYDEVICEATTRIBEXTPROC queryDeviceAttribEXT = nullptr;
 
-        getProcAddressSafe(context, "eglQueryDisplayAttribEXT", queryDisplayAttribEXT);
-        getProcAddressSafe(context, "eglQueryDeviceAttribEXT", queryDeviceAttribEXT);
+        // getProcAddressSafe(context, "eglQueryDisplayAttribEXT", queryDisplayAttribEXT);
+        // getProcAddressSafe(context, "eglQueryDeviceAttribEXT", queryDeviceAttribEXT);
 
-        QPlatformNativeInterface *nativeInterface = qGuiApp->platformNativeInterface();
-        EGLDisplay display = reinterpret_cast<EGLDisplay>(nativeInterface->nativeResourceForContext("egldisplay", context));
+        // QPlatformNativeInterface *nativeInterface = qGuiApp->platformNativeInterface();
+        // EGLDisplay display = reinterpret_cast<EGLDisplay>(nativeInterface->nativeResourceForContext("egldisplay", context));
 
-        if (!display) {
-            throw EGLException(
-                QString("couldn't request EGLDisplay handle, display = 0x%1").arg(uintptr_t(display), 0, 16));
-        }
+        // if (!display) {
+        //     throw EGLException(
+        //         QString("couldn't request EGLDisplay handle, display = 0x%1").arg(uintptr_t(display), 0, 16));
+        // }
 
-        EGLAttrib value = 0;
-        EGLBoolean result = false;
+        // EGLAttrib value = 0;
+        // EGLBoolean result = false;
 
-        result = queryDisplayAttribEXT(display, EGL_DEVICE_EXT, &value);
+        // result = queryDisplayAttribEXT(display, EGL_DEVICE_EXT, &value);
 
-        if (!result || value == EGL_NONE) {
-            throw EGLException(
-               QString("couldn't request EGLDeviceEXT handle, result = 0x%1, value = 0x%2")
-                   .arg(result, 0, 16).arg(value, 0, 16));
-        }
+        // if (!result || value == EGL_NONE) {
+        //     throw EGLException(
+        //        QString("couldn't request EGLDeviceEXT handle, result = 0x%1, value = 0x%2")
+        //            .arg(result, 0, 16).arg(value, 0, 16));
+        // }
 
-        EGLDeviceEXT device = reinterpret_cast<EGLDeviceEXT>(value);
+        // EGLDeviceEXT device = reinterpret_cast<EGLDeviceEXT>(value);
 
-        result = queryDeviceAttribEXT(device, EGL_D3D11_DEVICE_ANGLE, &value);
+        // result = queryDeviceAttribEXT(device, EGL_D3D11_DEVICE_ANGLE, &value);
 
-        if (!result || value == EGL_NONE) {
-            throw EGLException(
-                QString("couldn't request ID3D11Device pointer, result = 0x%1, value = 0x%2")
-                    .arg(result, 0, 16).arg(value, 0, 16));
-        }
-        ID3D11Device *deviceD3D = reinterpret_cast<ID3D11Device*>(value);
+        // if (!result || value == EGL_NONE) {
+        //     throw EGLException(
+        //         QString("couldn't request ID3D11Device pointer, result = 0x%1, value = 0x%2")
+        //             .arg(result, 0, 16).arg(value, 0, 16));
+        // }
+        // ID3D11Device *deviceD3D = reinterpret_cast<ID3D11Device*>(value);
 
-        {
-            HRESULT result = 0;
+        // {
+        //     HRESULT result = 0;
 
-            Microsoft::WRL::ComPtr<IDXGIDevice> dxgiDevice;
-            result = deviceD3D->QueryInterface(__uuidof(IDXGIDevice), (void**)&dxgiDevice);
+        //     Microsoft::WRL::ComPtr<IDXGIDevice> dxgiDevice;
+        //     result = deviceD3D->QueryInterface(__uuidof(IDXGIDevice), (void**)&dxgiDevice);
 
-            if (FAILED(result)) {
-                throw EGLException(
-                    QString("couldn't request IDXGIDevice pointer, result = 0x%1").arg(result, 0, 16));
-            }
+        //     if (FAILED(result)) {
+        //         throw EGLException(
+        //             QString("couldn't request IDXGIDevice pointer, result = 0x%1").arg(result, 0, 16));
+        //     }
 
-            Microsoft::WRL::ComPtr<IDXGIAdapter1> dxgiAdapter;
-            result = dxgiDevice->GetParent(__uuidof(IDXGIAdapter1), (void**)&dxgiAdapter);
+        //     Microsoft::WRL::ComPtr<IDXGIAdapter1> dxgiAdapter;
+        //     result = dxgiDevice->GetParent(__uuidof(IDXGIAdapter1), (void**)&dxgiAdapter);
 
-            if (FAILED(result)) {
-                throw EGLException(
-                    QString("couldn't request IDXGIAdapter1 pointer, result = 0x%1").arg(result, 0, 16));
-            }
+        //     if (FAILED(result)) {
+        //         throw EGLException(
+        //             QString("couldn't request IDXGIAdapter1 pointer, result = 0x%1").arg(result, 0, 16));
+        //     }
 
-            this->dxgiAdapter = dxgiAdapter;
-        }
+        //     this->dxgiAdapter = dxgiAdapter;
+        // }
 
 #else
         throw EGLException("current platform doesn't support fetching display information");
@@ -179,9 +179,9 @@ void KisScreenInformationAdapter::Private::initialize(QOpenGLContext *newContext
     } catch (EGLException &e) {
         this->context = 0;
         this->errorString = e.what();
-#ifdef Q_OS_WIN
-        this->dxgiAdapter.Reset();
-#endif
+// #ifdef Q_OS_WIN
+//         this->dxgiAdapter.Reset();
+// #endif
     }
 }
 
-- 
2.33.1.windows.1

