# Maintainer: Alexey Pavlov <Alexpux@gmail.com>

_realname=bullet
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}"
         "${MINGW_PACKAGE_PREFIX}-python-pybullet")
pkgver=3.21
pkgrel=1
pkgdesc="A 3D Collision Detection and Rigid Body Dynamics Library for games and animation (mingw-w64)"
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clang32')
url="https://www.bulletphysics.com/Bullet/"
license=('spdx:Zlib')
options=('!strip' 'staticlibs')
makedepends=("${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-ninja"
             "${MINGW_PACKAGE_PREFIX}-python")
depends=("${MINGW_PACKAGE_PREFIX}-glew"
         "${MINGW_PACKAGE_PREFIX}-openmp"
         "${MINGW_PACKAGE_PREFIX}-openvr"
         "${MINGW_PACKAGE_PREFIX}-python-numpy")

source=("${_realname}3-${pkgver}.tar.gz::https://github.com/bulletphysics/bullet3/archive/${pkgver}.tar.gz"
        0001-mingw-link-rearrange.patch
        0002-mingw-link-with-glew.patch
        0003-mingw-allow-shared-builds.patch
        0004-fix-undeclared-mpi.patch
        0005-fix-runtime-install.patch
        0006-install-openvr-only-msvc.patch
        0007-install-pybullet.patch
        0008-bullet-missing-sources.patch)
sha256sums=('49d1ee47aa8cbb0bc6bb459f0a4cfb9579b40e28f5c7d9a36c313e3031fb3965'
            '8275554a2f788a5520887f15ab35906f08c03af7601490b41498b593b4f341f8'
            'a0f262c955510ab94d9ba85b1bc05d2f740b2e3544e5779042743bbfee311e16'
            'd0dff6c2ad8731111164e83b087e058dc710bc6accbf879358729e7605dd484c'
            'dbb2e7958b9ae07e54f54b98bd9f25d2e64bb185f163027f47eb76f7c513ab5a'
            '21f8862eab5175084002a7e0337641d2f5609a51cf9d2def89297778c31ea5fa'
            '7eebffae23d5891ed631f73d2af03529643b4e5a8e3d7c019eb78e65af15d34d'
            '1d79a4ab4630166a26e52f253377541712e53d0b85e9eadbd61587da869cdc0f'
            '2960b9a6efcfd23784d1278a3e5219f78681d14c43422ab48a453ae7380a73a2')

prepare () {
  cd ${_realname}3-${pkgver}
  patch -p1 -i ${srcdir}/0001-mingw-link-rearrange.patch
  patch -p1 -i ${srcdir}/0002-mingw-link-with-glew.patch
  patch -p1 -i ${srcdir}/0003-mingw-allow-shared-builds.patch
  patch -p1 -i ${srcdir}/0004-fix-undeclared-mpi.patch
  patch -p1 -i ${srcdir}/0005-fix-runtime-install.patch
  patch -p1 -i ${srcdir}/0006-install-openvr-only-msvc.patch
  patch -p1 -i ${srcdir}/0007-install-pybullet.patch
  patch -p1 -i ${srcdir}/0008-bullet-missing-sources.patch
}

build() {
  [[ -d build-${MSYSTEM} ]] && rm -rf build-${MSYSTEM}
  mkdir -p build-${MSYSTEM} && cd build-${MSYSTEM}

  install=${_realname}-${MSYSTEM}.install

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  ${MINGW_PREFIX}/bin/cmake \
    -G"Ninja" \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    -DBUILD_CLSOCKET=ON \
    -DBUILD_EXTRAS=ON \
    -DBUILD_PYBULLET=ON \
    -DBUILD_PYBULLET_NUMPY=ON \
    -DBULLET2_MULTITHREADING=ON \
    -DBULLET2_USE_OPEN_MP_MULTITHREADING=ON \
    -DUSE_OPENVR=ON \
    -DINSTALL_LIBS=ON \
    -DINSTALL_EXTRA_LIBS=ON \
    -DCMAKE_BUILD_TYPE=Release \
    ../${_realname}3-${pkgver}

  cmake --build .
}

package_bullet() {
  optdepends=("${MINGW_PACKAGE_PREFIX}-python-pybullet=${pkgver}-${pkgrel}: python binding")

  cd build-${MSYSTEM}

  DESTDIR="${pkgdir}" cmake --install .

  mkdir -p ${pkgdir}${MINGW_PREFIX}/share/bullet
  for f in $(find examples -type f -iname *.dll -o -iname *.exe); do
    cp ${f} ${pkgdir}${MINGW_PREFIX}/share/bullet/
  done
  cp -rf ${srcdir}/bullet3-${pkgver}/data/* ${pkgdir}${MINGW_PREFIX}/share/bullet/
  for f in gtest; do
    cp lib/lib${f}.dll ${pkgdir}${MINGW_PREFIX}/share/bullet/
  done
}

package_python-pybullet() {
  pkgdesc="Bullet Python bindings (mingw-w64)"
  depends+=("${MINGW_PACKAGE_PREFIX}-${_realname}=${pkgver}-${pkgrel}")

  cd build-${MSYSTEM}

  DESTDIR="${pkgdir}" cmake --install . --component pybullet
}

# template start; name=mingw-w64-splitpkg-wrappers; version=1.0;
# vim: set ft=bash :

# generate wrappers
for _name in "${pkgname[@]}"; do
  _short="package_${_name#${MINGW_PACKAGE_PREFIX}-}"
  _func="$(declare -f "${_short}")"
  eval "${_func/#${_short}/package_${_name}}"
done
# template end;
