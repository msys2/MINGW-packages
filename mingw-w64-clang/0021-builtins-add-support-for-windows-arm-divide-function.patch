From cec63a1ac0e6a52824a7610f6f527ed5bdfd5b9c Mon Sep 17 00:00:00 2001
From: Martell Malone <martellmalone@gmail.com>
Date: Tue, 16 Aug 2016 15:50:50 -0700
Subject: [PATCH 1/2] builtins: add support for windows arm divide functions


diff --git a/cmake/base-config-ix.cmake b/cmake/base-config-ix.cmake
index 4f3976d..818965a 100644
--- a/cmake/base-config-ix.cmake
+++ b/cmake/base-config-ix.cmake
@@ -152,7 +152,7 @@ macro(test_targets)
     elseif("${COMPILER_RT_DEFAULT_TARGET_ARCH}" MATCHES "mips")
       test_target_arch(mips "" "-mips32r2" "--target=mips-linux-gnu")
       test_target_arch(mips64 "" "-mips64r2" "--target=mips64-linux-gnu" "-mabi=64")
-    elseif("${COMPILER_RT_DEFAULT_TARGET_ARCH}" MATCHES "arm")
+    elseif("${COMPILER_RT_DEFAULT_TARGET_ARCH}" MATCHES "arm|armv7")
       if(WIN32)
         test_target_arch(arm "" "" "")
       else()
diff --git a/cmake/builtin-config-ix.cmake b/cmake/builtin-config-ix.cmake
index 432b1fa..7e4ef1c 100644
--- a/cmake/builtin-config-ix.cmake
+++ b/cmake/builtin-config-ix.cmake
@@ -1,7 +1,7 @@
 include(BuiltinTests)
 
 # Make all the tests only check the compiler
-set(TEST_COMPILE_ONLY On)
+set(TEST_COMPILE_ONLY TRUE)
 
 builtin_check_c_compiler_flag(-fPIC                 COMPILER_RT_HAS_FPIC_FLAG)
 builtin_check_c_compiler_flag(-fPIE                 COMPILER_RT_HAS_FPIE_FLAG)
diff --git a/lib/builtins/CMakeLists.txt b/lib/builtins/CMakeLists.txt
index beacb86..44dac1d 100644
--- a/lib/builtins/CMakeLists.txt
+++ b/lib/builtins/CMakeLists.txt
@@ -363,7 +363,16 @@ set(arm_Thumb1_SOURCES
   ${arm_Thumb1_VFPv2_SOURCES}
   ${arm_Thumb1_icache_SOURCES})
 
-if(NOT WIN32)
+if(WIN32)
+  set(arm_SOURCES
+      arm/rt_udiv.S
+      arm/rt_sdiv.S
+      arm/rt_udiv64.S
+      arm/rt_sdiv64.S
+      umoddi3.c
+      moddi3.c
+      udivmoddi4.c)
+else(WIN32)
   # TODO the EABI sources should only be added to EABI targets
   set(arm_SOURCES
     ${arm_SOURCES}
diff --git a/lib/builtins/arm/rt_sdiv.S b/lib/builtins/arm/rt_sdiv.S
new file mode 100644
index 0000000..7879201
--- /dev/null
+++ b/lib/builtins/arm/rt_sdiv.S
@@ -0,0 +1,103 @@
+/*===-- rt_sdiv.S - 32-bit signed integer divide ------------------------===//
+ *
+ *                     The LLVM Compiler Infrastructure
+ *
+ * This file is dual licensed under the MIT and the University of Illinois Open
+ * Source Licenses. See LICENSE.TXT for details.
+ *
+ *===----------------------------------------------------------------------===//
+ *
+ * This file implements the __rt_sdiv (32-bit signed integer divide)
+ * function for the ARM PE 32-bit architecture.
+ *
+ *===----------------------------------------------------------------------===*/
+
+#include "../assembly.h"
+
+  .syntax unified
+  .text
+
+#if __ARM_ARCH_ISA_THUMB == 2
+  .thumb
+#else
+#error Thumb2 mode only supported
+#endif
+
+  .p2align 2
+
+@ int __rt_sdiv(unsigned int divident, unsigned int divisor)
+@   Calculate and return the remainder of the (unsigned) division signed.
+
+DEFINE_COMPILERRT_THUMB_FUNCTION(__rt_sdiv)
+  ands  r3, r0, #0x80000000
+  IT(mi)
+  rsbmi r0, r0, #0
+  eors.w  r12, r3, r1, asr #32
+  IT(hs)
+  rsbhs r1, r1, #0
+
+#define IMM #
+#define divblock(shift)           \
+  subs  r3, r1, r2, lsl IMM shift; \
+  IT(hs);                          \
+  movcs  r1, r3;                   \
+  adcs  r0, r0, r0
+
+  cbz r0, #32
+  mov r2, r0
+  clz r0, r0
+  clz r3, r1
+  subs  r0, r0, r3
+  adr  r3, LOCAL_LABEL(div0block) + 1
+  sub.w r3, r3, r0, lsl #3
+  sub.w r3, r3, r0, lsl #1
+  mov.w r0, #0
+  blt.w LOCAL_LABEL(_udiv_end)
+  bx  r3
+
+  @ __brkdiv0
+  .hword 0xf9de
+
+  divblock(31)
+  divblock(30)
+  divblock(29)
+  divblock(28)
+  divblock(27)
+  divblock(26)
+  divblock(25)
+  divblock(24)
+  divblock(23)
+  divblock(22)
+  divblock(21)
+  divblock(20)
+  divblock(19)
+  divblock(18)
+  divblock(17)
+  divblock(16)
+  divblock(15)
+  divblock(14)
+  divblock(13)
+  divblock(12)
+  divblock(11)
+  divblock(10)
+  divblock(9)
+  divblock(8)
+  divblock(7)
+  divblock(6)
+  divblock(5)
+  divblock(4)
+  divblock(3)
+  divblock(2)
+  divblock(1)
+LOCAL_LABEL(div0block):
+  divblock(0)
+LOCAL_LABEL(_udiv_end):
+
+  lsls.w  r12, r12, #1
+  IT(hs)
+  rsbhs r0, r0, #0
+  IT(mi)
+  rsbmi r1, r1, #0
+  bx  lr
+
+END_COMPILERRT_FUNCTION(__rt_sdiv)
diff --git a/lib/builtins/arm/rt_sdiv64.S b/lib/builtins/arm/rt_sdiv64.S
new file mode 100644
index 0000000..8e7d24d
--- /dev/null
+++ b/lib/builtins/arm/rt_sdiv64.S
@@ -0,0 +1,133 @@
+/*===-- rt_sdiv64.S - 64-bit signed integer divide ------------------------===//
+ *
+ *                     The LLVM Compiler Infrastructure
+ *
+ * This file is dual licensed under the MIT and the University of Illinois Open
+ * Source Licenses. See LICENSE.TXT for details.
+ *
+ *===----------------------------------------------------------------------===//
+ *
+ * This file implements the __rt_sdiv64 (64-bit signed integer divide)
+ * function for the ARM PE 32-bit architecture.
+ *
+ *===----------------------------------------------------------------------===*/
+
+#include "../assembly.h"
+
+  .syntax unified
+  .text
+
+#if __ARM_ARCH_ISA_THUMB == 2
+  .thumb
+#else
+#error Thumb2 mode only supported
+#endif
+
+  .p2align 2
+
+@ long long __rt_sdiv64(unsigned long long divident, unsigned long long divisor)
+@   Calculate and return the remainder of the (unsigned) division signed.
+
+.extern __rt_udiv
+
+DEFINE_COMPILERRT_THUMB_FUNCTION(__rt_sdiv64)
+
+  push.w  {r4, r5, r6, r7, r11, lr}
+  ands  r4, r1, #0x80000000
+  bpl LOCAL_LABEL(_sdiv64_1)
+  rsbs  r0, r0, #0
+  sbc.w r1, r1, r1, lsl #1
+LOCAL_LABEL(_sdiv64_1):
+  eors.w  r7, r4, r3, asr #32
+  blo LOCAL_LABEL(_sdiv64_2)
+  rsbs  r2, r2, #0
+  sbc.w r3, r3, r3, lsl #1
+LOCAL_LABEL(_sdiv64_2):
+
+  @ __rt_div64
+  orrs.w  r4, r0, r1
+  beq LOCAL_LABEL(_div64_3)
+  orrs.w  r4, r1, r3
+  beq LOCAL_LABEL(_div64_7)
+  mov r6, r0
+  mov r12, r1
+  clz r1, r3
+  cbnz  r3, #4
+  clz r1, r2
+  adds  r1, #32
+  cmp.w r12, #0
+  clz r0, r12
+  bne LOCAL_LABEL(_div64_1)
+  clz r0, r6
+  adds  r0, #32
+LOCAL_LABEL(_div64_1):
+  subs  r0, r0, r1
+  blt LOCAL_LABEL(_div64_end)
+  cmp r0, #32
+  mov r5, r12
+  mov r4, r6
+  blo LOCAL_LABEL(_div64_2)
+  mov r5, r6
+  movs  r4, #0
+LOCAL_LABEL(_div64_2):
+  ands  r0, r0, #31
+  lsls  r5, r0
+  rsbs.w  r1, r0, #32
+  lsrs.w  r1, r4, r1
+  lsls  r4, r0
+  orrs  r5, r1
+  movs  r0, #0
+  movs  r1, #0
+  b LOCAL_LABEL(_div64_4)
+
+  @ __brkdiv0
+  .hword 0xf9de
+
+LOCAL_LABEL(_div64_3):
+  lsrs  r4, r4, #1
+  adds  r0, r0, r0
+  orr.w r4, r4, r5, lsl #31
+  adcs  r1, r1
+  lsrs  r5, r5, #1
+LOCAL_LABEL(_div64_4):
+  cmp r5, r3
+  bhi LOCAL_LABEL(_div64_6)
+  blo LOCAL_LABEL(_div64_5)
+  cmp r4, r2
+  bhi LOCAL_LABEL(_div64_6)
+LOCAL_LABEL(_div64_5):
+  subs  r2, r2, r4
+  sbcs  r3, r5
+  adds  r0, r0, #1
+  adcs  r1, r1, #0
+LOCAL_LABEL(_div64_6):
+  cmp r4, r6
+  bne LOCAL_LABEL(_div64_3)
+  cmp r5, r12
+  bne LOCAL_LABEL(_div64_3)
+  b LOCAL_LABEL(_div64_end)
+LOCAL_LABEL(_div64_7):
+  mov r1, r2
+  bl  __rt_udiv
+  mov r2, r1
+  movs  r1, #0
+  movs  r3, #0
+  b LOCAL_LABEL(_div64_end)
+  movs  r1, #0
+  movs  r0, #0
+LOCAL_LABEL(_div64_end):
+
+
+  lsls  r7, r7, #1
+  blo LOCAL_LABEL(_sdiv64_3)
+  rsbs  r0, r0, #0
+  sbc.w r1, r1, r1, lsl #1
+  ands  r7, r7
+LOCAL_LABEL(_sdiv64_3):
+  bpl LOCAL_LABEL(_sdiv64_4)
+  rsbs  r2, r2, #0
+  sbc.w r3, r3, r3, lsl #1
+LOCAL_LABEL(_sdiv64_4):
+  pop.w {r4, r5, r6, r7, r11, pc}
+
+END_COMPILERRT_FUNCTION(__rt_sdiv64)
diff --git a/lib/builtins/arm/rt_udiv.S b/lib/builtins/arm/rt_udiv.S
new file mode 100644
index 0000000..d7efb7e
--- /dev/null
+++ b/lib/builtins/arm/rt_udiv.S
@@ -0,0 +1,92 @@
+/*===-- rt_udiv.S - 32-bit unsigned integer divide ------------------------===//
+ *
+ *                     The LLVM Compiler Infrastructure
+ *
+ * This file is dual licensed under the MIT and the University of Illinois Open
+ * Source Licenses. See LICENSE.TXT for details.
+ *
+ *===----------------------------------------------------------------------===//
+ *
+ * This file implements the __rt_udiv (32-bit unsigned integer divide)
+ * function for the ARM PE 32-bit architecture.
+ *
+ *===----------------------------------------------------------------------===*/
+
+#include "../assembly.h"
+
+  .syntax unified
+  .text
+
+#if __ARM_ARCH_ISA_THUMB == 2
+  .thumb
+#else
+#error Thumb2 mode only supported
+#endif
+
+  .p2align 2
+
+@ unsigned int __rt_udiv(unsigned int divident, unsigned int divisor)
+@   Calculate and return the remainder of the (unsigned) division.
+
+DEFINE_COMPILERRT_THUMB_FUNCTION(__rt_udiv)
+
+#define IMM #
+#define divblock(shift)           \
+  subs  r3, r1, r2, lsl IMM shift; \
+  IT(hs);                          \
+  movcs  r1, r3;                   \
+  adcs  r0, r0, r0
+
+  cbz r0, #32
+  mov r2, r0
+  clz r0, r0
+  clz r3, r1
+  subs  r0, r0, r3
+  adr  r3, LOCAL_LABEL(div0block) + 1
+  sub.w r3, r3, r0, lsl #3
+  sub.w r3, r3, r0, lsl #1
+  mov.w r0, #0
+  blt.w LOCAL_LABEL(_udiv_end)
+  bx  r3
+
+  @ __brkdiv0
+  .hword 0xf9de
+
+  divblock(31)
+  divblock(30)
+  divblock(29)
+  divblock(28)
+  divblock(27)
+  divblock(26)
+  divblock(25)
+  divblock(24)
+  divblock(23)
+  divblock(22)
+  divblock(21)
+  divblock(20)
+  divblock(19)
+  divblock(18)
+  divblock(17)
+  divblock(16)
+  divblock(15)
+  divblock(14)
+  divblock(13)
+  divblock(12)
+  divblock(11)
+  divblock(10)
+  divblock(9)
+  divblock(8)
+  divblock(7)
+  divblock(6)
+  divblock(5)
+  divblock(4)
+  divblock(3)
+  divblock(2)
+  divblock(1)
+LOCAL_LABEL(div0block):
+  divblock(0)
+LOCAL_LABEL(_udiv_end):
+
+  bx  lr
+
+END_COMPILERRT_FUNCTION(__rt_sdiv64)
diff --git a/lib/builtins/arm/rt_udiv64.S b/lib/builtins/arm/rt_udiv64.S
new file mode 100644
index 0000000..e7c1ce6
--- /dev/null
+++ b/lib/builtins/arm/rt_udiv64.S
@@ -0,0 +1,112 @@
+/*===-- rt_udiv64.S - 64-bit unsigned integer divide ----------------------===//
+ *
+ *                     The LLVM Compiler Infrastructure
+ *
+ * This file is dual licensed under the MIT and the University of Illinois Open
+ * Source Licenses. See LICENSE.TXT for details.
+ *
+ *===----------------------------------------------------------------------===//
+ *
+ * This file implements the __rt_udiv64 (64-bit unsigned integer divide)
+ * function for the ARM PE 32-bit architecture.
+ *
+ *===----------------------------------------------------------------------===*/
+
+#include "../assembly.h"
+
+  .syntax unified
+  .text
+
+#if __ARM_ARCH_ISA_THUMB == 2
+  .thumb
+#else
+#error Thumb2 mode only supported
+#endif
+
+  .p2align 2
+
+@ unsigned long long __rt_udiv64(unsigned long long divident, unsigned long long divisor)
+@   Calculate and return the remainder of the (unsigned) division.
+
+.extern __rt_udiv
+
+DEFINE_COMPILERRT_THUMB_FUNCTION(__rt_udiv64)
+
+  push.w  {r4, r5, r6, r7, r11, lr}
+
+  @ __rt_div64
+  orrs.w  r4, r0, r1
+  beq LOCAL_LABEL(_div64_3)
+  orrs.w  r4, r1, r3
+  beq LOCAL_LABEL(_div64_7)
+  mov r6, r0
+  mov r12, r1
+  clz r1, r3
+  cbnz  r3, #4
+  clz r1, r2
+  adds  r1, #32
+  cmp.w r12, #0
+  clz r0, r12
+  bne LOCAL_LABEL(_div64_1)
+  clz r0, r6
+  adds  r0, #32
+LOCAL_LABEL(_div64_1):
+  subs  r0, r0, r1
+  blt LOCAL_LABEL(_div64_end)
+  cmp r0, #32
+  mov r5, r12
+  mov r4, r6
+  blo LOCAL_LABEL(_div64_2)
+  mov r5, r6
+  movs  r4, #0
+LOCAL_LABEL(_div64_2):
+  ands  r0, r0, #31
+  lsls  r5, r0
+  rsbs.w  r1, r0, #32
+  lsrs.w  r1, r4, r1
+  lsls  r4, r0
+  orrs  r5, r1
+  movs  r0, #0
+  movs  r1, #0
+  b LOCAL_LABEL(_div64_4)
+
+  @ __brkdiv0
+  .hword 0xf9de
+
+LOCAL_LABEL(_div64_3):
+  lsrs  r4, r4, #1
+  adds  r0, r0, r0
+  orr.w r4, r4, r5, lsl #31
+  adcs  r1, r1
+  lsrs  r5, r5, #1
+LOCAL_LABEL(_div64_4):
+  cmp r5, r3
+  bhi LOCAL_LABEL(_div64_6)
+  blo LOCAL_LABEL(_div64_5)
+  cmp r4, r2
+  bhi LOCAL_LABEL(_div64_6)
+LOCAL_LABEL(_div64_5):
+  subs  r2, r2, r4
+  sbcs  r3, r5
+  adds  r0, r0, #1
+  adcs  r1, r1, #0
+LOCAL_LABEL(_div64_6):
+  cmp r4, r6
+  bne LOCAL_LABEL(_div64_3)
+  cmp r5, r12
+  bne LOCAL_LABEL(_div64_3)
+  b LOCAL_LABEL(_div64_end)
+LOCAL_LABEL(_div64_7):
+  mov r1, r2
+  bl  __rt_udiv
+  mov r2, r1
+  movs  r1, #0
+  movs  r3, #0
+  b LOCAL_LABEL(_div64_end)
+  movs  r1, #0
+  movs  r0, #0
+LOCAL_LABEL(_div64_end):
+
+  pop.w {r4, r5, r6, r7, r11, pc}
+
+END_COMPILERRT_FUNCTION(__rt_udiv64)
-- 
2.8.3

