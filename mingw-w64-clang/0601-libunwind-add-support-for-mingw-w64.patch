From dfe4f4533d720f2e057f35b104b3fd50cf9d0f32 Mon Sep 17 00:00:00 2001
From: Mateusz Mikula <mati865@gmail.com>
Date: Fri, 17 Mar 2017 21:20:49 +0100
Subject: [PATCH] libunwind add support for mingw-w64

---
 include/unwind.h     |  2 +-
 src/AddressSpace.hpp | 15 ++++++++-------
 src/assembly.h       |  2 ++
 src/config.h         | 16 +++++++++++++++-
 4 files changed, 26 insertions(+), 9 deletions(-)

diff --git a/include/unwind.h b/include/unwind.h
index 1d163ca..e54f39d 100644
--- a/include/unwind.h
+++ b/include/unwind.h
@@ -122,7 +122,7 @@ struct _Unwind_Exception {
                             _Unwind_Exception *exc);
   uintptr_t private_1; // non-zero means forced unwind
   uintptr_t private_2; // holds sp that phase1 found for phase2 to use
-#ifndef __LP64__
+#if !defined(__LP64__) && !defined(_WIN64)
   // The implementation of _Unwind_Exception uses an attribute mode on the
   // above fields which has the side effect of causing this whole struct to
   // round up to 32 bytes in size. To be more explicit, we add pad fields
diff --git a/src/AddressSpace.hpp b/src/AddressSpace.hpp
index 67aa664..f61e620 100644
--- a/src/AddressSpace.hpp
+++ b/src/AddressSpace.hpp
@@ -18,7 +18,7 @@
 #include <stdlib.h>
 #include <string.h>
 
-#ifndef _LIBUNWIND_IS_BAREMETAL
+#if !defined(_LIBUNWIND_IS_BAREMETAL) && !defined(_WIN32)
 #include <dlfcn.h>
 #endif
 
@@ -109,7 +109,7 @@ struct UnwindInfoSections {
 /// making local unwinds fast.
 class __attribute__((visibility("hidden"))) LocalAddressSpace {
 public:
-#ifdef __LP64__
+#if defined(__LP64__) || defined(_WIN64)
   typedef uint64_t pint_t;
   typedef int64_t  sint_t;
 #else
@@ -161,7 +161,7 @@ public:
 };
 
 inline uintptr_t LocalAddressSpace::getP(pint_t addr) {
-#ifdef __LP64__
+#if defined(__LP64__) || defined(_WIN64)
   return get64(addr);
 #else
   return get32(addr);
@@ -306,7 +306,7 @@ LocalAddressSpace::getEncodedP(pint_t &addr, pint_t end, uint8_t encoding,
   return result;
 }
 
-#ifdef __APPLE__ 
+#ifdef __APPLE__
   struct dyld_unwind_sections
   {
     const struct mach_header*   mh;
@@ -324,13 +324,13 @@ LocalAddressSpace::getEncodedP(pint_t &addr, pint_t end, uint8_t encoding,
     // In 10.6.x and earlier, we need to implement this functionality. Note
     // that this requires a newer version of libmacho (from cctools) than is
     // present in libSystem on 10.6.x (for getsectiondata).
-    static inline bool _dyld_find_unwind_sections(void* addr, 
+    static inline bool _dyld_find_unwind_sections(void* addr,
                                                     dyld_unwind_sections* info) {
       // Find mach-o image containing address.
       Dl_info dlinfo;
       if (!dladdr(addr, &dlinfo))
         return false;
-#if __LP64__
+#if defined(__LP64__) || defined(_WIN64)
       const struct mach_header_64 *mh = (const struct mach_header_64 *)dlinfo.dli_fbase;
 #else
       const struct mach_header *mh = (const struct mach_header *)dlinfo.dli_fbase;
@@ -445,6 +445,7 @@ inline bool LocalAddressSpace::findUnwindSections(pint_t targetAddr,
       },
       &cb_data);
   return static_cast<bool>(found);
+#elif defined(_WIN32)
 #else
 #error "_LIBUNWIND_SUPPORT_DWARF_UNWIND requires _LIBUNWIND_SUPPORT_DWARF_INDEX on this platform."
 #endif
@@ -468,7 +469,7 @@ inline bool LocalAddressSpace::findOtherFDE(pint_t targetAddr, pint_t &fde) {
 inline bool LocalAddressSpace::findFunctionName(pint_t addr, char *buf,
                                                 size_t bufLen,
                                                 unw_word_t *offset) {
-#ifndef _LIBUNWIND_IS_BAREMETAL
+#if !defined(_LIBUNWIND_IS_BAREMETAL) && !defined(_WIN32)
   Dl_info dyldInfo;
   if (dladdr((void *)addr, &dyldInfo)) {
     if (dyldInfo.dli_sname != NULL) {
diff --git a/src/assembly.h b/src/assembly.h
index 9fb9905..6391f22 100644
--- a/src/assembly.h
+++ b/src/assembly.h
@@ -26,6 +26,8 @@
 
 #if defined(__APPLE__)
 #define HIDDEN_DIRECTIVE .private_extern
+#elif defined(_WIN32)
+#define HIDDEN_DIRECTIVE .globl
 #else
 #define HIDDEN_DIRECTIVE .hidden
 #endif
diff --git a/src/config.h b/src/config.h
index 4e4dd99..f6002af 100644
--- a/src/config.h
+++ b/src/config.h
@@ -40,6 +40,16 @@
     #define _LIBUNWIND_SUPPORT_DWARF_UNWIND   1
     #define _LIBUNWIND_SUPPORT_DWARF_INDEX    0
   #endif
+#elif defined(_WIN32)
+  // #define _LIBUNWIND_BUILD_SJLJ_APIS
+  // #define _LIBUNWIND_SUPPORT_FRAME_APIS
+  #define _LIBUNWIND_SUPPORT_COMPACT_UNWIND 1
+  #define _LIBUNWIND_SUPPORT_DWARF_UNWIND 1
+  // #define _LIBUNWIND_SUPPORT_DWARF_INDEX
+  #define bzero(s,n) memset(s,0,n)
+  // libcxx may have defined __USE_MINGW_ANSI_STDIO.
+  // Here we would like to get the regular versions, not the _mingw ones.
+  #undef __USE_MINGW_ANSI_STDIO
 #else
   #if defined(__ARM_DWARF_EH__) || !defined(__arm__)
     #define _LIBUNWIND_SUPPORT_COMPACT_UNWIND 0
@@ -52,9 +62,13 @@
   #endif
 #endif
 
-// FIXME: these macros are not correct for COFF targets
+#if defined(_WIN32)
+#define _LIBUNWIND_EXPORT
+#define _LIBUNWIND_HIDDEN
+#else
 #define _LIBUNWIND_EXPORT __attribute__((visibility("default")))
 #define _LIBUNWIND_HIDDEN __attribute__((visibility("hidden")))
+#endif
 
 #if (defined(__APPLE__) && defined(__arm__)) || defined(__USING_SJLJ_EXCEPTIONS__)
 #define _LIBUNWIND_BUILD_SJLJ_APIS 1
-- 
2.12.0

