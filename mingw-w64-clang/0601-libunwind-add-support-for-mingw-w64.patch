From 8d0335a3e369eca60ff53c5a6a0936aafcaaf13b Mon Sep 17 00:00:00 2001
From: Mateusz Mikula <mati865@gmail.com>
Date: Fri, 17 Mar 2017 21:20:49 +0100
Subject: [PATCH] libunwind add support for mingw-w64

---
 cmake/config-ix.cmake | 13 +++++++++++++
 include/unwind.h      |  2 +-
 src/AddressSpace.hpp  | 10 ++++++----
 src/assembly.h        |  2 ++
 src/config.h          | 10 ++++++++--
 5 files changed, 30 insertions(+), 7 deletions(-)

diff --git a/cmake/config-ix.cmake b/cmake/config-ix.cmake
index 40a5dd1..e2041af 100644
--- a/cmake/config-ix.cmake
+++ b/cmake/config-ix.cmake
@@ -29,6 +29,19 @@ if (LIBUNWIND_HAS_NODEFAULTLIBS_FLAG)
   elseif (LIBUNWIND_HAS_GCC_S_LIB)
     list(APPEND CMAKE_REQUIRED_LIBRARIES gcc_s)
   endif ()
+  if (MINGW)
+    # Mingw64 requires quite a few "C" runtime libraries in order for basic
+    # programs to link successfully with -nodefaultlibs.
+    if (LIBUNWIND_USE_COMPILER_RT)
+      set(MINGW_RUNTIME ${LIBUNWIND_BUILTINS_LIBRARY})
+    else ()
+      set(MINGW_RUNTIME gcc_s gcc)
+    endif()
+    set(MINGW_LIBRARIES mingw32 ${MINGW_RUNTIME} moldname mingwex msvcrt advapi32
+                        shell32 user32 kernel32 mingw32 ${MINGW_RUNTIME}
+                        moldname mingwex msvcrt)
+    list(APPEND CMAKE_REQUIRED_LIBRARIES ${MINGW_LIBRARIES})
+  endif()
   if (CMAKE_C_FLAGS MATCHES -fsanitize OR CMAKE_CXX_FLAGS MATCHES -fsanitize)
     set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -fno-sanitize=all")
   endif ()
diff --git a/include/unwind.h b/include/unwind.h
index fc7d122..db10654 100644
--- a/include/unwind.h
+++ b/include/unwind.h
@@ -122,7 +122,7 @@ struct _Unwind_Exception {
                             _Unwind_Exception *exc);
   uintptr_t private_1; // non-zero means forced unwind
   uintptr_t private_2; // holds sp that phase1 found for phase2 to use
-#ifndef __LP64__
+#if !defined(__LP64__) && !defined(_WIN64)
   // The implementation of _Unwind_Exception uses an attribute mode on the
   // above fields which has the side effect of causing this whole struct to
   // round up to 32 bytes in size. To be more explicit, we add pad fields
diff --git a/src/AddressSpace.hpp b/src/AddressSpace.hpp
index 2ed52a5..b18851f 100644
--- a/src/AddressSpace.hpp
+++ b/src/AddressSpace.hpp
@@ -18,7 +18,7 @@
 #include <stdlib.h>
 #include <string.h>
 
-#ifndef _LIBUNWIND_IS_BAREMETAL
+#if !defined(_LIBUNWIND_IS_BAREMETAL) && !defined(_WIN32)
 #include <dlfcn.h>
 #endif
 
@@ -68,7 +68,7 @@ struct UnwindInfoSections {
 /// making local unwinds fast.
 class __attribute__((visibility("hidden"))) LocalAddressSpace {
 public:
-#ifdef __LP64__
+#if defined(__LP64__) || defined(_WIN64)
   typedef uint64_t pint_t;
   typedef int64_t  sint_t;
 #else
@@ -290,7 +290,7 @@ LocalAddressSpace::getEncodedP(pint_t &addr, pint_t end, uint8_t encoding,
       Dl_info dlinfo;
       if (!dladdr(addr, &dlinfo))
         return false;
-#if __LP64__
+#if defined(__LP64__) || defined(_WIN64)
       const struct mach_header_64 *mh = (const struct mach_header_64 *)dlinfo.dli_fbase;
 #else
       const struct mach_header *mh = (const struct mach_header *)dlinfo.dli_fbase;
@@ -327,7 +327,9 @@ extern char __exidx_end;
 // independent ELF header traversal is not provided by <link.h> on some
 // systems (e.g., FreeBSD). On these systems the data structures are
 // just called Elf_XXX. Define ElfW() locally.
+#ifndef _WIN32
 #include <link.h>
+#endif
 #if !defined(ElfW)
 #define ElfW(type) Elf_##type
 #endif
@@ -478,7 +480,7 @@ inline bool LocalAddressSpace::findOtherFDE(pint_t targetAddr, pint_t &fde) {
 inline bool LocalAddressSpace::findFunctionName(pint_t addr, char *buf,
                                                 size_t bufLen,
                                                 unw_word_t *offset) {
-#ifndef _LIBUNWIND_IS_BAREMETAL
+#if !defined(_LIBUNWIND_IS_BAREMETAL) && !defined(_WIN32)
   Dl_info dyldInfo;
   if (dladdr((void *)addr, &dyldInfo)) {
     if (dyldInfo.dli_sname != NULL) {
diff --git a/src/assembly.h b/src/assembly.h
index d28cbc9..df55679 100644
--- a/src/assembly.h
+++ b/src/assembly.h
@@ -26,6 +26,8 @@
 
 #if defined(__APPLE__)
 #define HIDDEN_DIRECTIVE .private_extern
+#elif defined(_WIN32)
+#define HIDDEN_DIRECTIVE .globl
 #else
 #define HIDDEN_DIRECTIVE .hidden
 #endif
diff --git a/src/config.h b/src/config.h
index ac8d7d9..07e7c1a 100644
--- a/src/config.h
+++ b/src/config.h
@@ -37,6 +37,13 @@
     #define _LIBUNWIND_SUPPORT_COMPACT_UNWIND
     #define _LIBUNWIND_SUPPORT_DWARF_UNWIND   1
   #endif
+#elif defined(_WIN32)
+  // #define _LIBUNWIND_BUILD_SJLJ_APIS
+  // #define _LIBUNWIND_SUPPORT_FRAME_APIS
+  #define _LIBUNWIND_SUPPORT_COMPACT_UNWIND 1
+  // #define _LIBUNWIND_SUPPORT_DWARF_UNWIND
+  // #define _LIBUNWIND_SUPPORT_DWARF_INDEX
+  #define bzero(s,n) memset(s,0,n)
 #else
   #if defined(__ARM_DWARF_EH__) || !defined(__arm__)
     #define _LIBUNWIND_SUPPORT_DWARF_UNWIND 1
@@ -44,11 +51,10 @@
   #endif
 #endif
 
-#if defined(_LIBUNWIND_DISABLE_VISIBILITY_ANNOTATIONS)
+#if defined(_LIBUNWIND_DISABLE_VISIBILITY_ANNOTATIONS) || defined(_WIN32)
   #define _LIBUNWIND_EXPORT
   #define _LIBUNWIND_HIDDEN
 #else
-  // FIXME: these macros are not correct for COFF targets
   #define _LIBUNWIND_EXPORT __attribute__((visibility("default")))
   #define _LIBUNWIND_HIDDEN __attribute__((visibility("hidden")))
 #endif
-- 
2.14.1

