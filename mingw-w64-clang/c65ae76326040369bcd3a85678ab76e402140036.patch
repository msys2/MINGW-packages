From c65ae76326040369bcd3a85678ab76e402140036 Mon Sep 17 00:00:00 2001
From: Frederik Carlier <frederik.carlier@keysight.com>
Date: Wed, 10 Jan 2024 16:51:18 +0000
Subject: [PATCH] Objective C: Avoid including '=' characters in type encodings
 in instance variable names

---
 clang/lib/CodeGen/CGObjCGNU.cpp | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/clang/lib/CodeGen/CGObjCGNU.cpp b/clang/lib/CodeGen/CGObjCGNU.cpp
index cd1a0b6a130ff01..62da81e59f34de5 100644
--- a/clang/lib/CodeGen/CGObjCGNU.cpp
+++ b/clang/lib/CodeGen/CGObjCGNU.cpp
@@ -1437,6 +1437,8 @@ class CGObjCGNUstep2 : public CGObjCGNUstep {
     std::string MangledTypes = std::string(TypeEncoding);
     std::replace(MangledTypes.begin(), MangledTypes.end(),
       '@', '\1');
+    std::replace(MangledTypes.begin(), MangledTypes.end(),
+      '=', '\2');
     std::string TypesVarName = ".objc_sel_types_" + MangledTypes;
     auto *TypesGlobal = TheModule.getGlobalVariable(TypesVarName);
     if (!TypesGlobal) {
@@ -1460,6 +1462,8 @@ class CGObjCGNUstep2 : public CGObjCGNUstep {
     std::string MangledTypes = TypeEncoding;
     std::replace(MangledTypes.begin(), MangledTypes.end(),
       '@', '\1');
+    std::replace(MangledTypes.begin(), MangledTypes.end(),
+      '=', '\2');
     auto SelVarName = (StringRef(".objc_selector_") + Sel.getAsString() + "_" +
       MangledTypes).str();
     if (auto *GV = TheModule.getNamedGlobal(SelVarName))
@@ -1674,6 +1678,8 @@ class CGObjCGNUstep2 : public CGObjCGNUstep {
     // Prevent the @ from being interpreted as a symbol version.
     std::replace(TypeEncoding.begin(), TypeEncoding.end(),
       '@', '\1');
+    std::replace(TypeEncoding.begin(), TypeEncoding.end(),
+      '=', '\2');
     const std::string Name = "__objc_ivar_offset_" + ID->getNameAsString()
       + '.' + Ivar->getNameAsString() + '.' + TypeEncoding;
     return Name;
