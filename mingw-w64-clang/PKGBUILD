# Maintainer: Martell Malone <martellmalone@gmail.com>
# Maintainer: Alexey Pavlov <alexpux@gmail.com>
# Contributor: Ray Donnelly <mingw.android@gmail.com>

_realname=clang
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}"
         "${MINGW_PACKAGE_PREFIX}-clang-analyzer"
         "${MINGW_PACKAGE_PREFIX}-clang-tools-extra"
         "${MINGW_PACKAGE_PREFIX}-compiler-rt"
         "${MINGW_PACKAGE_PREFIX}-libc++abi"
         "${MINGW_PACKAGE_PREFIX}-libc++"
         "${MINGW_PACKAGE_PREFIX}-lld"
         #"${MINGW_PACKAGE_PREFIX}-lldb"
         "${MINGW_PACKAGE_PREFIX}-llvm"
         )
pkgver=3.7.0
pkgrel=9
pkgdesc="LC language family frontend for LLVM (mingw-w64)"
arch=('any')
url="http://llvm.org"
license=("custom:University of Illinois/NCSA Open Source License")
makedepends=("${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-gcc"
             "${MINGW_PACKAGE_PREFIX}-libffi"
             "${MINGW_PACKAGE_PREFIX}-pkg-config"
             "${MINGW_PACKAGE_PREFIX}-python3-sphinx"
             "python2" "tar" "groff")
depends=("${MINGW_PACKAGE_PREFIX}-gcc")
options=('staticlibs' 'strip')
source=(http://llvm.org/releases/${pkgver}/llvm-${pkgver}.src.tar.xz{,.sig}
        http://llvm.org/releases/${pkgver}/cfe-${pkgver}.src.tar.xz{,.sig}
        http://llvm.org/releases/${pkgver}/compiler-rt-${pkgver}.src.tar.xz{,.sig}
        http://llvm.org/releases/${pkgver}/test-suite-${pkgver}.src.tar.xz{,.sig}
        http://llvm.org/releases/${pkgver}/libcxx-${pkgver}.src.tar.xz{,.sig}
        http://llvm.org/releases/${pkgver}/libcxxabi-${pkgver}.src.tar.xz{,.sig}
        http://llvm.org/releases/${pkgver}/clang-tools-extra-${pkgver}.src.tar.xz{,.sig}
        http://llvm.org/releases/${pkgver}/lld-${pkgver}.src.tar.xz{,.sig}
        0001-Fix-GetHostTriple-for-mingw-w64-in-msys.patch
        0002-use-DESTDIR-on-windows.patch
        0003-generate-proper-library-names-mingw.patch
        0012-Set-the-x86-arch-name-to-i686-for-mingw-w64.patch
        0013-mingw-w64-dont-have-dl-library.patch
        0014-use-DESTDIR-on-windows.patch
        0015-Fix-the-calling-convention-of-Mingw64-long-double-va.patch
        0016-Teach-mingw-toolchain-driver-to-properly-emit-static.patch
        0017-Fix-PR23472-by-emitting-initialized-variable-and-its.patch
        0018-mingw-enable-static-libclang.patch
        0031-COFF-add-the-mingw-alias-for-ImageBase.patch
        0032-PECOFF-add-the-mingw-alias-for-ImageBase.patch
        0033-PECOFF-add-searchLibrary-function-with-sysroot-suppo.patch
        0034-GNU-add-support-for-linking-PECOFF.patch
        0041-libcxx-add-support-for-mingw-w64.patch
        )

# Some patch notes :)
#0001-0009 -> llvm
#0011-0019 -> clang
#0021-0029 -> rt
#0031-0039 -> lld
#0041-0049 -> c++

sha256sums=('ab45895f9dcdad1e140a3a79fd709f64b05ad7364e308c0e582c5b02e9cc3153'
            'SKIP'
            '4ed740c5a91df1c90a4118c5154851d6a475f39a91346bdf268c1c29c13aa1cc'
            'SKIP'
            '227fa998520bc94974a428dc8e7654d9bdf277e5bc70d4064ebc05691bd62b0b'
            'SKIP'
            '186d15c2233546e9e4c6b5a6ef572068a9a4fca900c74afb3a86954611a59653'
            'SKIP'
            'c18f3c8333cd7e678c1424a57fe5e25efe740ca7caf62ac67152b4723f3ad08e'
            'SKIP'
            '48b074fd334958b2d8bab893c897a0c8258328782cdec2d229c7bce432b49beb'
            'SKIP'
            '8ae8a0a3a96b7a700412d67df0af172cb2fc1326beec575fcc0f71d2e72709cd'
            'SKIP'
            'ddb658b789c501efbe4f54ff8ced2c07cd9ff686c92445d8a1ab2cd5dbd837ed'
            'SKIP'
            '0804146b32138d55c611336cc81e1783c29a8fab0fe62f248ba1ad7acc711c4d'
            'bf22d86c0546b80cd7212b7e7c3e1b628f00ab3aa3b9cf73ad338bf628f42597'
            '6a95ed671876a6de04799d15bf7485d628016bb4a95a6764217ad452d8eed0d8'
            '13a95a61e9c1c44c18a69947734e07515332a549446394f48b86b52511d221de'
            '8f35b80eca6c18df020b176eee4eb95901c31e3e640848a6d606983aca15a3af'
            '962b4de1afa781ee171f71211518c58f6a3531d7fcca5ec458e39703b0fb9af7'
            'f7bc109b07b5256a068dbe55097c24b46307aea442bec884d8ba455dc3ad18fd'
            '59e7afa5e74d186ad596c9a7625d6022fde0679faea9d1fd516fe0a622dbc01a'
            '47fbe90718742d1a3c0aee919b159241e616738447de3505a48a9f5886e5db96'
            '0e45e76ee6d6658de52edb7b508a8bcc9f10ff0b295ff2a4e35577136a40c6a5'
            '421befbe54123066544f53876c7eb6013ac6684744d8173fb0a3fa9be16d68c7'
            '96a6fcd81b8d5134b4273a2e413cd268430022533f1bfb44ed73503ee0ae7e87'
            '08260b1ee54fad7e0015d66b117937701d2ce4ca1814b012250de03a0dae9317'
            '3fa2c76eea1a55f5b03e7677e73a5f76a6d0fb326a23c606e88c683238f84d90'
            '5b8edbbb638c906216e20229529e8348abc50d5886d20e07af08543e1e574e94')

validpgpkeys=('11E521D646982372EB577A1F8F0871F202119294')
noextract=(cfe-${pkgver}.src.tar.xz
           #libcxx-${pkgver}.src.tar.xz
           #lldb-${pkgver}.src.tar.xz
           test-suite-${pkgver}.src.tar.xz
           )

prepare() {
  plain "Extracting clang-${pkgver}.src.tar.xz due to symlink(s) without pre-existing target(s)"
  [[ -d ${srcdir}/cfe-${pkgver} ]] && rm -rf ${srcdir}/cfe-${pkgver}
  [[ -d ${srcdir}/cfe-${pkgver} ]] || tar -xJvf ${srcdir}/cfe-${pkgver}.src.tar.xz -C ${srcdir} || true

  cd "${srcdir}/llvm-${pkgver}.src"
  patch -p1 -i ${srcdir}/0001-Fix-GetHostTriple-for-mingw-w64-in-msys.patch
  patch -p1 -i ${srcdir}/0002-use-DESTDIR-on-windows.patch
  patch -p1 -i ${srcdir}/0003-generate-proper-library-names-mingw.patch

  cd "${srcdir}/cfe-${pkgver}.src"
  patch -p1 -i ${srcdir}/0012-Set-the-x86-arch-name-to-i686-for-mingw-w64.patch
  patch -p1 -i ${srcdir}/0013-mingw-w64-dont-have-dl-library.patch
  patch -p1 -i ${srcdir}/0014-use-DESTDIR-on-windows.patch
  patch -p1 -i ${srcdir}/0015-Fix-the-calling-convention-of-Mingw64-long-double-va.patch
  patch -p1 -i ${srcdir}/0016-Teach-mingw-toolchain-driver-to-properly-emit-static.patch
  patch -p1 -i ${srcdir}/0017-Fix-PR23472-by-emitting-initialized-variable-and-its.patch
  patch -p1 -i ${srcdir}/0018-mingw-enable-static-libclang.patch

  cd "${srcdir}/lld-${pkgver}.src"
  # patch -p1 -i "${srcdir}"/0031-COFF-add-the-mingw-alias-for-ImageBase.patch
  patch -p1 -i "${srcdir}"/0032-PECOFF-add-the-mingw-alias-for-ImageBase.patch
  patch -p1 -i "${srcdir}"/0033-PECOFF-add-searchLibrary-function-with-sysroot-suppo.patch
  patch -p1 -i "${srcdir}"/0034-GNU-add-support-for-linking-PECOFF.patch

  cd "${srcdir}/libcxx-${pkgver}.src"
  patch -p1 -i "${srcdir}"/0041-libcxx-add-support-for-mingw-w64.patch

  cd "${srcdir}"
  mv lld-${pkgver}.src               llvm-${pkgver}.src/tools/lld
  mv cfe-${pkgver}.src                llvm-${pkgver}.src/tools/clang
  mv clang-tools-extra-${pkgver}.src  llvm-${pkgver}.src/tools/clang/tools/extra
  mv compiler-rt-${pkgver}.src        llvm-${pkgver}.src/projects/compiler-rt
  mv libcxxabi-${pkgver}.src          llvm-${pkgver}.src/projects/libcxxabi
  mv libcxx-${pkgver}.src             llvm-${pkgver}.src/projects/libcxx
  # mv testsuite-${pkgver}.src         llvm-${pkgver}.src/projects/test-suite


  cd "${srcdir}/llvm-${pkgver}.src"

  # Fix docs installation directory
  sed -i 's:$(PROJ_prefix)/docs/llvm:$(PROJ_prefix)/share/doc/llvm:' \
    Makefile.config.in

  # Fix definition of LLVM_CMAKE_DIR in LLVMConfig.cmake
  sed -i '/@LLVM_CONFIG_CMAKE_DIR@/s:$(PROJ_cmake):$(PROJ_prefix)/share/llvm/cmake:' \
    cmake/modules/Makefile
}

build() {
  mkdir -p ${srcdir}/build-${CARCH} && cd ${srcdir}/build-${CARCH}

  # Include location of libffi headers in CPPFLAGS
  #CPPFLAGS+="$(pkg-config --cflags libffi)"
  FFI_INCLUDE_DIR="$(pkg-config --cflags libffi)"
  FFI_INCLUDE_DIR=$(echo $FFI_INCLUDE_DIR | sed 's|-I||g')

  # "Ninja" cant install each component seperately
  # https://github.com/martine/ninja/issues/932

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  ${MINGW_PREFIX}/bin/cmake.exe \
    -G"MSYS Makefiles" \
    -DCMAKE_MAKE_PROGRAM="/usr/bin/make.exe" \
    -DCMAKE_C_COMPILER="${MINGW_PREFIX}/bin/gcc.exe" \
    -DCMAKE_CXX_COMPILER="${MINGW_PREFIX}/bin/g++.exe" \
    -DFFI_INCLUDE_DIR="${FFI_INCLUDE_DIR}" \
    -DCMAKE_C_FLAGS="${CFLAGS}" \
    -DCMAKE_CXX_FLAGS="${CXXFLAGS} ${CPPFLAGS}" \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    -DCMAKE_BUILD_TYPE=Release \
    -DLLVM_TARGETS_TO_BUILD="ARM;CppBackend;X86" \
    -DLLVM_ENABLE_ASSERTIONS=OFF \
    -DPYTHON_EXECUTABLE=${MINGW_PREFIX}/bin/python2.exe \
    -DLLVM_ENABLE_FFI=ON \
    -DLLVM_ENABLE_SPHINX=ON \
    -DCMAKE_CXX_FLAGS="-D_GNU_SOURCE -D_LIBCPP_HAS_NO_CONSTEXPR" \
    -DLIBCLANG_BUILD_STATIC=ON \
    -DLIBCXX_ENABLE_SHARED=OFF \
    -DLIBCXXABI_ENABLE_SHARED=OFF \
    ../llvm-${pkgver}.src

  make

  # Disable automatic installation of components that go into subpackages
  cp tools/cmake_install.cmake tools/cmake_install.cmake.orig
  cp tools/clang/tools/cmake_install.cmake tools/clang/tools/cmake_install.cmake.orig
  cp projects/cmake_install.cmake projects/cmake_install.cmake.orig
  
  sed -i '/\(clang\|lld\|lldb\)\/cmake_install.cmake/d' tools/cmake_install.cmake
  sed -i '/\(extra\|scan-build\|scan-view\)\/cmake_install.cmake/d' tools/clang/tools/cmake_install.cmake
  sed -i '/\(compiler-rt\|libcxxabi\|libcxx\)\/cmake_install.cmake/d' projects/cmake_install.cmake
}

check() {
  plain "skipping make check..."
  #cd "${srcdir}/build-${MINGW_CHOST}"
  #make check
}

package_clang(){
  pkgdesc="C language family frontend for LLVM"
  depends=("${MINGW_PACKAGE_PREFIX}-llvm=${pkgver}-${pkgrel}")

  cd "${srcdir}"/llvm-${pkgver}.src
  make -C ../build-${CARCH}/tools/clang DESTDIR="${pkgdir}" install
  
  cp -f ../build-${CARCH}/lib/libclang.a ${pkgdir}${MINGW_PREFIX}/lib/
}

package_clang-analyzer() {
  pkgdesc="A source code analysis framework (mingw-w64)"
  url="http://clang-analyzer.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-clang=${pkgver}-${pkgrel}" "${MINGW_PACKAGE_PREFIX}-python2")

  #cd "${srcdir}/llvm-${pkgver}.src"
  #make -C ../build-${CARCH}/tools/clang/tools/scan-build -j1 DESTDIR="$pkgdir" install
  #make -C ../build-${CARCH}/tools/clang/tools/scan-view -j1 DESTDIR="$pkgdir" install
  cd "${srcdir}/llvm-${pkgver}.src/tools/clang"
  install -d "${pkgdir}"${MINGW_PREFIX}/{bin,lib/clang-analyzer}
  for _tool in scan-{build,view}; do
    cp -r tools/${_tool} "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer/
    ln -s "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer/${_tool}/${_tool} "${pkgdir}"${MINGW_PREFIX}/bin/
  done

  # scan-build looks for clang within the same directory
  install -d "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer/scan-build/
  ln -s "${srcdir}"/build-${CARCH}/bin/clang.exe "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer/scan-build/

  # Relocate man page
  install -d "${pkgdir}"${MINGW_PREFIX}/share/man/man1
  mv "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer/scan-build/scan-build.1 \
     "${pkgdir}"${MINGW_PREFIX}/share/man/man1/

  # Use Python 2
  sed -i \
    -e 's|env python$|&2|' \
    -e 's|/usr/bin/python$|&2|' \
    "${pkgdir}"${MINGW_PREFIX}/bin/scan-view

  # Compile Python scripts
  #python2 -m compileall "${pkgdir}"${MINGW_PREFIX}/bin/clang-analyzer
  python2 -O -m compileall "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer
  install -Dm644 LICENSE.TXT "${pkgdir}"${MINGW_PREFIX}/share/licenses/clang-analyzer/LICENSE
}

package_clang-tools-extra() {
  pkgdesc="Extra tools built using Clang's tooling APIs"
  url="http://clang.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-clang=${pkgver}-${pkgrel}")

  cd "$srcdir"/llvm-${pkgver}.src
  make -C ../build-${CARCH}/tools/clang/tools/extra -j1 DESTDIR="$pkgdir" install
}

package_compiler-rt(){
  pkgdesc="Runtime libraries for Clang and LLVM (mingw-w64)"
  url="http://compiler-rt.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-llvm=${pkgver}-${pkgrel}")

  cd "$srcdir"/llvm-${pkgver}.src
  make -C ../build-${CARCH}/projects/compiler-rt DESTDIR="$pkgdir" install
}

package_libcxxabi(){
  pkgdesc="C++ Standard Library Support (mingw-w64)"

  cd "$srcdir"/llvm-${pkgver}.src
  make -C ../build-${CARCH}/projects/libcxxabi -j1 DESTDIR="$pkgdir" install
}

package_libcxx(){
  pkgdesc="C++ Standard Library (mingw-w64)"

  cd "$srcdir"/llvm-${pkgver}.src
  make -C ../build-${CARCH}/projects/libcxx -j1 DESTDIR="$pkgdir" install
}

package_lld(){
  pkgdesc="Linker tools for LLVM (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-llvm=${pkgver}-${pkgrel}")

  cd "$srcdir"/llvm-${pkgver}.src
  make -C ../build-${CARCH}/tools/lld -j1 DESTDIR="${pkgdir}" install
}

package_lldb() {
  pkgdesc="Next generation, high-performance debugger (mingw-w64)"
  url="http://lldb.llvm.org/"
  depends=('libedit' 'libxml2' 'python2')

  cd "$srcdir"/llvm-${pkgver}.src

  make -C ../build-${CARCH}/tools/lldb DESTDIR="$pkgdir" install

  # Compile Python scripts
  python2 -m compileall "$pkgdir${MINGW_PREFIX}/lib/python2.7/site-packages/lldb"
  python2 -O -m compileall "$pkgdir${MINGW_PREFIX}/lib/python2.7/site-packages/lldb"

  install -Dm644 tools/lldb/LICENSE.TXT "$pkgdir${MINGW_PREFIX}/share/licenses/$pkgname/LICENSE"
}

package_llvm(){
  pkgdesc="Low Level Virtual Machine (mingw-w64)"
  #depends=("${MINGW_PACKAGE_PREFIX}-gcc") # "${MINGW_PACKAGE_PREFIX}-compiler-rt"
  install=llvm-${CARCH}.install

  cd ${srcdir}/llvm-${pkgver}.src
  make -C ../build-${CARCH} DESTDIR="$pkgdir" install

  install -Dm644 LICENSE.TXT "${pkgdir}${MINGW_PREFIX}/share/licenses/llvm/LICENSE"

  # Install CMake stuff
  install -d     "${pkgdir}"${MINGW_PREFIX}/share/llvm/cmake/{modules,platforms}
  install -Dm644 "${srcdir}"/llvm-${pkgver}.src/cmake/modules/*.cmake            "${pkgdir}${MINGW_PREFIX}/share/llvm/cmake/modules/"
  install -Dm644 "${srcdir}"/llvm-${pkgver}.src/cmake/platforms/*.cmake          "${pkgdir}${MINGW_PREFIX}/share/llvm/cmake/platforms/"
  install -Dm644 "${srcdir}"/build-${CARCH}/share/llvm/cmake/LLVMConfig.cmake    "${pkgdir}${MINGW_PREFIX}/share/llvm/cmake/LLVMConfig.cmake"

  # Building rust needs this
  install -Dm755 "${srcdir}"/build-${CARCH}/bin/FileCheck.exe                    "${pkgdir}${MINGW_PREFIX}/bin/FileCheck.exe"
}

package_mingw-w64-i686-clang(){
  package_clang
}

package_mingw-w64-i686-clang-analyzer(){
  package_clang-analyzer
}

package_mingw-w64-i686-clang-tools-extra(){
  package_clang-tools-extra
}

package_mingw-w64-i686-compiler-rt(){
  package_compiler-rt
}

package_mingw-w64-i686-libc++abi(){
  package_libcxxabi
}

package_mingw-w64-i686-libc++(){
  package_libcxx
}

package_mingw-w64-i686-lld(){
  package_lld
}

package_mingw-w64-i686-llvm(){
  package_llvm
}

package_mingw-w64-x86_64-clang(){
  package_clang
}

package_mingw-w64-x86_64-clang-analyzer(){
  package_clang-analyzer
}

package_mingw-w64-x86_64-clang-tools-extra(){
  package_clang-tools-extra
}

package_mingw-w64-x86_64-compiler-rt(){
  package_compiler-rt
}

package_mingw-w64-x86_64-libc++abi(){
  package_libcxxabi
}

package_mingw-w64-x86_64-libc++(){
  package_libcxx
}

package_mingw-w64-x86_64-lld(){
  package_lld
}

package_mingw-w64-x86_64-llvm(){
  package_llvm
}
