# Maintainer: Martell Malone <martellmalone@gmail.com>
# Maintainer: Alexey Pavlov <alexpux@gmail.com>
# Contributor: Ray Donnelly <mingw.android@gmail.com>
# Contributor: Mateusz Miku≈Ça <mati865@gmail.com>
# Contributor: wirx6 <wirx654@gmail.com>

# choose the compiler that will be used to build clang
# clang is fine but there are problems with libcxxabi
_compiler=gcc   # clang, gcc

_realname=clang
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}"
         "${MINGW_PACKAGE_PREFIX}-clang-analyzer"
         "${MINGW_PACKAGE_PREFIX}-clang-tools-extra"
         "${MINGW_PACKAGE_PREFIX}-compiler-rt"
         "${MINGW_PACKAGE_PREFIX}-libc++abi"
         "${MINGW_PACKAGE_PREFIX}-libc++"
         "${MINGW_PACKAGE_PREFIX}-lld"
         "${MINGW_PACKAGE_PREFIX}-libunwind"
         "${MINGW_PACKAGE_PREFIX}-llvm"
         "${MINGW_PACKAGE_PREFIX}-lldb"
         "${MINGW_PACKAGE_PREFIX}-polly")
pkgver=4.0.0
pkgrel=1
pkgdesc="C language family frontend for LLVM (mingw-w64)"
arch=('any')
url="https://llvm.org/"
license=("custom:University of Illinois/NCSA Open Source License")
makedepends=("${MINGW_PACKAGE_PREFIX}-cmake>=3.4.3"
             $([[ "$_compiler" == "clang" ]] && echo \
               "${MINGW_PACKAGE_PREFIX}-clang")
             "${MINGW_PACKAGE_PREFIX}-libffi"
             "${MINGW_PACKAGE_PREFIX}-pkg-config"
             "${MINGW_PACKAGE_PREFIX}-python3-sphinx"
             "${MINGW_PACKAGE_PREFIX}-python2"
             "tar"
             "groff")
depends=("${MINGW_PACKAGE_PREFIX}-gcc")
#options=('debug' '!strip')
source=(https://llvm.org/releases/${pkgver}/llvm-${pkgver}.src.tar.xz{,.sig}
        https://llvm.org/releases/${pkgver}/cfe-${pkgver}.src.tar.xz{,.sig}
        https://llvm.org/releases/${pkgver}/compiler-rt-${pkgver}.src.tar.xz{,.sig}
        https://llvm.org/releases/${pkgver}/test-suite-${pkgver}.src.tar.xz{,.sig}
        https://llvm.org/releases/${pkgver}/libcxx-${pkgver}.src.tar.xz{,.sig}
        https://llvm.org/releases/${pkgver}/libcxxabi-${pkgver}.src.tar.xz{,.sig}
        https://llvm.org/releases/${pkgver}/clang-tools-extra-${pkgver}.src.tar.xz{,.sig}
        https://llvm.org/releases/${pkgver}/lld-${pkgver}.src.tar.xz{,.sig}
        https://llvm.org/releases/${pkgver}/lldb-${pkgver}.src.tar.xz{,.sig}
        https://llvm.org/releases/${pkgver}/libunwind-${pkgver}.src.tar.xz{,.sig}
        https://llvm.org/releases/${pkgver}/polly-${pkgver}.src.tar.xz{,.sig}
        "0001-genlib-named-as-llvm-dlltool.patch"
        "0002-mingw-w64-use-MSVC-style-ByteAlignment.patch"
        "0003-Fix-GetHostTriple-for-mingw-w64-in-msys.patch"
        "0004-Globally-provide-DESTDIR-for-all-platforms.patch"
        "0005-not-install-msvc-files.patch"
        "0006-llvm-config-look-for-unversioned-shared-lib-on-win32.patch"
        "0007-add-pthread-as-system-lib-for-mingw.patch"
        "0008-fix-bugpoint-multiple-definition.patch"
        "0101-mingw-w64-enable-support-for-__declspec-selectany.patch"
        "0102-Allow-build-static-clang-library-for-mingw.patch"
        "0103-fix-libclang-name-for-mingw.patch"
        "0104-don-t-use-GCC-headers.patch"
        "0105-Set-the-x86-arch-name-to-i686-for-mingw-w64.patch"
        "0106-link-pthread-with-mingw.patch"
        "0107-enable-__float128-for-X86-MinGW.patch"
        "0108-Don-t-create-cl-executable-for-mingw.patch"
        "0109-use-emulated-tls-with-mingw.patch"
        "0201-mingw-w64-__udivdi3-mangle-hack.patch"
        "0202-compiler-rt-fix-mingw-build.patch"
        "0301-COFF-gnu-driver-support.patch"
        "0302-add-install-target-for-the-lld-tool.patch"
        "0401-mingw-w64-hack-and-slash-fixes-for-libc.patch"
        "0501-minor-fixes-to-get-lldb-building.patch"
        "0502-hack-to-use-64-bit-time-for-mingw.patch"
        "0601-libunwind-add-support-for-mingw-w64.patch"
        "0701-fix-visibility-for-libc-abi-on-win32.patch")
# Some patch notes :)
#0001-0099 -> llvm
#0101-0199 -> clang
#0201-0299 -> rt
#0301-0399 -> lld
#0401-0499 -> libc++
#0501-0599 -> lldb
#0601-0699 -> libunwind
#0701-0799 -> libc++abi
sha256sums=('8d10511df96e73b8ff9e7abbfb4d4d432edbdbe965f1f4f07afaf370b8a533be'
            'SKIP'
            'cea5f88ebddb30e296ca89130c83b9d46c2d833685e2912303c828054c4dc98a'
            'SKIP'
            'd3f25b23bef24c305137e6b44f7e81c51bbec764c119e01512a9bd2330be3115'
            'SKIP'
            '31544baafbee0d6c652637f6dfa19ca91afe5ca577e07752f4b2c23656bc6304'
            'SKIP'
            '4f4d33c4ad69bf9e360eebe6b29b7b19486948b1a41decf89d4adec12473cf96'
            'SKIP'
            'dca9cb619662ad2d3a0d685c4366078345247218c3702dd35bcaaa23f63481d8'
            'SKIP'
            '41b7d37eb128fd362ab3431be5244cf50325bb3bb153895735c5bacede647c99'
            'SKIP'
            '33e06457b9ce0563c89b11ccc7ccabf9cff71b83571985a5bf8684c9150e7502'
            'SKIP'
            '2dbd8f05c662c1c9f11270fc9d0c63b419ddc988095e0ad107ed911cf882033d'
            'SKIP'
            '0755efa9f969373d4d543123bbed4b3f9a835f6302875c1379c5745857725973'
            'SKIP'
            '27a5dbf95e8aa9e0bbe3d6c5d1e83c92414d734357aa0d6c16020a65dc4dcd97'
            'SKIP'
            '3f55d2114805110e370fab6630763c359d83b07c356f61b86afc32feb7cf7514'
            '78b6951956360a8e05fdc7020bc7e1996da75b499022f9213465070fc238529c'
            'aceffb61d57c7c01bc2d9d5461f961df26cffdffaaabb8dda9f219acfe59c77a'
            'bccdb99553424121927b3f82086efb2adeee230f18944504ddd93d2d72371d5c'
            'c840f4e2286385c4ab3503c02976fd2459516fdc05e44f702d648afaaaebd97f'
            'f06f57af203811f6a4c62ac3f1e4545628db13185f5e7d3225d4b1104ca69be1'
            'c57d5f2904158b992378906bcddbae79d0566cdb07cc74fbd9b2d76d52661a12'
            '5d1fbbe39221af57ae078e5387f43fec602541838b3608cd3f6517bb2364ae54'
            'afdd708e2431874da4e03d9f51848840ec30ef64b4d440c8dfd50446b2f5ce1a'
            '8ba3968939f9a7c6a51849aaf1ab6126f85aa612349570b3644f855929d496fc'
            '1740ffa1d23fdee2b147a46cfed4d186bf7d3dc626bb3a1d3ca925147895a2d4'
            'e8c8ebbcc7353548974e640b76bfe13d6b89afc832066e0d7156fe242b561a93'
            '066e61c097fcad202b3b4f26dbe667719a9f5ae872837250629d69fe06bd1af1'
            'cae561cb643daeb68e9ec2716928ba79b459ec2064829e54ecd1edcc378d293b'
            '8a636174bff1a05872777b935e27c15c3b87683b57c4277de0d1e9ecc1ca5548'
            'f2931ac1ebcc33faa1fa320ebe76143baf9d7635f4819e0f9e37924e70f30d39'
            '9f9a12749869bb6c5817d6d5231417195c2e3bd80c10059b3f3e70b010159c26'
            'fb1ef06b26e88d37d52c3e0b3b261089e92bb7c08231ec8fa234465fdbdab308'
            '29e61097ca4f9b1df304e1e7a8f65e6d8ed452e9eb88d9d8cc6ff78b64d84aa8'
            '852d55907b469739fca96b043e41c596824ad9d933268ce65a82100b975e91fb'
            '0f2cf89298303911a20e9cee7208ed418d91cf700af611a142dc735c708e1435'
            '84e929fd0f59a90f8c46cf831f420a36e5e4dff359f2ae9338c42ea20f1243d7'
            '5782b351170ab747c046efb79244a36de2c531014d5b719e7398f1597a10b948'
            'fbb5f936a0c23529a7ec43d458ea22c033a6c84c2017178ad3645b03d8584bcf'
            '1ebe995823d427177bf79c4c73e205f708c58e25616b4183d5981a1b4c8130e0'
            'eecb723ed6fa59d9debd84a11bcede607020beadfdd0988778392dd7a1820963')
validpgpkeys=('B6C8F98282B944E3B0D5C2530FC3042E345AD05D'  # Hans Wennborg, Google.
              '11E521D646982372EB577A1F8F0871F202119294') # Tom Stellard
noextract=(cfe-${pkgver}.src.tar.xz
           libcxx-${pkgver}.src.tar.xz
           lldb-${pkgver}.src.tar.xz
           test-suite-${pkgver}.src.tar.xz)

prepare() {
  plain "Extracting clang-${pkgver}.src.tar.xz due to symlink(s) without pre-existing target(s)"
  [[ -d ${srcdir}/cfe-${pkgver} ]] && rm -rf ${srcdir}/cfe-${pkgver}
  [[ -d ${srcdir}/cfe-${pkgver} ]] || tar -xJvf ${srcdir}/cfe-${pkgver}.src.tar.xz -C ${srcdir} || true

  plain "Extracting libcxx-${pkgver}.src.tar.xz due to symlink(s) without pre-existing target(s)"
  [[ -d ${srcdir}/libcxx-${pkgver} ]] && rm -rf ${srcdir}/libcxx-${pkgver}
  [[ -d ${srcdir}/libcxx-${pkgver} ]] || tar -xJvf ${srcdir}/libcxx-${pkgver}.src.tar.xz -C ${srcdir} || true

  plain "Extracting lldb-${pkgver}.src.tar.xz due to symlink(s) without pre-existing target(s)"
  [[ -d ${srcdir}/lldb-${pkgver} ]] && rm -rf ${srcdir}/lldb-${pkgver}
  [[ -d ${srcdir}/lldb-${pkgver} ]] || tar -xJvf ${srcdir}/lldb-${pkgver}.src.tar.xz -C ${srcdir} || true

  cd "${srcdir}/llvm-${pkgver}.src"
  # cleanup files created by patch
  rm -rf lib/DLLDriver/CMakeLists.txt \
    lib/DLLDriver/Config.h \
    lib/DLLDriver/DllDriver.cpp \
    lib/DLLDriver/LLVMBuild.txt \
    lib/DLLDriver/Librarian.cpp \
    lib/DLLDriver/ModuleDef.cpp \
    lib/DLLDriver/Options.td \
    include/llvm/DllDriver/DllDriver.h || true
  patch -p1 -i "${srcdir}/0001-genlib-named-as-llvm-dlltool.patch"
  patch -p1 -i "${srcdir}/0002-mingw-w64-use-MSVC-style-ByteAlignment.patch"
  patch -p1 -i "${srcdir}/0003-Fix-GetHostTriple-for-mingw-w64-in-msys.patch"
  patch -p1 -i "${srcdir}/0004-Globally-provide-DESTDIR-for-all-platforms.patch"
  patch -p1 -i "${srcdir}/0005-not-install-msvc-files.patch"
  patch -p1 -i "${srcdir}/0006-llvm-config-look-for-unversioned-shared-lib-on-win32.patch"
  patch -p1 -i "${srcdir}/0007-add-pthread-as-system-lib-for-mingw.patch"
  patch -p1 -i "${srcdir}/0008-fix-bugpoint-multiple-definition.patch"

  cd "${srcdir}/cfe-${pkgver}.src"
  patch -p1 -i "${srcdir}/0101-mingw-w64-enable-support-for-__declspec-selectany.patch"
  patch -p1 -i "${srcdir}/0102-Allow-build-static-clang-library-for-mingw.patch"
  patch -p1 -i "${srcdir}/0103-fix-libclang-name-for-mingw.patch"
  patch -p1 -i "${srcdir}/0104-don-t-use-GCC-headers.patch"
  patch -p1 -i "${srcdir}/0105-Set-the-x86-arch-name-to-i686-for-mingw-w64.patch"
  patch -p1 -i "${srcdir}/0106-link-pthread-with-mingw.patch"
  patch -p1 -i "${srcdir}/0107-enable-__float128-for-X86-MinGW.patch"
  patch -p1 -i "${srcdir}/0108-Don-t-create-cl-executable-for-mingw.patch"
  patch -p1 -i "${srcdir}/0109-use-emulated-tls-with-mingw.patch"

  cd "${srcdir}/compiler-rt-${pkgver}.src"
  patch -p1 -i "${srcdir}/0201-mingw-w64-__udivdi3-mangle-hack.patch"
  patch -p1 -i "${srcdir}/0202-compiler-rt-fix-mingw-build.patch"

  # not ported for 4.0
  #cd "${srcdir}/lld-${pkgver}.src"
  ## cleanup file created by patch
  #rm -rf cmake/modules/AddLLD.cmake || true
  #patch -p1 -i "${srcdir}/0301-COFF-gnu-driver-support.patch"
  #patch -p1 -i "${srcdir}/0302-add-install-target-for-the-lld-tool.patch"

  cd "${srcdir}/libcxx-${pkgver}.src"
  patch -p1 -i "${srcdir}/0401-mingw-w64-hack-and-slash-fixes-for-libc.patch"

  cd "${srcdir}/lldb-${pkgver}.src"
  patch -p1 -i "${srcdir}/0501-minor-fixes-to-get-lldb-building.patch"
  patch -p1 -i "${srcdir}/0502-hack-to-use-64-bit-time-for-mingw.patch"

  cd "${srcdir}/libunwind-${pkgver}.src"
  patch -p1 -i "${srcdir}/0601-libunwind-add-support-for-mingw-w64.patch"

  cd "${srcdir}/libcxxabi-${pkgver}.src"
  patch -p1 -i "${srcdir}/0701-fix-visibility-for-libc-abi-on-win32.patch"

  # At the present, clang must reside inside the LLVM source code tree to build
  # See https://bugs.llvm.org/show_bug.cgi?id=4840

  cd "${srcdir}"/llvm-${pkgver}.src
  rm -rf tools/clang tools/clang/tools/extra tools/lld tools/lldb tools/polly projects/compiler-rt projects/libcxx \
         projects/libcxxabi projects/libunwind projects/test-suite | true
  mv "${srcdir}/cfe-${pkgver}.src"               tools/clang
  mv "${srcdir}/clang-tools-extra-${pkgver}.src" tools/clang/tools/extra
  mv "${srcdir}/lld-${pkgver}.src"               tools/lld
  mv "${srcdir}/lldb-${pkgver}.src"              tools/lldb
  mv "${srcdir}/polly-${pkgver}.src"             tools/polly
  mv "${srcdir}/compiler-rt-${pkgver}.src"       projects/compiler-rt
  mv "${srcdir}/libcxxabi-${pkgver}.src"         projects/libcxxabi
  mv "${srcdir}/libcxx-${pkgver}.src"            projects/libcxx
  mv "${srcdir}/libunwind-${pkgver}.src"         projects/libunwind
  #mv "${srcdir}/testsuite-${pkgver}.src"         projects/test-suite
}

build() {
  cd "${srcdir}"

  [[ -d build-${CARCH} ]] && rm -rf build-${CARCH}
  mkdir build-${CARCH} && cd build-${CARCH}

  local -a extra_config

  if check_option "debug" "y"; then
    extra_config+=(-DCMAKE_BUILD_TYPE=Debug)
    VERBOSE="VERBOSE=1"
  else
    extra_config+=(-DCMAKE_BUILD_TYPE=Release)
  fi

  # Include location of libffi headers in CPPFLAGS
  FFI_INCLUDE_DIR="$(pkg-config --cflags libffi)"
  FFI_INCLUDE_DIR=$(echo $FFI_INCLUDE_DIR | sed 's|-I||g')

  # "Ninja" cant install each component seperately
  # https://github.com/martine/ninja/issues/932

  if [ "${_compiler}" == "gcc" ]; then
    export CC='gcc'
    export CXX='g++'
  elif [ "${_compiler}" == "clang" ]; then
    #export CC='clang -stdlib=libc++'
    #export CXX='clang++ -stdlib=libc++'
    export CC='clang'
    export CXX='clang++'
  else
    msg "undefined compiler"
    exit 1
  fi

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  ${MINGW_PREFIX}/bin/cmake.exe \
    -G"MSYS Makefiles" \
    -DCMAKE_SYSTEM_IGNORE_PATH=/usr/lib \
    -DCMAKE_MAKE_PROGRAM="/usr/bin/make.exe" \
    -DFFI_INCLUDE_DIR="${FFI_INCLUDE_DIR}" \
    -DCMAKE_C_FLAGS="${CFLAGS}" \
    -DCMAKE_CXX_FLAGS="${CXXFLAGS} -D_GNU_SOURCE" \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    -DLLVM_TARGETS_TO_BUILD="ARM;X86" \
    -DLLVM_ENABLE_ASSERTIONS=OFF \
    -DLLVM_ENABLE_THREADS=ON \
    -DPYTHON_EXECUTABLE=${MINGW_PREFIX}/bin/python2.exe \
    -DLLVM_ENABLE_FFI=ON \
    -DLLVM_ENABLE_SPHINX=ON \
    -DLLVM_BUILD_LLVM_DYLIB=ON \
    -DLLVM_LINK_LLVM_DYLIB=ON \
    -DLIBCLANG_BUILD_STATIC=ON \
    -DLIBCXX_ENABLE_SHARED=OFF \
    -DLIBCXXABI_ENABLE_SHARED=OFF \
    -DLIBUNWIND_ENABLE_SHARED=OFF \
    -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=OFF \
    "${extra_config[@]}" \
    ../llvm-${pkgver}.src

  make ${VERBOSE}

  # Disable automatic installation of components that go into subpackages
  # -i.orig to check what has been removed in-case it starts dropping more than it should
  #
  sed -i.orig '/\(clang\|lld\|lldb\|polly\)\/cmake_install.cmake/d' tools/cmake_install.cmake
  sed -i.orig '/\(extra\|scan-build\|scan-view\)\/cmake_install.cmake/d' tools/clang/tools/cmake_install.cmake
# sed -i.orig '/\(compiler-rt\|libcxxabi\|libcxx\)\/cmake_install.cmake/d' projects/cmake_install.cmake
  sed -i.orig '/\(compiler-rt\|libcxxabi\|libcxx\|libunwind\)\/cmake_install.cmake/d' projects/cmake_install.cmake
}

#check() {
#  cd "${srcdir}"/build-${CARCH}
#  # Remove || true once testcase doesn't cause failures.
#  make check || true
#}

package_llvm() {
  pkgdesc="Low Level Virtual Machine (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-libffi"
           "${MINGW_PACKAGE_PREFIX}-gcc-libs") # "compiler-rt"

  cd "${srcdir}"/llvm-${pkgver}.src

  make -C ../build-${CARCH} DESTDIR="${pkgdir}" install

  # TODO: why CMake haven't included it?
  cp ../build-${CARCH}/lib/libLLVM.dll.a "${pkgdir}/${MINGW_PREFIX}/lib/"

  install -Dm644 LICENSE.TXT "${pkgdir}${MINGW_PREFIX}/share/licenses/llvm/LICENSE"

  # Install CMake stuff
  install -d "${pkgdir}"${MINGW_PREFIX}/share/llvm/cmake/{modules,platforms}
  install -Dm644 "${srcdir}"/llvm-${pkgver}.src/cmake/modules/*.cmake "${pkgdir}"${MINGW_PREFIX}/share/llvm/cmake/modules/
  install -Dm644 "${srcdir}"/llvm-${pkgver}.src/cmake/platforms/*.cmake "${pkgdir}"${MINGW_PREFIX}/share/llvm/cmake/platforms/

  # FileCheck is needed to build rust.
  install -Dm755 "${srcdir}"/build-${CARCH}/bin/FileCheck.exe "${pkgdir}${MINGW_PREFIX}/bin/FileCheck.exe"
}

package_compiler-rt() {
  pkgdesc="Runtime libraries for Clang and LLVM (mingw-w64)"
  url="https://compiler-rt.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-llvm=${pkgver}-${pkgrel}")

  cd "${srcdir}"/llvm-${pkgver}.src
  make -C ../build-${CARCH}/projects/compiler-rt DESTDIR="${pkgdir}" install
}

package_libcxxabi() {
  pkgdesc="C++ Standard Library Support (mingw-w64)"
  url="https://libcxxabi.llvm.org/"
  depends="${MINGW_PACKAGE_PREFIX}-libunwind"

  cd "${srcdir}/llvm-${pkgver}.src"
  make -C ../build-${CARCH}/projects/libcxxabi -j1 DESTDIR="${pkgdir}" install
}

package_libcxx() {
  pkgdesc="C++ Standard Library (mingw-w64)"
  url="https://libcxx.llvm.org/"

  cd "${srcdir}/llvm-${pkgver}.src"
  make -C ../build-${CARCH}/projects/libcxx -j1 DESTDIR="${pkgdir}" install
}

package_libunwind() {
  pkgdesc='A new implementation of a stack unwinder for C++ exceptions (mingw-w64)'
  url='https://llvm.org/'

  cd "${srcdir}/llvm-${pkgver}.src"
  make -C ../build-${CARCH}/projects/libunwind -j1 DESTDIR="${pkgdir}" install
}

package_lldb() {
  pkgdesc="Next generation, high-performance debugger (mingw-w64)"
  url="https://lldb.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-readline"
           "${MINGW_PACKAGE_PREFIX}-libxml2"
           "${MINGW_PACKAGE_PREFIX}-python2"
           "${MINGW_PACKAGE_PREFIX}-swig")

  cd "${srcdir}/llvm-${pkgver}.src"

  make -C ../build-${CARCH}/tools/lldb DESTDIR="${pkgdir}" install

  # Compile Python scripts
  python2 -m compileall "${pkgdir}${MINGW_PREFIX}/lib/python2.7/site-packages/lldb"
  python2 -O -m compileall "${pkgdir}${MINGW_PREFIX}/lib/python2.7/site-packages/lldb"

  install -Dm644 tools/lldb/LICENSE.TXT "${pkgdir}${MINGW_PREFIX}/share/licenses/$pkgname/LICENSE"
}

package_lld() {
  pkgdesc="Linker tools for LLVM (mingw-w64)"
  url="https://lld.llvm.org/"

  cd "${srcdir}/llvm-${pkgver}.src"
  make -C ../build-${CARCH}/tools/lld -j1 DESTDIR="${pkgdir}" install
}

package_clang() {
  pkgdesc="C language family frontend for LLVM (mingw-w64)"
  url="https://clang.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-llvm=${pkgver}-${pkgrel}"
           "${MINGW_PACKAGE_PREFIX}-gcc")

  cd "${srcdir}/llvm-${pkgver}.src"
  make -C ../build-${CARCH}/tools/clang DESTDIR="${pkgdir}" install
}

package_clang-analyzer() {
  pkgdesc="A source code analysis framework (mingw-w64)"
  url="https://clang-analyzer.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-clang=${pkgver}-${pkgrel}"
           "${MINGW_PACKAGE_PREFIX}-python2")

  cd "${srcdir}/llvm-${pkgver}.src"
  make -C ../build-${CARCH}/tools/clang/tools/scan-build -j1 DESTDIR="${pkgdir}" install
  make -C ../build-${CARCH}/tools/clang/tools/scan-view -j1 DESTDIR="${pkgdir}" install

  # Use Python 2
  sed -i \
    -e 's|env python$|&2|' \
    -e 's|/usr/bin/python$|&2|' \
    "${pkgdir}"${MINGW_PREFIX}/bin/scan-view

  # Compile Python scripts
  python2 -m compileall "${pkgdir}"${MINGW_PREFIX}/bin/clang-analyzer
  python2 -O -m compileall "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer
  install -Dm644 LICENSE.TXT "${pkgdir}"${MINGW_PREFIX}/share/licenses/clang-analyzer/LICENSE
}

package_clang-tools-extra() {
  pkgdesc="Extra tools built using Clang's tooling APIs (mingw-w64)"
  url="https://clang.llvm.org/"

  cd "${srcdir}/llvm-${pkgver}.src"
  make -C ../build-${CARCH}/tools/clang/tools/extra -j1 DESTDIR="${pkgdir}" install
}

package_polly() {
  pkgdesc="Polly - Polyhedral optimizations for LLVM (mingw-w64)"
  url="https://polly.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-llvm=${pkgver}-${pkgrel}")

  cd "${srcdir}"/llvm-${pkgver}.src
  make -C ../build-${CARCH}/tools/polly DESTDIR="${pkgdir}" install
}

# Wrappers
package_mingw-w64-i686-clang(){
  package_clang
}

package_mingw-w64-i686-clang-analyzer(){
  package_clang-analyzer
}

package_mingw-w64-i686-clang-tools-extra(){
  package_clang-tools-extra
}

package_mingw-w64-i686-compiler-rt(){
  package_compiler-rt
}

package_mingw-w64-i686-libc++abi(){
  package_libcxxabi
}

package_mingw-w64-i686-libc++(){
  package_libcxx
}

package_mingw-w64-i686-lld(){
  package_lld
}

package_mingw-w64-i686-lldb(){
  package_lldb
}

package_mingw-w64-i686-libunwind(){
  package_libunwind
}

package_mingw-w64-i686-llvm(){
  package_llvm
}

package_mingw-w64-i686-polly(){
  package_polly
}

package_mingw-w64-x86_64-clang(){
  package_clang
}

package_mingw-w64-x86_64-clang-analyzer(){
  package_clang-analyzer
}

package_mingw-w64-x86_64-clang-tools-extra(){
  package_clang-tools-extra
}

package_mingw-w64-x86_64-compiler-rt(){
  package_compiler-rt
}

package_mingw-w64-x86_64-libc++abi(){
  package_libcxxabi
}

package_mingw-w64-x86_64-libc++(){
  package_libcxx
}

package_mingw-w64-x86_64-lld(){
  package_lld
}

package_mingw-w64-x86_64-lldb(){
  package_lldb
}

package_mingw-w64-x86_64-libunwind(){
  package_libunwind
}

package_mingw-w64-x86_64-llvm(){
  package_llvm
}

package_mingw-w64-x86_64-polly(){
  package_polly
}
