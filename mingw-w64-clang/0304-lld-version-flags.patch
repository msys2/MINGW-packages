Index: lld/trunk/COFF/DriverUtils.cpp
===================================================================
--- lld/trunk/COFF/DriverUtils.cpp
+++ lld/trunk/COFF/DriverUtils.cpp
@@ -114,9 +114,11 @@
                     uint32_t *Minor) {
   StringRef SysStr, Ver;
   std::tie(SysStr, Ver) = Arg.split(',');
-  *Sys = StringSwitch<WindowsSubsystem>(SysStr.lower())
+  std::string SysStrLower = SysStr.lower();
+  *Sys = StringSwitch<WindowsSubsystem>(SysStrLower)
     .Case("boot_application", IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION)
     .Case("console", IMAGE_SUBSYSTEM_WINDOWS_CUI)
+    .Case("default", IMAGE_SUBSYSTEM_UNKNOWN)
     .Case("efi_application", IMAGE_SUBSYSTEM_EFI_APPLICATION)
     .Case("efi_boot_service_driver", IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER)
     .Case("efi_rom", IMAGE_SUBSYSTEM_EFI_ROM)
@@ -125,7 +127,7 @@
     .Case("posix", IMAGE_SUBSYSTEM_POSIX_CUI)
     .Case("windows", IMAGE_SUBSYSTEM_WINDOWS_GUI)
     .Default(IMAGE_SUBSYSTEM_UNKNOWN);
-  if (*Sys == IMAGE_SUBSYSTEM_UNKNOWN)
+  if (*Sys == IMAGE_SUBSYSTEM_UNKNOWN && SysStrLower != "default")
     fatal("unknown subsystem: " + SysStr);
   if (!Ver.empty())
     parseVersion(Ver, Major, Minor);
Index: lld/trunk/test/COFF/subsystem-inference.test
===================================================================
--- lld/trunk/test/COFF/subsystem-inference.test
+++ lld/trunk/test/COFF/subsystem-inference.test
@@ -1,10 +1,14 @@
 # RUN: sed -e s/ENTRYNAME/main/ %s | yaml2obj > %t.obj
 # RUN: lld-link /out:%t.exe %t.obj
 # RUN: llvm-readobj -file-headers %t.exe | FileCheck -check-prefix=MAIN %s
+# RUN: lld-link /out:%t.exe %t.obj /subsystem:default,6.0
+# RUN: llvm-readobj -file-headers %t.exe | FileCheck -check-prefix=MAIN %s
 
 # RUN: sed s/ENTRYNAME/wmain/ %s | yaml2obj > %t.obj
 # RUN: lld-link /out:%t.exe %t.obj
 # RUN: llvm-readobj -file-headers %t.exe | FileCheck -check-prefix=WMAIN %s
+# RUN: lld-link /out:%t.exe %t.obj /subsystem:default,6.0
+# RUN: llvm-readobj -file-headers %t.exe | FileCheck -check-prefix=WINMAIN %s
 
 # RUN: sed s/ENTRYNAME/WinMain/ %s | yaml2obj > %t.obj
 # RUN: lld-link /out:%t.exe %t.obj
Index: lld/trunk/test/COFF/subsystem.test
===================================================================
--- lld/trunk/test/COFF/subsystem.test
+++ lld/trunk/test/COFF/subsystem.test
@@ -17,3 +17,12 @@
 CHECK2: MajorSubsystemVersion: 8
 CHECK2: MinorSubsystemVersion: 9
 CHECK2: Subsystem: IMAGE_SUBSYSTEM_WINDOWS_GUI
+
+# RUN: lld-link /entry:main /out:%t.exe /subsystem:default,8.9 \
+# RUN:   %p/Inputs/ret42.obj
+# RUN: llvm-readobj --file-headers %t.exe | FileCheck -check-prefix=CHECK3 %s
+
+CHECK3: MajorOperatingSystemVersion: 8
+CHECK3: MinorOperatingSystemVersion: 9
+CHECK3: MajorSubsystemVersion: 8
+CHECK3: MinorSubsystemVersion: 9
Index: lld/trunk/MinGW/Driver.cpp
===================================================================
--- lld/trunk/MinGW/Driver.cpp
+++ lld/trunk/MinGW/Driver.cpp
@@ -181,8 +181,31 @@
       Add("-entry:" + S);
   }
 
-  if (auto *A = Args.getLastArg(OPT_subs))
+  if (Args.hasArg(OPT_major_os_version, OPT_minor_os_version,
+                  OPT_major_subsystem_version, OPT_minor_subsystem_version)) {
+    auto *MajOSVer = Args.getLastArg(OPT_major_os_version);
+    auto *MinOSVer = Args.getLastArg(OPT_minor_os_version);
+    auto *MajSubSysVer = Args.getLastArg(OPT_major_subsystem_version);
+    auto *MinSubSysVer = Args.getLastArg(OPT_minor_subsystem_version);
+    if (MajOSVer && MajSubSysVer &&
+        StringRef(MajOSVer->getValue()) != StringRef(MajSubSysVer->getValue()))
+      warn("--major-os-version and --major-subsystem-version set to differing "
+           "versions, not supported");
+    if (MinOSVer && MinSubSysVer &&
+        StringRef(MinOSVer->getValue()) != StringRef(MinSubSysVer->getValue()))
+      warn("--minor-os-version and --minor-subsystem-version set to differing "
+           "versions, not supported");
+    StringRef SubSys = Args.getLastArgValue(OPT_subs, "default");
+    StringRef Major = MajOSVer ? MajOSVer->getValue()
+                               : MajSubSysVer ? MajSubSysVer->getValue() : "6";
+    StringRef Minor = MinOSVer ? MinOSVer->getValue()
+                               : MinSubSysVer ? MinSubSysVer->getValue() : "";
+    StringRef Sep = Minor.empty() ? "" : ".";
+    Add("-subsystem:" + SubSys + "," + Major + Sep + Minor);
+  } else if (auto *A = Args.getLastArg(OPT_subs)) {
     Add("-subsystem:" + StringRef(A->getValue()));
+  }
+
   if (auto *A = Args.getLastArg(OPT_out_implib))
     Add("-implib:" + StringRef(A->getValue()));
   if (auto *A = Args.getLastArg(OPT_stack))
Index: lld/trunk/MinGW/Options.td
===================================================================
--- lld/trunk/MinGW/Options.td
+++ lld/trunk/MinGW/Options.td
@@ -18,8 +18,24 @@
 def l: JoinedOrSeparate<["-"], "l">, MetaVarName<"<libName>">,
   HelpText<"Root name of library to use">;
 def m: JoinedOrSeparate<["-"], "m">, HelpText<"Set target emulation">;
+def major_os_version: Separate<["--"], "major-os-version">,
+    HelpText<"Set the OS and subsystem major version">;
+def major_os_version_eq: Joined<["--"], "major-os-version=">,
+    Alias<major_os_version>;
+def major_subsystem_version: Separate<["--"], "major-subsystem-version">,
+    HelpText<"Set the OS and subsystem major version">;
+def major_subsystem_version_eq: Joined<["--"], "major-subsystem-version=">,
+    Alias<major_subsystem_version>;
 def map: S<"Map">, HelpText<"Output a linker map">;
 def map_eq: J<"Map=">, Alias<map>;
+def minor_os_version: Separate<["--"], "minor-os-version">,
+    HelpText<"Set the OS and subsystem minor version">;
+def minor_os_version_eq: Joined<["--"], "minor-os-version=">,
+    Alias<minor_os_version>;
+def minor_subsystem_version: Separate<["--"], "minor-subsystem-version">,
+    HelpText<"Set the OS and subsystem minor version">;
+def minor_subsystem_version_eq: Joined<["--"], "minor-subsystem-version=">,
+    Alias<minor_subsystem_version>;
 def no_whole_archive: F<"no-whole-archive">,
     HelpText<"No longer include all object files for following archives">;
 def large_address_aware: Flag<["--"], "large-address-aware">,
Index: lld/trunk/test/MinGW/driver.test
===================================================================
--- lld/trunk/test/MinGW/driver.test
+++ lld/trunk/test/MinGW/driver.test
@@ -59,6 +59,20 @@
 RUN: ld.lld -### foo.o -m i386pep --subsystem console | FileCheck -check-prefix=SUBSYSTEM %s
 SUBSYSTEM: -subsystem:console
 
+RUN: ld.lld -### foo.o -m i386pep --major-os-version 7 --minor-os-version 8 | FileCheck -check-prefix=SUBSYSTEM_VERSION %s
+RUN: ld.lld -### foo.o -m i386pep --major-subsystem-version 7 --minor-subsystem-version 8 | FileCheck -check-prefix=SUBSYSTEM_VERSION %s
+RUN: ld.lld -### foo.o -m i386pep --major-os-version=7 --minor-os-version=8 --major-subsystem-version=7 --minor-subsystem-version=8 | FileCheck -check-prefix=SUBSYSTEM_VERSION %s
+SUBSYSTEM_VERSION: -subsystem:default,7.8
+
+RUN: ld.lld -### foo.o -m i386pep --minor-subsystem-version 8 | FileCheck -check-prefix=SUBSYSTEM_DEFAULT_MAJOR %s
+SUBSYSTEM_DEFAULT_MAJOR: -subsystem:default,6.8
+
+RUN: ld.lld -### foo.o -m i386pep --major-subsystem-version 7 | FileCheck -check-prefix=SUBSYSTEM_DEFAULT_MINOR %s
+SUBSYSTEM_DEFAULT_MINOR: -subsystem:default,7
+
+RUN: ld.lld -### foo.o -m i386pep --subsystem windows --major-os-version 7 --minor-os-version 8 | FileCheck -check-prefix=SUBSYSTEM_WINDOWS %s
+SUBSYSTEM_WINDOWS: -subsystem:windows,7.8
+
 RUN: ld.lld -### foo.o -m i386pep -stack 4194304,8192 | FileCheck -check-prefix=STACK %s
 RUN: ld.lld -### foo.o -m i386pep --stack 4194304,8192 | FileCheck -check-prefix=STACK %s
 STACK: -stack:4194304,8192
