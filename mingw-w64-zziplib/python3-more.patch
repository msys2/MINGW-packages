diff -Nur zziplib-0.13.69/docs/zzipdoc.orig/commentmarkup.py zziplib-0.13.69/docs/zzipdoc/commentmarkup.py
--- zziplib-0.13.69/docs/zzipdoc.orig/commentmarkup.py	2020-03-27 16:43:54.977560900 +0100
+++ zziplib-0.13.69/docs/zzipdoc/commentmarkup.py	2020-03-27 16:45:09.617584400 +0100
@@ -1,4 +1,4 @@
-from match import Match
+from .match import Match
 
 def markup_link_syntax(text):
     """ markup the link-syntax ` => somewhere ` in the text block """
diff -Nur zziplib-0.13.69/docs/zzipdoc.orig/dbk2htm.py zziplib-0.13.69/docs/zzipdoc/dbk2htm.py
--- zziplib-0.13.69/docs/zzipdoc.orig/dbk2htm.py	2018-03-17 13:46:45.000000000 +0100
+++ zziplib-0.13.69/docs/zzipdoc/dbk2htm.py	2020-03-27 16:48:33.767813900 +0100
@@ -1,4 +1,4 @@
-from match import Match
+from .match import Match
 import string
 
 class dbk2htm_conversion:
diff -Nur zziplib-0.13.69/docs/zzipdoc.orig/docbookdocument.py zziplib-0.13.69/docs/zzipdoc/docbookdocument.py
--- zziplib-0.13.69/docs/zzipdoc.orig/docbookdocument.py	2020-03-27 16:41:51.781269500 +0100
+++ zziplib-0.13.69/docs/zzipdoc/docbookdocument.py	2020-03-27 16:51:53.669073400 +0100
@@ -1,6 +1,6 @@
 #! /usr/bin/env python
 # -*- coding: UTF-8 -*-
-from match import Match
+from .match import Match
 
 class DocbookDocument:
     """ binds some xml content page with additional markup - in this
@@ -30,7 +30,7 @@
     def _xml_text(self, xml):
         """ accepts adapter objects with .xml_text() """
         try:   return xml.xml_text()
-        except Exception as e: print "DocbookDocument/text", e; pass
+        except Exception as e: print("DocbookDocument/text", e); pass
         return str(xml)
     def _fetch_rootnode(self, text):
         fetch = Match(r"^[^<>]*<(\w+)\b")
@@ -47,7 +47,7 @@
         return filename
     def save(self, filename = None):
         filename = self._filename(filename)
-        print "writing '"+filename+"'"
+        print("writing '"+filename+"'")
         if len(self.text) > 1:
             self.save_all(filename)
         else:
@@ -58,12 +58,12 @@
             xml_text = self._xml_text(text)
             rootnode = self._fetch_rootnode(xml_text)
             doctype = self._xml_doctype(rootnode)
-            print >>fd, doctype
-            print >>fd, xml_text
+            print(doctype, file=fd)
+            print(xml_text, file=fd)
             fd.close()
             return True
         except IOError as e:
-            print "could not open '"+filename+"'file", e
+            print("could not open '"+filename+"'file", e)
             return False
     def save_all(self, filename):
         assert len(self.text) > 1
@@ -76,20 +76,20 @@
             else:
                 rootnode = self.rootnode
             doctype = self._xml_doctype(rootnode)
-            print >>fd, doctype
+            print(doctype, file=fd)
             title = self.get_title()
             if title and self.rootnode in self.has_title_child:
-                print >>fd, "<"+self.rootnode+'><title>'+title+'</title>'
+                print("<"+self.rootnode+'><title>'+title+'</title>', file=fd)
             elif title:
-                print >>fd, "<"+self.rootnode+' id="'+title+'">'
+                print("<"+self.rootnode+' id="'+title+'">', file=fd)
             else:
-                print >>fd, "<"+self.rootnode+'>'
+                print("<"+self.rootnode+'>', file=fd)
             for text in self.text:
                 text = self._xml_text(text)
-                print >>fd, text
-            print >>fd, "</"+self.rootnode+">"
+                print(text, file=fd)
+            print("</"+self.rootnode+">", file=fd)
             fd.close()
             return True
         except IOError as e:
-            print "could not open '"+filename+"'file", e
+            print("could not open '"+filename+"'file", e)
             return False
diff -Nur zziplib-0.13.69/docs/zzipdoc.orig/functionheader.py zziplib-0.13.69/docs/zzipdoc/functionheader.py
--- zziplib-0.13.69/docs/zzipdoc.orig/functionheader.py	2018-03-17 13:46:45.000000000 +0100
+++ zziplib-0.13.69/docs/zzipdoc/functionheader.py	2020-03-27 16:44:54.896848300 +0100
@@ -1,4 +1,4 @@
-from match import Match
+from .match import Match
 
 class FunctionHeader:
     """ parsing the comment block that is usually presented before
diff -Nur zziplib-0.13.69/docs/zzipdoc.orig/functionlisthtmlpage.py zziplib-0.13.69/docs/zzipdoc/functionlisthtmlpage.py
--- zziplib-0.13.69/docs/zzipdoc.orig/functionlisthtmlpage.py	2020-03-27 16:41:51.782276800 +0100
+++ zziplib-0.13.69/docs/zzipdoc/functionlisthtmlpage.py	2020-03-27 16:45:40.325021000 +0100
@@ -1,5 +1,5 @@
-from options import *
-from match import Match
+from .options import *
+from .match import Match
 
 class FunctionListHtmlPage:
     """ The main part here is to create a TOC (table of contents) at the
@@ -35,7 +35,7 @@
         head_text = entry.head_xml_text()
         body_text = entry.body_xml_text(name)
         if not head_text:
-            print "no head_text for", name
+            print("no head_text for", name)
             return
         try:
             prespec = entry.head_get_prespec()
@@ -102,7 +102,7 @@
         text &= (Match("(?s)<link>(\w+)</link>")
                  >> (lambda x: self.resolve_internal(x.group(1))))
         if len(self.not_found_in_anchors):
-            print "not found in anchors: ", self.not_found_in_anchors
+            print("not found in anchors: ", self.not_found_in_anchors)
         return (text & Match("(?s)<link>([^<>]*)</link>")
                 >> "<code>\\1</code>")
     def resolve_external(self, func, sect):
diff -Nur zziplib-0.13.69/docs/zzipdoc.orig/functionlistreference.py zziplib-0.13.69/docs/zzipdoc/functionlistreference.py
--- zziplib-0.13.69/docs/zzipdoc.orig/functionlistreference.py	2018-03-17 13:46:45.000000000 +0100
+++ zziplib-0.13.69/docs/zzipdoc/functionlistreference.py	2020-03-27 16:46:12.464598200 +0100
@@ -1,7 +1,7 @@
 #! /usr/bin/env python
 # -*- coding: UTF-8 -*-
-from match import Match
-from htm2dbk import *
+from .match import Match
+from .htm2dbk import *
 
 class FunctionListReference:
     """ Creating a docbook-style <reference> list of <refentry> parts
@@ -19,7 +19,7 @@
         description = entry.body_xml_text(name)
         funcsynopsis = entry.head_xml_text()
         if not funcsynopsis:
-            print "no funcsynopsis for", name
+            print("no funcsynopsis for", name)
             return
         if self.entry is None:
             self.entry = FunctionListRefEntry(entry, self.o)
diff -Nur zziplib-0.13.69/docs/zzipdoc.orig/functionprototype.py zziplib-0.13.69/docs/zzipdoc/functionprototype.py
--- zziplib-0.13.69/docs/zzipdoc.orig/functionprototype.py	2018-03-17 13:46:45.000000000 +0100
+++ zziplib-0.13.69/docs/zzipdoc/functionprototype.py	2020-03-27 16:45:02.976858300 +0100
@@ -1,4 +1,4 @@
-from match import Match
+from .match import Match
 
 class FunctionPrototype:
     """ takes a single function prototype line (cut from some source file)
diff -Nur zziplib-0.13.69/docs/zzipdoc.orig/htm2dbk.py zziplib-0.13.69/docs/zzipdoc/htm2dbk.py
--- zziplib-0.13.69/docs/zzipdoc.orig/htm2dbk.py	2020-03-27 16:41:51.783765600 +0100
+++ zziplib-0.13.69/docs/zzipdoc/htm2dbk.py	2020-03-27 16:47:11.103389500 +0100
@@ -7,7 +7,7 @@
 present in the world of docbook-to-anything converters. """
 
 from datetime import date
-import match
+from . import match
 import sys
 
 m = match.Match
@@ -147,7 +147,7 @@
             doc.add(f.read())
             f.close()
         except IOError as e:
-            print >> sys.stderr, "can not open "+filename
+            print("can not open "+filename, file=sys.stderr)
     return doc.value()
 
 def html2docbook(text):
@@ -155,4 +155,4 @@
     return htm2dbk_conversion().convert2(text)
 
 if __name__ == "__main__":
-    print htm2dbk_files(sys.argv[1:])
+    print(htm2dbk_files(sys.argv[1:]))
diff -Nur zziplib-0.13.69/docs/zzipdoc.orig/htmldocument.py zziplib-0.13.69/docs/zzipdoc/htmldocument.py
--- zziplib-0.13.69/docs/zzipdoc.orig/htmldocument.py	2020-03-27 16:41:51.785145000 +0100
+++ zziplib-0.13.69/docs/zzipdoc/htmldocument.py	2020-03-27 16:49:53.920431000 +0100
@@ -1,6 +1,6 @@
 #! /usr/bin/env python
 # -*- coding: UTF-8 -*-
-from match import Match
+from .match import Match
 
 class HtmlDocument:
     """ binds some html content page with additional markup - in this
@@ -42,18 +42,18 @@
         try:   return style.html_style()
         except Exception as e: ee = e; pass
         try:   return style.xml_style()
-        except Exception as e: print "HtmlDocument/style", ee, e; pass
+        except Exception as e: print("HtmlDocument/style", ee, e); pass
         try:   return str(style)
-        except Exception as e: print "HtmlDocument/style", e; return ""
+        except Exception as e: print("HtmlDocument/style", e); return ""
     def _html_text(self, html):
         """ accepts adapter objects with .html_text() and .xml_text() """
         ee = None
         try:   return html.html_text()
         except Exception as e: ee = e; pass
         try:   return html.xml_text()
-        except Exception as e: print "HtmlDocument/text", ee, e; pass
+        except Exception as e: print("HtmlDocument/text", ee, e); pass
         try:   return str(html)
-        except Exception as e: print "HtmlDocument/text", e; return "&nbsp;"
+        except Exception as e: print("HtmlDocument/text", e); return "&nbsp;"
     def navigation(self):
         if self.navi:
             return self.navi
@@ -103,15 +103,15 @@
         return filename
     def save(self, filename = None):
         filename = self._filename(filename)
-        print "writing '"+filename+"'"
+        print("writing '"+filename+"'")
         try:
             fd = open(filename, "w")
-            print >>fd, self.html_header()
+            print(self.html_header(), file=fd)
             for text in self.text:
-                print >>fd, self._html_text(text)
-            print >>fd, self.html_footer()
+                print(self._html_text(text), file=fd)
+            print(self.html_footer(), file=fd)
             fd.close()
             return True
         except IOError as e:
-            print "could not open '"+filename+"'file", e
+            print("could not open '"+filename+"'file", e)
             return False
diff -Nur zziplib-0.13.69/docs/zzipdoc.orig/match.py zziplib-0.13.69/docs/zzipdoc/match.py
--- zziplib-0.13.69/docs/zzipdoc.orig/match.py	2020-03-27 16:41:51.799021400 +0100
+++ zziplib-0.13.69/docs/zzipdoc/match.py	2020-03-27 16:48:13.357609400 +0100
@@ -18,7 +18,7 @@
         MatchReplace.__call__(self, matching, template, count, flags)
     def __call__(self, matching, template = None, count = 0, flags = None):
         """ other than __init__ the template may be left off to be unchanged"""
-        if isinstance(count, basestring): # count/flags swapped over?
+        if isinstance(count, str): # count/flags swapped over?
             flags = count; count = 0
         if isinstance(matching, Match):
             self.matching = matching
@@ -57,7 +57,7 @@
     def __call__(self, pattern, flags = None):
         assert isinstance(pattern, str) or pattern is None
         assert isinstance(flags, str) or flags is None
-        str.__init__(self, pattern)
+        str.__init__(self)
         self.replaced = 0 # set by subn() inside MatchReplace
         self.found = None # set by search() to a MatchObject
         self.pattern = pattern
diff -Nur zziplib-0.13.69/docs/zzipdoc.orig/options.py zziplib-0.13.69/docs/zzipdoc/options.py
--- zziplib-0.13.69/docs/zzipdoc.orig/options.py	2020-03-27 16:43:56.274426500 +0100
+++ zziplib-0.13.69/docs/zzipdoc/options.py	2020-03-27 16:51:31.203008500 +0100
@@ -3,13 +3,13 @@
 # @creator (C) 2003 Guido U. Draheim
 # @license http://creativecommons.org/licenses/by-nc-sa/2.0/de/
 
-from match import Match
+from .match import Match
 
 # use as o.optionname to check for commandline options.
 class Options:
     var = {}
     def __getattr__(self, name):
-        if not self.var.has_key(name): return None
+        if name not in self.var: return None
         return self.var[name]
     def __setattr__(self, name, value):
         self.var[name] = value
diff -Nur zziplib-0.13.69/docs/zzipdoc.orig/textfileheader.py zziplib-0.13.69/docs/zzipdoc/textfileheader.py
--- zziplib-0.13.69/docs/zzipdoc.orig/textfileheader.py	2018-03-17 13:46:45.000000000 +0100
+++ zziplib-0.13.69/docs/zzipdoc/textfileheader.py	2020-03-27 16:44:46.583362100 +0100
@@ -1,4 +1,4 @@
-from match import Match
+from .match import Match
 
 class TextFileHeader:
     """ scan for a comment block at the source file start and fill the
@@ -17,7 +17,7 @@
         x = Match()
         text = self.textfile.get_src_text()
         if not text:
-            print "nonexistent file:", self.textfile.get_filename()
+            print("nonexistent file:", self.textfile.get_filename())
             return False
         if text & x(r"(?s)[/][*]+(\s(?:.(?!\*\/))*.)\*\/"
                     r"(?:\s*\#(?:define|ifdef|endif)[ ]*\S*[ ]*\S*)*"
--- zziplib-0.13.69/docs/zzipdoc/match.py.orig	2018-03-17 13:46:45.000000000 +0100
+++ zziplib-0.13.69/docs/zzipdoc/match.py	2020-03-27 16:41:02.379001800 +0100
@@ -90,14 +90,14 @@
 if __name__ == "__main__":
     # matching:
     if "foo" & Match("oo"):
-        print "oo"
+        print("oo")
     x = Match()
     if "foo" & x("(o+)"):
-        print x[1]
+        print(x[1])
     # replacing:
     y = "fooboo" & Match("oo") >> "ee"
-    print y
+    print(y)
     r = Match("oo") >> "ee"
-    print "fooboo" & r
+    print("fooboo" & r)
     s = MatchReplace("oo", "ee")
-    print "fooboo" & s
+    print("fooboo" & s)
