# Contributor: Mehdi Chinoune <mehdi.chinoune@hotmail.com>

if [[ $MINGW_PACKAGE_PREFIX == *-clang-* ]]; then
  _clangprefix=1
fi

_realname=libc++
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}"
         "${MINGW_PACKAGE_PREFIX}-libunwind")
pkgver=15.0.0rc2
pkgrel=1
url="https://libcxx.llvm.org/"
arch=(any)
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clang32' 'clangarm64')
license=("custom:Apache 2.0 with LLVM Exception")
groups=($( (( _clangprefix )) && echo "${MINGW_PACKAGE_PREFIX}-toolchain"))
makedepends=("${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-ninja"
             "${MINGW_PACKAGE_PREFIX}-clang"
             "${MINGW_PACKAGE_PREFIX}-lld"
             "${MINGW_PACKAGE_PREFIX}-compiler-rt"
             "${MINGW_PACKAGE_PREFIX}-python")
options=('!debug')
if [[ ${MINGW_PACKAGE_PREFIX} != *-clang-* ]]; then
  # GNU's strip breaks the library #11553
  options+=('!strip')
fi
_url=https://github.com/llvm/llvm-project/releases/download/llvmorg-15.0.0-rc2
source=("${_url}/cmake-${pkgver}.src.tar.xz"{,.sig}
        "${_url}/llvm-${pkgver}.src.tar.xz"{,.sig}
        "${_url}/libcxx-${pkgver}.src.tar.xz"{,.sig}
        "${_url}/libcxxabi-${pkgver}.src.tar.xz"{,.sig}
        "${_url}/libunwind-${pkgver}.src.tar.xz"{,.sig}
        "https://raw.githubusercontent.com/llvm/llvm-project/llvmorg-15.0.0-rc2/runtimes/CMakeLists.txt"
        "https://raw.githubusercontent.com/llvm/llvm-project/llvmorg-15.0.0-rc2/runtimes/Components.cmake.in"
        "https://raw.githubusercontent.com/llvm/llvm-project/llvmorg-15.0.0-rc2/runtimes/Tests.cmake.in")
sha256sums=('1a0a7b80d9b078544eb3cea331ea046a5d3563b1fb36e658aa9ee2a3b53a73d1'
            'SKIP'
            '928c6e72328dd690f4c3578f01cd161f49a6a8108bdc302fc5371ff54047f2b9'
            'SKIP'
            '32d54e2ffdcd32a70474e5e7d46218abcb9fc3369a72651a353ec86e3141d6db'
            'SKIP'
            '1f8d8514da02833aab3f3229e87acad6679d18a37afbb872ca4b0b202895aa81'
            'SKIP'
            '21b85e96ed18787d1a0bf50478bd69a7589271199f4ee2c1b1580ca8410643a9'
            'SKIP'
            '2a835351d0168e70ec62fa3d9236029fc699f14422a3e3f0ccd4627f867c1d1f'
            'bc0974b6555874d3c24295fe8b99b25aea8086158ee4ab87e9a8709191cc7824'
            '895214f479aca243fbbec2d64319ec8413516d1b581c4c42b7558894b12db6eb')
validpgpkeys=('D574BD5D1D0E98895E3BF90044F2485E45D59042')
noextract=(libcxx-${pkgver}.src.tar.xz)

prepare() {
  plain "Extracting libcxx-${pkgver}.src.tar.xz due to symlink(s) without pre-existing target(s)"
  cd "${srcdir}"
  tar -xJf ${srcdir}/libcxx-${pkgver}.src.tar.xz -C ${srcdir} || true
  # Rename Directories
  for pkg in cmake llvm libcxx libcxxabi libunwind; do
    mv ${pkg}-$pkgver.src ${pkg}
  done
  rm -rf runtimes && mkdir -p runtimes
  mv CMakeLists.txt runtimes/
  mv Components.cmake.in runtimes/
  mv Tests.cmake.in runtimes/
}

build() {

  if check_option "debug" "y"; then
    _build_type="Debug"
  else
    _build_type="Release"
  fi

  local -a libcxx_config
  if (( _clangprefix )); then
    libcxx_config+=(-DLIBCXX_USE_COMPILER_RT=ON
      -DLIBCXXABI_USE_COMPILER_RT=ON
      -DLIBCXXABI_USE_LLVM_UNWINDER=ON)
  fi

  cd ${srcdir}
  [[ -d build-${MSYSTEM} ]] && rm -rf build-${MSYSTEM}
  mkdir build-${MSYSTEM} && cd build-${MSYSTEM}

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  cmake \
    -GNinja \
    -DCMAKE_BUILD_TYPE=${_build_type} \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    -DCMAKE_AR="${MINGW_PREFIX}/bin/llvm-ar.exe" \
    -DCMAKE_ASM_COMPILER="${MINGW_PREFIX}/bin/clang.exe" \
    -DCMAKE_C_COMPILER="${MINGW_PREFIX}/bin/clang.exe" \
    -DCMAKE_CXX_COMPILER="${MINGW_PREFIX}/bin/clang++.exe" \
    -DCMAKE_RANLIB="${MINGW_PREFIX}/bin/llvm-ranlib.exe" \
    -DCMAKE_SYSTEM_IGNORE_PATH=/usr/lib \
    -DLLVM_HOST_TRIPLE="${CARCH}-w64-windows-gnu" \
    -DPython3_EXECUTABLE=${MINGW_PREFIX}/bin/python.exe \
    -DPython3_FIND_REGISTRY=NEVER \
    -DPython3_ROOT_DIR=${MINGW_PREFIX} \
    -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=ON \
    -DLIBCXX_ENABLE_SHARED=ON \
    -DLIBCXX_ENABLE_STATIC=ON \
    -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
    -DLIBCXX_HAS_WIN32_THREAD_API=ON \
    -DLIBCXX_INCLUDE_BENCHMARKS=OFF \
    -DLIBCXXABI_ENABLE_SHARED=OFF \
    -DLIBCXXABI_ENABLE_STATIC=ON \
    -DLIBCXXABI_HAS_WIN32_THREAD_API=ON \
    -DLIBUNWIND_ENABLE_SHARED=ON \
    -DLIBUNWIND_ENABLE_STATIC=ON \
    -DLIBUNWIND_USE_COMPILER_RT=ON \
    -DLLVM_ENABLE_LLD=ON \
    -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind" \
    "${libcxx_config[@]}" \
    -Wno-dev \
    ../runtimes

  cmake --build . -- unwind cxx cxx_experimental
}

package_libc++() {
  pkgdesc="C++ Standard Library (mingw-w64)"
  url="https://libcxx.llvm.org/"
  provides=($( (( _clangprefix )) && echo \
             "${MINGW_PACKAGE_PREFIX}-gcc-libs" \
             || true))
  depends=($( (( _clangprefix )) && echo \
             "${MINGW_PACKAGE_PREFIX}-libunwind" \
             || echo "${MINGW_PACKAGE_PREFIX}-gcc-libs"))

  DESTDIR="${pkgdir}" cmake --build "${srcdir}/build-${MSYSTEM}" --target install-cxx
}

package_libunwind() {
  pkgdesc='A new implementation of a stack unwinder for C++ exceptions (mingw-w64)'
  url='https://llvm.org/'
  depends=($( (( _clangprefix )) || echo "${MINGW_PACKAGE_PREFIX}-gcc-libs"))

  DESTDIR="${pkgdir}" cmake --build "${srcdir}/build-${MSYSTEM}" --target install-unwind
}

# template start; name=mingw-w64-splitpkg-wrappers; version=1.0;
# vim: set ft=bash :

# generate wrappers
for _name in "${pkgname[@]}"; do
  _short="package_${_name#${MINGW_PACKAGE_PREFIX}-}"
  _func="$(declare -f "${_short}")"
  eval "${_func/#${_short}/package_${_name}}"
done
# template end;
