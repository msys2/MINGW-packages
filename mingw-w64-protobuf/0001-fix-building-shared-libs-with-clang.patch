--- a/src/google/protobuf/arena.cc
+++ b/src/google/protobuf/arena.cc
@@ -519,7 +519,7 @@
       new internal::ThreadLocalStorage<ThreadCache>();
   return *thread_cache_->Get();
 }
-#elif defined(PROTOBUF_USE_DLLS) && defined(_MSC_VER)
+#elif defined(PROTOBUF_USE_DLLS) && defined(_WIN32)
 ThreadSafeArena::ThreadCache& ThreadSafeArena::thread_cache() {
   static PROTOBUF_THREAD_LOCAL ThreadCache thread_cache;
   return thread_cache;
--- a/src/google/protobuf/descriptor.h
+++ b/src/google/protobuf/descriptor.h
@@ -422,7 +422,7 @@
 
   // A range of field numbers which are designated for third-party
   // extensions.
-  struct ExtensionRange {
+  struct PROTOBUF_EXPORT ExtensionRange {
     typedef DescriptorProto_ExtensionRange Proto;
 
     typedef ExtensionRangeOptions OptionsType;
--- a/src/google/protobuf/port_def.inc
+++ b/src/google/protobuf/port_def.inc
@@ -708,7 +708,7 @@
 // constant-initializing weak default instance pointers. Versions 12.0 and
 // higher seem to work, except that XCode 12.5.1 shows the error even though it
 // uses Clang 12.0.5.
-# elif !defined(__CYGWIN__) && \
+# elif !defined(__CYGWIN__) && !defined(__MINGW32__) && \
     __has_cpp_attribute(clang::require_constant_initialization) && \
         ((defined(__APPLE__) && PROTOBUF_CLANG_MIN(13, 0)) ||             \
      (!defined(__APPLE__) && PROTOBUF_CLANG_MIN(12, 0)))

--- a/src/google/protobuf/reflection_mode.cc
+++ b/src/google/protobuf/reflection_mode.cc
@@ -39,7 +39,7 @@
 
 #if !defined(PROTOBUF_NO_THREADLOCAL)
 
-#if defined(PROTOBUF_USE_DLLS) && defined(_MSC_VER)
+#if defined(PROTOBUF_USE_DLLS) && defined(_WIN32)
 ReflectionMode& ScopedReflectionMode::reflection_mode() {
   static PROTOBUF_THREAD_LOCAL ReflectionMode reflection_mode =
       ReflectionMode::kDefault;
--- a/src/google/protobuf/reflection_mode.h
+++ b/src/google/protobuf/reflection_mode.h
@@ -95,7 +95,7 @@
  private:
 #if !defined(PROTOBUF_NO_THREADLOCAL)
   const ReflectionMode previous_mode_;
-#if defined(PROTOBUF_USE_DLLS) && defined(_MSC_VER)
+#if defined(PROTOBUF_USE_DLLS) && defined(_WIN32)
   // Thread local variables cannot be exposed through MSVC DLL interface but we
   // can wrap them in static functions.
   static ReflectionMode& reflection_mode();
@@ -108,7 +108,7 @@
 
 #if !defined(PROTOBUF_NO_THREADLOCAL)
 
-#if defined(PROTOBUF_USE_DLLS) && defined(_MSC_VER)
+#if defined(PROTOBUF_USE_DLLS) && defined(_WIN32)
 
 inline ScopedReflectionMode::ScopedReflectionMode(ReflectionMode mode)
     : previous_mode_(reflection_mode()) {
--- a/src/google/protobuf/thread_safe_arena.h
+++ b/src/google/protobuf/thread_safe_arena.h
@@ -261,7 +261,7 @@
   // iOS does not support __thread keyword so we use a custom thread local
   // storage class we implemented.
   static ThreadCache& thread_cache();
-#elif defined(PROTOBUF_USE_DLLS) && defined(_MSC_VER)
+#elif defined(PROTOBUF_USE_DLLS) && defined(_WIN32)
   // Thread local variables cannot be exposed through MSVC DLL interface but we
   // can wrap them in static functions.
   static ThreadCache& thread_cache();
