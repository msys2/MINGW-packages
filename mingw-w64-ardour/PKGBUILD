_realname=ardour
pkgbase=mingw-w64-${_realname}
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
pkgver=8.4
_commit=c35515e43d65bac23c89ae11cfbf2fed8c8f46b6  # refs/tags/8.4^{}
pkgrel=1
pkgdesc="Professional-grade digital audio workstation (mingw-w64)"
arch=(any)
mingw_arch=('mingw64' 'ucrt64') # no jack2 on clang :(
url="https://ardour.org/"
msys2_references=(
  'archlinux: ardour'
)
license=(
  CC0-1.0
  GPL-2.0-or-later
  GPL-3.0-or-later
  MIT
)
groups=(pro-audio)
depends=(
  ${MINGW_PACKAGE_PREFIX}-cairo
  ${MINGW_PACKAGE_PREFIX}-gcc-libs
  ${MINGW_PACKAGE_PREFIX}-hicolor-icon-theme
  ${MINGW_PACKAGE_PREFIX}-libsigc++
  ${MINGW_PACKAGE_PREFIX}-taglib
)
makedepends=(
  ${MINGW_PACKAGE_PREFIX}-aubio
  ${MINGW_PACKAGE_PREFIX}-boost
  ${MINGW_PACKAGE_PREFIX}-cairomm
  ${MINGW_PACKAGE_PREFIX}-cppunit
  ${MINGW_PACKAGE_PREFIX}-curl
  ${MINGW_PACKAGE_PREFIX}-dbus
  ${MINGW_PACKAGE_PREFIX}-doxygen
  ${MINGW_PACKAGE_PREFIX}-drmingw
  ${MINGW_PACKAGE_PREFIX}-fftw
  ${MINGW_PACKAGE_PREFIX}-flac
  ${MINGW_PACKAGE_PREFIX}-fluidsynth
  ${MINGW_PACKAGE_PREFIX}-fontconfig
  ${MINGW_PACKAGE_PREFIX}-freetype
  git
  ${MINGW_PACKAGE_PREFIX}-glib2
  ${MINGW_PACKAGE_PREFIX}-cc
  ${MINGW_PACKAGE_PREFIX}-glibmm
  ${MINGW_PACKAGE_PREFIX}-graphviz
  ${MINGW_PACKAGE_PREFIX}-hidapi
  ${MINGW_PACKAGE_PREFIX}-itstool
  ${MINGW_PACKAGE_PREFIX}-jack2
  ${MINGW_PACKAGE_PREFIX}-libarchive
  ${MINGW_PACKAGE_PREFIX}-liblo
  ${MINGW_PACKAGE_PREFIX}-libusb
  ${MINGW_PACKAGE_PREFIX}-libogg
  ${MINGW_PACKAGE_PREFIX}-libpng
  ${MINGW_PACKAGE_PREFIX}-libsamplerate
  ${MINGW_PACKAGE_PREFIX}-libsndfile
  ${MINGW_PACKAGE_PREFIX}-libusb
  ${MINGW_PACKAGE_PREFIX}-libwebsockets
  ${MINGW_PACKAGE_PREFIX}-libxml2
  ${MINGW_PACKAGE_PREFIX}-lilv
  ${MINGW_PACKAGE_PREFIX}-lv2
  ${MINGW_PACKAGE_PREFIX}-pango
  ${MINGW_PACKAGE_PREFIX}-pkgconf
  ${MINGW_PACKAGE_PREFIX}-pangomm
  ${MINGW_PACKAGE_PREFIX}-readline
  ${MINGW_PACKAGE_PREFIX}-rubberband
  ${MINGW_PACKAGE_PREFIX}-serd
  ${MINGW_PACKAGE_PREFIX}-sord
  ${MINGW_PACKAGE_PREFIX}-sratom
  unzip
  ${MINGW_PACKAGE_PREFIX}-vamp-plugin-sdk
  ${MINGW_PACKAGE_PREFIX}-waf
)
optdepends=(
  'harvid: for video timeline and MP3 export'
  'new-session-manager: for session management'
  'xjadeo: for video monitoring'
)
provides=(
  ladspa-host
  lv2-host
  vamp-host
  vst-host
  vst3-host
)
source=(
  $_realname::git+https://github.com/$_realname/$_realname.git#tag=$_commit
  $_realname-midi-$pkgver.zip::http://stuff.$_realname.org/loops/ArdourBundledMedia.zip
  0001-*.patch
  0002-remove-glib-deprecated-functions.patch
)
noextract=($_realname-midi-$pkgver.zip)
sha512sums=('SKIP'
            '94b681f989e834f5de25ce87da9c174b11d90617063f8c96147d7eb470391b35f6d54b85de16da8d963cacb01b50d1c1fab0fddd18eb3b086fe17124ecfa4f65'
            '0181174eeb511604f1d4e12350a879fc2345f87edfbe10af50cb8dcf15d7a1dfd6d2130b646afe597189cec225b258eeb61265d750322ab277236c4183456977'
            'fc1c19ef8c08020172c1da7eb5ae4906c0f900cdc1c87fa86dc8540ab7f1f16202c4dbd24c5f5eb9f12fbddf868968c72f25b86c16ff7e3f08210372d119e3c7')
b2sums=('SKIP'
        'e31be6b51a217e2f7f799aa1d6e8c3cd024d80ab2d8d4371496a2b8bf0215749979217b565909841a346d6b3128fbfd674d2fae64b9fe741a5b418cd184c23be'
        '50dc5537cc8abfd6de4965133b3055f4388d2e29fc7566be2d11ef453c5e4e62c59d6cdbb137474b6dd3bb7349a787a758459c8e39f4e3e939f99dbf9a34bdc9'
        '96593b52ba484065fb755c7aa7ae46e2c883bb1902e0d947dbad84afba9cf4681328902788bfe002fd02af5cd8949aae94156573a6d6dbff08dc5b5250dd2db7')

pkgver() {
  cd $_realname
  git describe --tags --abbrev=7 | sed 's/\([^-]*-g\)/r\1/;s/-/./g'
}

prepare() {
  patch -Np1 -d $_realname -i ../0001*.patch
  patch -Np1 -d $_realname -i ../0002*.patch


  cd $_realname
  # unsetting gtk2 rc (FS#54389)
  sed -e '8iexport GTK2_RC_FILES=/dev/null' -i gtk2_ardour/ardour.sh.in

  # Fixes to use system waf:
  # making sure, that subdirectories can be picked up with local includes
  touch __init__.py
  # making ancient 'misc.py' include available to system installed waf
  sed -e "s/('misc')/('misc', tooldir='tools')/" \
      -i {gtk2_ardour,headless,luasession,session_utils,libs/fst}/wscript
  # make custom 'autowaf' include compatible with system installed waf
  find . -type f \
         -iname "*wscript*" \
         -exec sed -e 's/from waflib.extras import autowaf/from tools import autowaf/g' \
                   -e 's/import waflib.extras.autowaf/from tools import autowaf/g' \
                   -i {} \;
}

build() {
  local waf_configure_options=(
    --prefix=${MINGW_PREFIX}
    --dist-target=mingw 
    --configdir=/share
    --cxx11
    --freedesktop
    --no-phone-home
    --optimize
    --ptformat
    --with-backends="portaudio,dummy,jack"
    --out="${srcdir}/build-${MSYSTEM}"
    --check-cxx-compiler=g++
    --check-c-compiler=gcc
  )
  #waf expects CC and CXX to be complete path variables, in case it is set, it will NOT check path
  unset CC
  unset CXX
  export WAF_NO_PREFORK=1
  export CFLAGS+=" -Wno-deprecated-declarations"
  export CXXFLAGS+=" -Wno-deprecated-declarations"
  cd $_realname
  export LINKFLAGS="$LDFLAGS"
  waf configure "${waf_configure_options[@]}"
  waf build 
}

package() {
  depends+=(
#    alsa-lib libasound.dll
#    aubio libaubio.dll
#    cairomm libcairomm-1.0.dll
#    curl libcurl.dll
#    dbus libdbus-1.dll
#    fftw libfftw3f.dll libfftw3f_threads.dll
#    fluidsynth libfluidsynth.dll
#    fontconfig libfontconfig.dll
#    glib2 libglib-2.0.dll libgobject-2.0.dll
#    glibmm libglibmm-2.4.dll
#    jack libjack.dll
#    libarchive libarchive.dll
#    liblo liblo.dll
#    liblrdf liblrdf.dll
#    libltc libltc.dll
#    libpng libpng16.dll
#    libsamplerate libsamplerate.dll
#    libsndfile libsndfile.dll
#    libusb libusb-1.0.dll
#    libwebsockets libwebsockets.dll
#    libxml2 libxml2.dll
#    lilv liblilv-0.dll
#    pango libpango-1.0.dll libpangocairo-1.0.dll libpangoft2-1.0.dll
#    pangomm libpangomm-1.4.dll
#    readline libreadline.dll
#    rubberband librubberband.dll
#    vamp-plugin-sdk libvamp-hostsdk.dll libvamp-sdk.dll
  )

  (
    cd $_realname
    #waf i18n --destdir="${pkgdir}"
    export pkgdir=$pkgdir
    export _realname=$_realname
    #bash # to debug
    waf install --destdir="../build-${MSYSTEM}"
    install -vDm 644 $_realname.1 -t "${pkgdir}${MINGW_PREFIX}/share/man/man1/"
  )

  # installation of MIDI files is a bit of a horrorshow, as upstream is not flexible about tarball naming, etc.
  cd "${srcdir}/build-${MSYSTEM}"
  install -vdm 755 "${pkgdir}${MINGW_PREFIX}/share/$_realname${pkgver/.*/}/media/"
  unzip $srcdir/../$_realname-midi-$pkgver.zip -d $(cygpath -w "$pkgdir${MINGW_PREFIX}/share/$_realname${pkgver/.*/}/media/")
#  install -vdm 755 "${pkgdir}${MINGW_PREFIX}/share/licenses/$pkgname/"
#  ln -s "${MINGW_PREFIX}/share/$_realname${pkgver/.*/}/media/MIDI Beats/LICENSE" "${pkgdir}${MINGW_PREFIX}/share/licenses/$_realname/LICENSE.beats"
#  ln -s "${MINGW_PREFIX}/share/$_realname${pkgver/.*/}/media/MIDI Chords/LICENSE" "${pkgdir}${MINGW_PREFIX}/share/licenses/$_realname/LICENSE.chords"
#  ln -s "${MINGW_PREFIX}/share/$_realname${pkgver/.*/}/media/MIDI Progressions/LICENSE" "${pkgdir}${MINGW_PREFIX}/share/licenses/$_realname/LICENSE.progressions"
}
# vim:set ts=2 sw=2 et:
