_realname=ardour
pkgbase=mingw-w64-${_realname}
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
pkgver=8.10
_commit=0a0848b2d61105ae27c8713d06e782bee34f2778  # refs/tags/8.4^{}
pkgrel=1
pkgdesc="Professional-grade digital audio workstation (mingw-w64)"
arch=(any)
mingw_arch=('mingw64' 'ucrt64') # no jack2 on clang :(
url="https://ardour.org/"
msys2_references=(
  'archlinux: ardour'
)
license=(
  CC0-1.0
  GPL-2.0-or-later
  GPL-3.0-or-later
  MIT
)
groups=(${MINGW_PACKAGE-PREFIX}-pro-audio)
depends=(
  ${MINGW_PACKAGE_PREFIX}-cairo
  ${MINGW_PACKAGE_PREFIX}-gcc-libs
  ${MINGW_PACKAGE_PREFIX}-hicolor-icon-theme
  ${MINGW_PACKAGE_PREFIX}-libsigc++
  ${MINGW_PACKAGE_PREFIX}-taglib
)
makedepends=(
  ${MINGW_PACKAGE_PREFIX}-aubio
  ${MINGW_PACKAGE_PREFIX}-boost
  ${MINGW_PACKAGE_PREFIX}-cairomm
  ${MINGW_PACKAGE_PREFIX}-cppunit
  ${MINGW_PACKAGE_PREFIX}-curl
  ${MINGW_PACKAGE_PREFIX}-dbus
  ${MINGW_PACKAGE_PREFIX}-doxygen
  ${MINGW_PACKAGE_PREFIX}-drmingw
  ${MINGW_PACKAGE_PREFIX}-fftw
  ${MINGW_PACKAGE_PREFIX}-flac
  ${MINGW_PACKAGE_PREFIX}-fluidsynth
  ${MINGW_PACKAGE_PREFIX}-fontconfig
  ${MINGW_PACKAGE_PREFIX}-freetype
  git
  ${MINGW_PACKAGE_PREFIX}-glib2
  ${MINGW_PACKAGE_PREFIX}-cc
  ${MINGW_PACKAGE_PREFIX}-glibmm
  ${MINGW_PACKAGE_PREFIX}-graphviz
  ${MINGW_PACKAGE_PREFIX}-hidapi
  ${MINGW_PACKAGE_PREFIX}-itstool
  ${MINGW_PACKAGE_PREFIX}-jack2
  ${MINGW_PACKAGE_PREFIX}-libarchive
  ${MINGW_PACKAGE_PREFIX}-liblo
  ${MINGW_PACKAGE_PREFIX}-libusb
  ${MINGW_PACKAGE_PREFIX}-libogg
  ${MINGW_PACKAGE_PREFIX}-libpng
  ${MINGW_PACKAGE_PREFIX}-libsamplerate
  ${MINGW_PACKAGE_PREFIX}-libsndfile
  ${MINGW_PACKAGE_PREFIX}-libusb
  ${MINGW_PACKAGE_PREFIX}-libwebsockets
  ${MINGW_PACKAGE_PREFIX}-libxml2
  ${MINGW_PACKAGE_PREFIX}-lilv
  ${MINGW_PACKAGE_PREFIX}-lv2
  ${MINGW_PACKAGE_PREFIX}-pango
  ${MINGW_PACKAGE_PREFIX}-pkgconf
  ${MINGW_PACKAGE_PREFIX}-pangomm
  ${MINGW_PACKAGE_PREFIX}-readline
  ${MINGW_PACKAGE_PREFIX}-rubberband
  ${MINGW_PACKAGE_PREFIX}-serd
  ${MINGW_PACKAGE_PREFIX}-sord
  ${MINGW_PACKAGE_PREFIX}-sratom
  unzip
  ${MINGW_PACKAGE_PREFIX}-vamp-plugin-sdk
  #${MINGW_PACKAGE_PREFIX}-waf
  python
)
optdepends=(
  'harvid: for video timeline and MP3 export'
  'new-session-manager: for session management'
  'xjadeo: for video monitoring'
)
provides=(
  ladspa-host
  lv2-host
  vamp-host
  vst-host
  vst3-host
)
source=(
  $_realname::git+https://github.com/$_realname/$_realname.git#tag=$_commit
  $_realname-midi-$pkgver.zip::http://stuff.$_realname.org/loops/ArdourBundledMedia.zip
  0001-*.patch
  0002-remove-glib-deprecated-functions.patch
  0003-*.patch
  0004-*.patch
)
noextract=($_realname-midi-$pkgver.zip)
sha256sums=('c039eebf76873291c53e086031f9a41e332f3d68fe50efd5b6cf37bc906bfef3'
            'a00de00671cdc329b2ca35c2a5c4150af3d6588147f9dca2e3dea752aa2e234c'
            '649c43b05c7c100bbf47a2167238653bcac0d73bd35feba418d1a42ae835cdc6'
            '69be47f8884a7da8c06e68d69d870662547fa559216b9db31a9ffb4eac6757bf'
            '34f2ee5f28d43c703c70b66b7868f225ad06d12c9cdf0296c629333f97babcb6' 'SKIP')
pkgver() {
  cd $_realname
  git describe --tags --abbrev=7 | sed 's/\([^-]*-g\)/r\1/;s/-/./g'
}

prepare() {
  patch -Np1 -d $_realname -i ../0001*.patch
  patch -Np1 -d $_realname -i ../0003*.patch
  patch -Np1 -d $_realname -i ../0002*.patch
  patch -Np1 -d $_realname -i ../0004*.patch


  cd $_realname
  # unsetting gtk2 rc (FS#54389)
  sed -e '8iexport GTK2_RC_FILES=/dev/null' -i gtk2_ardour/ardour.sh.in

  # Fixes to use system waf:
  # making sure, that subdirectories can be picked up with local includes
  touch __init__.py
  # making ancient 'misc.py' include available to system installed waf
  sed -e "s/('misc')/('misc', tooldir='tools')/" \
      -i {gtk2_ardour,headless,luasession,session_utils,libs/fst}/wscript
  # make custom 'autowaf' include compatible with system installed waf
  find . -type f \
         -iname "*wscript*" \
         -exec sed -e 's/from waflib.extras import autowaf/from tools import autowaf/g' \
                   -e 's/import waflib.extras.autowaf/from tools import autowaf/g' \
                   -i {} \;
}

build() {
  local waf_configure_options=(
    --prefix=${MINGW_PREFIX}
    --check-c-compiler=${CC}
    --check-cxx-compiler=${CXX}
    --dist-target=mingw 
    --configdir=/etc
    --cxx17
    --freedesktop
    --no-phone-home
    --optimize
    --ptformat
    --with-backends="portaudio,dummy,jack"
    --out="${srcdir}/build-${MSYSTEM}"
  )
  #waf expects CC and CXX to be complete path variables, in case it is set, it will NOT check path
  unset CC
  unset CXX
  export WAF_NO_PREFORK=1
  export CFLAGS+=" -Wno-deprecated-declarations"
  export CXXFLAGS+=" -Wno-deprecated-declarations"
  cd $_realname
  export LINKFLAGS="$LDFLAGS"
  /usr/bin/python waf configure "${waf_configure_options[@]}"
  /usr/bin/python waf build 
}

package() {
  (
    cd $_realname
    /usr/bin/python waf i18n --destdir="${pkgdir}"
    #echo Install destination :--destdir="$(cygpath -w $pkgdir)"  is $pkgdir is ${pkgdir} 
    /usr/bin/python waf install --destdir="${pkgdir}" --libdir="${MINGW_PREFIX}/lib" --prefix=${MINGW_PREFIX}
    install -vDm 644 $_realname.1 -t "${pkgdir}${MINGW_PREFIX}/share/man/man1/"
  )

  # installation of MIDI files is a bit of a horrorshow, as upstream is not flexible about tarball naming, etc.
  cd "${srcdir}/build-${MSYSTEM}"
  unzip $srcdir/../$_realname-midi-$pkgver.zip -d "$pkgdir${MINGW_PREFIX}/share/$_realname${pkgver/.*/}/media/"
}
# vim:set ts=2 sw=2 et:

