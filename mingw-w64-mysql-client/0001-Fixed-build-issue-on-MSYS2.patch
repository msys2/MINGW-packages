From d3a4d87dc4d3ea4291bfed1891e2ee4eb2b99a6f Mon Sep 17 00:00:00 2001
From: taozuhong <taozuhong@hotmail.com>
Date: Tue, 7 Jan 2025 11:37:07 +0800
Subject: [PATCH] Fixed build issue on MSYS2

---
 client/CMakeLists.txt                         | 38 ++++++++++---------
 .../components/services/bits/my_io_bits.h     |  2 +-
 libmysql/CMakeLists.txt                       |  2 +-
 mysys/CMakeLists.txt                          |  7 +++-
 mysys/mf_tempfile.cc                          |  2 +-
 scripts/CMakeLists.txt                        |  8 ++--
 sql/CMakeLists.txt                            |  2 +-
 sql/log_event.cc                              |  6 +--
 sql/rpl_gtid_set.cc                           |  3 +-
 9 files changed, 38 insertions(+), 32 deletions(-)

diff --git a/client/CMakeLists.txt b/client/CMakeLists.txt
index 0b88a4b4afb..ece278c2c8b 100644
--- a/client/CMakeLists.txt
+++ b/client/CMakeLists.txt
@@ -43,25 +43,27 @@ MYSQL_ADD_EXECUTABLE(mysql
   LINK_LIBRARIES mysqlclient ${EDITLINE_LIBRARY}
   )
 
-MYSQL_ADD_EXECUTABLE(mysqltest
-  mysqltest.cc
-  mysqltest/error_names.cc
-  mysqltest/expected_errors.cc
-  mysqltest/expected_warnings.cc
-  mysqltest/logfile.cc
-  mysqltest/regular_expressions.cc
-  mysqltest/secondary_engine.cc
-  mysqltest/utils.cc
-  client_query_attributes.cc
-
-  COMPONENT Test
-  DEPENDENCIES GenError GenClientError
-  ENABLE_EXPORTS
-  LINK_LIBRARIES mysqlclient
-  )
+IF (NOT MINGW)
+  MYSQL_ADD_EXECUTABLE(mysqltest
+    mysqltest.cc
+    mysqltest/error_names.cc
+    mysqltest/expected_errors.cc
+    mysqltest/expected_warnings.cc
+    mysqltest/logfile.cc
+    mysqltest/regular_expressions.cc
+    mysqltest/secondary_engine.cc
+    mysqltest/utils.cc
+    client_query_attributes.cc
+
+    COMPONENT Test
+    DEPENDENCIES GenError GenClientError
+    ENABLE_EXPORTS
+    LINK_LIBRARIES mysqlclient
+    )
 
-IF(MY_COMPILER_IS_GNU AND (WITH_LTO OR CMAKE_COMPILER_FLAG_WITH_LTO))
-  TARGET_LINK_OPTIONS(mysqltest PRIVATE -Wno-error=stringop-overflow)
+  IF(MY_COMPILER_IS_GNU AND (WITH_LTO OR CMAKE_COMPILER_FLAG_WITH_LTO))
+    TARGET_LINK_OPTIONS(mysqltest PRIVATE -Wno-error=stringop-overflow)
+  ENDIF()
 ENDIF()
 
 MYSQL_ADD_EXECUTABLE(mysqlcheck
diff --git a/include/mysql/components/services/bits/my_io_bits.h b/include/mysql/components/services/bits/my_io_bits.h
index f314a8aaada..debc87203cd 100644
--- a/include/mysql/components/services/bits/my_io_bits.h
+++ b/include/mysql/components/services/bits/my_io_bits.h
@@ -51,7 +51,7 @@
 typedef int File; /* File descriptor */
 #if defined(_WIN32) && !defined(MYSQL_ABI_CHECK)
 typedef int MY_MODE;
-typedef int mode_t;
+// typedef int mode_t;
 typedef int socket_len_t;
 typedef SOCKET my_socket;
 #define MY_SOCKET_FMT "%llu"
diff --git a/libmysql/CMakeLists.txt b/libmysql/CMakeLists.txt
index 863b7be3f27..2ca0e5b6733 100644
--- a/libmysql/CMakeLists.txt
+++ b/libmysql/CMakeLists.txt
@@ -201,7 +201,7 @@ SET(CLIENT_SOURCES
   ../sql/auth/sha2_password_common.cc
 )
 
-IF (WIN32 AND OPENSSL_APPLINK_C)
+IF (WIN32 AND OPENSSL_APPLINK_C AND NOT MINGW)
   MY_ADD_COMPILE_DEFINITIONS(
     ../sql-common/client_authentication.cc
     COMPILE_DEFINITIONS HAVE_OPENSSL_APPLINK_C
diff --git a/mysys/CMakeLists.txt b/mysys/CMakeLists.txt
index aef2a83b3b1..5676ca08041 100644
--- a/mysys/CMakeLists.txt
+++ b/mysys/CMakeLists.txt
@@ -105,7 +105,6 @@ SET(MYSYS_SOURCES
   print_version.cc
   psi_noop.cc
   ptr_cmp.cc
-  stacktrace.cc
   str2int.cc
   strcont.cc
   strmake.cc
@@ -133,6 +132,10 @@ SET(MYSYS_SOURCES
 )
 LIST(APPEND MYSYS_SOURCES my_aes_openssl.cc)
 
+IF (NOT MINGW)
+  LIST(APPEND MYSYS_SOURCES stacktrace.cc)
+ENDIF()
+
 IF(BUILD_IS_SINGLE_CONFIG)
   GET_PROPERTY(CWD_DEFINITIONS DIRECTORY PROPERTY COMPILE_DEFINITIONS)
   IF(NOT CMAKE_CXX_FLAGS MATCHES "DSAFE_MUTEX" AND
@@ -224,7 +227,7 @@ IF(CMAKE_USE_PTHREADS_INIT AND CMAKE_C_FLAGS MATCHES "-fsanitize=")
 ENDIF()
 # Needed to resolve OpenSSL dependency on Windows
 IF(WIN32)
-  TARGET_LINK_LIBRARIES(mysys crypt32)
+  TARGET_LINK_LIBRARIES(mysys crypt32 rpcrt4)
 ENDIF()
 
 # MD5_Init() and others are deprecated.
diff --git a/mysys/mf_tempfile.cc b/mysys/mf_tempfile.cc
index 8a865d7de38..fac868f5b2c 100644
--- a/mysys/mf_tempfile.cc
+++ b/mysys/mf_tempfile.cc
@@ -62,7 +62,7 @@
 #include <sstream>
 #include <string>
 /* UuidCreateSequential needs Rpcrt4 library */
-#pragma comment(lib, "Rpcrt4")
+#pragma comment(lib, "rpcrt4")
 
 static void encode_crockford_base32(uint64_t val_to_encode, char *to,
                                     size_t encode_len) {
diff --git a/scripts/CMakeLists.txt b/scripts/CMakeLists.txt
index 9ebe10bdb51..0a45daebe6e 100644
--- a/scripts/CMakeLists.txt
+++ b/scripts/CMakeLists.txt
@@ -69,10 +69,10 @@ ADD_CUSTOM_COMMAND(
 )
 
 # Add target for the above to be built
-MY_ADD_CUSTOM_TARGET(GenFixPrivs
-  ALL
-  DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/mysql_fix_privilege_tables_sql.h
-)
+# MY_ADD_CUSTOM_TARGET(GenFixPrivs
+#   ALL
+#   DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/mysql_fix_privilege_tables_sql.h
+# )
 
 ADD_CUSTOM_COMMAND(
   OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/sql_commands_system_data.h
diff --git a/sql/CMakeLists.txt b/sql/CMakeLists.txt
index 3c4086fa90a..c27adbd08b7 100644
--- a/sql/CMakeLists.txt
+++ b/sql/CMakeLists.txt
@@ -1015,7 +1015,7 @@ SET_TARGET_PROPERTIES(sql_dd PROPERTIES LINK_INTERFACE_MULTIPLICITY 3)
 # On Windows platform we compile in the client-side Windows Native Authentication
 # plugin which is used by the client connection code included in the server.
 #
-IF(WIN32)
+IF(WIN32 AND NOT MINGW)
   ADD_DEFINITIONS(-DAUTHENTICATION_WIN)
   TARGET_LINK_LIBRARIES(sql_main auth_win_client)
   IF(OPENSSL_APPLINK_C)
diff --git a/sql/log_event.cc b/sql/log_event.cc
index d87ecbb4779..00d33eb1d91 100644
--- a/sql/log_event.cc
+++ b/sql/log_event.cc
@@ -790,9 +790,9 @@ bool net_field_length_checked(const uchar **packet, size_t *max_length,
 }
 template bool net_field_length_checked<size_t>(const uchar **packet,
                                                size_t *max_length, size_t *out);
-template bool net_field_length_checked<ulonglong>(const uchar **packet,
-                                                  size_t *max_length,
-                                                  ulonglong *out);
+// template bool net_field_length_checked<ulonglong>(const uchar **packet,
+//                                                   size_t *max_length,
+//                                                   ulonglong *out);
 
 /**
   Transforms a string into "" or its expression in 0x... form.
diff --git a/sql/rpl_gtid_set.cc b/sql/rpl_gtid_set.cc
index 0017cd03c05..1f2fbe6ac14 100644
--- a/sql/rpl_gtid_set.cc
+++ b/sql/rpl_gtid_set.cc
@@ -236,10 +236,11 @@ void Gtid_set::create_new_chunk(int size) {
   */
   if (MAX_NEW_CHUNK_ALLOCATE_TRIES == i ||
       DBUG_EVALUATE_IF("rpl_simulate_new_chunk_allocate_failure", 1, 0)) {
-    my_safe_print_system_time();
+    /* my_safe_print_system_time();
     my_safe_printf_stderr("%s",
                           "[Fatal] Out of memory while allocating "
                           "a new chunk of intervals for storing GTIDs.\n");
+    */
     _exit(MYSQLD_FAILURE_EXIT);
   }
   // store the chunk in the list of chunks
-- 
2.47.1

