--- a/lib/Evaluate/constant.cpp	2022-04-04 18:19:29.274848400 -0700
+++ b/lib/Evaluate/constant.cpp	2022-04-04 18:20:50.455510700 -0700
@@ -274,7 +274,7 @@
     return count;
   } else {
     std::size_t copied{0};
-    std::size_t elementBytes{length_ * sizeof(decltype(values_[0]))};
+    std::size_t elementBytes{static_cast<size_t>(length_ * sizeof(decltype(values_[0])))};
     ConstantSubscripts sourceSubscripts{source.lbounds()};
     while (copied < count) {
       auto *dest{&values_.at(SubscriptsToOffset(resultSubscripts) * length_)};
--- a/runtime/command.cpp	2022-04-04 18:19:29.549977300 -0700
+++ b/runtime/command.cpp	2022-04-04 18:59:05.094966300 -0700
@@ -30,7 +30,7 @@
   if constexpr (sizeof(std::size_t) <= sizeof(std::int64_t)) {
     return static_cast<std::int64_t>(length);
   } else {
-    std::size_t max{std::numeric_limits<std::int64_t>::max()};
+    std::uint64_t max{std::numeric_limits<std::int64_t>::max()};
     return length > max ? 0 // Just fail.
                         : static_cast<std::int64_t>(length);
   }
--- a/runtime/transformational.cpp	2022-04-04 18:19:29.605979000 -0700
+++ b/runtime/transformational.cpp	2022-04-04 20:04:31.322600400 -0700
@@ -184,7 +184,7 @@
   SubscriptValue lb{sourceDim.LowerBound()};
   for (SubscriptValue j{0}; j < extent; ++j) {
     SubscriptValue resultAt{1 + j};
-    SubscriptValue sourceAt{lb + (j + shift) % extent};
+    SubscriptValue sourceAt{static_cast<SubscriptValue>(lb + (j + shift) % extent)};
     if (sourceAt < lb) {
       sourceAt += extent;
     }
@@ -282,7 +282,7 @@
   }
   SubscriptValue lb{source.GetDimension(0).LowerBound()};
   for (SubscriptValue j{1}; j <= extent; ++j) {
-    SubscriptValue sourceAt{lb + j - 1 + shift};
+    SubscriptValue sourceAt{static_cast<SubscriptValue>(lb + j - 1 + shift)};
     if (sourceAt >= lb && sourceAt < lb + extent) {
       CopyElement(result, &j, source, &sourceAt, terminator);
     } else if (boundary) {
