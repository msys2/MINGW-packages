--- a/runtime/misc-intrinsic.cpp	2021-10-02 17:25:54.576794400 -0700
+++ b/runtime/misc-intrinsic.cpp	2021-10-02 17:27:11.031517900 -0700
@@ -47,7 +47,7 @@
         "TRANSFER: could not allocate memory for result; STAT=%d", stat);
   }
   char *to{result.OffsetElement<char>()};
-  std::size_t resultBytes{size * elementBytes};
+  std::size_t resultBytes{static_cast<size_t>(size * elementBytes)};
   const std::size_t sourceElementBytes{source.ElementBytes()};
   std::size_t sourceElements{source.Elements()};
   SubscriptValue sourceAt[maxRank];
--- a/lib/Evaluate/constant.cpp	2021-10-02 17:33:29.706776300 -0700
+++ b/lib/Evaluate/constant.cpp	2021-10-02 17:34:52.363465800 -0700
@@ -251,7 +251,7 @@
     return count;
   } else {
     std::size_t copied{0};
-    std::size_t elementBytes{length_ * sizeof(decltype(values_[0]))};
+    std::size_t elementBytes{static_cast<size_t>(length_ * sizeof(decltype(values_[0])))};
     ConstantSubscripts sourceSubscripts{source.lbounds()};
     while (copied < count) {
       auto *dest{&values_.at(SubscriptsToOffset(resultSubscripts) * length_)};
--- a/runtime/transformational.cpp	2021-10-02 18:11:08.727836900 -0700
+++ b/runtime/transformational.cpp	2021-10-02 18:11:56.743494500 -0700
@@ -183,7 +183,7 @@
   SubscriptValue lb{sourceDim.LowerBound()};
   for (SubscriptValue j{0}; j < extent; ++j) {
     SubscriptValue resultAt{1 + j};
-    SubscriptValue sourceAt{lb + (j + shift) % extent};
+    SubscriptValue sourceAt{static_cast<SubscriptValue>(lb + (j + shift) % extent)};
     if (sourceAt < 0) {
       sourceAt += extent;
     }
@@ -281,7 +281,7 @@
   }
   SubscriptValue lb{source.GetDimension(0).LowerBound()};
   for (SubscriptValue j{1}; j <= extent; ++j) {
-    SubscriptValue sourceAt{lb + j - 1 + shift};
+    SubscriptValue sourceAt{static_cast<SubscriptValue>(lb + j - 1 + shift)};
     if (sourceAt >= lb && sourceAt < lb + extent) {
       CopyElement(result, &j, source, &sourceAt, terminator);
     }
