# Contributor: Mehdi Chinoune <mehdi.chinoune@hotmail.com>

_realname=qt6-multimedia
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-debug"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-ffmpeg"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-wmf")
_qtver=6.6.0
pkgver=${_qtver/-/}
pkgrel=1
arch=(any)
mingw_arch=('mingw64' 'ucrt64' 'clang64' 'clangarm64')
url='https://www.qt.io'
license=(spdx:LGPL-3.0-only WITH spdx:Qt-GPL-exception-1.0 AND spdx:BSD-3-Clause AND spdx:GFDL-1.3-no-invariants-only AND spdx:GPL-2.0-only AND spdx:GPL-3.0-only)
pkgdesc='Classes for audio, video, radio and camera functionality (mingw-w64)'
makedepends=("${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-ninja"
             "${MINGW_PACKAGE_PREFIX}-qt6-declarative"
             "${MINGW_PACKAGE_PREFIX}-qt6-shadertools"
             "${MINGW_PACKAGE_PREFIX}-qt6-quick3d"
             "${MINGW_PACKAGE_PREFIX}-ffmpeg"
            #  "${MINGW_PACKAGE_PREFIX}-pulseaudio"
             "rsync")
_pkgfn="${_realname/6-/}-everywhere-src-${_qtver}"
source=("https://download.qt.io/official_releases/qt/${pkgver%.*}/${_qtver}/submodules/${_pkgfn}.tar.xz"
        001-export-some-constexpr-variables.patch)
sha256sums=('ba4b236ca3ec118841b7f5ba87797e24a8c5cbef9ba973fe219fbfc310d38782'
            'e1694338779eb499341618c62d11f832f2b7f1f90c8a20345932530a61203105')

prepare() {
  cd "${srcdir}"/${_pkgfn}
  if [[ ${MINGW_PACKAGE_PREFIX} != *-clang-* ]]; then
    patch -p1 -i "${srcdir}"/001-export-some-constexpr-variables.patch
  fi
}

build() {
  mkdir -p build-${MSYSTEM} && cd build-${MSYSTEM}

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  ${MINGW_PREFIX}/bin/cmake \
    --log-level=STATUS \
    -GNinja \
    -DCMAKE_BUILD_TYPE=RelWithDebInfo \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    -DFEATURE_wmf=ON \
    -DFEATURE_gstreamer=OFF \
    ../${_pkgfn}

  ${MINGW_PREFIX}/bin/cmake --build .
}

package_qt6-multimedia() {
  depends=("${MINGW_PACKAGE_PREFIX}-qt6-base"
           "${MINGW_PACKAGE_PREFIX}-qt6-shadertools"
           "${MINGW_PACKAGE_PREFIX}-qt6-multimedia-ffmpeg")
  optdepends=("${MINGW_PACKAGE_PREFIX}-qt6-declarative"
              "${MINGW_PACKAGE_PREFIX}-qt6-quick3d"
              "${MINGW_PACKAGE_PREFIX}-qt6-multimedia-wmf")
  groups=("${MINGW_PACKAGE_PREFIX}-qt6")

  DESTDIR=${pkgdir} ${MINGW_PREFIX}/bin/cmake --install build-${MSYSTEM}

  # Seperate debug-info files
  rsync -armR --remove-source-files --include="*/" --include="*.debug" --exclude="*" --prune-empty-dirs ${pkgdir}/.${MINGW_PREFIX} ${srcdir}/${MSYSTEM}-debug/

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_realname}
  install -Dm644 $_pkgfn/LICENSES/* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_realname}

  # Split plugins
  rm -r "${pkgdir}${MINGW_PREFIX}/share/qt6/plugins"
  rm "${pkgdir}${MINGW_PREFIX}"/lib/cmake/Qt6Multimedia/Qt6Q{FFmpeg,Windows}MediaPlugin*
}

package_qt6-multimedia-debug() {
  depends=("${MINGW_PACKAGE_PREFIX}-qt6-base-debug"
           "${MINGW_PACKAGE_PREFIX}-qt6-shadertools-debug"
           "${MINGW_PACKAGE_PREFIX}-${_realname}")
  groups=("${MINGW_PACKAGE_PREFIX}-qt6-debug")
  options=('!strip')

  cp -rf ${srcdir}/${MSYSTEM}-debug${MINGW_PREFIX} "${pkgdir}"/
}

package_qt6-multimedia-ffmpeg() {
  pkgdesc='FFMpeg backend for qt6-multimedia'
  depends=("${MINGW_PACKAGE_PREFIX}-ffmpeg"
           "${MINGW_PACKAGE_PREFIX}-${_realname}")

  DESTDIR="$pkgdir" ${MINGW_PREFIX}/bin/cmake --install build-${MSYSTEM}/src/plugins/multimedia/ffmpeg

  find "${pkgdir}${MINGW_PREFIX}" -type f -name '*.debug' -delete
}

package_qt6-multimedia-wmf() {
  pkgdesc='Windows Media Foundation backend for qt6-multimedia'
  depends=("${MINGW_PACKAGE_PREFIX}-${_realname}")

  DESTDIR="$pkgdir" ${MINGW_PREFIX}/bin/cmake --install build-${MSYSTEM}/src/plugins/multimedia/windows

  find "${pkgdir}${MINGW_PREFIX}" -type f -name '*.debug' -delete
}

# template start; name=mingw-w64-splitpkg-wrappers; version=1.0;
# vim: set ft=bash :

# generate wrappers
for _name in "${pkgname[@]}"; do
  _short="package_${_name#${MINGW_PACKAGE_PREFIX}-}"
  _func="$(declare -f "${_short}")"
  eval "${_func/#${_short}/package_${_name}}"
done
# template end;
