# Maintainer: Alexey Pavlov <alexpux@gmail.com>
# Maintainer: Ray Donnelly <mingw.android@gmail.com>

# Use the right mkspecs file
if [[ ${MINGW_PACKAGE_PREFIX} == *-clang-* ]]; then
  _platform=win32-clang-g++
else
  _platform=win32-g++
fi

_realname=qt5
pkgbase="mingw-w64-${_realname}"
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}-3d"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-activeqt"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-base"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-charts"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-connectivity"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-datavis3d"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-declarative"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-gamepad"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-graphicaleffects"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-imageformats"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-location"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-lottie"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-multimedia"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-networkauth"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-purchasing"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-quick3d"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-quickcontrols"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-quickcontrols2"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-quicktimeline"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-remoteobjects"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-script"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-scxml"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-sensors"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-serialbus"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-serialport"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-speech"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-svg"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-tools"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-translations"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-virtualkeyboard"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-webchannel"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-webglplugin"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-websockets"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-webview"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-winextras"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-xmlpatterns")
_ver_base=5.15.2
pkgver=${_ver_base//-/}
pkgrel=1
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clang32')
pkgdesc="A cross-platform application and UI framework (mingw-w64)"
url='https://www.qt.io/'
license=('GPL3' 'LGPL' 'FDL' 'custom')
makedepends=("${MINGW_PACKAGE_PREFIX}-clang"
             "${MINGW_PACKAGE_PREFIX}-clang-tools-extra"
             "${MINGW_PACKAGE_PREFIX}-fxc2"
             "${MINGW_PACKAGE_PREFIX}-pkg-config"
             "${MINGW_PACKAGE_PREFIX}-python"
             "${MINGW_PACKAGE_PREFIX}-make"
             "${MINGW_PACKAGE_PREFIX}-ninja"
             "${MINGW_PACKAGE_PREFIX}-z3"
             "${MINGW_PACKAGE_PREFIX}-assimp"
             "${MINGW_PACKAGE_PREFIX}-double-conversion"
             "${MINGW_PACKAGE_PREFIX}-dbus"
             "${MINGW_PACKAGE_PREFIX}-fontconfig"
             "${MINGW_PACKAGE_PREFIX}-freetype"
             "${MINGW_PACKAGE_PREFIX}-harfbuzz"
             "${MINGW_PACKAGE_PREFIX}-jasper"
             "${MINGW_PACKAGE_PREFIX}-libjpeg"
             "${MINGW_PACKAGE_PREFIX}-libmng"
             "${MINGW_PACKAGE_PREFIX}-libpng"
             "${MINGW_PACKAGE_PREFIX}-libtiff"
             "${MINGW_PACKAGE_PREFIX}-libxml2"
             "${MINGW_PACKAGE_PREFIX}-libxslt"
             "${MINGW_PACKAGE_PREFIX}-libwebp"
             "${MINGW_PACKAGE_PREFIX}-openssl"
             $([[ ${MSYSTEM} == CLANG32 ]] || echo "${MINGW_PACKAGE_PREFIX}-openal")
             "${MINGW_PACKAGE_PREFIX}-pcre2"
             "${MINGW_PACKAGE_PREFIX}-sqlite3"
             $([[ ${MINGW_PACKAGE_PREFIX} == *-clang-* ]] || echo "${MINGW_PACKAGE_PREFIX}-vulkan")
             "${MINGW_PACKAGE_PREFIX}-xpm-nox"
             "${MINGW_PACKAGE_PREFIX}-zlib"
             "${MINGW_PACKAGE_PREFIX}-icu"
             "${MINGW_PACKAGE_PREFIX}-icu-debug-libs"
             "${MINGW_PACKAGE_PREFIX}-libmariadbclient"
             $([[ ${MINGW_PACKAGE_PREFIX} == *-clang-* ]] || echo "${MINGW_PACKAGE_PREFIX}-firebird2")
             $([[ ${MINGW_PACKAGE_PREFIX} == *-clang-* ]] || echo "${MINGW_PACKAGE_PREFIX}-postgresql") )
groups=("${MINGW_PACKAGE_PREFIX}-qt5")
options=('!strip' 'staticlibs' 'ccache')
_pkgfqn="qt-everywhere-src-${_ver_base}"
noextract=(${_pkgfqn}.tar.xz)
source=(https://download.qt.io/official_releases/qt/${pkgver%.*}/${_ver_base}/single/${_pkgfqn}.tar.xz
        0001-adjust-qmake-conf-mingw.patch
        0002-qt-5.8.0-fix-sql-libraries-mingw.patch
        0003-qt-5.8.0-configure-gcc-before-clang.patch
        0004-fix-linking-again-different-static-libs.patch
        0005-qt-5.3.0-win_flex-replace.patch
        0006-qt-5.3.0-win32-g-Enable-static-builds.patch
        0007-qt-5.3.0-win32-g-Add-QMAKE_EXTENSION_IMPORTLIB-defaulting-to-.patch
        0008-qt-5.8.0-mingw-dbus-and-pkg-config.patch
        0009-qt-5.8.0-win32-g++-use-qpa-genericunixfontdatabase.patch
        0010-qt-5.8.0-force-using-make-on-msys.patch
        0011-qt-5.8.0-Revert-untangle-use-of-system-vs.-shell-path-list-se.patch
        0012-qt-5.8.0-Revert-fix-quoting-and-path-separators-in-qtPrepareT.patch
        0013-qt-5.3.1-workaround-ansidecl-h-PTR-define-conflict.patch
        0014-qt-5.3.2-dont-add-resource-files-to-qmake-libs.patch
        0015-qt-5.3.2-win32-qt5-static-cmake-link-ws2_32-and--static.patch
        0016-qt-5.4.2-win32-Avoid-platformNativeInterface-segfaults-with-minimal-platform.patch
        0017-qt-5.8.0-win32-do-not-use-fontconfig.patch
        0018-win32-dont-need-flatpack-theme.patch
        0019-qt-5.11-static_icu.patch
        0020-fix-and-enable-iconv-codec.patch
        0021-enable-mingw-schannel-alpn.patch
        0022-qt-5.8.0-cast-errors.patch
        0023-schannel-fix-incomplete-downloads.patch
        0101-qt-5.3.0-fix-examples-building.patch
        0102-qtdeclarative-disable-dx12.patch
        0201-qt-5.11-mingw-fix-link-qdoc-with-clang.patch
        0202-qt5-windeployqt-fixes.patch
        0203-ugly-hack-disable-qdoc-build.patch
        0301-fix-static-build-big-resources.patch
        0302-fix-assimp-not-found.patch
        0401-qt-5.9.1-disable-qtlocation-mapboxgl-plugin.patch
        0501-qt-5.3.0-fix-examples-building.patch)
# Some patch notes :
#0001-0099 -> qtbase
#0101-0199 -> qtdeclarative
#0201-0299 -> qttools
#0301-0399 -> qtquick3d
#0401-0499 -> qtlocation
#0501-0599 -> qtsensors

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying ${_patch}"
    patch -Nbp1 -i "${srcdir}/${_patch}"
  done
}

prepare() {
  [[ -d ${srcdir}/${_pkgfqn} ]] && rm -rf ${srcdir}/${_pkgfqn}
  tar -xJf ${srcdir}/${_pkgfqn}.tar.xz -C ${srcdir} --exclude=${_pkgfqn}/{qtandroidextras,qtmacextras,qtwayland,qtwebengine,qtx11extras} || true

  cd ${srcdir}/${_pkgfqn}

  # MSYS2 gperf cannot handle \r\n.
  find . -name "*.gperf" -exec dos2unix "{}" \;

  cd qtbase
  apply_patch_with_msg \
    0001-adjust-qmake-conf-mingw.patch \
    0002-qt-5.8.0-fix-sql-libraries-mingw.patch \
    0003-qt-5.8.0-configure-gcc-before-clang.patch \
    0004-fix-linking-again-different-static-libs.patch \
    0005-qt-5.3.0-win_flex-replace.patch \
    0006-qt-5.3.0-win32-g-Enable-static-builds.patch \
    0007-qt-5.3.0-win32-g-Add-QMAKE_EXTENSION_IMPORTLIB-defaulting-to-.patch \
    0008-qt-5.8.0-mingw-dbus-and-pkg-config.patch \
    0009-qt-5.8.0-win32-g++-use-qpa-genericunixfontdatabase.patch \
    0010-qt-5.8.0-force-using-make-on-msys.patch \
    0011-qt-5.8.0-Revert-untangle-use-of-system-vs.-shell-path-list-se.patch \
    0012-qt-5.8.0-Revert-fix-quoting-and-path-separators-in-qtPrepareT.patch \
    0013-qt-5.3.1-workaround-ansidecl-h-PTR-define-conflict.patch \
    0014-qt-5.3.2-dont-add-resource-files-to-qmake-libs.patch \
    0015-qt-5.3.2-win32-qt5-static-cmake-link-ws2_32-and--static.patch \
    0016-qt-5.4.2-win32-Avoid-platformNativeInterface-segfaults-with-minimal-platform.patch \
    0017-qt-5.8.0-win32-do-not-use-fontconfig.patch \
    0018-win32-dont-need-flatpack-theme.patch \
    0019-qt-5.11-static_icu.patch \
    0020-fix-and-enable-iconv-codec.patch \
    0021-enable-mingw-schannel-alpn.patch \
    0022-qt-5.8.0-cast-errors.patch \
    0023-schannel-fix-incomplete-downloads.patch

  cd ../qtdeclarative
  apply_patch_with_msg \
    0101-qt-5.3.0-fix-examples-building.patch \
    0102-qtdeclarative-disable-dx12.patch

  cd ../qttools
  apply_patch_with_msg \
    0201-qt-5.11-mingw-fix-link-qdoc-with-clang.patch \
    0202-qt5-windeployqt-fixes.patch \
    0203-ugly-hack-disable-qdoc-build.patch

  cd ../qtquick3d
  apply_patch_with_msg \
    0301-fix-static-build-big-resources.patch \
    0302-fix-assimp-not-found.patch

  cd ../qtlocation
  apply_patch_with_msg \
    0401-qt-5.9.1-disable-qtlocation-mapboxgl-plugin.patch

  cd ../qtsensors
  apply_patch_with_msg \
    0501-qt-5.3.0-fix-examples-building.patch

  cd ..
  local _ARCH_TUNE=
  local _HARD_FLAGS=
  case ${MINGW_CHOST} in
    i686*)
      _ARCH_TUNE="-march=i686 -mtune=core2"
      _HARD_FLAGS="-Wl,--dynamicbase,--nxcompat,--no-seh"
    ;;
    x86_64*)
      _ARCH_TUNE="-march=nocona -mtune=core2"
      _HARD_FLAGS="-Wl,--dynamicbase,--high-entropy-va,--nxcompat,--default-image-base-high"
    ;;
  esac

  BIGOBJ_FLAGS="-Wa,-mbig-obj"

  # Append these ones ..
  sed -i "s|^QMAKE_CFLAGS .*= \(.*\)$|QMAKE_CFLAGS            = \1 ${_ARCH_TUNE} ${BIGOBJ_FLAGS}|g" qtbase/mkspecs/${_platform}/qmake.conf
  sed -i "s|^QMAKE_LFLAGS           +=\(.*\)$|QMAKE_LFLAGS            += \1 ${_HARD_FLAGS}|g" qtbase/mkspecs/common/gcc-base.conf

  # To keep the build folder name quite small (PATH_MAX limit)
  # the source folder (long) is renamed to $MSYSTEM (MINGW64, MINGW32 ...)
  cd ${srcdir}
  [[ -d ${MSYSTEM} ]] && rm -rf ${MSYSTEM}
  sleep 5
  mv ${_pkgfqn} ${MSYSTEM}
}

build() {
  local _buildpkgdir=${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5/${MINGW_PREFIX}
  mkdir -p ${_buildpkgdir}
  local QTDIR_WIN=$(cygpath -am ${_buildpkgdir})

  cd ${MSYSTEM}

  local -a _sql_config
  if [[ ${MINGW_PACKAGE_PREFIX} != *-clang-* ]]; then
    _sql_config+=("-plugin-sql-ibase")
    _sql_config+=("-plugin-sql-psql")
  fi
  _sql_config+=("-plugin-sql-mysql")
  _sql_config+=("-plugin-sql-odbc")

  # https://github.com/msys2/MSYS2-packages/issues/2282
  export MSYS2_ARG_CONV_EXCL='--foreign-types='

  # Qt manages the compiler flags for release / debug configs separately, so having our own values (-O2) is harmful here ..
  unset CFLAGS
  unset CXXFLAGS
  unset LDFLAGS
  unset QMAKESPEC
  unset XQMAKESPEC
  unset QMAKEPATH
  unset QMAKEFEATURES

  export PATH="${srcdir}/${MSYSTEM}/qtbase/bin:${srcdir}/${MSYSTEM}/qtbase/lib:${PATH}"
  export LLVM_INSTALL_DIR=${MINGW_PREFIX}
  export VULKAN_SDK=${MINGW_PREFIX}

  ./configure.bat \
    -prefix ${QTDIR_WIN} \
    -datadir ${QTDIR_WIN}/share/qt5 \
    -archdatadir ${QTDIR_WIN}/share/qt5 \
    -nomake examples \
    -nomake tests \
    -opensource \
    -confirm-license \
    -platform ${_platform} \
    -shared \
    -make-tool make \
    -I${MINGW_PREFIX}/include/mariadb \
    -opengl desktop \
    -dbus \
    -fontconfig \
    -icu \
    -jasper \
    -openssl \
    -system-assimp \
    -system-doubleconversion \
    -system-freetype \
    -system-harfbuzz \
    -system-libjpeg \
    -system-libpng \
    -system-pcre \
    -system-sqlite \
    -system-tiff \
    -system-webp \
    -system-zlib \
    -no-gstreamer \
    -no-iconv \
    -no-mng \
    -no-wmf \
    "${_sql_config[@]}"

  make
}

check() {
  cd ${MSYSTEM}
  make check -j1 -k
}

package_qt5-3d() {
  _component=qt5-3d
  pkgdesc="C++ and QML APIs for easy inclusion of 3D graphics (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative"
           "${MINGW_PACKAGE_PREFIX}-assimp")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-activeqt() {
  _component=qt5-activeqt
  pkgdesc="Qt5 ActiveQt Module - ActiveX components (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-base() {
  _component=qt5-base
  pkgdesc="A cross-platform application and UI framework (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-double-conversion"
           "${MINGW_PACKAGE_PREFIX}-dbus"
           "${MINGW_PACKAGE_PREFIX}-fontconfig"
           "${MINGW_PACKAGE_PREFIX}-freetype"
           "${MINGW_PACKAGE_PREFIX}-harfbuzz"
           "${MINGW_PACKAGE_PREFIX}-icu"
           "${MINGW_PACKAGE_PREFIX}-libjpeg-turbo"
           "${MINGW_PACKAGE_PREFIX}-libpng"
           "${MINGW_PACKAGE_PREFIX}-openssl"
           "${MINGW_PACKAGE_PREFIX}-pcre2"
           "${MINGW_PACKAGE_PREFIX}-sqlite3"
           $([[ ${MINGW_PACKAGE_PREFIX} == *-clang-* ]] || echo "${MINGW_PACKAGE_PREFIX}-vulkan")
           "${MINGW_PACKAGE_PREFIX}-zlib")
  optdepends=("${MINGW_PACKAGE_PREFIX}-libmariadbclient"
              "${MINGW_PACKAGE_PREFIX}-firebird2"
              "${MINGW_PACKAGE_PREFIX}-postgresql")
  conflicts=("${MINGW_PACKAGE_PREFIX}-qt5"
             "${MINGW_PACKAGE_PREFIX}-qt5-debug"
             "${MINGW_PACKAGE_PREFIX}-qt6-base")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-charts() {
  _component=qt5-charts
  pkgdesc="Provides a set of easy to use chart components (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-base")
  optdepends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-connectivity() {
  _component=qt5-connectivity
  pkgdesc="Provides access to Bluetooth hardware (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-base")
  optdepends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-datavis3d() {
  _component=qt5-datavis3d
  pkgdesc="Qt Data Visualization module (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-base")
  optdepends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-declarative() {
  _component=qt5-declarative
  pkgdesc="Classes for QML and JavaScript languages (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-base")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-gamepad() {
  _component=qt5-gamepad
  pkgdesc="Adds support for getting events from gamepad devices (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-base")
  optdepends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-graphicaleffects() {
  _component=qt5-graphicaleffects
  pkgdesc="Graphical effects for use with Qt Quick 2 (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;
}

package_qt5-imageformats() {
  _component=qt5-imageformats
  pkgdesc="Plugins for additional image formats: TIFF, MNG, TGA, WBMP (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-base"
           "${MINGW_PACKAGE_PREFIX}-jasper"
           "${MINGW_PACKAGE_PREFIX}-libmng"
           "${MINGW_PACKAGE_PREFIX}-libtiff"
           "${MINGW_PACKAGE_PREFIX}-libwebp")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;
}

package_qt5-location() {
  _component=qt5-location
  pkgdesc="Provides access to position, satellite and area monitoring classes (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-lottie() {
  _component=qt5-lottie
  pkgdesc="A family of player software for a certain json-based file format for describing 2d vector graphics animations (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-base")
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;
}

package_qt5-multimedia() {
  _component=qt5-multimedia
  pkgdesc="Classes for audio, video, radio and camera functionality (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-base"
           $([[ ${MSYSTEM} == CLANG32 ]] || echo "${MINGW_PACKAGE_PREFIX}-openal")
           )
  optdepends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-networkauth() {
  _component=qt5-networkauth
  pkgdesc="Network authentication module (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-base")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-purchasing() {
  _component=qt5-purchasing
  pkgdesc="Qt In-App Purchasing API (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-base")
  optdepends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-quick3d() {
  _component=qt5-quick3d
  pkgdesc="Qt module and API for defining 3D content in Qt Quick (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative")
  optdepends=("${MINGW_PACKAGE_PREFIX}-assimp")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-quickcontrols() {
  _component=qt5-quickcontrols
  pkgdesc="Reusable Qt Quick based UI controls to create classic desktop-style user interfaces (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;
}

package_qt5-quickcontrols2() {
  _component=qt5-quickcontrols2
  pkgdesc="Next generation user interface controls based on Qt Quick (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative")
  optdepends=("${MINGW_PACKAGE_PREFIX}-qt5-graphicaleffects")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-quicktimeline() {
  _component=qt5-quicktimeline
  pkgdesc="Qt module for keyframe-based timeline construction (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;
}

package_qt5-remoteobjects() {
  _component=qt5-remoteobjects
  pkgdesc="Inter-process communication (IPC) module developed for Qt (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-base")
  optdepends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-script() {
  _component=qt5-script
  pkgdesc="Classes for making Qt applications scriptable. Provided for Qt 4.x compatibility (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-base")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-scxml() {
  _component=qt5-scxml
  pkgdesc="Static and runtime integration of SCXML models into Qt code (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-sensors() {
  _component=qt5-sensors
  pkgdesc="Provides access to sensor hardware and motion gesture recognition (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-base")
  optdepends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-serialbus() {
  _component=qt5-serialbus
  pkgdesc="Qt module for general purpose serial bus access (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-serialport")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-serialport() {
  _component=qt5-serialport
  pkgdesc="Provides access to hardware and virtual serial ports (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-base")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-speech() {
  _component=qt5-speech
  pkgdesc="Qt module to make text to speech and speech recognition easy (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-multimedia")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-svg() {
  _component=qt5-svg
  pkgdesc="Classes for displaying the contents of SVG files (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-base")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-tools() {
  _component=qt5-tools
  pkgdesc="A cross-platform application and UI framework (Development Tools, QtHelp) (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-base")
  optdepends=("${MINGW_PACKAGE_PREFIX}-clang")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-translations() {
  _component=qt5-translations
  pkgdesc="A cross-platform application and UI framework (Translations) (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-base")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;
}

package_qt5-virtualkeyboard() {
  _component=qt5-virtualkeyboard
  pkgdesc="Virtual keyboard framework (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative"
           "${MINGW_PACKAGE_PREFIX}-qt5-svg")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-webchannel() {
  _component=qt5-webchannel
  pkgdesc="Provides access to QObject or QML objects from HTML clients for seamless integration of Qt applications with HTML/JavaScript clients (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-webglplugin() {
  _component=qt5-webglplugin
  pkgdesc="QPA plugin for running an application via a browser using streamed WebGL commands (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative"
           "${MINGW_PACKAGE_PREFIX}-qt5-websockets")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;
}

package_qt5-websockets() {
  _component=qt5-websockets
  pkgdesc="Provides WebSocket communication compliant with RFC 6455 (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-base")
  optdepends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-webview() {
  _component=qt5-webview
  pkgdesc="Provides a way to display web content in a QML application (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-webchannel"
           "${MINGW_PACKAGE_PREFIX}-qt5-libxslt")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-winextras() {
  _component=qt5-winextras
  pkgdesc="Provides platform-specific APIs for Windows (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-base")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

package_qt5-xmlpatterns() {
  _component=qt5-xmlpatterns
  pkgdesc="Support for XPath, XQuery, XSLT and XML schema validation (mingw-w64)"
  depends=("${MINGW_PACKAGE_PREFIX}-qt5-base")
  optdepends=("${MINGW_PACKAGE_PREFIX}-qt5-declarative")

  cd ${MSYSTEM}/${_component/5-/}

  make install
  cd ${pkgdir}/..
  rm -r ${MINGW_PACKAGE_PREFIX}-${_component}
  mv ${MINGW_PACKAGE_PREFIX}-qt5 ${MINGW_PACKAGE_PREFIX}-${_component}

  install -d "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}
  install -Dm644 $srcdir/${MSYSTEM}/${_component/5-/}/LICENSE* -t "$pkgdir${MINGW_PREFIX}"/share/licenses/${_component}

  # Remove dlls from lib/
  rm -f "${pkgdir}${MINGW_PREFIX}/lib"/*.dll

  # Remove *.orig files
  find "${pkgdir}${MINGW_PREFIX}" -type f -name "*.orig" -exec rm -f {} \;

  # Fix paths in *.pri, *.prl and *.pc files
  #   $(cygpath -m ${MINGW_PREFIX}) -> $(cygpath -m ${pkgdir}${MINGW_PREFIX})
  local PREFIX_WIN=$(cygpath -m ${MINGW_PREFIX})
  local PKGDIR_QT_PREFIX_WIN=$(cygpath -m ${pkgdirbase}/${MINGW_PACKAGE_PREFIX}-qt5${MINGW_PREFIX})
  local FAKE_PREFIX_FOR_REPLACE="@@QT_REAL_PREFIX/dir@@"

  find "${pkgdir}${MINGW_PREFIX}/share/qt5" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib" -type f \( -name '*.pri' -o -name '*.prl' \) \
      -exec sed -i -e "s|${PREFIX_WIN}|${FAKE_PREFIX_FOR_REPLACE}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;

  find "${pkgdir}${MINGW_PREFIX}/lib/pkgconfig" -type f -name '*.pc' \
      -exec sed -i -e "s|${PKGDIR_QT_PREFIX_WIN}|${MINGW_PREFIX}|g" {} \;
}

# generate wrappers
for _name in "${pkgname[@]}"; do
  _short="package_${_name#${MINGW_PACKAGE_PREFIX}-}"
  _func="$(declare -f "${_short}")"
  eval "${_func/#${_short}/package_${_name}}"
done
# template end;

sha256sums=('3a530d1b243b5dec00bc54937455471aaa3e56849d2593edb8ded07228202240'
            'f7dcfedfb25777c22211208084fed8b62f03ba9c5d5ce387682aeed10f79a654'
            'e0a535278057f42e43952405e567c23cc493ef6badeeb3bbce0154953cd545a5'
            'e7252bdc92fa75f067e4beafbf3c844fca3a4bd16d14ac5344256f022a9214d5'
            '02a3b24c02a6797b706582198ab1177648c2653e8870dcdddc5856d6cd629d49'
            '013401295022dbad73df0355124758d337da71b99253461bb84bc7c9320e27e6'
            '61cb036d39a12abc5f98fc2afdc41694471413171e79debd3cd5f464d74dad32'
            '1ca4be5aefe731af2c9229ed97e8c6231d735a64c655768f6ef677a932ce2019'
            '0fb18899437e86bdbea1750a892b18bef76bdf9b85e504afcb65e7f49f421ff0'
            '3a8de25edb2a4643583ad5fa2743475b60fffad931be25314b4067be2413bca4'
            '49eee16b318f1ac8d5ddf45f294b9f88e05c2f7f7ad2808f281961200d61c6cf'
            '9fafed377f435493dd72b1b8f49ca25580f5b3d4100528a5c4ca18d10627dfd7'
            '69f7b27d7c23731e73500e058ec69e7504740d102244f15959977355814de9c5'
            '41acd8702a33a1d2f5e93c7e940c41aaa335aa728bc5562e799ef6077aa00433'
            '274d24f9cd84a7fae5e2c5836c8a3a6108ef2c04c1b8c8e97a11b70975b98ddf'
            'ce0c7e6dcc5af61c7d7db2bbe8921ab3861fd9380be9af62933f8d29cb577d53'
            '58556b73b3fcbddd5658832f012760e3a86637bdd9e6324596b6ecd69981a985'
            '4b2f54549743864e831e57d45269a7d84182d68cbc5f5277daa29167c046ae52'
            '606e6e4888e2efc8e971258ec3cdf43b32c6dac9bdba22ed89ca9571adeb365d'
            'c88c558f3388ab2fa7df57e403324e92abdfbdf72a87c849af337720f52baa8b'
            'c9bdd0ce5f30c6eb940675e45e14179bbab41b743e88cec4679c20dc2d8c9cbf'
            'fec3f368973c004c3fccea4e9d816eb42c02dcb2355714d5c833c8b74b428f11'
            '5397862593005d9af4b218396c4a3975b0e0f039992562ffef4672c0738c4df0'
            '961090b78b8f586a4d9819b45dcce3db3d54bede3d69ced098e9feaeaab936aa'
            '3363a009bbc3eb3f3a128988a3826859bf6259e0fd8150fda608ac99f5d28ea7'
            '0640935893e8c4f0801f3f976a8b5fbcfa94c9d929488fef01e88ad6c64edff1'
            'aff15370d18498ee1cc73f027b3fc76cc899b3cd1f79c3ed3bbda50b927dec33'
            '5009ef5c9812f6f6ba6d69d6b2a90b5caa43cf0ef46bf36ac507c672e697e5a1'
            '1927c71175f758914abc485506bb162f3eac5e0816a00be66a78562b168095f0'
            'c0b2ed679d9938e10a0791f0cbb6242880d9d852c4879064613d6831e0e9b079'
            'd304e4a30d4ada18baa368b21b316fe88206a4769e10afd4bcc0792912efb4b1'
            '8601d8d67647ac2c3a4043171ff29ef18ae5ba9d92cc72f529582c6bfd3658e1'
            'a5d95118576d456f8ff94eeda6740536766177b339ea2b09edde9f9f332f0e41')
