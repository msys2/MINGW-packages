From 0783931befb982b3a7bf75ba2ccb37b0a9f77c62 Mon Sep 17 00:00:00 2001
From: Halfdan Ingvarsson <halfdan@sidefx.com>
Date: Mon, 3 Mar 2014 20:51:33 -0500
Subject: [PATCH 2/5] Modern compilers don't care much for the 'register'
 keyword, and C++11 has deprecated it. Removing it to reduce compiler warnings
 when building in C++11 mode.

---
 IlmBase/Half/half.cpp       | 6 +++---
 IlmBase/Half/half.h         | 4 ++--
 IlmBase/Imath/ImathMatrix.h | 8 ++++----
 3 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/IlmBase/Half/half.cpp b/IlmBase/Half/half.cpp
index 609aaa1..09a50aa 100644
--- a/IlmBase/Half/half.cpp
+++ b/IlmBase/Half/half.cpp
@@ -94,9 +94,9 @@ half::convert (int i)
     // of float and half (127 versus 15).
     //
 
-    register int s =  (i >> 16) & 0x00008000;
-    register int e = ((i >> 23) & 0x000000ff) - (127 - 15);
-    register int m =   i        & 0x007fffff;
+    int s =  (i >> 16) & 0x00008000;
+    int e = ((i >> 23) & 0x000000ff) - (127 - 15);
+    int m =   i        & 0x007fffff;
 
     //
     // Now reassemble s, e and m into a half:
diff --git a/IlmBase/Half/half.h b/IlmBase/Half/half.h
index f78e4f6..da418d6 100644
--- a/IlmBase/Half/half.h
+++ b/IlmBase/Half/half.h
@@ -459,7 +459,7 @@ half::half (float f)
 	// to do the float-to-half conversion.
 	//
 
-	register int e = (x.i >> 23) & 0x000001ff;
+	int e = (x.i >> 23) & 0x000001ff;
 
 	e = _eLut[e];
 
@@ -470,7 +470,7 @@ half::half (float f)
 	    // bits and combine it with the sign and exponent.
 	    //
 
-	    register int m = x.i & 0x007fffff;
+	    int m = x.i & 0x007fffff;
 	    _h = e + ((m + 0x00000fff + ((m >> 13) & 1)) >> 13);
 	}
 	else
diff --git a/IlmBase/Imath/ImathMatrix.h b/IlmBase/Imath/ImathMatrix.h
index 3e96c2f..1d7f8dc 100644
--- a/IlmBase/Imath/ImathMatrix.h
+++ b/IlmBase/Imath/ImathMatrix.h
@@ -2527,11 +2527,11 @@ Matrix44<T>::multiply (const Matrix44<T> &a,
                        const Matrix44<T> &b,
                        Matrix44<T> &c)
 {
-    register const T * IMATH_RESTRICT ap = &a.x[0][0];
-    register const T * IMATH_RESTRICT bp = &b.x[0][0];
-    register       T * IMATH_RESTRICT cp = &c.x[0][0];
+    const T * IMATH_RESTRICT ap = &a.x[0][0];
+    const T * IMATH_RESTRICT bp = &b.x[0][0];
+          T * IMATH_RESTRICT cp = &c.x[0][0];
 
-    register T a0, a1, a2, a3;
+    T a0, a1, a2, a3;
 
     a0 = ap[0];
     a1 = ap[1];

From 1925b7f8f54df00d15dd286d8b0020ad3f5741c9 Mon Sep 17 00:00:00 2001
From: Halfdan Ingvarsson <halfdan@sidefx.com>
Date: Mon, 3 Mar 2014 21:42:10 -0500
Subject: [PATCH 3/5] Change IexBaseExc to no longer derive from std::string,
 but instead include it as a member variable. This resolves a problem with
 MSVC 2012 and dllexport-ing template classes.

---
 IlmBase/Iex/IexBaseExc.cpp      | 75 ++++++++++++++++++++++++++++---
 IlmBase/Iex/IexBaseExc.h        | 98 +++++++++++------------------------------
 IlmBase/IexTest/testBaseExc.cpp |  2 +-
 3 files changed, 95 insertions(+), 80 deletions(-)

diff --git a/IlmBase/Iex/IexBaseExc.cpp b/IlmBase/Iex/IexBaseExc.cpp
index 3b2e197..8ecbdf3 100644
--- a/IlmBase/Iex/IexBaseExc.cpp
+++ b/IlmBase/Iex/IexBaseExc.cpp
@@ -75,7 +75,7 @@ stackTracer ()
 
 
 BaseExc::BaseExc (const char* s) throw () :
-    std::string (s? s: ""),
+    _what (s? s: ""),
     _stackTrace (currentStackTracer? currentStackTracer(): "")
 {
     // empty
@@ -83,7 +83,7 @@ BaseExc::BaseExc (const char* s) throw () :
 
 
 BaseExc::BaseExc (const std::string &s) throw () :
-    std::string (s),
+    _what (s),
     _stackTrace (currentStackTracer? currentStackTracer(): "")
 {
     // empty
@@ -91,7 +91,7 @@ BaseExc::BaseExc (const std::string &s) throw () :
 
 
 BaseExc::BaseExc (std::stringstream &s) throw () :
-    std::string (s.str()),
+    _what (s.str()),
     _stackTrace (currentStackTracer? currentStackTracer(): "")
 {
     // empty
@@ -99,7 +99,7 @@ BaseExc::BaseExc (std::stringstream &s) throw () :
 
 
 BaseExc::BaseExc (const BaseExc &be) throw () :
-    std::string (be),
+    _what (be._what),
     _stackTrace (be._stackTrace)
 {
     // empty
@@ -115,24 +115,85 @@ BaseExc::~BaseExc () throw ()
 const char *
 BaseExc::what () const throw ()
 {
-    return c_str();
+    return _what.c_str();
 }
 
 
 BaseExc &
 BaseExc::assign (std::stringstream &s)
 {
-    std::string::assign (s.str());
+    _what.assign (s.str());
     return *this;
 }
 
 BaseExc &
 BaseExc::append (std::stringstream &s)
 {
-    std::string::append (s.str());
+    _what.append (s.str());
     return *this;
 }
 
+//-----------------
+// Inline functions
+//-----------------
+
+const std::string &
+BaseExc::name() const
+{
+	return _what;
+}
+
+BaseExc &
+BaseExc::operator = (std::stringstream &s)
+{
+    return assign (s);
+}
+
+
+BaseExc &
+BaseExc::operator += (std::stringstream &s)
+{
+    return append (s);
+}
+
+
+BaseExc &
+BaseExc::assign (const char *s)
+{
+    _what.assign(s);
+    return *this;
+}
+
+
+BaseExc &
+BaseExc::operator = (const char *s)
+{
+    return assign(s);
+}
+
+
+BaseExc &
+BaseExc::append (const char *s)
+{
+    _what.append(s);
+    return *this;
+}
+
+
+BaseExc &
+BaseExc::operator += (const char *s)
+{
+    return append(s);
+}
+
+
+const std::string &
+BaseExc::stackTrace () const
+{
+    return _stackTrace;
+}
+
+
 IEX_INTERNAL_NAMESPACE_SOURCE_EXIT
 
 
diff --git a/IlmBase/Iex/IexBaseExc.h b/IlmBase/Iex/IexBaseExc.h
index bf016f7..5b30f56 100644
--- a/IlmBase/Iex/IexBaseExc.h
+++ b/IlmBase/Iex/IexBaseExc.h
@@ -57,7 +57,7 @@ IEX_INTERNAL_NAMESPACE_HEADER_ENTER
 // Our most basic exception class
 //-------------------------------
 
-class BaseExc: public std::string, public std::exception
+class IEX_EXPORT BaseExc: public std::exception
 {
   public:
 
@@ -65,29 +65,30 @@ class BaseExc: public std::string, public std::exception
     // Constructors and destructor
     //----------------------------
 
-    IEX_EXPORT BaseExc (const char *s = 0) throw();     // std::string (s)
-    IEX_EXPORT BaseExc (const std::string &s) throw();  // std::string (s)
-    IEX_EXPORT BaseExc (std::stringstream &s) throw();  // std::string (s.str())
+    BaseExc (const char *s = 0) throw();     // std::string (s)
+    BaseExc (const std::string &s) throw();  // std::string (s)
+    BaseExc (std::stringstream &s) throw();  // std::string (s.str())
 
-    IEX_EXPORT BaseExc (const BaseExc &be) throw();
-    IEX_EXPORT virtual ~BaseExc () throw ();
+    BaseExc (const BaseExc &be) throw();
+    virtual ~BaseExc () throw ();
 
     //--------------------------------------------
     // what() method -- e.what() returns e.c_str()
     //--------------------------------------------
 
-    IEX_EXPORT virtual const char * what () const throw ();
+    virtual const char * what () const throw ();
+	const std::string &  name() const;
 
 
     //--------------------------------------------------
     // Convenient methods to change the exception's text
     //--------------------------------------------------
 
-    IEX_EXPORT BaseExc &            assign (std::stringstream &s);	// assign (s.str())
-    IEX_EXPORT BaseExc &            operator = (std::stringstream &s);
+    BaseExc &            assign (std::stringstream &s);	// assign (s.str())
+    BaseExc &            operator = (std::stringstream &s);
 
-    IEX_EXPORT BaseExc &            append (std::stringstream &s);	// append (s.str())
-    IEX_EXPORT BaseExc &            operator += (std::stringstream &s);
+    BaseExc &            append (std::stringstream &s);	// append (s.str())
+    BaseExc &            operator += (std::stringstream &s);
 
 
     //--------------------------------------------------
@@ -95,11 +96,11 @@ class BaseExc: public std::string, public std::exception
     // the definitions above.
     //--------------------------------------------------
 
-    IEX_EXPORT BaseExc &            assign (const char *s);
-    IEX_EXPORT BaseExc &            operator = (const char *s);
+    BaseExc &            assign (const char *s);
+    BaseExc &            operator = (const char *s);
 
-    IEX_EXPORT BaseExc &            append (const char *s);
-    IEX_EXPORT BaseExc &            operator += (const char *s);
+    BaseExc &            append (const char *s);
+    BaseExc &            operator += (const char *s);
 
 
     //--------------------------------------------------
@@ -109,10 +110,18 @@ class BaseExc: public std::string, public std::exception
     // has been installed (see below, setStackTracer()).
     //--------------------------------------------------
 
-    IEX_EXPORT const std::string &  stackTrace () const;
+    const std::string &  stackTrace () const;
 
-  private:
 
+    //--------------------------------------------------
+    // Conversion operators.
+    //--------------------------------------------------
+    operator		const char *() const
+			    { return what(); }
+
+
+  private:
+	std::string						_what;
     std::string                     _stackTrace;
 };
 
@@ -204,61 +213,6 @@ IEX_EXPORT void        setStackTracer (StackTracer stackTracer);
 IEX_EXPORT StackTracer stackTracer ();
 
 
-//-----------------
-// Inline functions
-//-----------------
-
-inline BaseExc &
-BaseExc::operator = (std::stringstream &s)
-{
-    return assign (s);
-}
-
-
-inline BaseExc &
-BaseExc::operator += (std::stringstream &s)
-{
-    return append (s);
-}
-
-
-inline BaseExc &
-BaseExc::assign (const char *s)
-{
-    std::string::assign(s);
-    return *this;
-}
-
-
-inline BaseExc &
-BaseExc::operator = (const char *s)
-{
-    return assign(s);
-}
-
-
-inline BaseExc &
-BaseExc::append (const char *s)
-{
-    std::string::append(s);
-    return *this;
-}
-
-
-inline BaseExc &
-BaseExc::operator += (const char *s)
-{
-    return append(s);
-}
-
-
-inline const std::string &
-BaseExc::stackTrace () const
-{
-    return _stackTrace;
-}
-
-
 IEX_INTERNAL_NAMESPACE_HEADER_EXIT
 
 #endif // INCLUDED_IEXBASEEXC_H
diff --git a/IlmBase/IexTest/testBaseExc.cpp b/IlmBase/IexTest/testBaseExc.cpp
index 6bf208e..905ca5b 100644
--- a/IlmBase/IexTest/testBaseExc.cpp
+++ b/IlmBase/IexTest/testBaseExc.cpp
@@ -188,7 +188,7 @@ test5()
     }
     catch (const IEX_INTERNAL_NAMESPACE::ArgExc &e)
     {
-	assert (e == "ArgExc");
+	assert (std::string(e.what()) == "ArgExc");
     }
 }
 

From fcd81a19d85ea8367a1d59977d038bf4313e9c92 Mon Sep 17 00:00:00 2001
From: Halfdan Ingvarsson <halfdan@sidefx.com>
Date: Tue, 18 Mar 2014 10:06:16 -0400
Subject: [PATCH 5/5] Fixed exports for DLLs and added symbol visibility
 support for DSOs.

---
 IlmBase/CMakeLists.txt              |  4 +++
 IlmBase/Half/half.cpp               |  4 +--
 IlmBase/Half/half.h                 | 14 ++++----
 IlmBase/Half/halfExport.h           | 35 ++++++++++++++------
 IlmBase/Iex/IexBaseExc.cpp          |  7 ++--
 IlmBase/Iex/IexExport.h             | 31 ++++++++++++------
 IlmBase/Iex/IexThrowErrnoExc.h      |  6 ++--
 IlmBase/IexMath/CMakeLists.txt      |  1 +
 IlmBase/IexMath/IexMathExport.h     | 64 +++++++++++++++++++++++++++++++++++++
 IlmBase/IexMath/IexMathFloatExc.h   | 19 +----------
 IlmBase/IlmThread/IlmThreadExport.h | 39 ++++++++++++++++------
 IlmBase/Imath/ImathExport.h         | 38 ++++++++++++++++------
 IlmBase/Imath/ImathMatrixAlgo.cpp   | 34 ++++++++------------
 IlmBase/Imath/ImathMatrixAlgo.h     |  8 ++---
 20 files changed, 250 insertions(+), 112 deletions(-)
 create mode 100644 IlmBase/IexMath/IexMathExport.h

diff --git a/IlmBase/CMakeLists.txt b/IlmBase/CMakeLists.txt
index f275372..55cf549 100644
--- a/IlmBase/CMakeLists.txt
+++ b/IlmBase/CMakeLists.txt
@@ -82,6 +82,10 @@ IF (BUILD_SHARED_LIBS)
   SET (LIB_TYPE SHARED)
   IF (WIN32)
     ADD_DEFINITIONS(-DOPENEXR_DLL)
+  ELSE ()
+    IF (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 4.1)
+      ADD_DEFINITIONS ( -fvisibility=hidden -DPLATFORM_VISIBILITY_AVAILABLE=1 )
+    ENDIF ()
   ENDIF ()
 ENDIF (BUILD_SHARED_LIBS)
 
diff --git a/IlmBase/Half/half.cpp b/IlmBase/Half/half.cpp
index 09a50aa..66cfad8 100644
--- a/IlmBase/Half/half.cpp
+++ b/IlmBase/Half/half.cpp
@@ -53,9 +53,9 @@ using namespace std;
 // Lookup tables for half-to-float and float-to-half conversion
 //-------------------------------------------------------------
 
-HALF_EXPORT const half::uif half::_toFloat[1 << 16] =
+HALF_EXPORT_CONST half::uif half::_toFloat[1 << 16] =
     #include "toFloat.h"
-HALF_EXPORT const unsigned short half::_eLut[1 << 9] =
+HALF_EXPORT_CONST unsigned short half::_eLut[1 << 9] =
     #include "eLut.h"
 
 //-----------------------------------------------
diff --git a/IlmBase/Half/half.h b/IlmBase/Half/half.h
index da418d6..206554e 100644
--- a/IlmBase/Half/half.h
+++ b/IlmBase/Half/half.h
@@ -88,7 +88,7 @@
 #include "halfExport.h"    // for definition of HALF_EXPORT
 #include <iostream>
 
-class half
+class HALF_EXPORT half
 {
   public:
 
@@ -197,8 +197,8 @@ class half
     // Access to the internal representation
     //--------------------------------------
 
-    HALF_EXPORT unsigned short	bits () const;
-    HALF_EXPORT void		setBits (unsigned short bits);
+    unsigned short	bits () const;
+    void		setBits (unsigned short bits);
 
 
   public:
@@ -211,13 +211,13 @@ class half
 
   private:
 
-    HALF_EXPORT static short                  convert (int i);
-    HALF_EXPORT static float                  overflow ();
+    static short                  convert (int i);
+    static float                  overflow ();
 
     unsigned short                            _h;
 
-    HALF_EXPORT static const uif              _toFloat[1 << 16];
-    HALF_EXPORT static const unsigned short   _eLut[1 << 9];
+    static HALF_EXPORT_CONST uif              _toFloat[];
+    static HALF_EXPORT_CONST unsigned short   _eLut[];
 };
 
 
diff --git a/IlmBase/Half/halfExport.h b/IlmBase/Half/halfExport.h
index 3a0c86a..aa8e60c 100644
--- a/IlmBase/Half/halfExport.h
+++ b/IlmBase/Half/halfExport.h
@@ -11,16 +11,33 @@
 //  This copyright notice does not imply publication.
 //
 
-#if defined(OPENEXR_DLL)
-    #if defined(HALF_EXPORTS)
-    #define HALF_EXPORT __declspec(dllexport)
-    #else
-    #define HALF_EXPORT __declspec(dllimport)
+#if defined(_WIN32)
+#  if defined(OPENEXR_DLL)
+#    define PLATFORM_EXPORT_DEFINITION __declspec(dllexport) 
+#    define PLATFORM_IMPORT_DEFINITION __declspec(dllimport)
+#    define PLATFORM_EXPORT_CONST 
+#  else
+#    define PLATFORM_EXPORT_DEFINITION 
+#    define PLATFORM_IMPORT_DEFINITION
+#    define PLATFORM_EXPORT_CONST const
+#  endif
+#else   // linux/macos
+#  if defined(PLATFORM_VISIBILITY_AVAILABLE)
+#    define PLATFORM_EXPORT_DEFINITION __attribute__((visibility("default")))
+#    define PLATFORM_IMPORT_DEFINITION
+#  else
+#    define PLATFORM_EXPORT_DEFINITION 
+#    define PLATFORM_IMPORT_DEFINITION
+#  endif
+#  define PLATFORM_EXPORT_CONST const
     #endif
-    #define HALF_EXPORT_CONST
-#else
-    #define HALF_EXPORT
-    #define HALF_EXPORT_CONST const
+
+#if defined(HALF_EXPORTS)                          // create library
+#  define HALF_EXPORT PLATFORM_EXPORT_DEFINITION
+#  define HALF_EXPORT_CONST PLATFORM_EXPORT_CONST
+#else                                              // use library
+#  define HALF_EXPORT PLATFORM_IMPORT_DEFINITION
+#  define HALF_EXPORT_CONST PLATFORM_EXPORT_CONST
 #endif
 
 #endif // #ifndef HALFEXPORT_H
diff --git a/IlmBase/Iex/IexBaseExc.cpp b/IlmBase/Iex/IexBaseExc.cpp
index 8ecbdf3..5566e7b 100644
--- a/IlmBase/Iex/IexBaseExc.cpp
+++ b/IlmBase/Iex/IexBaseExc.cpp
@@ -44,7 +44,10 @@
 #include "IexBaseExc.h"
 #include "IexMacros.h"
 
-#ifdef PLATFORM_WINDOWS
+#ifdef _WIN32
+  #ifndef WIN32_LEAN_AND_MEAN
+    #define WIN32_LEAN_AND_MEAN
+  #endif
 #include <windows.h>
 #endif
 
@@ -197,7 +200,7 @@ BaseExc::stackTrace () const
 IEX_INTERNAL_NAMESPACE_SOURCE_EXIT
 
 
-#ifdef PLATFORM_WINDOWS
+#ifdef _WIN32
 
 #pragma optimize("", off)
 void
diff --git a/IlmBase/Iex/IexExport.h b/IlmBase/Iex/IexExport.h
index 270c1cf..8dd431e 100644
--- a/IlmBase/Iex/IexExport.h
+++ b/IlmBase/Iex/IexExport.h
@@ -35,16 +35,29 @@
 //
 ///////////////////////////////////////////////////////////////////////////
 
-#if defined(OPENEXR_DLL)
-    #if defined(IEX_EXPORTS)
-    #define IEX_EXPORT __declspec(dllexport)
-    #else
-    #define IEX_EXPORT __declspec(dllimport)
+
+#if defined(_WIN32)
+#  if defined(OPENEXR_DLL)
+#    define IEX_EXPORT_DEFINITION __declspec(dllexport) 
+#    define IEX_IMPORT_DEFINITION __declspec(dllimport)
+#  else
+#    define IEX_EXPORT_DEFINITION 
+#    define IEX_IMPORT_DEFINITION
+#  endif
+#else   // linux/macos
+#  if defined(PLATFORM_VISIBILITY_AVAILABLE)
+#    define IEX_EXPORT_DEFINITION __attribute__((visibility("default")))
+#    define IEX_IMPORT_DEFINITION
+#  else
+#    define IEX_EXPORT_DEFINITION 
+#    define IEX_IMPORT_DEFINITION
+#  endif
     #endif
-    #define IEX_EXPORT_CONST
-#else
-    #define IEX_EXPORT
-    #define IEX_EXPORT_CONST const
+
+#if defined(IEX_EXPORTS)                          // create library
+#  define IEX_EXPORT IEX_EXPORT_DEFINITION
+#else                                              // use library
+#  define IEX_EXPORT IEX_IMPORT_DEFINITION
 #endif
 
 #endif // #ifndef IEXEXPORT_H
diff --git a/IlmBase/Iex/IexThrowErrnoExc.h b/IlmBase/Iex/IexThrowErrnoExc.h
index 224ed2b..ee6f6c4 100644
--- a/IlmBase/Iex/IexThrowErrnoExc.h
+++ b/IlmBase/Iex/IexThrowErrnoExc.h
@@ -88,9 +88,9 @@ IEX_INTERNAL_NAMESPACE_HEADER_ENTER
 //
 //--------------------------------------------------------------------------
 
-IEX_EXPORT void throwErrnoExc(const std::string &txt, int errnum);
-IEX_EXPORT void throwErrnoExc(const std::string &txt);
-IEX_EXPORT void throwErrnoExc();
+void IEX_EXPORT throwErrnoExc(const std::string &txt, int errnum);
+void IEX_EXPORT throwErrnoExc(const std::string &txt);
+void IEX_EXPORT throwErrnoExc();
 
 IEX_INTERNAL_NAMESPACE_HEADER_EXIT
 
diff --git a/IlmBase/IexMath/CMakeLists.txt b/IlmBase/IexMath/CMakeLists.txt
index 9a28c21..15cd819 100644
--- a/IlmBase/IexMath/CMakeLists.txt
+++ b/IlmBase/IexMath/CMakeLists.txt
@@ -19,6 +19,7 @@ INSTALL ( FILES
   IexMathFloatExc.h  
   IexMathFpu.h  
   IexMathIeeeExc.h
+  IexMathExport.h
   DESTINATION
   include/OpenEXR
 )
diff --git a/IlmBase/IexMath/IexMathExport.h b/IlmBase/IexMath/IexMathExport.h
new file mode 100644
index 0000000..dce2486
--- /dev/null
+++ b/IlmBase/IexMath/IexMathExport.h
@@ -0,0 +1,64 @@
+#ifndef IEXMATHEXPORT_H
+#define IEXMATHEXPORT_H
+
+///////////////////////////////////////////////////////////////////////////
+//
+// Copyright (c) 2012, Industrial Light & Magic, a division of Lucas
+// Digital Ltd. LLC
+// 
+// All rights reserved.
+// 
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are
+// met:
+// *       Redistributions of source code must retain the above copyright
+// notice, this list of conditions and the following disclaimer.
+// *       Redistributions in binary form must reproduce the above
+// copyright notice, this list of conditions and the following disclaimer
+// in the documentation and/or other materials provided with the
+// distribution.
+// *       Neither the name of Industrial Light & Magic nor the names of
+// its contributors may be used to endorse or promote products derived
+// from this software without specific prior written permission. 
+// 
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+///////////////////////////////////////////////////////////////////////////
+
+
+#if defined(_WIN32)
+#  if defined(OPENEXR_DLL)
+#    define IEXMATH_EXPORT_DEFINITION __declspec(dllexport) 
+#    define IEXMATH_IMPORT_DEFINITION __declspec(dllimport)
+#  else
+#    define IEXMATH_EXPORT_DEFINITION 
+#    define IEXMATH_IMPORT_DEFINITION
+#  endif
+#else   // linux/macos
+#  if defined(PLATFORM_VISIBILITY_AVAILABLE)
+#    define IEXMATH_EXPORT_DEFINITION __attribute__((visibility("default")))
+#    define IEXMATH_IMPORT_DEFINITION
+#  else
+#    define IEXMATH_EXPORT_DEFINITION 
+#    define IEXMATH_IMPORT_DEFINITION
+#  endif
+#endif
+
+#if defined(IEXMATH_EXPORTS)                          // create library
+#  define IEXMATH_EXPORT IEXMATH_EXPORT_DEFINITION
+#else                                              // use library
+#  define IEXMATH_EXPORT IEXMATH_IMPORT_DEFINITION
+#endif
+
+#endif // #ifndef IEXMATHEXPORT_H
+
diff --git a/IlmBase/IexMath/IexMathFloatExc.h b/IlmBase/IexMath/IexMathFloatExc.h
index 825dba1..1e0277c 100644
--- a/IlmBase/IexMath/IexMathFloatExc.h
+++ b/IlmBase/IexMath/IexMathFloatExc.h
@@ -37,26 +37,9 @@
 #ifndef INCLUDED_IEXMATHFLOATEXC_H
 #define INCLUDED_IEXMATHFLOATEXC_H
 
-#ifndef IEXMATH_EXPORT_H
-#define IEXMATH_EXPORT_H
-
-#if defined(OPENEXR_DLL)
-    #if defined(IEX_EXPORTS)
-    #define IEXMATH_EXPORT __declspec(dllexport)
-    #else
-    #define IEXMATH_EXPORT __declspec(dllimport)
-    #endif
-    #define IEXMATH_EXPORT_CONST
-#else
-    #define IEXMATH_EXPORT
-    #define IEXMATH_EXPORT_CONST const
-#endif
-
-#endif
-
+#include "IexMathExport.h"
 #include "IexNamespace.h"
 #include "IexMathExc.h"
-//#include <IexBaseExc.h>
 #include "IexMathIeeeExc.h"
 
 IEX_INTERNAL_NAMESPACE_HEADER_ENTER
diff --git a/IlmBase/IlmThread/IlmThreadExport.h b/IlmBase/IlmThread/IlmThreadExport.h
index 96d2200..5ee5546 100644
--- a/IlmBase/IlmThread/IlmThreadExport.h
+++ b/IlmBase/IlmThread/IlmThreadExport.h
@@ -1,3 +1,6 @@
+#ifndef ILMTHREADEXPORT_H
+#define ILMTHREADEXPORT_H
+
 ///////////////////////////////////////////////////////////////////////////
 //
 // Copyright (c) 2012, Industrial Light & Magic, a division of Lucas
@@ -32,15 +35,31 @@
 //
 ///////////////////////////////////////////////////////////////////////////
 
-#if defined(OPENEXR_DLL)
-    #if defined(ILMTHREAD_EXPORTS)
-	    #define ILMTHREAD_EXPORT __declspec(dllexport)
-        #define ILMTHREAD_EXPORT_CONST extern __declspec(dllexport)
-    #else
-	    #define ILMTHREAD_EXPORT __declspec(dllimport)
-	    #define ILMTHREAD_EXPORT_CONST extern __declspec(dllimport)
+#if defined(_WIN32)
+#  if defined(OPENEXR_DLL)
+#    define ILMTHREAD_EXPORT_DEFINITION __declspec(dllexport) 
+#    define ILMTHREAD_IMPORT_DEFINITION __declspec(dllimport)
+#  else
+#    define ILMTHREAD_EXPORT_DEFINITION 
+#    define ILMTHREAD_IMPORT_DEFINITION
+#  endif
+#else   // linux/macos
+#  if defined(PLATFORM_VISIBILITY_AVAILABLE)
+#    define ILMTHREAD_EXPORT_DEFINITION __attribute__((visibility("default")))
+#    define ILMTHREAD_IMPORT_DEFINITION
+#  else
+#    define ILMTHREAD_EXPORT_DEFINITION 
+#    define ILMTHREAD_IMPORT_DEFINITION
+#  endif
     #endif
-#else
-    #define ILMTHREAD_EXPORT
-    #define ILMTHREAD_EXPORT_CONST extern const
+
+#if defined(ILMTHREAD_EXPORTS)                          // create library
+#  define ILMTHREAD_EXPORT ILMTHREAD_EXPORT_DEFINITION
+#  define ILMTHREAD_EXPORT_VAR ILMTHREAD_EXPORT_DEFINITION extern
+#else                                              // use library
+#  define ILMTHREAD_EXPORT ILMTHREAD_IMPORT_DEFINITION
+#  define ILMTHREAD_EXPORT_VAR ILMTHREAD_IMPORT_DEFINITION extern
 #endif
+
+
+#endif // ILMTHREADEXPORT_H
diff --git a/IlmBase/Imath/ImathExport.h b/IlmBase/Imath/ImathExport.h
index 4357c12..2d595cb 100644
--- a/IlmBase/Imath/ImathExport.h
+++ b/IlmBase/Imath/ImathExport.h
@@ -1,3 +1,6 @@
+#ifndef IMATHEXPORT_H
+#define IMATHEXPORT_H
+
 ///////////////////////////////////////////////////////////////////////////
 //
 // Copyright (c) 2012, Industrial Light & Magic, a division of Lucas
@@ -32,15 +35,30 @@
 //
 ///////////////////////////////////////////////////////////////////////////
 
-#if defined(OPENEXR_DLL)
-    #if defined(IMATH_EXPORTS)
-	    #define IMATH_EXPORT __declspec(dllexport)
-        #define IMATH_EXPORT_CONST extern __declspec(dllexport)
-    #else
-	    #define IMATH_EXPORT __declspec(dllimport)
-	    #define IMATH_EXPORT_CONST extern __declspec(dllimport)
+#if defined(_WIN32)
+#  if defined(OPENEXR_DLL)
+#    define IMATH_EXPORT_DEFINITION __declspec(dllexport) 
+#    define IMATH_IMPORT_DEFINITION __declspec(dllimport)
+#  else
+#    define IMATH_EXPORT_DEFINITION 
+#    define IMATH_IMPORT_DEFINITION
+#  endif
+#else   // linux/macos
+#  if defined(PLATFORM_VISIBILITY_AVAILABLE)
+#    define IMATH_EXPORT_DEFINITION __attribute__((visibility("default")))
+#    define IMATH_IMPORT_DEFINITION
+#  else
+#    define IMATH_EXPORT_DEFINITION 
+#    define IMATH_IMPORT_DEFINITION
+#  endif
     #endif
-#else
-    #define IMATH_EXPORT
-    #define IMATH_EXPORT_CONST extern const
+
+#if defined(IMATH_EXPORTS)                          // create library
+#  define IMATH_EXPORT IMATH_EXPORT_DEFINITION
+#  define IMATH_EXPORT_VAR IMATH_EXPORT_DEFINITION extern
+#else                                              // use library
+#  define IMATH_EXPORT IMATH_IMPORT_DEFINITION
+#  define IMATH_EXPORT_VAR IMATH_IMPORT_DEFINITION extern
 #endif
+
+#endif // IMATHEXPORT_H
diff --git a/IlmBase/Imath/ImathMatrixAlgo.cpp b/IlmBase/Imath/ImathMatrixAlgo.cpp
index 0470f1d..c5b7983 100644
--- a/IlmBase/Imath/ImathMatrixAlgo.cpp
+++ b/IlmBase/Imath/ImathMatrixAlgo.cpp
@@ -45,31 +45,25 @@
 #include "ImathMatrixAlgo.h"
 #include <cmath>
 
-#if defined(OPENEXR_DLL)
-    #define EXPORT_CONST __declspec(dllexport)
-#else
-    #define EXPORT_CONST const
-#endif
-
 IMATH_INTERNAL_NAMESPACE_SOURCE_ENTER
 
-EXPORT_CONST M33f identity33f ( 1, 0, 0,
-				0, 1, 0,
-				0, 0, 1);
+const M33f identity33f ( 1, 0, 0,
+			 0, 1, 0,
+			 0, 0, 1);
 
-EXPORT_CONST M33d identity33d ( 1, 0, 0,
-				0, 1, 0,
-				0, 0, 1);
+const M33d identity33d ( 1, 0, 0,
+			 0, 1, 0,
+			 0, 0, 1);
 
-EXPORT_CONST M44f identity44f ( 1, 0, 0, 0,
-				0, 1, 0, 0,
-				0, 0, 1, 0,
-				0, 0, 0, 1);
+const M44f identity44f ( 1, 0, 0, 0,
+			 0, 1, 0, 0,
+			 0, 0, 1, 0,
+			 0, 0, 0, 1);
 
-EXPORT_CONST M44d identity44d ( 1, 0, 0, 0,
-				0, 1, 0, 0,
-				0, 0, 1, 0,
-				0, 0, 0, 1);
+const M44d identity44d ( 1, 0, 0, 0,
+			 0, 1, 0, 0,
+			 0, 0, 1, 0,
+			 0, 0, 0, 1);
 
 namespace
 {
diff --git a/IlmBase/Imath/ImathMatrixAlgo.h b/IlmBase/Imath/ImathMatrixAlgo.h
index 8e90b02..eb97b2e 100644
--- a/IlmBase/Imath/ImathMatrixAlgo.h
+++ b/IlmBase/Imath/ImathMatrixAlgo.h
@@ -64,10 +64,10 @@ IMATH_INTERNAL_NAMESPACE_HEADER_ENTER
 // Identity matrices
 //------------------
 
-IMATH_EXPORT_CONST M33f identity33f;
-IMATH_EXPORT_CONST M44f identity44f;
-IMATH_EXPORT_CONST M33d identity33d;
-IMATH_EXPORT_CONST M44d identity44d;
+IMATH_EXPORT_VAR const M33f identity33f;
+IMATH_EXPORT_VAR const M44f identity44f;
+IMATH_EXPORT_VAR const M33d identity33d;
+IMATH_EXPORT_VAR const M44d identity44d;
 
 //----------------------------------------------------------------------
 // Extract scale, shear, rotation, and translation values from a matrix:
