From d712995f903a3245653cc8afaeae445124a85643 Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Mon, 3 Aug 2015 22:00:16 +0100
Subject: [PATCH] Implement Qt5 static plugin support

Enabled via a new target property "AUTOSTATICPLUGINS".

At CMake execution time, a C++ file is created to link the
static plugins. For this to work, patches for Qt5-static
from [1] are necessary [2], [3] and [4]

[1] https://github.com/Alexpux/MINGW-packages/tree/master/mingw-w64-qt5-static
[2] 0038-qt-5.4.0-Make-it-possible-to-use-static-builds-of-Qt-with-CMa.patch
[3] 0039-qt-5.4.0-Generate-separated-libraries-in-prl-files-for-CMake.patch
[4] 0041-qt-5.4.0-static-cmake-also-link-plugins-and-plugin-deps.patch

.. and also some more minor ones that aren't strictly related to Qt5 static
CMake but are necessary for this to work on MinGW-w64 (0040- for example).
---
 Source/cmGlobalGenerator.cxx            |  1 +
 Source/cmQtAutoGeneratorInitializer.cxx | 64 +++++++++++++++++++++++++++++++--
 Source/cmTarget.cxx                     |  2 ++
 3 files changed, 65 insertions(+), 2 deletions(-)

diff -urN cmake-3.5.2/Source/cmGlobalGenerator.cxx cmake-3.5.2.new/Source/cmGlobalGenerator.cxx
--- cmake-3.5.2/Source/cmGlobalGenerator.cxx	2016-04-15 14:41:22.000000000 +0100
+++ cmake-3.5.2.new/Source/cmGlobalGenerator.cxx	2016-06-03 00:38:43.559076300 +0100
@@ -1352,6 +1352,7 @@
       }
       if ((!(*ti)->GetPropertyAsBool("AUTOMOC") &&
            !(*ti)->GetPropertyAsBool("AUTOUIC") &&
+           !(*ti)->GetPropertyAsBool("AUTOSTATICPLUGINS") &&
            !(*ti)->GetPropertyAsBool("AUTORCC")) ||
           (*ti)->IsImported()) {
         continue;
diff -urN cmake-3.7.0/Source/cmQtAutoGeneratorInitializer.cxx.orig cmake-3.7.0/Source/cmQtAutoGeneratorInitializer.cxx
--- cmake-3.7.0/Source/cmQtAutoGeneratorInitializer.cxx.orig	2016-11-11 09:37:14.000000000 -0500
+++ cmake-3.7.0/Source/cmQtAutoGeneratorInitializer.cxx	2016-11-13 17:42:21.268132300 -0500
@@ -25,6 +25,7 @@
 #include <assert.h>
 #include <cmConfigure.h>
 #include <cmsys/FStream.hxx>
+#include <cmGeneratedFileStream.h>
 #include <cmsys/RegularExpression.hxx>
 #include <iostream>
 #include <map>
@@ -39,7 +40,7 @@
 static std::string GetAutogenTargetName(cmGeneratorTarget const* target)
 {
   std::string autogenTargetName = target->GetName();
-  autogenTargetName += "_automoc";
+  autogenTargetName += "_autogen";
   return autogenTargetName;
 }
 
@@ -127,6 +128,65 @@
        fileIt != newRccFiles.end(); ++fileIt) {
     const_cast<cmGeneratorTarget*>(target)->AddSource(*fileIt);
   }
+  
+  /* in qt5-static/lib/cmake/Qt5Core/Qt5CoreConfig.cmake,
+   * macro(_populate_Core_plugin_properties ..), we'd have:
+   * set_property(TARGET PROPERTY AUTOSTATICPLUGINS True) // Not currently need
+   * as defaults to "ON"
+   * set_property(TARGET Qt5::Core APPEND PROPERTY STATIC_PLUGINS ${Plugin})
+   */
+  if (target->GetPropertyAsBool("AUTOSTATICPLUGINS")) {
+    std::vector<const cmGeneratorTarget*> libTargets =
+      target->GetLinkImplementationClosure("");
+    std::vector<cmGeneratorTarget const*>::const_iterator li;
+    std::vector<std::string> staticPlugins;
+    for (li = libTargets.begin(); li != libTargets.end(); ++li) {
+      cmGeneratorTarget const* tgt = *li;
+      const char* staticPluginsProp = tgt->GetProperty("STATIC_PLUGINS");
+      if (staticPluginsProp) {
+        std::vector<std::string> staticPluginsTgt =
+          cmSystemTools::tokenize(staticPluginsProp, ";");
+        for (std::vector<std::string>::const_iterator spti =
+               staticPluginsTgt.begin();
+             spti != staticPluginsTgt.end(); ++spti) {
+          if (std::find(staticPlugins.begin(), staticPlugins.end(), *spti) ==
+              staticPlugins.end()) {
+            staticPlugins.push_back(*spti);
+          }
+        }
+      }
+    }
+
+    if (staticPlugins.size()) {
+      std::string static_plugins_output_dir = target->GetSupportDirectory();
+      cmSystemTools::MakeDirectory(static_plugins_output_dir.c_str());
+      std::string static_plugins_output_file = static_plugins_output_dir;
+      static_plugins_output_file +=
+        "/" + target->GetName() + "_plugin_import.cpp";
+      cmGeneratedFileStream staticPluginsFileStream(
+        static_plugins_output_file.c_str());
+      if (staticPluginsFileStream) {
+        staticPluginsFileStream << "// This file is autogenerated by cmake. "
+                                   "It imports static plugin classes for"
+                                << std::endl;
+        staticPluginsFileStream
+          << "// static plugins specified using QTPLUGIN and "
+             "QT_PLUGIN_CLASS.<plugin> variables."
+          << std::endl;
+        staticPluginsFileStream << "#include <QtPlugin>" << std::endl;
+        for (std::vector<std::string>::const_iterator spti =
+               staticPlugins.begin();
+             spti != staticPlugins.end(); ++spti) {
+          staticPluginsFileStream << "Q_IMPORT_PLUGIN(" << *spti << ")"
+                                  << std::endl;
+        }
+        staticPluginsFileStream.Close();
+        makefile->AppendProperty("ADDITIONAL_MAKE_CLEAN_FILES",
+                                 static_plugins_output_file.c_str(), false);
+        const_cast<cmGeneratorTarget*>(target)->AddSource(static_plugins_output_file);
+      }
+    }
+  }
 }
 
 static void GetCompileDefinitionsAndDirectories(
@@ -717,6 +777,12 @@
   if (target->GetPropertyAsBool("AUTORCC")) {
     toolNames.push_back("rcc");
   }
+  /* AUTOSTATICPLUGINS .cpp files are created at cmake execution time,
+   * and not at build time, so in that case it is possible to get here
+   * with no toolNames. */
+  if (!toolNames.size()) {
+    return;
+  }
 
   std::string tools = toolNames[0];
   toolNames.erase(toolNames.begin());
@@ -880,7 +946,9 @@
 
   if (target->GetPropertyAsBool("AUTOMOC") ||
       target->GetPropertyAsBool("AUTOUIC") ||
-      target->GetPropertyAsBool("AUTORCC")) {
+      target->GetPropertyAsBool("AUTORCC") ||
+      (target->GetPropertyAsBool("AUTOSTATICPLUGINS")
+        && target->GetType() == cmState::EXECUTABLE)) {
     SetupSourceFiles(target, skipMoc, mocSources, mocHeaders, skipUic);
   }
   makefile->AddDefinition(
diff -urN cmake-3.7.0/Source/cmTarget.cxx.orig cmake-3.7.0/Source/cmTarget.cxx
--- cmake-3.7.0/Source/cmTarget.cxx.orig	2016-11-11 09:37:14.000000000 -0500
+++ cmake-3.7.0/Source/cmTarget.cxx	2016-11-13 17:56:55.700534100 -0500
@@ -120,6 +120,7 @@
     this->SetPropertyDefault("AUTOMOC", CM_NULLPTR);
     this->SetPropertyDefault("AUTOUIC", CM_NULLPTR);
     this->SetPropertyDefault("AUTORCC", CM_NULLPTR);
+    this->SetPropertyDefault("AUTOSTATICPLUGINS", CM_NULLPTR);
     this->SetPropertyDefault("AUTOMOC_MOC_OPTIONS", CM_NULLPTR);
     this->SetPropertyDefault("AUTOUIC_OPTIONS", CM_NULLPTR);
     this->SetPropertyDefault("AUTORCC_OPTIONS", CM_NULLPTR);
@@ -737,6 +738,7 @@
     builtIns.insert("IMPORTED");
     builtIns.insert("NAME");
     builtIns.insert("TYPE");
+    builtIns.insert("STATIC_PLUGINS");
   }
 
   if (builtIns.count(prop)) {
