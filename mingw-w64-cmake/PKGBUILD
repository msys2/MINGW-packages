# Maintainer: Alexey Pavlov <alexpux@gmail.com>
# Contributor: Ray Donnelly <mingw.android@gmail.com>

_bootstrap=0

_realname=cmake
pkgbase=mingw-w64-${_realname}
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
pkgver=3.23.2
pkgrel=2
pkgdesc="A cross-platform open-source make system (mingw-w64)"
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clang32' 'clangarm64')
url="https://www.cmake.org/"
license=("MIT")
makedepends=("${MINGW_PACKAGE_PREFIX}-bzip2"
             "${MINGW_PACKAGE_PREFIX}-ncurses"
             "${MINGW_PACKAGE_PREFIX}-python-sphinx"
             "${MINGW_PACKAGE_PREFIX}-xz"
             "${MINGW_PACKAGE_PREFIX}-zstd"
             "${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-qt6-base"
             $( (( _bootstrap )) || echo \
               "${MINGW_PACKAGE_PREFIX}-cmake" \
               "${MINGW_PACKAGE_PREFIX}-ninja")
             $([[ ${MINGW_PACKAGE_PREFIX} == *-clang-* ]] || \
               echo "${MINGW_PACKAGE_PREFIX}-gcc-fortran")
             $([[ ${MINGW_PACKAGE_PREFIX} == *-clang-* ]] || \
               [[ ${MINGW_PACKAGE_PREFIX} == *-ucrt-* ]] || \
               echo "${MINGW_PACKAGE_PREFIX}-emacs"))
depends=("${MINGW_PACKAGE_PREFIX}-gcc-libs"
         "${MINGW_PACKAGE_PREFIX}-pkgconf"
         "${MINGW_PACKAGE_PREFIX}-curl"
         "${MINGW_PACKAGE_PREFIX}-expat"
         "${MINGW_PACKAGE_PREFIX}-jsoncpp"
         "${MINGW_PACKAGE_PREFIX}-libarchive"
         "${MINGW_PACKAGE_PREFIX}-libuv"
         "${MINGW_PACKAGE_PREFIX}-rhash"
         "${MINGW_PACKAGE_PREFIX}-ninja"
         "${MINGW_PACKAGE_PREFIX}-zlib")
optdepends=("${MINGW_PACKAGE_PREFIX}-qt6-base: CMake Qt GUI"
            "${MINGW_PACKAGE_PREFIX}-emacs: for cmake emacs mode")
options=('staticlibs') # '!strip' 'debug'
source=("https://github.com/Kitware/CMake/releases/download/v${pkgver}/${_realname}-${pkgver}.tar.gz"
        "0001-Disable-response-files-for-MSYS-Generator.patch"
        "0002-Do-not-install-Qt-bundle-in-cmake-gui.patch"
        "0004-Output-line-numbers-in-callstacks.patch"
        "0005-Default-to-ninja-generator.patch"
        "https://gitlab.kitware.com/cmake/cmake/-/merge_requests/7105.patch"
        "0006-fix-find-glut.patch"
        "https://gitlab.kitware.com/cmake/cmake/-/merge_requests/7162.patch"
        "0007-No-hardcoded-gcc-with-MINGW-or-MSYS-Makefiles.patch"
        "0008-fix-find-mpi.patch")
sha256sums=('f316b40053466f9a416adf981efda41b160ca859e97f6a484b447ea299ff26aa'
            '25793edcbac05bb6d17fa9947b52ace4a6b5ccccf7758e22ae9ae022ed089061'
            'f6cf6a6f2729db2b9427679acd09520af2cd79fc26900b19a49cead05a55cd1a'
            '15fdf3fb1a0f1c153c8cfbdd2b5c64035b7a04de618bfe61d7d74ced0d6a5c4b'
            '426818278090704d2a12f62ef3dfd94c47b11fa2784bb842989b7f6a09ee7aa2'
            '5b96f14a455b46f08aea1631407528ad5238150cc4087beecad40f3afca10214'
            '04d526b1ec86de7e633d0a802cef8452e33bc18c8425aa2065dc901a7c868026'
            'bfff814b848c51e9733af7c435a51a9ff2ccfdf862b5a70113dc0a71c0360b13'
            '62074a0de9ac9a9224ffda01992aaa34e5f7fa2e2c6b1cb327ebe9b452452364'
            '0a18245a80fc3a4f5ef6eb96cd0508f341331390c5ff289c642153d96d732253')

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying $_patch"
    patch -Np1 -i "${srcdir}/$_patch"
  done
}

del_file_exists() {
  for _fname in "$@"
  do
    if [ -f $_fname ]; then
      rm -rf $_fname
    fi
  done
}
# =========================================== #


prepare() {
  cd ${_realname}-${pkgver}
  apply_patch_with_msg \
    0001-Disable-response-files-for-MSYS-Generator.patch \
    0002-Do-not-install-Qt-bundle-in-cmake-gui.patch \
    0004-Output-line-numbers-in-callstacks.patch \
    0008-fix-find-mpi.patch
  # https://gitlab.kitware.com/cmake/cmake/-/merge_requests/{7105,7161,7162}
  apply_patch_with_msg \
    7105.patch \
    0006-fix-find-glut.patch \
    7162.patch

  # We want cmake to default to something useful and not MSVC
  apply_patch_with_msg \
    0005-Default-to-ninja-generator.patch
  # Remove hardcoded gcc/g++ for MSYS/MinGW Makefiles generators
  apply_patch_with_msg \
    0007-No-hardcoded-gcc-with-MINGW-or-MSYS-Makefiles.patch
}

build() {
  [[ -d "${srcdir}/build-${MSYSTEM}" ]] && rm -rf "${srcdir}/build-${MSYSTEM}"
  mkdir -p "${srcdir}/build-${MSYSTEM}" && cd "${srcdir}/build-${MSYSTEM}"

  if (( _bootstrap )); then
    local -a _qtconfig=("--qt-gui" "--qt-qmake=${MINGW_PREFIX}/bin/qmake6.exe")

    MSYSTEM=MINGW FC=${MINGW_PREFIX}/bin/gfortran.exe \
      "${srcdir}"/${_realname}-${pkgver}/configure  \
      --prefix=${MINGW_PREFIX}                      \
      --datadir=share/cmake                         \
      --docdir=share/doc/cmake                      \
      --mandir=share/man                            \
      --system-libs                                 \
      --parallel=${NUMBER_OF_PROCESSORS}            \
      --sphinx-man --sphinx-html                    \
      --bootstrap-system-jsoncpp                    \
      --bootstrap-system-libuv                      \
      --bootstrap-system-librhash                   \
      ${_qtconfig[@]}

    make
  else
    if check_option "debug" "y"; then
      _build_type="Debug"
    else
      _build_type="Release"
    fi
    MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
    ${MINGW_PREFIX}/bin/cmake.exe -Wno-dev \
      -GNinja \
      -DCMAKE_BUILD_TYPE=${_build_type} \
      -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
      -DCMAKE_DATA_DIR=share/cmake \
      -DCMAKE_DOC_DIR=share/doc/cmake \
      -DCMAKE_MAN_DIR=share/man \
      -DCMAKE_INFO_DIR=share/info \
      -DCMAKE_USE_SYSTEM_LIBRARIES=ON \
      -DSPHINX_MAN=ON \
      -DSPHINX_HTML=ON \
      -DBUILD_QtDialog=ON \
      ../${_realname}-${pkgver}
    ${MINGW_PREFIX}/bin/cmake.exe --build .
  fi
}

check() {
  cd "${srcdir}/build-${MSYSTEM}"
  if (( _bootstrap )); then
    ./bin/ctest.exe -j$(($(nproc)+1))
  else
    ${MINGW_PREFIX}/bin/ctest.exe -j$(($(nproc)+1)) || msg2 "Tests failed"
  fi
}

package() {
  cd "${srcdir}/build-${MSYSTEM}"
  if (( _bootstrap )); then
    ./bin/cmake.exe \
      -DCMAKE_INSTALL_PREFIX:PATH=${pkgdir}${MINGW_PREFIX} \
      -DCMAKE_INSTALL_LOCAL_ONLY:BOOL=OFF -P cmake_install.cmake
  else
    DESTDIR="${pkgdir}" ${MINGW_PREFIX}/bin/cmake.exe --install .
  fi

  if [[ ${MINGW_PACKAGE_PREFIX} != *-clang-* ]] && \
     [[ ${MINGW_PACKAGE_PREFIX} != *-ucrt-* ]]; then
    install -d "${pkgdir}${MINGW_PREFIX}"/share/emacs/site-lisp/
    ${MINGW_PREFIX}/bin/emacs -batch -f batch-byte-compile \
      "${pkgdir}${MINGW_PREFIX}"/share/emacs/site-lisp/cmake-mode.el
  fi
}
