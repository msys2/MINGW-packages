# Maintainer: Sergey Popov <popov.sa@gmail.com>

_realname=itk
pkgbase=mingw-w64-${_realname}
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
pkgver=5.2.1
pkgrel=1
pkgdesc='An open-source C++ toolkit for medical image processing (mingw-w64)'
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64')
url='https://www.itk.org/'
license=('Apache')
depends=("${MINGW_PACKAGE_PREFIX}-gcc-libs"
         "${MINGW_PACKAGE_PREFIX}-double-conversion"
         "${MINGW_PACKAGE_PREFIX}-eigen3"
         "${MINGW_PACKAGE_PREFIX}-expat"
         "${MINGW_PACKAGE_PREFIX}-fftw"
         "${MINGW_PACKAGE_PREFIX}-gdcm"
         "${MINGW_PACKAGE_PREFIX}-hdf5"
         "${MINGW_PACKAGE_PREFIX}-libjpeg"
         "${MINGW_PACKAGE_PREFIX}-libpng"
         "${MINGW_PACKAGE_PREFIX}-libtiff"
         "${MINGW_PACKAGE_PREFIX}-zlib")
makedepends=("${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-ninja"
             "${MINGW_PACKAGE_PREFIX}-opencv"
             "${MINGW_PACKAGE_PREFIX}-vtk"
             "${MINGW_PACKAGE_PREFIX}-qt5-base"
             "${MINGW_PACKAGE_PREFIX}-gtest")
optdepends=("${MINGW_PACKAGE_PREFIX}-opencv: ITK-OpenCV bridge"
            "${MINGW_PACKAGE_PREFIX}-vtk: ITK-VTK bridge")
source=("${_realname}-${pkgver}.tar.gz"::"https://github.com/InsightSoftwareConsortium/ITK/archive/v${pkgver}.tar.gz"
        001-fix-build-mingw32.patch)
sha256sums=('6022b2b64624b8bcec3333fe48d5f74ff6ebceb3bdf98258ba7d7fbbc76b99ab'
            'd21c10b4f40341ea7a6a435e3411a945ad4680aba1dc13c6f0a014c63f8d80df')

prepare() {
  cd "${srcdir}"/${_realname}-${pkgver}

  patch -p1 -i "${srcdir}"/001-fix-build-mingw32.patch
}

build() {
  [[ -d "${srcdir}/build-${MSYSTEM}" ]] && rm -rf "${srcdir}/build-${MSYSTEM}"
  mkdir -p "${srcdir}/build-${MSYSTEM}" && cd "${srcdir}/build-${MSYSTEM}"

  local -a _extra_config
  if [[ "$CARCH" = 'i686' ]]; then
    _extra_config=('-DVNL_CONFIG_ENABLE_SSE2_ROUNDING=OFF')
  fi
  if [[ "$CARCH" = 'x86_64' ]]; then
    _extra_config=('-DVNL_CONFIG_ENABLE_SSE2_ROUNDING=ON')
  fi

  if check_option "debug" "n"; then
    _extra_config+=("-DCMAKE_BUILD_TYPE=Release")
  else
    _extra_config+=("-DCMAKE_BUILD_TYPE=Debug")
  fi

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  ${MINGW_PREFIX}/bin/cmake.exe \
    -G"Ninja" \
    -DCMAKE_INSTALL_PREFIX="${MINGW_PREFIX}" \
    -DBUILD_SHARED_LIBS=ON \
    -DBUILD_DOCUMENTATION=OFF \
    -DBUILD_EXAMPLES=OFF \
    -DBUILD_TESTING=OFF \
    -DITK_LEGACY_REMOVE=OFF \
    -DModule_ITKVideoBridgeOpenCV=ON \
    -DModule_ITKVtkGlue=ON \
    -DITK_USE_GPU=OFF \
    -DUSE_FFTWD=ON \
    -DUSE_FFTWF=ON \
    -DITK_USE_SYSTEM_DOUBLECONVERSION=ON \
    -DITK_USE_SYSTEM_EIGEN=ON \
    -DITK_USE_SYSTEM_EXPAT=ON \
    -DITK_USE_SYSTEM_FFTW=ON \
    -DITK_USE_SYSTEM_GOOGLETEST=ON \
    -DITK_USE_SYSTEM_HDF5=ON \
    -DITK_USE_SYSTEM_JPEG=ON \
    -DITK_USE_SYSTEM_PNG=ON \
    -DITK_USE_SYSTEM_TIFF=ON \
    -DITK_USE_SYSTEM_VXL=OFF \
    -DITK_USE_SYSTEM_ZLIB=ON \
    -DITK_USE_SYSTEM_GDCM=ON \
    -DITK_SKIP_PATH_LENGTH_CHECKS=1 \
    -DITK_FORBID_DOWNLOADS=ON \
    -DVNL_CONFIG_THREAD_SAFE=ON \
    "${_extra_config[@]}" \
    "../${_realname}-${pkgver}"

  cmake --build .
}

package() {
  cd "${srcdir}/build-${MSYSTEM}"
  DESTDIR=${pkgdir} cmake --install .

  install -Dm644 "${srcdir}/${_realname}-${pkgver}/LICENSE" "share/licenses/${_realname}/LICENSE"
  install -Dm644 "${srcdir}/${_realname}-${pkgver}/NOTICE" "share/licenses/${_realname}/NOTICE"
  install -Dm644 "${srcdir}/${_realname}-${pkgver}/Modules/ThirdParty/KWSys/src/KWSys/Copyright.txt" \
    "share/licenses/${_realname}/KWSys/Copyright.txt"

  cd "${pkgdir}${MINGW_PREFIX}"
  local PREFIX_DEPS=$(cygpath -am ${MINGW_PREFIX})
  sed -s "s|${PREFIX_DEPS}|\${_IMPORT_PREFIX}|g" \
    -i "lib/cmake/${_realname}-${pkgver%.*}/ITKTargets-release.cmake"
  find "lib/cmake/${_realname}-${pkgver%.*}" -name '*.cmake' -exec \
    sed -s "s|${PREFIX_DEPS}|\${ITK_INSTALL_PREFIX}|g" -i {} \;
}
