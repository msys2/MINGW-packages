--- assimp-5.2.1/CMakeLists.txt.orig	2022-02-07 01:02:13.000000000 -0800
+++ assimp-5.2.1/CMakeLists.txt	2022-02-16 23:59:41.000000000 -0800
@@ -136,16 +136,12 @@
 
 IF ( WIN32 )
   # Use subset of Windows.h
   ADD_DEFINITIONS( -DWIN32_LEAN_AND_MEAN )
 
   IF(MSVC)
-    OPTION ( ASSIMP_BUILD_ASSIMP_VIEW
-      "If the Assimp view tool is built. (requires DirectX)"
-      OFF )
-
     OPTION( ASSIMP_INSTALL_PDB
       "Install MSVC debug files."
       ON )
     IF(NOT (MSVC_VERSION LESS 1900))
       # Multibyte character set is deprecated since at least MSVC2015 (possibly earlier)
       ADD_DEFINITIONS( -DUNICODE -D_UNICODE )
@@ -166,12 +162,15 @@
   MESSAGE(STATUS "Framework bundle building enabled")
 ENDIF()
 
 IF(NOT BUILD_SHARED_LIBS)
   MESSAGE(STATUS "Shared libraries disabled")
   SET(LINK_SEARCH_START_STATIC TRUE)
+  IF(MSYS)
+    SET(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
+  ENDIF ()
 ELSE()
   MESSAGE(STATUS "Shared libraries enabled")
 ENDIF()
 
 # Define here the needed parameters
 SET (ASSIMP_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
@@ -685,17 +684,17 @@
 
 # Main assimp code
 ADD_SUBDIRECTORY( code/ )
 IF ( ASSIMP_BUILD_ASSIMP_TOOLS )
   # The viewer for windows only
   IF ( WIN32 )
-    OPTION ( ASSIMP_BUILD_ASSIMP_VIEW "If the Assimp view tool is built. (requires DirectX)" OFF )
-    IF ( ASSIMP_BUILD_ASSIMP_VIEW )
-      ADD_SUBDIRECTORY( tools/assimp_view/ )
-    ENDIF ()
-  ENDIF ()
+    OPTION ( ASSIMP_BUILD_ASSIMP_VIEW "If the Assimp view tool is built. (requires DirectX)" ON )
+    ADD_SUBDIRECTORY( tools/assimp_view/ )
+  ELSE ()
+    OPTION ( ASSIMP_BUILD_ASSIMP_VIEW "If the Assimp view tool is built. (requires DirectX)" OFF )
+  ENDIF ( WIN32 )
   # The command line tool
   ADD_SUBDIRECTORY( tools/assimp_cmd/ )
 ENDIF ()
 
 IF ( ASSIMP_BUILD_SAMPLES )
   SET( SAMPLES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/samples )
--- assimp-5.2.1/code/Common/DefaultIOStream.cpp.orig	2022-02-07 01:02:13.000000000 -0800
+++ assimp-5.2.1/code/Common/DefaultIOStream.cpp	2022-02-17 12:18:13.000000000 -0800
@@ -60,13 +60,13 @@
 inline int select_fseek(FILE *file, int64_t offset, int origin) {
     return ::fseek(file, static_cast<long>(offset), origin);
 }
 
 
 
-#if defined _WIN32 && (!defined __GNUC__ || __MSVCRT_VERSION__ >= 0x0601)
+#if defined _WIN64 && (!defined __GNUC__ || __MSVCRT_VERSION__ >= 0x0601)
 template <>
 inline size_t select_ftell<8>(FILE *file) {
     return (size_t)::_ftelli64(file);
 }
 
 template <>
@@ -146,13 +146,13 @@
         //  - For binary streams, it is not technically well-defined
         //  - For text files the results are meaningless
         // That's why we use the safer variant fstat here.
         //
         // See here for details:
         // https://www.securecoding.cert.org/confluence/display/seccode/FIO19-C.+Do+not+use+fseek()+and+ftell()+to+compute+the+size+of+a+regular+file
-#if defined _WIN32 && (!defined __GNUC__ || __MSVCRT_VERSION__ >= 0x0601)
+#if defined _WIN64 && (!defined __GNUC__ || __MSVCRT_VERSION__ >= 0x0601)
         struct __stat64 fileStat;
         //using fileno + fstat avoids having to handle the filename
         int err = _fstat64(_fileno(mFile), &fileStat);
         if (0 != err)
             return 0;
         mCachedSize = (size_t)(fileStat.st_size);
--- assimp-5.2.1/cmake-modules/FindDirectX.cmake.orig	2022-02-07 01:02:13.000000000 -0800
+++ assimp-5.2.1/cmake-modules/FindDirectX.cmake	2022-02-15 23:59:25.000000000 -0800
@@ -34,12 +34,13 @@
     "C:/apps_x86/Microsoft DirectX SDK*"
     "C:/Program Files (x86)/Microsoft DirectX SDK*"
     "C:/apps/Microsoft DirectX SDK*"
     "C:/Program Files/Microsoft DirectX SDK*"
     "C:/Program Files (x86)/Windows Kits/8.1"
     "$ENV{ProgramFiles}/Microsoft DirectX SDK*"
+    "$ENV{MSYSTEM_PREFIX}"
   )
   create_search_paths(DirectX)
   # redo search if prefix path changed
   clear_if_changed(DirectX_PREFIX_PATH
     DirectX_LIBRARY
     DirectX_INCLUDE_DIR
@@ -52,13 +53,13 @@
     set(DirectX_LIBPATH_SUFFIX "x64")
   else(CMAKE_CL_64)
     set(DirectX_LIBPATH_SUFFIX "x86")
   endif(CMAKE_CL_64)
   find_library(DirectX_LIBRARY NAMES d3d9 HINTS ${DirectX_LIB_SEARCH_PATH} PATH_SUFFIXES ${DirectX_LIBPATH_SUFFIX})
   find_library(DirectX_D3DX9_LIBRARY NAMES d3dx9 HINTS ${DirectX_LIB_SEARCH_PATH} PATH_SUFFIXES ${DirectX_LIBPATH_SUFFIX})
-  find_library(DirectX_DXERR_LIBRARY NAMES DxErr HINTS ${DirectX_LIB_SEARCH_PATH} PATH_SUFFIXES ${DirectX_LIBPATH_SUFFIX})
+  find_library(DirectX_DXERR_LIBRARY NAMES DxErr DxErr9 HINTS ${DirectX_LIB_SEARCH_PATH} PATH_SUFFIXES ${DirectX_LIBPATH_SUFFIX})
   find_library(DirectX_DXGUID_LIBRARY NAMES dxguid HINTS ${DirectX_LIB_SEARCH_PATH} PATH_SUFFIXES ${DirectX_LIBPATH_SUFFIX})
 
 
   # look for dxgi (needed by both 10 and 11)
   find_library(DirectX_DXGI_LIBRARY NAMES dxgi HINTS ${DirectX_LIB_SEARCH_PATH} PATH_SUFFIXES ${DirectX_LIBPATH_SUFFIX})
 
--- assimp-5.2.1/cmake-modules/FindRT.cmake.orig	2022-02-07 01:02:13.000000000 -0800
+++ assimp-5.2.1/cmake-modules/FindRT.cmake	2022-02-17 05:40:13.000000000 -0800
@@ -4,17 +4,19 @@
 # RT_FOUND - system has rt library
 # RT_LIBRARIES - rt libraries directory
 #
 # Source: https://gitlab.cern.ch/dss/eos/commit/44070e575faaa46bd998708ef03eedb381506ff0
 #
 
+if(NOT WIN32)
 if(RT_LIBRARIES)
     set(RT_FIND_QUIETLY TRUE)
 endif(RT_LIBRARIES)
 
 find_library(RT_LIBRARY rt)
 set(RT_LIBRARIES ${RT_LIBRARY})
 # handle the QUIETLY and REQUIRED arguments and set
 # RT_FOUND to TRUE if all listed variables are TRUE
 include(FindPackageHandleStandardArgs)
 find_package_handle_standard_args(RT DEFAULT_MSG RT_LIBRARY)
 mark_as_advanced(RT_LIBRARY)
+endif()
