--- gtk-doc-1.26/gtkdoc/scangobj.py.orig	2017-09-16 20:31:59.749745800 +0200
+++ gtk-doc-1.26/gtkdoc/scangobj.py	2017-09-16 21:07:47.676600200 +0200
@@ -25,10 +25,12 @@
 appropriately before running this script.
 """
 
+import io
 import logging
 import os
 import string
 import subprocess
+import shlex
 
 from . import common, config
 
@@ -1185,7 +1187,7 @@
 def run(options):
 
     c_file = options.module + '-scan.c'
-    output = open(c_file, 'w')
+    output = io.open(c_file, 'w', encoding="utf-8")
 
     base_filename = os.path.join(options.output_dir, options.module)
     old_signals_filename = base_filename + '.signals'
@@ -1206,7 +1208,7 @@
     get_types = ""
     ntypes = 1
 
-    for line in open(options.types):
+    for line in io.open(options.types, "r", encoding="utf-8"):
         if line.startswith('#include'):
             includes += line
         elif line.startswith('%') or line.strip() == '':
@@ -1246,32 +1248,35 @@
 
     x_file = options.module + '-scan' + config.exeext
 
-    stdout = ""
-    if not options.verbose:
-        stdout = ">/dev/null"
+    if options.verbose:
+        call = subprocess.check_call
+    else:
+        call = subprocess.check_output
 
     logging.debug('Intermediate scanner files: %s, %s, %s', c_file, o_file, x_file)
 
     # Compiling scanner
-    command = '%s %s %s -c -o %s %s' % (options.cc, stdout, options.cflags, o_file, c_file)
-    res = subprocess.check_call(command, shell=True)
-    if res > 0:
-        logging.warning('Compilation of scanner failed: %d', res)
-        return res
+    try:
+        call(shlex.split(options.cc) + shlex.split(options.cflags) +
+             ["-c", "-o", o_file, c_file])
+    except subprocess.CalledProcessError as e:
+        logging.warning('Compilation of scanner failed: %d', e.returncode)
+        return e.returncode
 
     # Linking scanner
-    command = '%s %s %s %s -o %s' % (options.ld, stdout, o_file, options.ldflags, x_file)
-    res = subprocess.check_call(command, shell=True)
-    if res > 0:
-        logging.warning('Linking of scanner failed: %d', res)
-        return res
+    try:
+        call(shlex.split(options.ld) + [o_file] +
+             shlex.split(options.ldflags) + ["-o", x_file])
+    except subprocess.CalledProcessError as e:
+        logging.warning('Linking of scanner failed: %d', e.returncode)
+        return e.returncode
 
     # Running scanner
-    command = '%s ./%s' % (options.run, x_file)
-    res = subprocess.check_call(command, shell=True)
-    if res > 0:
-        logging.warning('Running scanner failed: %d', res)
-        return res
+    try:
+        call(shlex.split(options.run) + ["./" + x_file])
+    except subprocess.CalledProcessError as e:
+        logging.warning('Running scanner failed: %d', e.returncode)
+        return e.returncode
 
     logging.debug('Scan complete')
     if 'GTK_DOC_KEEP_INTERMEDIATE' not in os.environ:
--- gtk-doc-1.26/gtkdoc/fixxref.py.orig	2017-06-28 21:22:40.000000000 +0200
+++ gtk-doc-1.26/gtkdoc/fixxref.py	2017-09-16 22:49:57.953231900 +0200
@@ -31,6 +31,7 @@
 import subprocess
 import sys
 import tempfile
+import io
 
 from . import common, config
 
@@ -175,7 +176,7 @@
 
     logging.info('Scanning index file=%s, absolute=%d, dir=%s', file, use_absolute_links, dir)
 
-    for line in open(file):
+    for line in io.open(file, encoding="utf-8"):
         m = re.search(r' link="([^#]*)#([^"]*)"', line)
         if m:
             link = m.group(1) + '#' + m.group(2)
@@ -184,7 +185,7 @@
 
 
 def ReadSections(options):
-    for line in open(options.module + '-sections.txt'):
+    for line in io.open(options.module + '-sections.txt', encoding="utf-8"):
         m1 = re.search(r'^<SUBSECTION\s*(.*)>', line)
         if line.startswith('#') or line.strip() == '':
             continue
@@ -220,9 +221,7 @@
 def FixHTMLFile(options, file):
     logging.info('Fixing file: %s', file)
 
-    content = open(file).read()
-    if sys.version_info < (3,):
-        content = content.decode('utf-8')
+    content = io.open(file, encoding="utf-8").read()
 
     if config.highlight:
         # FIXME: ideally we'd pass a clue about the example language to the highligher
@@ -266,9 +265,8 @@
 
     new_file = file + '.new'
     content = '\n'.join(lines)
-    if sys.version_info < (3,):
-        content = content.encode('utf-8')
-    open(new_file, 'w').write(content)
+    with io.open(new_file, 'w', encoding="utf-8") as h:
+        h.write(content)
 
     os.unlink(file)
     os.rename(new_file, file)
@@ -381,7 +379,7 @@
         script += "%s -n -e -u NONE -T xterm >/dev/null" % config.highlight
         subprocess.check_call([script], shell=True)
 
-        highlighted_source = open(temp_source_file + ".html").read()
+        highlighted_source = io.open(temp_source_file + ".html", encoding="utf-8").read()
         highlighted_source = re.sub(r'.*<pre\b[^>]*>\n', '', highlighted_source, flags=re.MULTILINE)
         highlighted_source = re.sub(r'</pre>.*', '', highlighted_source, flags=re.MULTILINE)
 
