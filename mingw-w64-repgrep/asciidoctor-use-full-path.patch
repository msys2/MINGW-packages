somehow `build.rs` script can't invoke `asciidoctor`, so we use full path of it
(placeholder "ASCIIDOCTOR"). as Windows doesn't support running sh executables natively, invoke sh
with full path of `asciidoctor`
--- a/build.rs
+++ b/build.rs
@@ -5,7 +5,7 @@ use std::{env, fs, io};
 fn generate_manpage<P: AsRef<Path>>(outdir: P) -> io::Result<()> {
     // If asciidoctor isn't installed, don't do anything.
     // This is for platforms where it's unsupported.
-    if let Err(err) = Command::new("asciidoctor").output() {
+    if let Err(err) = Command::new("sh").arg("ASCIIDOCTOR").output() {
         eprintln!("Could not run 'asciidoctor' binary, skipping man page generation.");
         eprintln!("Error from running 'asciidoctor': {}", err);
         return Ok(());
@@ -15,7 +15,8 @@ fn generate_manpage<P: AsRef<Path>>(outdir: P) -> io::Result<()> {
     let cwd = env::current_dir()?;
     let template_path = cwd.join("doc").join("rgr.1.template");

-    let result = Command::new("asciidoctor")
+    let result = Command::new("sh")
+        .arg("ASCIIDOCTOR")
         .arg("--doctype")
         .arg("manpage")
         .arg("--backend")
