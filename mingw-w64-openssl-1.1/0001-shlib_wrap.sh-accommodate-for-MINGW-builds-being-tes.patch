From 57c86922b6e617573a896ed1202eccc6ba490ae5 Mon Sep 17 00:00:00 2001
From: Johannes Schindelin <johannes.schindelin@gmx.de>
Date: Sat, 12 Oct 2019 22:00:32 +0200
Subject: [PATCH] shlib_wrap.sh: accommodate for MINGW builds being tested
 using MSYS

The old dichotomy between MSYS and MINGW rears its ugly head. Just
because MSYS emulates Unix-y paths (i.e. paths that start with a
forward-slash) to be relative to the root directory of MSYS2.

And an additional pain is that the colon (which is used on Windows to
separate the drive letter from the remainder of an absolute path) is
mistaken in MSYS scripts/programs for a path delimiter, e.g. of the
environment variable `PATH`.

Let's make sure that when we run the tests through `shlib_wrap.sh`, we
re-mangle Windows paths to pseudo Unix paths so that e.g. `zlib1.dll`
can be found when (MINGW) `openssl.exe` tries to load a shared library
and looks through the `PATH` to do so, using `;` as path delimiters (as
is common on Windows).

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
---
 util/shlib_wrap.sh.in | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/util/shlib_wrap.sh.in b/util/shlib_wrap.sh.in
index eac70ed..d45c3c2 100755
--- a/util/shlib_wrap.sh.in
+++ b/util/shlib_wrap.sh.in
@@ -96,7 +96,9 @@ SunOS|IRIX*)
 	eval $rld_var=\"${THERE}'${'$rld_var':+:$'$rld_var'}'\"; export $rld_var
 	unset rld_var
 	;;
-*)	LD_LIBRARY_PATH="${THERE}:$LD_LIBRARY_PATH"	# Linux, ELF HP-UX
+*)
+	case "$SYSNAME" in MINGW*) THERE="$(cygpath -au "$THERE")";; esac
+	LD_LIBRARY_PATH="${THERE}:$LD_LIBRARY_PATH"	# Linux, ELF HP-UX
 	DYLD_LIBRARY_PATH="${THERE}:$DYLD_LIBRARY_PATH"	# MacOS X
 	SHLIB_PATH="${THERE}:$SHLIB_PATH"		# legacy HP-UX
 	LIBPATH="${THERE}:$LIBPATH"			# AIX, OS/2
-- 
2.23.0.windows.1

