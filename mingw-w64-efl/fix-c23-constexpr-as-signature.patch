diff --git a/src/bin/embryo/embryo_cc_sc.h b/src/bin/embryo/embryo_cc_sc.h
index f6271af..aa91b90 100644
--- a/src/bin/embryo/embryo_cc_sc.h
+++ b/src/bin/embryo/embryo_cc_sc.h
@@ -432,7 +432,7 @@ symbol     *fetchfunc(char *name, int tag);
 char       *operator_symname(char *symname, char *opername, int tag1,
 				     int tag2, int numtags, int resulttag);
 char       *funcdisplayname(char *dest, char *funcname);
-int         constexpr(cell * val, int *tag);
+int         const_expr(cell * val, int *tag);
 constvalue *append_constval(constvalue * table, char *name, cell val,
 				    short index);
 constvalue *find_constval(constvalue * table, char *name, short index);
diff --git a/src/bin/embryo/embryo_cc_sc1.c b/src/bin/embryo/embryo_cc_sc1.c
index 9fbeb4d..5388fcf 100644
--- a/src/bin/embryo/embryo_cc_sc1.c
+++ b/src/bin/embryo/embryo_cc_sc1.c
@@ -1513,7 +1513,7 @@ init(int ident, int *tag)
 	  }			/* if */
 	*tag = 0;
      }
-   else if (constexpr(&i, tag))
+   else if (const_expr(&i, tag))
      {
 	stowlit(i);		/* store expression result in literal table */
      }				/* if */
@@ -1532,7 +1532,7 @@ needsub(int *tag)
    *tag = 0;
    if (matchtoken(']'))		/* we've already seen "[" */
       return 0;			/* null size (like "char msg[]") */
-   constexpr(&val, tag);	/* get value (must be constant expression) */
+   const_expr(&val, tag);	/* get value (must be constant expression) */
    if (val < 0)
      {
 	error(9);		/* negative array size is invalid; assumed zero */
@@ -1561,7 +1561,7 @@ decl_const(int vclass)
    strncpy(constname, str, sizeof(constname) - 1);	/* save symbol name */
    constname[sizeof(constname) - 1] = 0;
    needtoken('=');
-   constexpr(&val, &exprtag);	/* get value */
+   const_expr(&val, &exprtag);	/* get value */
    needtoken(tTERM);
    /* add_constant() checks for duplicate definitions */
    if (!matchtag(tag, exprtag, FALSE))
@@ -1627,15 +1627,15 @@ decl_enum(int vclass)
      {
 	if (matchtoken(taADD))
 	  {
-	     constexpr(&increment, NULL);
+	     const_expr(&increment, NULL);
 	  }
 	else if (matchtoken(taMULT))
 	  {
-	     constexpr(&multiplier, NULL);
+	     const_expr(&multiplier, NULL);
 	  }
 	else if (matchtoken(taSHL))
 	  {
-	     constexpr(&lexval, NULL);
+	     const_expr(&lexval, NULL);
 	     while (lexval-- > 0)
 		multiplier *= 2;
 	  }			/* if */
@@ -1659,9 +1659,9 @@ decl_enum(int vclass)
 	constname[sNAMEMAX] = 0;
 	size = increment;	/* default increment of 'val' */
 	if (tok == tLABEL || matchtoken(':'))
-	   constexpr(&size, NULL);	/* get size */
+	   const_expr(&size, NULL);	/* get size */
 	if (matchtoken('='))
-	   constexpr(&enumvalue, NULL);	/* get value */
+	   const_expr(&enumvalue, NULL);	/* get value */
 	/* add_constant() checks whether a variable (global or local) or
 	 * a constant with the same name already exists */
 	add_constant(constname, enumvalue, vclass, tag);
@@ -2137,7 +2137,7 @@ funcstub(int native)
 	       }
 	     else
 	       {
-		  constexpr(&val, NULL);
+		  const_expr(&val, NULL);
 		  sym->addr = val;
 		  /*
 		   * ?? Must mark this address, so that it won't be generated again
@@ -2758,7 +2758,7 @@ doarg(char *name, int ident, int offset, int tags[], int numtags,
 	       }
 	     else
 	       {
-		  constexpr(&arg->defvalue.val, &arg->defvalue_tag);
+		  const_expr(&arg->defvalue.val, &arg->defvalue_tag);
 		  assert(numtags > 0);
 		  if (!matchtag(tags[0], arg->defvalue_tag, TRUE))
 		     error(213);	/* tagname mismatch */
@@ -3391,10 +3391,10 @@ doexpr(int comma, int chkeffect, int allowarray, int mark_endexpr,
      }				/* if */
 }
 
-/*  constexpr
+/*  const_expr
  */
 int
-constexpr(cell * val, int *tag)
+const_expr(cell * val, int *tag)
 {
    int                 constant, idx;
    cell                cidx;
@@ -3728,7 +3728,7 @@ doswitch(void)
 		   * parse all expressions until that special token.
 		   */
 
-		  constexpr(&val, NULL);
+		  const_expr(&val, NULL);
 		  /* Search the insertion point (the table is kept in sorted
 		   * order, so that advanced abstract machines can sift the
 		   * case table with a binary search). Check for duplicate
@@ -3753,7 +3753,7 @@ doswitch(void)
 		    {
 		       cell                end;
 
-		       constexpr(&end, NULL);
+		       const_expr(&end, NULL);
 		       if (end <= val)
 			  error(50);	/* invalid range */
 		       while (++val <= end)
diff --git a/src/bin/embryo/embryo_cc_sc2.c b/src/bin/embryo/embryo_cc_sc2.c
index 5a51655..dbaffa1 100644
--- a/src/bin/embryo/embryo_cc_sc2.c
+++ b/src/bin/embryo/embryo_cc_sc2.c
@@ -742,7 +742,7 @@ preproc_expr(cell * val, int *tag)
    term = strchr(pline, '\0');
    assert(term != NULL);
    chrcat(pline, PREPROC_TERM);	/* the "DEL" code (see SC.H) */
-   result = constexpr(val, tag);	/* get value (or 0 on error) */
+   result = const_expr(val, tag);	/* get value (or 0 on error) */
    *term = '\0';		/* erase the token (if still present) */
    lexclr(FALSE);		/* clear any "pushed" tokens */
    return result;
diff --git a/src/bin/embryo/embryo_cc_sc3.c b/src/bin/embryo/embryo_cc_sc3.c
index 3490c08..37f1e66 100644
--- a/src/bin/embryo/embryo_cc_sc3.c
+++ b/src/bin/embryo/embryo_cc_sc3.c
@@ -2410,7 +2410,7 @@ constant(value * lval)
 	val = litidx;
 	do
 	  {
-	     /* cannot call constexpr() here, because "staging" is already turned
+	     /* cannot call const_expr() here, because "staging" is already turned
 	      * on at this point */
 	     assert(staging);
 	     stgget(&idx, &cidx);	/* mark position in code generator */
