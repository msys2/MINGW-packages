# Maintainer: Martell Malone <martellmalone@gmail.com>
# Maintainer: Ray Donnelly <mingw.android@gmail.com>
# Contributor: David Macek <david.macek.0@gmail.com>

_realname=nodejs

pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
pkgver=0.10.32
pkgrel=4
pkgdesc="Evented I/O for V8 javascript (mingw-w64)"
arch=('any')
url="http://nodejs.org/"
license=("MIT")
makedepends=("python2" "make" "gyp-svn")
# If can switch to shared dependencies instead of
# static, bundled then here is the full list. For
# for now, reluctantly the only shared dependency
# is OpenSSL.
# depends=("${MINGW_PACKAGE_PREFIX}-c-ares"
#          "${MINGW_PACKAGE_PREFIX}-http-parser"
#          "${MINGW_PACKAGE_PREFIX}-v8"
#          "${MINGW_PACKAGE_PREFIX}-libuv"
#          "${MINGW_PACKAGE_PREFIX}-openssl"
#          "${MINGW_PACKAGE_PREFIX}-zlib")
depends=("${MINGW_PACKAGE_PREFIX}-openssl" "winpty-git")
#options=('!emptydirs' '!strip') # 'debug')

source=("http://nodejs.org/dist/v${pkgver}/node-v${pkgver}.tar.gz"
        "0001-Win32-Update-NODE_NET_SOCKET_-READ-WRITE-macros.patch"
        "0002-Win32-Update-NODE_COUNT_GC_PERCENTTIME-macro.patch"
        "0003-Win32-etw-Use-INT_PTR-instead-of-INT32-in-pointer-ca.patch"
        "0004-Win32-Determine-and-use-EXEEXT.patch"
        "0005-Win32-gyp-If-sys.platform-is-msys-use-make-not-msvs.patch"
        "0006-Revert-to-FHS-installation-paths-on-Windows-tests-no.patch"
        "0007-Use-shell-wrapper-script-for-npm-on-MSYS2-MinGW-w64.patch"
        "0008-Add-output-dir-option-to-configure-node_gyp-py.patch"
        "0009-Define-_WIN32_WINNT_0x0600-when-node_use_perfctr.patch"

        "0101-Fixing-for-python2-name.patch"
        "0102-Mat_Sutcliffe-node_mingw64-without-MSYS-path-conversion.patch"
        "0103-Mat_Sutcliffe-node_mingw64-MSYS-path-conversion.patch"
        "0104-Use-system-gyp.patch"
        "0105-Add-gyp-debug-option-to-configure.patch"

        "0200-v8-3.26.33-Disable-USING_V8_SHARED-for-v8_snapshot-static-lib.patch"
        "0201-v8-3.26.33-Include-win32-headers-h-then-undef-MemoryBarrier.patch"
        "0203-v8-3.26.33-Use-soname_version.dll-not-so.soname_version-on-Windows.patch"
        "0300-uv-Use-4-arg-swprintf-on-MinGW-w64.patch")

md5sums=('f5fd3a03948ec5d12b49fdc7c49a5cac'
         '0f5ef2b9965f6e921f5f41a21055d170'
         '10092533b62eb3e8cd48dcf816f222de'
         'f7013391c658d50d4568bfce7a6f4cd8'
         '169890d1920dc345334b039ebb391a4a'
         '73fecf70ba4f34f6924f2fa89b8c6412'
         '70947a3999da983c0ede82fb4cee3550'
         '331e39ee6dd81b718026b268fee9a840'
         '5f0f5b7140a49f99c2d1ecabc61733c4'
         'd06f47617aa37a625f68ef72c1cdcad8'
         'cd5870bc8911fe4113d83407257ced4c'
         'afb4b2fb4d658f8689de33ee9c1157bf'
         '64bcb6ddfdd7863f10a302dedbe13d85'
         'c79481c9c5010e4bcd7b4389cf44b7f9'
         '63013c0eeaee90e0985266fba9023a3e'
         'dd82d12b16a416470bf73b56f0684163'
         '9828f204d7068faa656b83c738b67f5e'
         '0be71da4648801fba9aef222919cf611'
         '1f389190a61075b31675090fa4a60f53')

prepare() {

  cd ${srcdir}/node-v${pkgver}

  # Using perfctrs makes Vista the minimum OS. MinGW-w64's perflib.h is missing lots
  # of stuff too, so the patches aren't enough.
  patch -p1 -i "${srcdir}"/0001-Win32-Update-NODE_NET_SOCKET_-READ-WRITE-macros.patch
  patch -p1 -i "${srcdir}"/0002-Win32-Update-NODE_COUNT_GC_PERCENTTIME-macro.patch
  patch -p1 -i "${srcdir}"/0003-Win32-etw-Use-INT_PTR-instead-of-INT32-in-pointer-ca.patch
  patch -p1 -i "${srcdir}"/0004-Win32-Determine-and-use-EXEEXT.patch
  patch -p1 -i "${srcdir}"/0005-Win32-gyp-If-sys.platform-is-msys-use-make-not-msvs.patch
  patch -p1 -i "${srcdir}"/0006-Revert-to-FHS-installation-paths-on-Windows-tests-no.patch

  patch -p1 -i "${srcdir}"/0007-Use-shell-wrapper-script-for-npm-on-MSYS2-MinGW-w64.patch
  patch -p1 -i "${srcdir}"/0008-Add-output-dir-option-to-configure-node_gyp-py.patch
  patch -p1 -i "${srcdir}"/0009-Define-_WIN32_WINNT_0x0600-when-node_use_perfctr.patch

  patch -p1 -i "${srcdir}"/0101-Fixing-for-python2-name.patch
  patch -p1 -i "${srcdir}"/0102-Mat_Sutcliffe-node_mingw64-without-MSYS-path-conversion.patch
# We don't want this patch, someone might though. May need fixing for MSYS2 anyway.
#  patch -p1 -i "${srcdir}"/0103-Mat_Sutcliffe-node_mingw64-MSYS-path-conversion.patch
  patch -p1 -i "${srcdir}"/0104-Use-system-gyp.patch
  patch -p1 -i "${srcdir}"/0105-Add-gyp-debug-option-to-configure.patch

  pushd deps/v8
  patch -p1 -i "${srcdir}"/0200-v8-3.26.33-Disable-USING_V8_SHARED-for-v8_snapshot-static-lib.patch
  patch -p1 -i "${srcdir}"/0201-v8-3.26.33-Include-win32-headers-h-then-undef-MemoryBarrier.patch
  patch -p1 -i "${srcdir}"/0203-v8-3.26.33-Use-soname_version.dll-not-so.soname_version-on-Windows.patch
  popd

  pushd deps/uv
  patch -p1 -i "${srcdir}"/0300-uv-Use-4-arg-swprintf-on-MinGW-w64.patch
  popd
}

build() {

  local -a extra_config

  cd ${srcdir}

  [ -d ${CARCH} ] && rm -rf ${CARCH}
  mv node-v${pkgver} ${CARCH}
  pushd ${CARCH}

# node.js uses a patched version of v8 3.26.33. If/when they upgrade
# we might be able to use this:
#    --shared-v8 \
#    --shared-v8-includes=$(pkgconf --variable=includedir v8) \
#    --shared-v8-libpath=$(pkgconf --variable=libdir v8) \
#    --shared-v8-libname=v8.$(pkgconf --modversion v8) \

#    --shared-cares-libpath=${MINGW_PREFIX}/lib \
#    --shared-cares-includes=${MINGW_PREFIX}/include \

#    --shared-cares \
#    --shared-libuv \
#    --shared-zlib \
#    --shared-http-parser \

# --output-dir= and 0004-Add-output-dir-option-to-configure-node_gyp-py.patch
# attempts to allow using the bundled (hence static) OpenSSL. The problem is
# that the link command line ends up being ~76k characters. This patch helps
# but it gets us down to ~45k. To further reduce this, the build folders of
# "Release/out.target" would be the next target.
#  OUTDIR=$(cd ../../..; echo $PWD)
#      --output-dir=/e/m2/t \
#
# --without-perfctr because MinGW-w64's perflib.h is missing a needed define
# (PERF_COUNTERSET_MULTI_AGGREGATE) and the win32 perfcnt stuff uses __out,
# __in, and __in_opt arg decorators.

  export CC=gcc
  export CXX=g++
  export LINK=g++

  if check_option "debug" "y"; then
    extra_config+=( --debug )
  fi

  ./configure \
    --prefix=${MINGW_PREFIX} \
    --dest-os=win \
    --shared-openssl \
    --shared-openssl-includes=${MINGW_PREFIX}/include \
    --shared-openssl-libpath=${MINGW_PREFIX}/lib \
    --without-perfctr \
    --gyp-debug=all \
    "${extra_config[@]}"

  make
}

package() {

  cd "${srcdir}/${CARCH}"
  make DESTDIR="${pkgdir}" install

  install -d "$pkgdir"/${MINGW_PREFIX}/share/doc/nodejs
  cp -r doc/api/{*.html,assets} \
    "$pkgdir"/${MINGW_PREFIX}/share/doc/nodejs

  install -D -m644 LICENSE \
    "$pkgdir"/${MINGW_PREFIX}/share/licenses/nodejs/LICENSE

  cat > "${pkgdir}"${MINGW_PREFIX}/bin/node-gyp <<< '#!/bin/sh
    (set -o igncr) 2>/dev/null && set -o igncr; # cygwin encoding fix

    basedir=`dirname "$0"`

    case `uname` in
        *CYGWIN*) basedir=`cygpath -w "$basedir"`;;
    esac

    if [ -x "$basedir/node.exe" ]; then
      "$basedir/node.exe" "$basedir/../lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js" "$@"
    else
      node "$basedir/../lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js" "$@"
    fi'

  cat > "${pkgdir}"${MINGW_PREFIX}/bin/node-gyp.cmd <<< '
    @IF EXIST "%~dp0\node.exe" (
      "%~dp0\node.exe" "%~dp0\..\lib\node_modules\npm\node_modules\node-gyp\bin\node-gyp.js" %*
    ) ELSE (
      node "%~dp0\..\lib\node_modules\npm\node_modules\node-gyp\bin\node-gyp.js" %*
    )'

  # Use winpty-git script to invoke console. Please don't move this into a patch as
  # hopefully one day we won't need this hack, plus winpty.exe will be renamed to
  # console.exe soon.
  mv "${pkgdir}"${MINGW_PREFIX}/bin/node.exe "${pkgdir}"${MINGW_PREFIX}/bin/node_exe
  _exename="node"
  echo "#!/usr/bin/env bash" > "${pkgdir}${MINGW_PREFIX}/bin/${_exename}"
  echo '/usr/bin/winpty "$( dirname ${BASH_SOURCE[0]} )/'${_exename}'.exe" "$@"' >> "${pkgdir}${MINGW_PREFIX}/bin/${_exename}"
  mv "${pkgdir}"${MINGW_PREFIX}/bin/node_exe "${pkgdir}"${MINGW_PREFIX}/bin/node.exe

  cp "${pkgdir}${MINGW_PREFIX}/lib/node_modules/npm/bin/npm.cmd" "${pkgdir}${MINGW_PREFIX}/bin/npm.cmd"

  # copy missing manpages
  cp -R "${pkgdir}${MINGW_PREFIX}/lib/node_modules/npm/man" "${pkgdir}${MINGW_PREFIX}/share"

  # It seems that some paths need fixing:
  # npm does the right thing with these files if you install a package globally.
  # node /mingw64/lib/node_modules/npm/bin/npm-cli.js -g install coffee-script
  # Creates correct coffee and coffee.cmd.
  # But it installs the packages in /mingw64/bin/node_modules instead of /mingw64/lib/node_modules.
  # /mingw64/lib/node_modules/npm/lib/npm.js is ridden with tests for win32, so that should probably be changed someday.
}
