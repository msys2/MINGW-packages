--- node-v18.12.1-orig/deps/v8/src/base/bits.h	2022-11-05 00:13:13.000000000 +0800
+++ node-v18.12.1/deps/v8/src/base/bits.h	2022-11-18 18:07:33.985702200 +0800
@@ -212,12 +212,12 @@
 
 
 // Precondition: 0 <= shift < 32
-inline constexpr uint32_t RotateRight32(uint32_t value, uint32_t shift) {
+inline constexpr uint32_t RotateRight_32(uint32_t value, uint32_t shift) {
   return (value >> shift) | (value << ((32 - shift) & 31));
 }
 
 // Precondition: 0 <= shift < 32
-inline constexpr uint32_t RotateLeft32(uint32_t value, uint32_t shift) {
+inline constexpr uint32_t RotateLeft_32(uint32_t value, uint32_t shift) {
   return (value << shift) | (value >> ((32 - shift) & 31));
 }
 
--- node-v18.12.1-orig/deps/v8/src/base/functional.cc	2022-11-05 00:13:13.000000000 +0800
+++ node-v18.12.1/deps/v8/src/base/functional.cc	2022-11-18 00:00:18.024109700 +0800
@@ -73,11 +73,11 @@
   const uint32_t c2 = 0x1B873593;
 
   value *= c1;
-  value = bits::RotateRight32(value, 15);
+  value = bits::RotateRight_32(value, 15);
   value *= c2;
 
   seed ^= value;
-  seed = bits::RotateRight32(seed, 13);
+  seed = bits::RotateRight_32(seed, 13);
   seed = seed * 5 + 0xE6546B64;
 #else
   const uint64_t m = uint64_t{0xC6A4A7935BD1E995};
--- node-v18.12.1-orig/deps/v8/src/compiler/machine-operator-reducer.cc	2022-11-05 00:13:13.000000000 +0800
+++ node-v18.12.1/deps/v8/src/compiler/machine-operator-reducer.cc	2022-11-20 02:00:46.730194900 +0800
@@ -338,7 +338,7 @@
       Int32BinopMatcher m(node);
       if (m.right().Is(0)) return Replace(m.left().node());  // x ror 0 => x
       if (m.IsFoldable()) {  // K ror K => K  (K stands for arbitrary constants)
-        return ReplaceInt32(base::bits::RotateRight32(
+        return ReplaceInt32(base::bits::RotateRight_32(
             m.left().ResolvedValue(), m.right().ResolvedValue() & 31));
       }
       break;
