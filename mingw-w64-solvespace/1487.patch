From f160eadf2f2542dd6587f95bbe2b98c1dfed91a5 Mon Sep 17 00:00:00 2001
From: kreijstal <kreijstal@hotmail.com>
Date: Sat, 28 Sep 2024 02:52:34 +0200
Subject: [PATCH 1/2] Compiling on msys2

---
 CMakeLists.txt          | 159 ++++++++++++++++++++++++++++++++++------
 src/platform/guiwin.cpp |   3 +
 2 files changed, 138 insertions(+), 24 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 5a012553f..c94b9a47a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -94,7 +94,10 @@ if(MINGW)
     # Link 32 bit SolveSpace with --large-address-aware which allows it to access
     # up to 3GB on a properly configured 32 bit Windows and up to 4GB on 64 bit.
     # See https://msdn.microsoft.com/en-us/library/aa366778
-    set(CMAKE_EXE_LINKER_FLAGS "-Wl,--large-address-aware")
+        if(CMAKE_SIZEOF_VOID_P EQUAL 4)
+        # Set large address aware flag for 32-bit targets
+        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--large-address-aware")
+    endif()
 endif()
 
 # Ensure that all platforms use 64-bit IEEE floating point operations for consistency;
@@ -193,13 +196,24 @@ endif()
 message(STATUS "Using in-tree libdxfrw")
 add_subdirectory(extlib/libdxfrw)
 
-message(STATUS "Using in-tree mimalloc")
-set(MI_OVERRIDE OFF CACHE BOOL "")
-set(MI_BUILD_SHARED OFF CACHE BOOL "")
-set(MI_BUILD_OBJECT OFF CACHE BOOL "")
-set(MI_BUILD_TESTS OFF CACHE BOOL "")
-add_subdirectory(extlib/mimalloc EXCLUDE_FROM_ALL)
-set(MIMALLOC_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/extlib/mimalloc/include)
+find_package(PkgConfig QUIET)
+
+if(PkgConfig_FOUND)
+    pkg_check_modules(MIMALLOC mimalloc)
+endif()
+
+if(MIMALLOC_FOUND)
+    message(STATUS "Using system mimalloc: ${MIMALLOC_LIBRARIES}")
+else()
+    message(STATUS "System mimalloc not found. Using in-tree mimalloc")
+    set(MI_OVERRIDE OFF CACHE BOOL "")
+    set(MI_BUILD_SHARED OFF CACHE BOOL "")
+    set(MI_BUILD_OBJECT OFF CACHE BOOL "")
+    set(MI_BUILD_TESTS OFF CACHE BOOL "")
+    add_subdirectory(extlib/mimalloc EXCLUDE_FROM_ALL)
+    set(MIMALLOC_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/extlib/mimalloc/include)
+    set(MIMALLOC_LIBRARIES mimalloc)
+endif()
 
 if(NOT FORCE_VENDORED_Eigen3)
     find_package(Eigen3 CONFIG)
@@ -215,9 +229,90 @@ if(NOT EXISTS "${EIGEN3_INCLUDE_DIRS}")
     message(FATAL_ERROR "Eigen 3 not found on system or in-tree")
 endif()
 
+if(WIN32)
+    include(FindVendoredPackage)
+    include(AddVendoredSubdirectory)
+
+    # For Windows, we prefer system libraries when available,
+    # but fall back to vendored versions if not found
+
+    # Check for system libbacktrace
+    if(PKG_CONFIG_FOUND)
+        pkg_check_modules(BACKTRACE libbacktrace)
+        if(BACKTRACE_FOUND)
+            message(STATUS "Using system libbacktrace: ${BACKTRACE_LIBRARIES}")
+        endif()
+        pkg_check_modules(ZLIB zlib)
+        find_package(PNG)
+        find_package(Freetype)
+        pkg_check_modules(PIXMAN pixman-1)
+    	pkg_check_modules(CAIRO cairo)
+    endif()
+
+    # If system libraries are not found, use vendored versions
+    if(NOT ZLIB_FOUND)
+        message(STATUS "System ZLIB not found. Using vendored version.")
+        find_vendored_package(ZLIB zlib
+            ZLIB_LIBRARY            zlibstatic
+            ZLIB_INCLUDE_DIR        ${CMAKE_SOURCE_DIR}/extlib/zlib)
+        list(APPEND ZLIB_INCLUDE_DIR ${CMAKE_BINARY_DIR}/extlib/zlib)
+    endif()
+
+    if(NOT PNG_FOUND)
+        message(STATUS "System PNG not found. Using vendored version.")
+        find_vendored_package(PNG libpng
+            SKIP_INSTALL_ALL        ON
+            PNG_LIBRARY             png_static
+            PNG_ARM_NEON            "off"
+            PNG_SHARED              OFF
+            PNG_STATIC              ON
+            PNG_EXECUTABLES         OFF
+            PNG_TESTS               OFF
+            PNG_FRAMEWORK           OFF
+            PNG_PNG_INCLUDE_DIR     ${CMAKE_SOURCE_DIR}/extlib/libpng)
+        list(APPEND PNG_PNG_INCLUDE_DIR ${CMAKE_BINARY_DIR}/extlib/libpng)
+    endif()
+
+    if(NOT FREETYPE_FOUND)
+        message(STATUS "System Freetype not found. Using vendored version.")
+        find_vendored_package(Freetype freetype
+            WITH_ZLIB               OFF
+            WITH_BZip2              OFF
+            WITH_PNG                OFF
+            WITH_HarfBuzz           OFF
+            FREETYPE_LIBRARY        freetype
+            FREETYPE_INCLUDE_DIRS   ${CMAKE_SOURCE_DIR}/extlib/freetype/include)
+    endif()
+
+    if(PIXMAN_FOUND)
+        message(STATUS "Using system pixman: ${PIXMAN_LIBRARIES}")
+    else()
+    message(STATUS "Using in-tree pixman")
+    set(PIXMAN_FOUND            YES)
+    set(PIXMAN_LIBRARY          pixman)
+    set(PIXMAN_BUILD_TESTS      OFF CACHE BOOL "")
+    set(PIXMAN_BUILD_DEMOS      OFF CACHE BOOL "")
+
+    set(PIXMAN_INCLUDE_DIRS     ${CMAKE_SOURCE_DIR}/extlib/pixman/pixman)
+    list(APPEND PIXMAN_INCLUDE_DIRS ${CMAKE_BINARY_DIR}/extlib/pixman/pixman)
+    add_vendored_subdirectory(extlib/pixman)
+    endif()
+
+    if(CAIRO_FOUND)
+        message(STATUS "Using system cairo: ${CAIRO_LIBRARIES}")
+    else()
+    message(STATUS "Using in-tree cairo")
+    add_vendored_subdirectory(extlib/cairo)
+    set(CAIRO_FOUND             YES)
+    set(CAIRO_LIBRARIES         cairo)
+    set(CAIRO_INCLUDE_DIRS      ${CMAKE_SOURCE_DIR}/extlib/cairo/src)
+    list(APPEND CAIRO_INCLUDE_DIRS ${CMAKE_BINARY_DIR}/extlib/cairo/src)
+
+    endif()
+
 
-if(WIN32 OR APPLE OR EMSCRIPTEN)
-    # On Win32 and macOS we use vendored packages, since there is little to no benefit
+elseif(APPLE OR EMSCRIPTEN)
+    # On macOS and Emscripten, we use vendored packages to ensure compatibility, since there is little to no benefit
     # to trying to find system versions. In particular, trying to link to libraries from
     # Homebrew or macOS system libraries into the .app file is highly likely to result
     # in incompatibilities after upgrades.
@@ -270,6 +365,7 @@ if(WIN32 OR APPLE OR EMSCRIPTEN)
     set(CAIRO_LIBRARIES         cairo)
     set(CAIRO_INCLUDE_DIRS      ${CMAKE_SOURCE_DIR}/extlib/cairo/src)
     list(APPEND CAIRO_INCLUDE_DIRS ${CMAKE_BINARY_DIR}/extlib/cairo/src)
+
 else()
     # On Linux and BSDs we're a good citizen and link to system libraries.
     find_package(Backtrace)
@@ -284,21 +380,36 @@ endif()
 
 if(ENABLE_GUI)
     if(WIN32)
-        if(OPENGL STREQUAL "3")
-            message(STATUS "Using in-tree ANGLE")
-            set(ANGLE_STATIC            ON  CACHE INTERNAL "")
-            set(ANGLE_ENABLE_D3D9       ON  CACHE INTERNAL "")
-            set(ANGLE_ENABLE_D3D11      ON  CACHE INTERNAL "")
-            set(ANGLE_ENABLE_OPENGL     ON  CACHE INTERNAL "")
-            set(ANGLE_ENABLE_ESSL       ON  CACHE INTERNAL "")
-            set(ANGLE_ENABLE_GLSL       ON  CACHE INTERNAL "")
-            set(ANGLE_ENABLE_HLSL       ON  CACHE INTERNAL "")
-            add_vendored_subdirectory(extlib/angle)
-            set(OPENGL_LIBRARIES        EGL GLESv2)
-            set(OPENGL_INCLUDE_DIR      ${CMAKE_SOURCE_DIR}/extlib/angle/include)
-        else()
+	if(OPENGL STREQUAL "3")
+        # Check for system-installed ANGLE
+        find_path(ANGLE_INCLUDE_DIR NAMES GLES2/gl2.h GLES3/gl3.h EGL/egl.h
+                  PATHS $ENV{MINGW_PREFIX}/include)
+        find_library(ANGLE_EGL_LIBRARY NAMES libEGL EGL
+                     PATHS $ENV{MINGW_PREFIX}/lib)
+        find_library(ANGLE_GLESV2_LIBRARY NAMES libGLESv2 GLESv2
+                     PATHS $ENV{MINGW_PREFIX}/lib)
+
+        	if(ANGLE_INCLUDE_DIR AND ANGLE_EGL_LIBRARY AND ANGLE_GLESV2_LIBRARY)
+        	    message(STATUS "Using system-installed ANGLE")
+        	    set(ANGLE_FOUND TRUE)
+        	    set(OPENGL_LIBRARIES ${ANGLE_EGL_LIBRARY} ${ANGLE_GLESV2_LIBRARY})
+        	    set(OPENGL_INCLUDE_DIR ${ANGLE_INCLUDE_DIR})
+        	else()
+        	    message(STATUS "System-installed ANGLE not found. Using in-tree ANGLE")
+        	    set(ANGLE_STATIC            ON  CACHE INTERNAL "")
+        	    set(ANGLE_ENABLE_D3D9       ON  CACHE INTERNAL "")
+        	    set(ANGLE_ENABLE_D3D11      ON  CACHE INTERNAL "")
+        	    set(ANGLE_ENABLE_OPENGL     ON  CACHE INTERNAL "")
+        	    set(ANGLE_ENABLE_ESSL       ON  CACHE INTERNAL "")
+        	    set(ANGLE_ENABLE_GLSL       ON  CACHE INTERNAL "")
+        	    set(ANGLE_ENABLE_HLSL       ON  CACHE INTERNAL "")
+        	    add_vendored_subdirectory(extlib/angle)
+        	    set(OPENGL_LIBRARIES        EGL GLESv2)
+        	    set(OPENGL_INCLUDE_DIR      ${CMAKE_SOURCE_DIR}/extlib/angle/include)
+        	endif()
+	else()
             find_package(OpenGL REQUIRED)
-        endif()
+    	endif()
 
         if(MSVC AND ${CMAKE_SIZEOF_VOID_P} EQUAL 4)
             message(STATUS "Using prebuilt SpaceWare")
diff --git a/src/platform/guiwin.cpp b/src/platform/guiwin.cpp
index 39189e3ef..d01c1df3b 100644
--- a/src/platform/guiwin.cpp
+++ b/src/platform/guiwin.cpp
@@ -43,6 +43,9 @@
 #   define EGL_EGLEXT_PROTOTYPES
 #   include <EGL/egl.h>
 #   include <EGL/eglext.h>
+#if defined(__MINGW32__)
+#   include <EGL/eglext_angle.h>
+#endif
 #endif
 
 #if defined(HAVE_SPACEWARE)

From 404e1dbdb1da54148d9d87daf6331d6839ba0716 Mon Sep 17 00:00:00 2001
From: Kreijstal <rainb@tfwno.gf>
Date: Mon, 30 Sep 2024 23:27:35 +0200
Subject: [PATCH 2/2] Fix whitespace

---
 CMakeLists.txt | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index c94b9a47a..9e8196fd6 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -94,8 +94,8 @@ if(MINGW)
     # Link 32 bit SolveSpace with --large-address-aware which allows it to access
     # up to 3GB on a properly configured 32 bit Windows and up to 4GB on 64 bit.
     # See https://msdn.microsoft.com/en-us/library/aa366778
-        if(CMAKE_SIZEOF_VOID_P EQUAL 4)
-        # Set large address aware flag for 32-bit targets
+    if(CMAKE_SIZEOF_VOID_P EQUAL 4)
+    	# Set large address aware flag for 32-bit targets
         set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--large-address-aware")
     endif()
 endif()
