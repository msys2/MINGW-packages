From af0672f73140edd0bf489bcac6dd624677ac241c Mon Sep 17 00:00:00 2001
From: Nick Avramoussis <4256455+Idclip@users.noreply.github.com>
Date: Sun, 26 Apr 2020 15:55:09 +0100
Subject: [PATCH] Improved various CMake defines passed through the OpenVDB
 core lib

Signed-off-by: Nick Avramoussis <4256455+Idclip@users.noreply.github.com>
---
 openvdb/CMakeLists.txt          | 83 ++++++++++++++++-----------------
 openvdb/cmd/CMakeLists.txt      | 12 -----
 openvdb/python/CMakeLists.txt   |  2 +-
 openvdb/unittest/CMakeLists.txt | 13 ------
 4 files changed, 42 insertions(+), 68 deletions(-)

diff --git a/openvdb/CMakeLists.txt b/openvdb/CMakeLists.txt
index 60bced343..65ff589f0 100644
--- a/openvdb/CMakeLists.txt
+++ b/openvdb/CMakeLists.txt
@@ -99,7 +99,7 @@ else()
   )
 endif()
 
-if(OPENVDB_CORE_SHARED)
+if(OPENVDB_CORE_SHARED AND NOT Boost_USE_STATIC_LIBS)
   # @note  Both of these must be set for Boost 1.70 (VFX2020) to link against
   #        boost shared libraries (more specifically libraries built with -fPIC).
   #        http://boost.2283326.n4.nabble.com/CMake-config-scripts-broken-in-1-70-td4708957.html
@@ -145,6 +145,14 @@ set(OPENVDB_CORE_DEPENDENT_LIBS
   IlmBase::Half
 )
 
+if(WIN32)
+  if(OPENVDB_DISABLE_BOOST_IMPLICIT_LINKING)
+      list(APPEND OPENVDB_CORE_DEPENDENT_LIBS
+        Boost::disable_autolinking  # add -DBOOST_ALL_NO_LIB
+      )
+  endif()
+endif()
+
 if(USE_EXR)
   list(APPEND OPENVDB_CORE_DEPENDENT_LIBS
     IlmBase::IlmThread
@@ -187,19 +195,6 @@ endif()
 
 ##########################################################################
 
-if(WIN32)
-  # Because of implicit linking!
-  link_directories(${Boost_LIBRARY_DIR})
-  if(OPENVDB_DISABLE_BOOST_IMPLICIT_LINKING)
-    add_definitions(-DBOOST_ALL_NO_LIB)
-  endif()
-endif()
-
-# @todo Should be target definitions
-if(WIN32)
-  add_definitions(-D_WIN32 -DNOMINMAX -DOPENVDB_DLL)
-endif()
-
 ##### Core library configuration
 
 set(OPENVDB_LIBRARY_SOURCE_FILES
@@ -403,25 +398,30 @@ endif()
 
 ##########################################################################
 
-# Configure c flags
-
-set(OPENVDB_CORE_PRIVATE_DEFINES)
-set(OPENVDB_CORE_PUBLIC_DEFINES)
+# Configure (static and shared lib) C flags
 
 # Private defines (not inherited by dependent projects)
-
-list(APPEND OPENVDB_CORE_PRIVATE_DEFINES "-DOPENVDB_PRIVATE")
+list(APPEND OPENVDB_CORE_PRIVATE_DEFINES -DOPENVDB_PRIVATE)
 if(USE_BLOSC)
-  list(APPEND OPENVDB_CORE_PRIVATE_DEFINES "-DOPENVDB_USE_BLOSC")
+  list(APPEND OPENVDB_CORE_PRIVATE_DEFINES -DOPENVDB_USE_BLOSC)
 endif()
 
 # Public defines
-
+if(WIN32)
+  # @note OPENVDB_OPENEXR_STATICLIB is old functionality from the makefiles
+  #       used in PlatformConfig.h to configure EXR exports. Once this file
+  #       is completely removed, this define can be too
+  get_target_property(ILMBASE_LIB_TYPE IlmBase::Half TYPE)
+  if(OPENEXR_USE_STATIC_LIBS OR (${ILMBASE_LIB_TYPE} STREQUAL STATIC_LIBRARY))
+    list(APPEND OPENVDB_CORE_PUBLIC_DEFINES -DOPENVDB_OPENEXR_STATICLIB)
+  endif()
+  list(APPEND OPENVDB_CORE_PUBLIC_DEFINES -D_WIN32 -DNOMINMAX)
+endif()
 if(USE_EXR)
-  list(APPEND OPENVDB_CORE_PUBLIC_DEFINES "-DOPENVDB_TOOLS_RAYTRACER_USE_EXR")
+  list(APPEND OPENVDB_CORE_PUBLIC_DEFINES -DOPENVDB_TOOLS_RAYTRACER_USE_EXR)
 endif()
 if(USE_LOG4CPLUS)
-  list(APPEND OPENVDB_CORE_PUBLIC_DEFINES "-DOPENVDB_USE_LOG4CPLUS")
+  list(APPEND OPENVDB_CORE_PUBLIC_DEFINES -DOPENVDB_USE_LOG4CPLUS)
 endif()
 
 ##########################################################################
@@ -434,22 +434,22 @@ if(OPENVDB_CORE_STATIC)
     PRIVATE .
   )
 
-  target_compile_definitions(openvdb_static PRIVATE ${OPENVDB_CORE_PRIVATE_DEFINES})
-  target_compile_definitions(openvdb_static PUBLIC ${OPENVDB_CORE_PUBLIC_DEFINES})
+  target_compile_definitions(openvdb_static
+    PUBLIC ${OPENVDB_CORE_PUBLIC_DEFINES}
+    PRIVATE ${OPENVDB_CORE_PRIVATE_DEFINES}
+  )
+
+  target_link_libraries(openvdb_static
+    PUBLIC ${OPENVDB_CORE_DEPENDENT_LIBS}
+  )
 
   set_target_properties(openvdb_static
     PROPERTIES OUTPUT_NAME ${OPENVDB_STATIC_LIBRARY_NAME}
   )
 
   if(WIN32)
-    set_target_properties(openvdb_static
-      PROPERTIES PREFIX "lib"
-    )
+    set_target_properties(openvdb_static PROPERTIES PREFIX "lib")
   endif()
-
-  target_link_libraries(openvdb_static
-    ${OPENVDB_CORE_DEPENDENT_LIBS}
-  )
 endif()
 
 # Configure shared build
@@ -460,8 +460,14 @@ if(OPENVDB_CORE_SHARED)
     PRIVATE .
   )
 
-  target_compile_definitions(openvdb_shared PRIVATE ${OPENVDB_CORE_PRIVATE_DEFINES})
-  target_compile_definitions(openvdb_shared PUBLIC ${OPENVDB_CORE_PUBLIC_DEFINES})
+  target_compile_definitions(openvdb_shared
+    PUBLIC ${OPENVDB_CORE_PUBLIC_DEFINES} -DOPENVDB_DLL
+    PRIVATE ${OPENVDB_CORE_PRIVATE_DEFINES}
+  )
+
+  target_link_libraries(openvdb_shared
+    PUBLIC ${OPENVDB_CORE_DEPENDENT_LIBS}
+  )
 
   set_target_properties(openvdb_shared
     PROPERTIES
@@ -470,10 +476,6 @@ if(OPENVDB_CORE_SHARED)
       VERSION ${OpenVDB_MAJOR_VERSION}.${OpenVDB_MINOR_VERSION}.${OpenVDB_PATCH_VERSION}
   )
 
-  target_link_libraries(openvdb_shared
-    ${OPENVDB_CORE_DEPENDENT_LIBS}
-  )
-
   if(OPENVDB_ENABLE_RPATH)
     # @todo There is probably a better way to do this for imported targets
     list(APPEND RPATHS
@@ -491,9 +493,6 @@ if(OPENVDB_CORE_SHARED)
   endif()
 endif()
 
-unset(OPENVDB_CORE_PRIVATE_DEFINES)
-unset(OPENVDB_CORE_PUBLIC_DEFINES)
-
 ##########################################################################
 
 # Installation
diff --git a/openvdb/cmd/CMakeLists.txt b/openvdb/cmd/CMakeLists.txt
index 11de7df3b..0dc9f4287 100644
--- a/openvdb/cmd/CMakeLists.txt
+++ b/openvdb/cmd/CMakeLists.txt
@@ -45,18 +45,6 @@ set(OPENVDB_BINARIES_DEPENDENT_LIBS
 
 ##########################################################################
 
-if(WIN32)
-  # Because of implicit linking!
-  link_directories(${Boost_LIBRARY_DIR})
-  if(OPENVDB_DISABLE_BOOST_IMPLICIT_LINKING)
-    add_definitions(-DBOOST_ALL_NO_LIB)
-  endif()
-endif()
-
-if(WIN32)
-  add_definitions(-D_WIN32 -DNOMINMAX -DOPENVDB_DLL)
-endif()
-
 # rpath handling
 
 set(RPATHS "")
diff --git a/openvdb/python/CMakeLists.txt b/openvdb/python/CMakeLists.txt
index 94455080c..fc858271a 100644
--- a/openvdb/python/CMakeLists.txt
+++ b/openvdb/python/CMakeLists.txt
@@ -156,7 +156,7 @@ if(USE_NUMPY)
   endif()
 endif()
 
-if(TARGET openvdb_shared)
+if(TARGET openvdb_shared AND NOT Boost_USE_STATIC_LIBS)
   # @note  Both of these must be set for Boost 1.70 (VFX2020) to link against
   #        boost shared libraries (more specifically libraries built with -fPIC).
   #        http://boost.2283326.n4.nabble.com/CMake-config-scripts-broken-in-1-70-td4708957.html
diff --git a/openvdb/unittest/CMakeLists.txt b/openvdb/unittest/CMakeLists.txt
index 14bbcad82..5640e805e 100644
--- a/openvdb/unittest/CMakeLists.txt
+++ b/openvdb/unittest/CMakeLists.txt
@@ -40,19 +40,6 @@ set(OPENVDB_TEST_DEPENDENT_LIBS
 
 ##########################################################################
 
-if(WIN32 AND OPENVDB_DISABLE_BOOST_IMPLICIT_LINKING)
-  add_definitions(-DBOOST_ALL_NO_LIB)
-endif()
-
-if(WIN32)
-  # Because of implicit linking!
-  link_directories(${Boost_LIBRARY_DIR})
-endif()
-
-if(WIN32)
-  add_definitions(-D_WIN32 -DNOMINMAX -DOPENVDB_DLL)
-endif()
-
 ##### VDB unit tests
 
 set(UNITTEST_SOURCE_FILES
