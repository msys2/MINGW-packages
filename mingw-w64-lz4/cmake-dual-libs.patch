diff -Naur lz4-1.10.0-orig/build/cmake/CMakeLists.txt lz4-1.10.0/build/cmake/CMakeLists.txt
--- lz4-1.10.0-orig/build/cmake/CMakeLists.txt	2024-07-21 20:29:49.000000000 +0300
+++ lz4-1.10.0/build/cmake/CMakeLists.txt	2025-05-25 22:25:53.076165600 +0300
@@ -28,7 +28,7 @@
 
 message(STATUS "Creating build script for LZ4 version: ${LZ4_VERSION_STRING}")
 
-project(LZ4 VERSION ${LZ4_VERSION_STRING} LANGUAGES C)
+project(lz4 VERSION ${LZ4_VERSION_STRING} LANGUAGES C)
 
 
 option(LZ4_BUILD_CLI "Build lz4 program" ON)
@@ -58,16 +58,7 @@
   include(CPack)
 endif(NOT LZ4_BUNDLED_MODE AND NOT CPack_CMake_INCLUDED)
 
-# Allow people to choose whether to build shared or static libraries
-# via the BUILD_SHARED_LIBS option unless we are in bundled mode, in
-# which case we always use static libraries.
-include(CMakeDependentOption)
-CMAKE_DEPENDENT_OPTION(BUILD_SHARED_LIBS "Build shared libraries" ON "NOT LZ4_BUNDLED_MODE" OFF)
-CMAKE_DEPENDENT_OPTION(BUILD_STATIC_LIBS "Build static libraries" OFF "BUILD_SHARED_LIBS" ON)
-
-if(NOT BUILD_SHARED_LIBS AND NOT BUILD_STATIC_LIBS)
-  message(FATAL_ERROR "Both BUILD_SHARED_LIBS and BUILD_STATIC_LIBS have been disabled")
-endif()
+option(BUILD_SHARED_LIBS "Build shared libraries" ON)
 
 set(LZ4_LIB_SOURCE_DIR "${LZ4_TOP_SOURCE_DIR}/lib")
 set(LZ4_PROG_SOURCE_DIR "${LZ4_TOP_SOURCE_DIR}/programs")
@@ -89,53 +80,37 @@
 # liblz4
 include(GNUInstallDirs)
 set(LZ4_LIBRARIES_BUILT)
+
+if(BUILD_SHARED_LIBS)
+  set (target_suffix "shared")
+  set (LIB_TYPE SHARED)
+else()
+  set (target_suffix "static")
+  set (LIB_TYPE STATIC)
+endif()
+
+add_library(lz4 ${LIB_TYPE} ${LZ4_SOURCES})
+
+target_include_directories(lz4
+  PUBLIC $<BUILD_INTERFACE:${LZ4_LIB_SOURCE_DIR}>
+  INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
+
 if(BUILD_SHARED_LIBS)
-  add_library(lz4_shared SHARED ${LZ4_SOURCES})
-  target_include_directories(lz4_shared
-    PUBLIC $<BUILD_INTERFACE:${LZ4_LIB_SOURCE_DIR}>
-    INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
-  set_target_properties(lz4_shared PROPERTIES
+  set_target_properties(lz4 PROPERTIES
     OUTPUT_NAME lz4
     SOVERSION "${LZ4_VERSION_MAJOR}"
     VERSION "${LZ4_VERSION_STRING}")
-  if(MSVC)
-    target_compile_definitions(lz4_shared PRIVATE
-      LZ4_DLL_EXPORT=1)
+  if(WIN32)
+    target_compile_definitions(lz4 PRIVATE LZ4_DLL_EXPORT=1)
   endif()
-  list(APPEND LZ4_LIBRARIES_BUILT lz4_shared)
-endif()
-if(BUILD_STATIC_LIBS)
-  set(STATIC_LIB_NAME lz4)
-  if (MSVC AND BUILD_SHARED_LIBS)
-    set(STATIC_LIB_NAME lz4_static)
-  endif()
-  add_library(lz4_static STATIC ${LZ4_SOURCES})
-  target_include_directories(lz4_static
-    PUBLIC $<BUILD_INTERFACE:${LZ4_LIB_SOURCE_DIR}>
-    INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
-  set_target_properties(lz4_static PROPERTIES
-    OUTPUT_NAME ${STATIC_LIB_NAME}
-    POSITION_INDEPENDENT_CODE ${LZ4_POSITION_INDEPENDENT_LIB})
-  list(APPEND LZ4_LIBRARIES_BUILT lz4_static)
-endif()
-# Add unified target.
-add_library(lz4 INTERFACE)
-list(APPEND LZ4_LIBRARIES_BUILT lz4)
-if(BUILD_SHARED_LIBS)
-  target_link_libraries(lz4 INTERFACE lz4_shared)
-else()
-  target_link_libraries(lz4 INTERFACE lz4_static)
+else()
+    set_target_properties(lz4 PROPERTIES
+      OUTPUT_NAME lz4
+      POSITION_INDEPENDENT_CODE ${LZ4_POSITION_INDEPENDENT_LIB})
 endif()
 
-# xxhash namespace
-if(BUILD_SHARED_LIBS)
-  target_compile_definitions(lz4_shared PRIVATE
-    XXH_NAMESPACE=LZ4_)
-endif()
-if(BUILD_STATIC_LIBS)
-  target_compile_definitions(lz4_static PRIVATE
-    XXH_NAMESPACE=LZ4_)
-endif()
+target_compile_definitions(lz4 PRIVATE XXH_NAMESPACE=LZ4_)
+list(APPEND LZ4_LIBRARIES_BUILT lz4)
 
 # lz4
 if (LZ4_BUILD_CLI)
@@ -205,18 +179,18 @@
     VERSION ${LZ4_VERSION_STRING}
     COMPATIBILITY SameMajorVersion)
 
-  set(LZ4_PKG_INSTALLDIR "${CMAKE_INSTALL_LIBDIR}/cmake/lz4")
+  set(LZ4_PKG_INSTALLDIR "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}")
   configure_package_config_file(
     "${CMAKE_CURRENT_LIST_DIR}/lz4Config.cmake.in"
     "${CMAKE_CURRENT_BINARY_DIR}/lz4Config.cmake"
     INSTALL_DESTINATION ${LZ4_PKG_INSTALLDIR})
   export(EXPORT lz4Targets
-    FILE ${CMAKE_CURRENT_BINARY_DIR}/lz4Targets.cmake
-    NAMESPACE LZ4::)
+    FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-${target_suffix}-targets.cmake
+    NAMESPACE lz4::)
 
   install(EXPORT lz4Targets
-    FILE lz4Targets.cmake
-    NAMESPACE LZ4::
+    FILE ${PROJECT_NAME}-${target_suffix}-targets.cmake
+    NAMESPACE lz4::
     DESTINATION ${LZ4_PKG_INSTALLDIR})
   install(FILES
       ${CMAKE_CURRENT_BINARY_DIR}/lz4Config.cmake
diff -Naur lz4-1.10.0-orig/build/cmake/lz4Config.cmake.in lz4-1.10.0/build/cmake/lz4Config.cmake.in
--- lz4-1.10.0-orig/build/cmake/lz4Config.cmake.in	2024-07-21 20:29:49.000000000 +0300
+++ lz4-1.10.0/build/cmake/lz4Config.cmake.in	2025-05-25 22:01:57.419000100 +0300
@@ -1,2 +1,57 @@
 @PACKAGE_INIT@
-include( "${CMAKE_CURRENT_LIST_DIR}/lz4Targets.cmake" )
\ No newline at end of file
+
+set(@PROJECT_NAME@_known_comps static shared)
+set(@PROJECT_NAME@_comp_static NO)
+set(@PROJECT_NAME@_comp_shared NO)
+foreach (@PROJECT_NAME@_comp IN LISTS ${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS)
+    if (@PROJECT_NAME@_comp IN_LIST @PROJECT_NAME@_known_comps)
+        set(@PROJECT_NAME@_comp_${@PROJECT_NAME@_comp} YES)
+    else ()
+        set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
+            "@PROJECT_NAME@ does not recognize component `${@PROJECT_NAME@_comp}`.")
+        set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
+        return()
+    endif ()
+endforeach ()
+
+if (@PROJECT_NAME@_comp_static AND @PROJECT_NAME@_comp_shared)
+    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
+        "@PROJECT_NAME@ `static` and `shared` components are mutually exclusive.")
+    set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
+    return()
+endif ()
+
+set(@PROJECT_NAME@_static_targets "${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-static-targets.cmake")
+set(@PROJECT_NAME@_shared_targets "${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-shared-targets.cmake")
+
+macro(@PROJECT_NAME@_load_targets type)
+    if (NOT EXISTS "${@PROJECT_NAME@_${type}_targets}")
+        set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
+            "@PROJECT_NAME@ `${type}` libraries were requested but not found.")
+        set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
+        return()
+    endif ()
+    include("${@PROJECT_NAME@_${type}_targets}")
+endmacro()
+
+if (@PROJECT_NAME@_comp_static)
+    @PROJECT_NAME@_load_targets(static)
+elseif (@PROJECT_NAME@_comp_shared)
+    @PROJECT_NAME@_load_targets(shared)
+elseif (DEFINED @PROJECT_NAME@_SHARED_LIBS AND @PROJECT_NAME@_SHARED_LIBS)
+    @PROJECT_NAME@_load_targets(shared)
+elseif (DEFINED @PROJECT_NAME@_SHARED_LIBS AND NOT @PROJECT_NAME@_SHARED_LIBS)
+    @PROJECT_NAME@_load_targets(static)
+elseif (BUILD_SHARED_LIBS)
+    if (EXISTS "${@PROJECT_NAME@_shared_targets}")
+        @PROJECT_NAME@_load_targets(shared)
+    else ()
+        @PROJECT_NAME@_load_targets(static)
+    endif ()
+else ()
+    if (EXISTS "${@PROJECT_NAME@_static_targets}")
+        @PROJECT_NAME@_load_targets(static)
+    else ()
+        @PROJECT_NAME@_load_targets(shared)
+    endif ()
+endif ()
