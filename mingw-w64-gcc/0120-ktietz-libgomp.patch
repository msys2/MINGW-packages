Index: gcc-6.1.0/libgomp/team.c
===================================================================
--- gcc-6.1.0/libgomp/team.c	(Revision 206281)
+++ gcc-6.1.0/libgomp/team.c	(Arbeitskopie)
@@ -145,7 +145,7 @@ gomp_new_team (unsigned nthreads)
     {
       size_t extra = sizeof (team->ordered_release[0])
 		     + sizeof (team->implicit_task[0]);
-      team = gomp_malloc (sizeof (*team) + nthreads * extra);
+      team = gomp_malloc_cleared (sizeof (*team) + nthreads * extra);
 
 #ifndef HAVE_SYNC_BUILTINS
       gomp_mutex_init (&team->work_share_list_free_lock);
@@ -196,7 +196,7 @@ free_team (struct gomp_team *team)
 static struct gomp_thread_pool *gomp_new_thread_pool (void)
 {
   struct gomp_thread_pool *pool
-    = gomp_malloc (sizeof(struct gomp_thread_pool));
+    = gomp_malloc_cleared (sizeof(struct gomp_thread_pool));
   pool->threads = NULL;
   pool->threads_size = 0;
   pool->threads_used = 0;
@@ -939,7 +939,7 @@ struct gomp_task_icv *
 gomp_new_icv (void)
 {
   struct gomp_thread *thr = gomp_thread ();
-  struct gomp_task *task = gomp_malloc (sizeof (struct gomp_task));
+  struct gomp_task *task = gomp_malloc_cleared (sizeof (struct gomp_task));
   gomp_init_task (task, NULL, &gomp_global_icv);
   thr->task = task;
   pthread_setspecific (gomp_thread_destructor, thr);
Index: gcc-6.1.0/libgomp/testsuite/config/default.exp
===================================================================
--- gcc-6.1.0/libgomp/testsuite/config/default.exp	(Revision 206281)
+++ gcc-6.1.0/libgomp/testsuite/config/default.exp	(Arbeitskopie)
@@ -15,3 +15,8 @@
 # <http://www.gnu.org/licenses/>.
 
 load_lib "standard.exp"
+
+# Support for old dejagnu.  Must be loaded here, not in libstdc++.exp, to
+# make sure all existing procs are loaded when their presence is tested.
+load_file $srcdir/../../gcc/testsuite/lib/dejapatches.exp
+
Index: work.c
===================================================================
--- gcc-6.1.0/libgomp/work.c	(Revision 206281)
+++ gcc-6.1.0/libgomp/work.c	(Arbeitskopie)
@@ -75,7 +75,7 @@ alloc_work_share (struct gomp_team *team)
 #endif
 
   team->work_share_chunk *= 2;
-  ws = gomp_malloc (team->work_share_chunk * sizeof (struct gomp_work_share));
+  ws = gomp_malloc_cleared (team->work_share_chunk * sizeof (struct gomp_work_share));
   ws->next_alloc = team->work_shares[0].next_alloc;
   team->work_shares[0].next_alloc = ws;
   team->work_share_list_alloc = &ws[1];
@@ -174,7 +174,7 @@ gomp_work_share_start (bool ordered)
   /* Work sharing constructs can be orphaned.  */
   if (team == NULL)
     {
-      ws = gomp_malloc (sizeof (*ws));
+      ws = gomp_malloc_cleared (sizeof (*ws));
       gomp_init_work_share (ws, ordered, 1);
       thr->ts.work_share = ws;
       return ws;
