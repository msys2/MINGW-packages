--- a/gcc/rust/backend/rust-compile-base.cc
+++ b/gcc/rust/backend/rust-compile-base.cc
@@ -332,7 +332,7 @@
 
       break;
 
-    case Rust::ABI::WIN64:
+    case Rust::ABI::WIN_64:
       abi_tree = get_identifier ("ms_abi");
 
       break;
--- a/gcc/rust/parse/rust-parse.cc
+++ b/gcc/rust/parse/rust-parse.cc
@@ -87,7 +87,7 @@
   // Source: rustc compiler
   // (https://github.com/rust-lang/rust/blob/9863bf51a52b8e61bcad312f81b5193d53099f9f/compiler/rustc_expand/src/module.rs#L174)
 #if defined(HAVE_DOS_BASED_FILE_SYSTEM)
-  path.replace ('/', '\\');
+  std::replace (path.begin(), path.end(), '/', '\\');
 #endif /* HAVE_DOS_BASED_FILE_SYSTEM */
 
   return path;
--- a/gcc/rust/util/rust-abi.cc
+++ b/gcc/rust/util/rust-abi.cc
@@ -38,7 +38,7 @@
   else if (abi.compare ("sysv64") == 0)
     return Rust::ABI::SYSV64;
   else if (abi.compare ("win64") == 0)
-    return Rust::ABI::WIN64;
+    return Rust::ABI::WIN_64;
 
   return Rust::ABI::UNKNOWN;
 }
@@ -62,7 +62,7 @@
       return "fastcall";
     case Rust::ABI::SYSV64:
       return "sysv64";
-    case Rust::ABI::WIN64:
+    case Rust::ABI::WIN_64:
       return "win64";
 
     case Rust::ABI::UNKNOWN:
--- a/gcc/rust/util/rust-abi.h
+++ b/gcc/rust/util/rust-abi.h
@@ -30,7 +30,7 @@
   CDECL,
   STDCALL,
   FASTCALL,
-  WIN64,
+  WIN_64,
   SYSV64
 };
 
