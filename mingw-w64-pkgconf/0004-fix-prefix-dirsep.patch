--- pkgconf-1.7.3/libpkgconf/pkg.c.orig	2020-05-26 21:41:17.000000000 +0200
+++ pkgconf-1.7.3/libpkgconf/pkg.c	2020-11-21 21:50:42.215275200 +0100
@@ -214,6 +214,32 @@
 	return buf;
 }
 
+/*
+ * Takes a path and converts it to a value.
+ * This means normalizing directory separators and escaping
+ * things (only spaces covered atm)
+ */
+static char *
+path_to_value(const char *path)
+{
+	char *buf = calloc((strlen(path) + 1) * 2, 1);
+	char *bptr = buf;
+	const char *i;
+
+	for (i = path; *i != '\0'; i++)
+	{
+		if (*i == PKG_DIR_SEP_S)
+			*bptr++ = '/';
+		else if (*i == ' ') {
+			*bptr++ = '\\';
+			*bptr++ = *i;
+		} else
+			*bptr++ = *i;
+	}
+
+	return buf;
+}
+
 static void
 remove_additional_separators(char *buf)
 {
@@ -238,16 +264,6 @@
 static void
 canonicalize_path(char *buf)
 {
-#ifdef _WIN32
-	char *p = buf;
-
-	while (*p) {
-		if (*p == '\\')
-			*p = '/';
-		p++;
-	}
-#endif
-
 	remove_additional_separators(buf);
 }
 
@@ -294,8 +310,10 @@
 
 		if (relvalue != NULL)
 		{
+			char *prefix_value = path_to_value(relvalue);
 			pkg->orig_prefix = pkgconf_tuple_add(pkg->owner, &pkg->vars, "orig_prefix", canonicalized_value, true);
-			pkg->prefix = pkgconf_tuple_add(pkg->owner, &pkg->vars, keyword, relvalue, false);
+			pkg->prefix = pkgconf_tuple_add(pkg->owner, &pkg->vars, keyword, prefix_value, false);
+			free(prefix_value);
 		}
 		else
 			pkgconf_tuple_add(pkg->owner, &pkg->vars, keyword, value, true);
@@ -376,7 +394,9 @@
 	pkg->owner = client;
 	pkg->filename = strdup(filename);
 	pkg->pc_filedir = pkg_get_parent_dir(pkg);
-	pkgconf_tuple_add(client, &pkg->vars, "pcfiledir", pkg->pc_filedir, true);
+	char *pc_filedir_value = path_to_value(pkg->pc_filedir);
+	pkgconf_tuple_add(client, &pkg->vars, "pcfiledir", pc_filedir_value, true);
+	free(pc_filedir_value);
 
 	/* make module id */
 	if ((idptr = strrchr(pkg->filename, PKG_DIR_SEP_S)) != NULL)
