--- a/Cargo.toml
+++ b/Cargo.toml
@@ -2,6 +2,7 @@
 name = "tun-tap"
 # Also don't forget to update the version in the html_root_url attribute in src/lib.rs
 version = "0.1.4"
+edition = "2021"
 authors = ["Michal 'vorner' Vaner <vorner@vorner.cz>"]
 description = "TUN/TAP interface wrapper"
 documentation = "https://docs.rs/tun-tap"
@@ -17,18 +18,21 @@ maintenance = { status = "passively-maintained" }

 [features]
 default = ["tokio"]
-tokio = ["futures", "libc", "mio", "tokio-core"]
+tokio = ["futures", "libc", "dep:tokio"]

 [build-dependencies]
 cc = "~1"

 [dependencies]
-futures = { version = "~0.1", optional = true }
+futures = { version = "~0.3", optional = true }
 libc = { version = "~0.2", optional = true }
-mio = { version = "~0.6", optional = true }
-tokio-core = { version = "~0.1", optional = true }
+tokio = { version = "~1.39", features = ["io-util", "net"], optional = true }

 [dev-dependencies]
 version-sync = "~0.9"
-etherparse = "~0.9"
-serial_test = "~0.4"
+etherparse = "~0.15"
+serial_test = "2"
+tokio = { package = "tokio", version = "~1.38", features = ["full"] }
+futures-util = "0.3.29"
+bytes = "1.5.0"
+tokio-util = {version = "~0.7", features = ["codec", "net"]}
--- a/src/async.rs
+++ b/src/async.rs
@@ -1,58 +1,21 @@
 //! Integration of TUN/TAP into tokio.
 //!
 //! See the [`Async`](struct.Async.html) structure.
-extern crate futures;
-extern crate libc;
-extern crate mio;
-extern crate tokio_core;

-use std::io::{Error, ErrorKind, Read, Result, Write};
-use std::os::unix::io::AsRawFd;
-
-use self::futures::{Async as FAsync, AsyncSink, Sink, StartSend, Stream, Poll as FPoll};
-use self::mio::{Evented, Poll as MPoll, PollOpt, Ready, Token};
-use self::mio::unix::EventedFd;
-use self::tokio_core::reactor::{Handle, PollEvented};
+use futures::ready;
+use std::io::{self, Result};
+use std::pin::Pin;
+use std::task::{Context, Poll};
+use tokio::io::unix::AsyncFd;
+use tokio::io::{AsyncRead, AsyncWrite};

 use super::Iface;

-struct MioWrapper {
-    iface: Iface,
-}
-
-impl Evented for MioWrapper {
-    fn register(&self, poll: &MPoll, token: Token, events: Ready, opts: PollOpt) -> Result<()> {
-        EventedFd(&self.iface.as_raw_fd()).register(poll, token, events, opts)
-    }
-    fn reregister(&self, poll: &MPoll, token: Token, events: Ready, opts: PollOpt) -> Result<()> {
-        EventedFd(&self.iface.as_raw_fd()).reregister(poll, token, events, opts)
-    }
-    fn deregister(&self, poll: &MPoll) -> Result<()> {
-        EventedFd(&self.iface.as_raw_fd()).deregister(poll)
-    }
-}
-
-impl Read for MioWrapper {
-    fn read(&mut self, buf: &mut [u8]) -> Result<usize> {
-        self.iface.recv(buf)
-    }
-}
-
-impl Write for MioWrapper {
-    fn write(&mut self, buf: &[u8]) -> Result<usize> {
-        self.iface.send(buf)
-    }
-    fn flush(&mut self) -> Result<()> {
-        Ok(())
-    }
-}
-
 /// A wrapper around [`Iface`](../struct.Iface.html) for use in connection with tokio.
 ///
 /// This turns the synchronous `Iface` into an asynchronous `Sink + Stream` of packets.
 pub struct Async {
-    mio: PollEvented<MioWrapper>,
-    recv_bufsize: usize,
+    inner: AsyncFd<Iface>,
 }

 impl Async {
@@ -86,11 +49,10 @@ impl Async {
     /// let (sink, stream) = async.split();
     /// # }
     /// ```
-    pub fn new(iface: Iface, handle: &Handle) -> Result<Self> {
+    pub fn new(iface: Iface) -> Result<Self> {
         iface.set_non_blocking()?;
         Ok(Async {
-            mio: PollEvented::new(MioWrapper { iface }, handle)?,
-            recv_bufsize: 1542,
+            inner: AsyncFd::new(iface)?,
         })
     }
     /// Sets the receive buffer size.
@@ -100,40 +62,77 @@ impl Async {
     ///
     /// This needs to be called when the interface's MTU is changed from the default 1500. The
     /// default should be enough otherwise.
-    pub fn set_recv_bufsize(&mut self, bufsize: usize) {
-        self.recv_bufsize = bufsize;
+    pub async fn recv(&self, out: &mut [u8]) -> io::Result<usize> {
+        loop {
+            let mut guard = self.inner.readable().await?;
+
+            match guard.try_io(|inner| inner.get_ref().recv(out)) {
+                Ok(result) => return result,
+                Err(_would_block) => continue,
+            }
+        }
+    }
+    pub async fn send(&mut self, buf: &[u8]) -> Result<usize> {
+        loop {
+            let mut guard = self.inner.writable().await?;
+
+            match guard.try_io(|inner| inner.get_ref().send(buf)) {
+                Ok(result) => return result,
+                Err(_would_block) => continue,
+            }
+        }
     }
 }

-impl Stream for Async {
-    type Item = Vec<u8>;
-    type Error = Error;
-    fn poll(&mut self) -> FPoll<Option<Self::Item>, Self::Error> {
-        // TODO Reuse buffer?
-        let mut buffer = vec![0; self.recv_bufsize];
-        match self.mio.read(&mut buffer) {
-            Ok(size) => {
-                buffer.resize(size, 0);
-                Ok(FAsync::Ready(Some(buffer)))
-            },
-            Err(ref e) if e.kind() == ErrorKind::WouldBlock => Ok(FAsync::NotReady),
-            Err(e) => Err(e),
+impl AsyncRead for Async {
+    fn poll_read(
+        self: Pin<&mut Self>,
+        cx: &mut Context<'_>,
+        buf: &mut tokio::io::ReadBuf<'_>,
+    ) -> Poll<io::Result<()>> {
+        loop {
+            let mut guard = ready!(self.inner.poll_read_ready(cx))?;
+
+            let unfilled = buf.initialize_unfilled();
+            match guard.try_io(|inner| inner.get_ref().recv(unfilled)) {
+                Ok(Ok(len)) => {
+                    buf.advance(len);
+                    return Poll::Ready(Ok(()));
+                }
+                Ok(Err(err)) => return Poll::Ready(Err(err)),
+                Err(_would_block) => continue,
+            }
         }
     }
 }

-impl Sink for Async {
-    type SinkItem = Vec<u8>;
-    type SinkError = Error;
-    fn start_send(&mut self, item: Self::SinkItem) -> StartSend<Self::SinkItem, Self::SinkError> {
-        match self.mio.write(&item) {
-            // TODO What to do about short write? Can it happen?
-            Ok(_size) => Ok(AsyncSink::Ready),
-            Err(ref e) if e.kind() == ErrorKind::WouldBlock => Ok(AsyncSink::NotReady(item)),
-            Err(e) => Err(e),
+impl AsyncWrite for Async {
+    fn poll_write(
+        self: Pin<&mut Self>,
+        cx: &mut Context<'_>,
+        buf: &[u8],
+    ) -> Poll<std::result::Result<usize, io::Error>> {
+        loop {
+            let mut guard = ready!(self.inner.poll_write_ready(cx))?;
+
+            match guard.try_io(|inner| inner.get_ref().send(buf)) {
+                Ok(result) => return Poll::Ready(result),
+                Err(_would_block) => continue,
+            }
         }
     }
-    fn poll_complete(&mut self) -> FPoll<(), Self::SinkError> {
-        Ok(FAsync::Ready(()))
+    fn poll_flush(
+        self: Pin<&mut Self>,
+        _cx: &mut Context<'_>,
+    ) -> Poll<std::result::Result<(), io::Error>> {
+        Poll::Ready(Ok(()))
+    }
+
+    fn poll_shutdown(
+        self: Pin<&mut Self>,
+        _cx: &mut Context<'_>,
+    ) -> Poll<std::result::Result<(), io::Error>> {
+        // not sure what this method should do
+        Poll::Ready(Ok(()))
     }
 }
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -34,7 +34,7 @@ use std::os::raw::{c_char, c_int};
 use std::os::unix::io::{AsRawFd, IntoRawFd, RawFd};

 #[cfg(feature = "tokio")]
-pub mod async;
+pub mod r#async;

 extern "C" {
     fn tuntap_setup(fd: c_int, name: *mut u8, mode: c_int, packet_info: c_int) -> c_int;
