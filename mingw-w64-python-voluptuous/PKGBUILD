# Maintainer: J. Peter Mugaas <jpmugaas@suddenlink.net>

_realname=voluptuous
pkgbase=mingw-w64-python-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-python2-${_realname}"  "${MINGW_PACKAGE_PREFIX}-python3-${_realname}")
pkgver=0.11.5
pkgrel=1
pkgdesc="A Python data validation library (mingw-w64)"
arch=('any')
url='https://www.voluptuous.org/'
license=('BSD')
makedepends=("${MINGW_PACKAGE_PREFIX}-python2"
             "${MINGW_PACKAGE_PREFIX}-python3"
             "${MINGW_PACKAGE_PREFIX}-python3-setuptools"
             "${MINGW_PACKAGE_PREFIX}-python2-setuptools")
checkdepends=("${MINGW_PACKAGE_PREFIX}-python3-nose" 
              "${MINGW_PACKAGE_PREFIX}-python2-nose")
options=('staticlibs' 'strip' '!debug')
source=("https://pypi.io/packages/source/v/voluptuous/voluptuous-$pkgver.tar.gz")
sha512sums=('8893434e8e73ebf3682da1970d1d720444de452937ac9123fab53413c88a21d04ad3eb490902d829aa60be6804ff68b8bcf57a1c45807751c3d50be63e9b2551')

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying $_patch"
    patch -Nbp1 -i "${srcdir}/$_patch"
  done
}

del_file_exists() {
  for _fname in "$@"
  do
    if [ -f $_fname ]; then
      rm -rf $_fname
    fi
  done
}
# =========================================== #

prepare() {
  cd "${srcdir}"
  # https://github.com/alecthomas/voluptuous/issues/333
  rm -r voluptuous-$pkgver/*.egg-info
  # https://github.com/alecthomas/voluptuous/pull/332 
  sed -e "s/'w'/'wb'/" -e "s/.encode('utf-8')//" -e "s/f.write(long_description)/f.write(long_description.encode('utf-8'))/" -i voluptuous-$pkgver/setup.py

  # Python 3.7
  sed -i '/raise StopIteration/d' voluptuous-$pkgver/voluptuous/schema_builder.py
  
  for builddir in python{2,3}-build-${CARCH}; do
    rm -rf ${builddir} | true
    cp -r "${_realname}-${pkgver}" "${builddir}"
  done
  # Set version for setuptools_scm
  export SETUPTOOLS_SCM_PRETEND_VERSION=$pkgver
}

# Note that build() is sometimes skipped because it's done in 
# the packages setup.py install for simplicity if you can do so.
# but sometimes, you want to do a check before install which would
# also trigger the build.
build() {
  for pver in {2,3}; do  
    msg "Python ${pver} build for ${CARCH}"  
    cd "${srcdir}/python${pver}-build-${CARCH}"
    ${MINGW_PREFIX}/bin/python${pver} setup.py build
  done  
}

check() {
#  for pver in {2,3}; do
#    msg "Python ${pver} test for ${CARCH}"
#    cd "${srcdir}/python${pver}-build-${CARCH}"
#    ${MINGW_PREFIX}/bin/python${pver} setup.py nosetests
#  done
    cd "${srcdir}/python3-build-${CARCH}"
    ${MINGW_PREFIX}/bin/python3 setup.py nosetests
}

package_python3-voluptuous() {
  depends=("${MINGW_PACKAGE_PREFIX}-python3")

  cd "${srcdir}/python3-build-${CARCH}"
  MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
  ${MINGW_PREFIX}/bin/python3 setup.py install --prefix=${MINGW_PREFIX} \
    --root="${pkgdir}" --optimize=1 --skip-build

  install -Dm644 COPYING "${pkgdir}${MINGW_PREFIX}/share/licenses/python3-${_realname}/COPYING"
}

package_python2-voluptuous() {
  depends=("${MINGW_PACKAGE_PREFIX}-python2")

  cd "${srcdir}/python2-build-${CARCH}"
  MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
  ${MINGW_PREFIX}/bin/python2 setup.py install --prefix=${MINGW_PREFIX} \
    --root="${pkgdir}" --optimize=1 --skip-build

  install -Dm644 COPYING "$pkgdir${MINGW_PREFIX}"/share/licenses/$pkgname/COPYING
}

package_mingw-w64-i686-python2-voluptuous() {
  package_python2-voluptuous
}

package_mingw-w64-i686-python3-voluptuous() {
  package_python3-voluptuous
}

package_mingw-w64-x86_64-python2-voluptuous() {
  package_python2-voluptuous
}

package_mingw-w64-x86_64-python3-voluptuous() {
  package_python3-voluptuous
}
