Index: misc.c
===================================================================
--- misc.c	(revision 10285)
+++ misc.c	(working copy)
@@ -834,7 +834,7 @@
     if (L) {
 	int delta;
 	debug_printf("\t%d (0x%x) bytes:\n", len, len);
-	delta = 15 & (unsigned long int) p;
+	delta = 15 & (uintptr_t) p;
 	p -= delta;
 	len += delta;
     }
Index: mkfiles.pl
===================================================================
--- mkfiles.pl	(revision 10285)
+++ mkfiles.pl	(working copy)
@@ -453,11 +453,11 @@
     "# You may also need to tell windres where to find include files:\n".
     "# RCINC = --include-dir c:\\cygwin\\include\\\n".
     "\n".
-    &splitline("CFLAGS = -mno-cygwin -Wall -O2 -D_WINDOWS -DDEBUG -DWIN32S_COMPAT".
+    &splitline("CFLAGS = -Wall -Werror -O2 -D_WINDOWS -DDEBUG -DWIN32S_COMPAT".
       " -D_NO_OLDNAMES -DNO_MULTIMON -DNO_HTMLHELP -DNO_SECUREZEROMEMORY " .
 	       (join " ", map {"-I$dirpfx$_"} @srcdirs)) .
 	       "\n".
-    "LDFLAGS = -mno-cygwin -s\n".
+    "LDFLAGS = -s\n".
     &splitline("RCFLAGS = \$(RCINC) --define WIN32=1 --define _WIN32=1 ".
       "--define WINVER=0x0400 ".(join " ", map {"-I$dirpfx$_"} @srcdirs))."\n".
     "\n".
Index: windows/wincons.c
===================================================================
--- windows/wincons.c	(revision 10285)
+++ windows/wincons.c	(working copy)
@@ -306,7 +306,7 @@
 
 int console_get_userpass_input(prompts_t *p, unsigned char *in, int inlen)
 {
-    HANDLE hin, hout;
+    HANDLE hin = NULL, hout = NULL;
     size_t curr_prompt;
 
     /*
Index: windows/winctrls.c
===================================================================
--- windows/winctrls.c	(revision 10285)
+++ windows/winctrls.c	(working copy)
@@ -76,7 +76,7 @@
     if (cp->hwnd) {
 	ctl = CreateWindowEx(exstyle, wclass, wtext, wstyle,
 			     r.left, r.top, r.right, r.bottom,
-			     cp->hwnd, (HMENU) wid, hinst, NULL);
+			     cp->hwnd, (HMENU)(intptr_t)wid, hinst, NULL);
 	SendMessage(ctl, WM_SETFONT, cp->font, MAKELPARAM(TRUE, 0));
 
 	if (!strcmp(wclass, "LISTBOX")) {
@@ -267,10 +267,9 @@
     nbuttons = 0;
     while (1) {
 	char *btext = va_arg(ap, char *);
-	int bid;
 	if (!btext)
 	    break;
-	bid = va_arg(ap, int);
+	va_arg(ap, int);
 	nbuttons++;
     }
     va_end(ap);
@@ -299,10 +298,9 @@
     nbuttons = 0;
     while (1) {
 	char *btext = va_arg(ap, char *);
-	int bid;
 	if (!btext)
 	    break;
-	bid = va_arg(ap, int);
+	va_arg(ap, int);
     }
     va_end(ap);
     buttons = snewn(nbuttons, struct radio);
@@ -330,10 +328,9 @@
     nbuttons = 0;
     while (1) {
 	char *btext = va_arg(ap, char *);
-	int bid;
 	if (!btext)
 	    break;
-	bid = va_arg(ap, int);
+	va_arg(ap, int);
     }
     va_end(ap);
     buttons = snewn(nbuttons, struct radio);
@@ -372,7 +369,7 @@
 char *staticwrap(struct ctlpos *cp, HWND hwnd, char *text, int *lines)
 {
     HDC hdc = GetDC(hwnd);
-    int lpx = GetDeviceCaps(hdc, LOGPIXELSX);
+    GetDeviceCaps(hdc, LOGPIXELSX);
     int width, nlines, j;
     INT *pwidths, nfit;
     SIZE size;
Index: windows/windlg.c
===================================================================
--- windows/windlg.c	(revision 10285)
+++ windows/windlg.c	(working copy)
@@ -654,7 +654,7 @@
 
     ret =
 	SaneDialogBox(hinst, MAKEINTRESOURCE(IDD_MAINBOX), NULL,
-		  GenericMainDlgProc);
+		  (DLGPROC)GenericMainDlgProc);
 
     ctrl_free_box(ctrlbox);
     winctrl_cleanup(&ctrls_panel);
@@ -687,7 +687,7 @@
     dp.shortcuts['g'] = TRUE;	       /* the treeview: `Cate&gory' */
 
     ret = SaneDialogBox(hinst, MAKEINTRESOURCE(IDD_MAINBOX), NULL,
-		  GenericMainDlgProc);
+		  (DLGPROC)GenericMainDlgProc);
 
     ctrl_free_box(ctrlbox);
     winctrl_cleanup(&ctrls_base);
Index: windows/window.c
===================================================================
--- windows/window.c	(revision 10285)
+++ windows/window.c	(working copy)
@@ -803,7 +803,7 @@
 	    AppendMenu(m, MF_SEPARATOR, 0, 0);
 	    AppendMenu(m, MF_ENABLED, IDM_NEWSESS, "Ne&w Session...");
 	    AppendMenu(m, MF_ENABLED, IDM_DUPSESS, "&Duplicate Session");
-	    AppendMenu(m, MF_POPUP | MF_ENABLED, (UINT) savedsess_menu,
+	    AppendMenu(m, MF_POPUP | MF_ENABLED, savedsess_menu,
 		       "Sa&ved Sessions");
 	    AppendMenu(m, MF_ENABLED, IDM_RECONF, "Chan&ge Settings...");
 	    AppendMenu(m, MF_SEPARATOR, 0, 0);
@@ -1008,7 +1008,7 @@
 		saved_menu = new_menu; /* XXX lame stacking */
 		new_menu = CreatePopupMenu();
 		AppendMenu(saved_menu, MF_POPUP | MF_ENABLED,
-			   (UINT) new_menu, specials[i].name);
+			   new_menu, specials[i].name);
 		break;
 	      case TS_EXITMENU:
 		nesting--;
@@ -1033,13 +1033,13 @@
     for (j = 0; j < lenof(popup_menus); j++) {
 	if (specials_menu) {
 	    /* XXX does this free up all submenus? */
-	    DeleteMenu(popup_menus[j].menu, (UINT)specials_menu, MF_BYCOMMAND);
+	    DeleteMenu(popup_menus[j].menu, (uintptr_t)specials_menu, MF_BYCOMMAND);
 	    DeleteMenu(popup_menus[j].menu, IDM_SPECIALSEP, MF_BYCOMMAND);
 	}
 	if (new_menu) {
 	    InsertMenu(popup_menus[j].menu, IDM_SHOWLOG,
 		       MF_BYCOMMAND | MF_POPUP | MF_ENABLED,
-		       (UINT) new_menu, "S&pecial Command");
+		       new_menu, "S&pecial Command");
 	    InsertMenu(popup_menus[j].menu, IDM_SHOWLOG,
 		       MF_BYCOMMAND | MF_SEPARATOR, IDM_SPECIALSEP, 0);
 	}
@@ -1069,6 +1069,7 @@
 	break;
       default:
 	assert(0);
+        return;
     }
     {
 	HCURSOR cursor = LoadCursor(NULL, curstype);
@@ -1486,7 +1487,7 @@
 	if (cset == OEM_CHARSET)
 	    ucsdata.font_codepage = GetOEMCP();
 	else
-	    if (TranslateCharsetInfo ((DWORD *) cset, &info, TCI_SRCCHARSET))
+	    if (TranslateCharsetInfo ((DWORD *)(uintptr_t) cset, &info, TCI_SRCCHARSET))
 		ucsdata.font_codepage = info.ciACP;
 	else
 	    ucsdata.font_codepage = -1;
@@ -3086,7 +3087,7 @@
 		     */
 		    term_seen_key_event(term);
 		    if (ldisc)
-			ldisc_send(ldisc, buf, len, 1);
+			ldisc_send(ldisc, (char *) buf, len, 1);
 		    show_mouseptr(0);
 		}
 	    }
@@ -3160,7 +3161,7 @@
 	    buf[0] = wParam >> 8;
 	    term_seen_key_event(term);
 	    if (ldisc)
-		lpage_send(ldisc, kbd_codepage, buf, 2, 1);
+		lpage_send(ldisc, kbd_codepage, (char *) buf, 2, 1);
 	} else {
 	    char c = (unsigned char) wParam;
 	    term_seen_key_event(term);
@@ -4548,7 +4549,7 @@
 		break;
 	    }
 	    if (xkey) {
-		p += format_arrow_key(p, term, xkey, shift_state);
+		p += format_arrow_key((char *) p, term, xkey, shift_state);
 		return p - output;
 	    }
 	}
Index: windows/winhandl.c
===================================================================
--- windows/winhandl.c	(revision 10285)
+++ windows/winhandl.c	(working copy)
@@ -379,9 +379,9 @@
     struct handle *a = (struct handle *)av;
     struct handle *b = (struct handle *)bv;
 
-    if ((unsigned)a->u.g.ev_to_main < (unsigned)b->u.g.ev_to_main)
+    if ((uintptr_t)a->u.g.ev_to_main < (uintptr_t)b->u.g.ev_to_main)
 	return -1;
-    else if ((unsigned)a->u.g.ev_to_main > (unsigned)b->u.g.ev_to_main)
+    else if ((uintptr_t)a->u.g.ev_to_main > (uintptr_t)b->u.g.ev_to_main)
 	return +1;
     else
 	return 0;
@@ -392,9 +392,9 @@
     HANDLE *a = (HANDLE *)av;
     struct handle *b = (struct handle *)bv;
 
-    if ((unsigned)*a < (unsigned)b->u.g.ev_to_main)
+    if ((uintptr_t)*a < (uintptr_t)b->u.g.ev_to_main)
 	return -1;
-    else if ((unsigned)*a > (unsigned)b->u.g.ev_to_main)
+    else if ((uintptr_t)*a > (uintptr_t)b->u.g.ev_to_main)
 	return +1;
     else
 	return 0;
Index: windows/winhelp.c
===================================================================
--- windows/winhelp.c	(revision 10285)
+++ windows/winhelp.c	(working copy)
@@ -105,7 +105,7 @@
 #endif /* NO_HTMLHELP */
 	if (help_path) {
 	    char *cmd = dupprintf("JI(`',`%.*s')", colonpos, topic);
-	    WinHelp(hwnd, help_path, HELP_COMMAND, (DWORD)cmd);
+	    WinHelp(hwnd, help_path, HELP_COMMAND, cmd);
 	    sfree(cmd);
 	}
     } else {
Index: windows/winjump.c
===================================================================
--- windows/winjump.c	(revision 10285)
+++ windows/winjump.c	(working copy)
@@ -441,7 +441,7 @@
                              sessionname, "'", NULL);
     } else {
         assert(appname);
-        desc_string = dupprintf("Run %.*s", strcspn(appname, "."), appname);
+        desc_string = dupprintf("Run %.*s", (int)strcspn(appname, "."), appname);
     }
     ret->lpVtbl->SetDescription(ret, desc_string);
     sfree(desc_string);
@@ -457,7 +457,7 @@
             pv.pszVal = dupstr(sessionname);
         } else {
             assert(appname);
-            pv.pszVal = dupprintf("Run %.*s", strcspn(appname, "."), appname);
+            pv.pszVal = dupprintf("Run %.*s", (int)strcspn(appname, "."), appname);
         }
         pPS->lpVtbl->SetValue(pPS, &PKEY_Title, &pv);
         sfree(pv.pszVal);
Index: windows/winmisc.c
===================================================================
--- windows/winmisc.c	(revision 10285)
+++ windows/winmisc.c	(working copy)
@@ -218,9 +218,10 @@
                             FORMAT_MESSAGE_IGNORE_INSERTS), NULL, error,
                            MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
                            msgtext, lenof(msgtext)-1, NULL)) {
+            GetLastError();
             sprintf(msgtext,
                     "(unable to format: FormatMessage returned %d)", 
-                    error, GetLastError());
+                    error);
         } else {
             int len = strlen(msgtext);
             if (len > 0 && msgtext[len-1] == '\n')
Index: windows/winnet.c
===================================================================
--- windows/winnet.c	(revision 10285)
+++ windows/winnet.c	(working copy)
@@ -138,7 +138,7 @@
 static int cmpforsearch(void *av, void *bv)
 {
     Actual_Socket b = (Actual_Socket) bv;
-    unsigned long as = (unsigned long) av, bs = (unsigned long) b->s;
+    uintptr_t as = (uintptr_t) av, bs = (uintptr_t) b->s;
     if (as < bs)
 	return -1;
     if (as > bs)
@@ -472,7 +472,7 @@
                            MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
                            es->text + bufused, bufsize - bufused, NULL)) {
             sprintf(es->text + bufused,
-                    "Windows error code %d (and FormatMessage returned %d)", 
+                    "Windows error code %d (and FormatMessage returned %lu)",
                     error, GetLastError());
         } else {
             int len = strlen(es->text);
Index: windows/winpgen.c
===================================================================
--- windows/winpgen.c	(revision 10285)
+++ windows/winpgen.c	(working copy)
@@ -846,7 +846,7 @@
 	    AppendMenu(menu1, MF_ENABLED, IDC_SAVE, "&Save private key");
 	    AppendMenu(menu1, MF_SEPARATOR, 0, 0);
 	    AppendMenu(menu1, MF_ENABLED, IDC_QUIT, "E&xit");
-	    AppendMenu(menu, MF_POPUP | MF_ENABLED, (UINT) menu1, "&File");
+	    AppendMenu(menu, MF_POPUP | MF_ENABLED, menu1, "&File");
 	    state->filemenu = menu1;
 
 	    menu1 = CreateMenu();
@@ -855,7 +855,7 @@
 	    AppendMenu(menu1, MF_ENABLED, IDC_KEYSSH1, "SSH-&1 key (RSA)");
 	    AppendMenu(menu1, MF_ENABLED, IDC_KEYSSH2RSA, "SSH-2 &RSA key");
 	    AppendMenu(menu1, MF_ENABLED, IDC_KEYSSH2DSA, "SSH-2 &DSA key");
-	    AppendMenu(menu, MF_POPUP | MF_ENABLED, (UINT) menu1, "&Key");
+	    AppendMenu(menu, MF_POPUP | MF_ENABLED, menu1, "&Key");
 	    state->keymenu = menu1;
 
 	    menu1 = CreateMenu();
@@ -865,7 +865,7 @@
 		       "Export &OpenSSH key");
 	    AppendMenu(menu1, MF_ENABLED, IDC_EXPORT_SSHCOM,
 		       "Export &ssh.com key");
-	    AppendMenu(menu, MF_POPUP | MF_ENABLED, (UINT) menu1,
+	    AppendMenu(menu, MF_POPUP | MF_ENABLED, menu1,
 		       "Con&versions");
 	    state->cvtmenu = menu1;
 
@@ -873,7 +873,7 @@
 	    AppendMenu(menu1, MF_ENABLED, IDC_ABOUT, "&About");
 	    if (has_help())
 		AppendMenu(menu1, MF_ENABLED, IDC_GIVEHELP, "&Help");
-	    AppendMenu(menu, MF_POPUP | MF_ENABLED, (UINT) menu1, "&Help");
+	    AppendMenu(menu, MF_POPUP | MF_ENABLED, menu1, "&Help");
 
 	    SetMenu(hwnd, menu);
 	}
Index: windows/winpgnt.c
===================================================================
--- windows/winpgnt.c	(revision 10285)
+++ windows/winpgnt.c	(working copy)
@@ -1022,7 +1022,7 @@
 	    key = find234(ssh2keys, &b, cmpkeys_ssh2_asymm);
 	    if (!key)
 		goto failure;
-	    signature = key->alg->sign(key->data, data, datalen, &siglen);
+	    signature = key->alg->sign(key->data, (char *)data, datalen, &siglen);
 	    len = 5 + 4 + siglen;
 	    PUT_32BIT(ret, len - 4);
 	    ret[4] = SSH2_AGENT_SIGN_RESPONSE;
@@ -1121,7 +1121,8 @@
 	 */
 	{
 	    struct ssh2_userkey *key;
-	    char *comment, *alg;
+	    char *comment;
+	    unsigned char *alg;
 	    int alglen, commlen;
 	    int bloblen;
 
@@ -1756,7 +1757,6 @@
 static LRESULT CALLBACK WndProc(HWND hwnd, UINT message,
 				WPARAM wParam, LPARAM lParam)
 {
-    int ret;
     static int menuinprogress;
     static UINT msgTaskbarCreated = 0;
 
@@ -1791,7 +1791,7 @@
 	    menuinprogress = 1;
 	    update_sessions();
 	    SetForegroundWindow(hwnd);
-	    ret = TrackPopupMenu(systray_menu,
+	    TrackPopupMenu(systray_menu,
 				 TPM_RIGHTALIGN | TPM_BOTTOMALIGN |
 				 TPM_RIGHTBUTTON,
 				 wParam, lParam, 0, hwnd, NULL);
@@ -1802,7 +1802,7 @@
       case WM_SYSCOMMAND:
 	switch (wParam & ~0xF) {       /* low 4 bits reserved to Windows */
 	  case IDM_PUTTY:
-	    if((int)ShellExecute(hwnd, NULL, putty_path, _T(""), _T(""),
+	    if((uintptr_t)ShellExecute(hwnd, NULL, putty_path, _T(""), _T(""),
 				 SW_SHOW) <= 32) {
 		MessageBox(NULL, "Unable to execute PuTTY!",
 			   "Error", MB_OK | MB_ICONERROR);
@@ -1869,7 +1869,7 @@
 		    GetMenuItemInfo(session_menu, wParam, FALSE, &mii);
 		    strcpy(param, "@");
 		    strcat(param, mii.dwTypeData);
-		    if((int)ShellExecute(hwnd, NULL, putty_path, param,
+		    if((uintptr_t)ShellExecute(hwnd, NULL, putty_path, param,
 					 _T(""), SW_SHOW) <= 32) {
 			MessageBox(NULL, "Unable to execute PuTTY!", "Error",
 				   MB_OK | MB_ICONERROR);
@@ -2210,7 +2210,7 @@
 	session_menu = CreateMenu();
 	AppendMenu(systray_menu, MF_ENABLED, IDM_PUTTY, "&New Session");
 	AppendMenu(systray_menu, MF_POPUP | MF_ENABLED,
-		   (UINT) session_menu, "&Saved Sessions");
+		   (UINT_PTR) session_menu, "&Saved Sessions");
 	AppendMenu(systray_menu, MF_SEPARATOR, 0, 0);
     }
     AppendMenu(systray_menu, MF_ENABLED, IDM_VIEWKEYS,
Index: windows/winsecur.c
===================================================================
--- windows/winsecur.c	(revision 10285)
+++ windows/winsecur.c	(working copy)
@@ -104,8 +104,8 @@
                                      PACL *acl,
                                      char **error)
 {
-    SID_IDENTIFIER_AUTHORITY world_auth = SECURITY_WORLD_SID_AUTHORITY;
-    SID_IDENTIFIER_AUTHORITY nt_auth = SECURITY_NT_AUTHORITY;
+    SID_IDENTIFIER_AUTHORITY world_auth = {SECURITY_WORLD_SID_AUTHORITY};
+    SID_IDENTIFIER_AUTHORITY nt_auth = {SECURITY_NT_AUTHORITY};
     EXPLICIT_ACCESS ea[3];
     int acl_err;
     int ret = FALSE;
Index: windows/winser.c
===================================================================
--- windows/winser.c	(revision 10285)
+++ windows/winser.c	(working copy)
@@ -122,7 +122,7 @@
 	 * Configurable parameters.
 	 */
 	dcb.BaudRate = conf_get_int(conf, CONF_serspeed);
-	msg = dupprintf("Configuring baud rate %d", dcb.BaudRate);
+	msg = dupprintf("Configuring baud rate %lu", dcb.BaudRate);
 	logevent(serial->frontend, msg);
 	sfree(msg);
 
@@ -297,6 +297,7 @@
     /*
      * FIXME: what should we do if err returns something?
      */
+    (void)err;
 }
 
 /*
Index: windows/winsftp.c
===================================================================
--- windows/winsftp.c	(revision 10285)
+++ windows/winsftp.c	(working copy)
@@ -221,7 +221,7 @@
 	return -1;
     }
 
-    SetFilePointer(f->h, offset.lo, &(offset.hi), movemethod);
+    SetFilePointer(f->h, offset.lo, (PLONG)&(offset.hi), movemethod);
     
     if (GetLastError() != NO_ERROR)
 	return -1;
@@ -234,7 +234,7 @@
     uint64 ret;
 
     ret.hi = 0L;
-    ret.lo = SetFilePointer(f->h, 0L, &(ret.hi), FILE_CURRENT);
+    ret.lo = SetFilePointer(f->h, 0L, (PLONG)&(ret.hi), FILE_CURRENT);
 
     return ret;
 }
Index: windows/winucs.c
===================================================================
--- windows/winucs.c	(revision 10285)
+++ windows/winucs.c	(working copy)
@@ -441,12 +441,8 @@
 {
     int i, j;
     int used_dtf = 0;
-    char tbuf[256];
     int vtmode;
 
-    for (i = 0; i < 256; i++)
-	tbuf[i] = i;
-
     /* Decide on the Line and Font codepages */
     ucsdata->line_codepage = decode_codepage(conf_get_str(conf,
 							  CONF_line_codepage));
