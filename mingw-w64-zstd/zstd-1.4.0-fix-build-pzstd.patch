diff -Naur zstd-1.4.0.orig/contrib/pzstd/Logging.h zstd-1.4.0/contrib/pzstd/Logging.h
--- zstd-1.4.0.orig/contrib/pzstd/Logging.h	2019-04-17 08:39:25.480683500 -0400
+++ zstd-1.4.0/contrib/pzstd/Logging.h	2019-04-17 08:50:22.814999100 -0400
@@ -13,10 +13,10 @@
 
 namespace pzstd {
 
-constexpr int ERROR = 1;
-constexpr int INFO = 2;
-constexpr int DEBUG = 3;
-constexpr int VERBOSE = 4;
+constexpr int ERROR_pzstd = 1;
+constexpr int INFO_pzstd = 2;
+constexpr int DEBUG_pzstd = 3;
+constexpr int VERBOSE_pzstd = 4;
 
 class Logger {
   std::mutex mutex_;
diff -Naur zstd-1.4.0.orig/contrib/pzstd/Pzstd.cpp zstd-1.4.0/contrib/pzstd/Pzstd.cpp
--- zstd-1.4.0.orig/contrib/pzstd/Pzstd.cpp	2019-04-17 08:39:25.480683500 -0400
+++ zstd-1.4.0/contrib/pzstd/Pzstd.cpp	2019-04-17 08:52:22.445926500 -0400
@@ -94,12 +94,12 @@
     if (!options.decompress) {
       double ratio = static_cast<double>(bytesWritten) /
                      static_cast<double>(bytesRead + !bytesRead);
-      state.log(INFO, "%-20s :%6.2f%%   (%6" PRIu64 " => %6" PRIu64
+      state.log(INFO_pzstd, "%-20s :%6.2f%%   (%6" PRIu64 " => %6" PRIu64
                    " bytes, %s)\n",
                    inputFileName.c_str(), ratio * 100, bytesRead, bytesWritten,
                    outputFileName.c_str());
     } else {
-      state.log(INFO, "%-20s: %" PRIu64 " bytes \n",
+      state.log(INFO_pzstd, "%-20s: %" PRIu64 " bytes \n",
                    inputFileName.c_str(),bytesWritten);
     }
   }
@@ -139,12 +139,12 @@
     auto outputFd = std::fopen(outputFile.c_str(), "rb");
     if (outputFd != nullptr) {
       std::fclose(outputFd);
-      if (!state.log.logsAt(INFO)) {
+      if (!state.log.logsAt(INFO_pzstd)) {
         state.errorHolder.setError("Output file exists");
         return nullptr;
       }
       state.log(
-          INFO,
+          INFO_pzstd,
           "pzstd: %s already exists; do you wish to overwrite (y/n) ? ",
           outputFile.c_str());
       int c = getchar();
@@ -170,7 +170,7 @@
     auto printErrorGuard = makeScopeGuard([&] {
       if (state.errorHolder.hasError()) {
         returnCode = 1;
-        state.log(ERROR, "pzstd: %s: %s.\n", input.c_str(),
+        state.log(ERROR_pzstd, "pzstd: %s: %s.\n", input.c_str(),
                   state.errorHolder.getError().c_str());
       }
     });
@@ -388,7 +388,7 @@
   // Break the input up into chunks of size `step` and compress each chunk
   // independently.
   size_t step = calculateStep(size, numThreads, params);
-  state.log(DEBUG, "Chosen frame size: %zu\n", step);
+  state.log(DEBUG_pzstd, "Chosen frame size: %zu\n", step);
   auto status = FileStatus::Continue;
   while (status == FileStatus::Continue && !state.errorHolder.hasError()) {
     // Make a new input queue that we will put the chunk's input data into.
@@ -403,7 +403,7 @@
     });
     // Pass the output queue to the writer thread.
     chunks.push(std::move(out));
-    state.log(VERBOSE, "%s\n", "Starting a new frame");
+    state.log(VERBOSE_pzstd, "%s\n", "Starting a new frame");
     // Fill the input queue for the compression job we just started
     status = readData(*in, ZSTD_CStreamInSize(), step, fd, &bytesRead);
   }
@@ -540,14 +540,14 @@
     if (frameSize == 0) {
       // We hit a non SkippableFrame ==> not compressed by pzstd or corrupted
       // Pass the rest of the source to this decompression task
-      state.log(VERBOSE, "%s\n",
+      state.log(VERBOSE_pzstd, "%s\n",
           "Input not in pzstd format, falling back to serial decompression");
       while (status == FileStatus::Continue && !state.errorHolder.hasError()) {
         status = readData(*in, chunkSize, chunkSize, fd, &totalBytesRead);
       }
       break;
     }
-    state.log(VERBOSE, "Decompressing a frame of size %zu", frameSize);
+    state.log(VERBOSE_pzstd, "Decompressing a frame of size %zu", frameSize);
     // Fill the input queue for the decompression job we just started
     status = readData(*in, chunkSize, frameSize, fd, &totalBytesRead);
   }
@@ -573,7 +573,7 @@
     bool decompress) {
   auto& errorHolder = state.errorHolder;
   auto lineClearGuard = makeScopeGuard([&state] {
-    state.log.clear(INFO);
+    state.log.clear(INFO_pzstd);
   });
   std::uint64_t bytesWritten = 0;
   std::shared_ptr<BufferWorkQueue> out;
@@ -602,7 +602,7 @@
         return bytesWritten;
       }
       bytesWritten += buffer.size();
-      state.log.update(INFO, "Written: %u MB   ",
+      state.log.update(INFO_pzstd, "Written: %u MB   ",
                 static_cast<std::uint32_t>(bytesWritten >> 20));
     }
   }
diff -Naur zstd-1.4.0.orig/contrib/pzstd/Pzstd.h zstd-1.4.0/contrib/pzstd/Pzstd.h
--- zstd-1.4.0.orig/contrib/pzstd/Pzstd.h	2019-04-17 08:39:25.480683500 -0400
+++ zstd-1.4.0/contrib/pzstd/Pzstd.h	2019-04-17 08:52:47.487047400 -0400
@@ -41,7 +41,7 @@
       auto parameters = options.determineParameters();
       cStreamPool.reset(new ResourcePool<ZSTD_CStream>{
           [this, parameters]() -> ZSTD_CStream* {
-            this->log(VERBOSE, "%s\n", "Creating new ZSTD_CStream");
+            this->log(VERBOSE_pzstd, "%s\n", "Creating new ZSTD_CStream");
             auto zcs = ZSTD_createCStream();
             if (zcs) {
               auto err = ZSTD_initCStream_advanced(
@@ -59,7 +59,7 @@
     } else {
       dStreamPool.reset(new ResourcePool<ZSTD_DStream>{
           [this]() -> ZSTD_DStream* {
-            this->log(VERBOSE, "%s\n", "Creating new ZSTD_DStream");
+            this->log(VERBOSE_pzstd, "%s\n", "Creating new ZSTD_DStream");
             auto zds = ZSTD_createDStream();
             if (zds) {
               auto err = ZSTD_initDStream(zds);
