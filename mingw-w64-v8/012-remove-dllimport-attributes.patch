diff --git a/src/execution/interrupts-scope.h b/src/execution/interrupts-scope.h
index 8be3ce98..76815c32 100644
--- a/src/execution/interrupts-scope.h
+++ b/src/execution/interrupts-scope.h
@@ -19,7 +19,7 @@ class V8_NODISCARD InterruptsScope {
  public:
   enum Mode : uint8_t { kPostponeInterrupts, kRunInterrupts, kNoop };
 
-  V8_EXPORT_PRIVATE InterruptsScope(Isolate* isolate, uint32_t intercept_mask,
+  InterruptsScope(Isolate* isolate, uint32_t intercept_mask,
                                     Mode mode)
       : stack_guard_(nullptr),
         intercept_mask_(intercept_mask),
diff --git a/src/heap/conservative-stack-visitor.h b/src/heap/conservative-stack-visitor.h
index d5f92c35..ae75dd12 100644
--- a/src/heap/conservative-stack-visitor.h
+++ b/src/heap/conservative-stack-visitor.h
@@ -33,7 +33,7 @@ class RootVisitor;
 // 5) OnlyScanMainV8Heap() - returns true if the visitor does not handle the
 // external code and trusted spaces.
 template <typename ConcreteVisitor>
-class V8_EXPORT_PRIVATE ConservativeStackVisitorBase
+class ConservativeStackVisitorBase
     : public ::heap::base::StackVisitor {
  public:
   ConservativeStackVisitorBase(Isolate* isolate, RootVisitor* root_visitor);
diff --git a/src/objects/js-objects.h b/src/objects/js-objects.h
index 5900e514..14ea5b53 100644
--- a/src/objects/js-objects.h
+++ b/src/objects/js-objects.h
@@ -745,7 +745,7 @@ class JSObject : public TorqueGeneratedJSObject<JSObject, JSReceiver> {
       PropertyNormalizationMode mode, int expected_additional_properties,
       bool use_cache, const char* reason);
 
-  V8_EXPORT_PRIVATE static void NormalizeProperties(
+  static void NormalizeProperties(
       Isolate* isolate, DirectHandle<JSObject> object,
       PropertyNormalizationMode mode, int expected_additional_properties,
       const char* reason) {
diff --git a/src/objects/map.h b/src/objects/map.h
index 73838fa6..2021427b 100644
--- a/src/objects/map.h
+++ b/src/objects/map.h
@@ -601,7 +601,7 @@ class Map : public TorqueGeneratedMap<Map, HeapObject> {
       Isolate* isolate, DirectHandle<Map> map, ElementsKind new_elements_kind,
       DirectHandle<JSPrototype> new_prototype, PropertyNormalizationMode mode,
       bool use_cache, const char* reason);
-  V8_EXPORT_PRIVATE static Handle<Map> Normalize(
+  static Handle<Map> Normalize(
       Isolate* isolate, DirectHandle<Map> map, ElementsKind new_elements_kind,
       DirectHandle<JSPrototype> new_prototype, PropertyNormalizationMode mode,
       const char* reason) {
diff --git a/src/objects/string-inl.h b/src/objects/string-inl.h
index c1bbd1ea..1eb93ba9 100644
--- a/src/objects/string-inl.h
+++ b/src/objects/string-inl.h
@@ -851,7 +851,7 @@ const Char* String::GetDirectStringChars(
 // static
 template <template <typename> typename HandleType>
   requires(std::is_convertible_v<HandleType<String>, DirectHandle<String>>)
-V8_EXPORT_PRIVATE HandleType<String> String::SlowFlatten(
+HandleType<String> String::SlowFlatten(
     Isolate* isolate, HandleType<ConsString> cons, AllocationType allocation) {
   DCHECK(!cons->IsFlat());
   DCHECK_NE(cons->second()->length(), 0);  // Equivalent to !IsFlat.
diff --git a/src/utils/address-map.h b/src/utils/address-map.h
index cd09209d..88fec7ab 100644
--- a/src/utils/address-map.h
+++ b/src/utils/address-map.h
@@ -61,7 +61,7 @@ class RootIndexMap {
   RootIndexMap& operator=(const RootIndexMap&) = delete;
 
   // Returns true on successful lookup and sets *|out_root_list|.
-  V8_EXPORT_PRIVATE bool Lookup(Tagged<HeapObject> obj,
+  bool Lookup(Tagged<HeapObject> obj,
                                 RootIndex* out_root_list) const {
     Maybe<uint32_t> maybe_index = map_->Get(obj);
     if (maybe_index.IsJust()) {
