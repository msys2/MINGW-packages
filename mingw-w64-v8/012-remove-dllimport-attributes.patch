diff --git a/include/v8-fast-api-calls.h b/include/v8-fast-api-calls.h
index e40f106..c70808a 100644
--- a/include/v8-fast-api-calls.h
+++ b/include/v8-fast-api-calls.h
@@ -328,7 +328,7 @@ class CTypeInfo {
 struct FastApiTypedArrayBase {
  public:
   // Returns the length in number of elements.
-  size_t V8_EXPORT length() const { return length_; }
+  size_t length() const { return length_; }
   // Checks whether the given index is within the bounds of the collection.
   void V8_EXPORT ValidateIndex(size_t index) const;
 
diff --git a/src/common/assert-scope.h b/src/common/assert-scope.h
index 42d9649..064c33d 100644
--- a/src/common/assert-scope.h
+++ b/src/common/assert-scope.h
@@ -147,7 +147,7 @@ class CombinationAssertScope;
 template <typename Scope>
 class V8_NODISCARD CombinationAssertScope<Scope> : public Scope {
  public:
-  V8_EXPORT_PRIVATE static bool IsAllowed() {
+  static bool IsAllowed() {
     // Define IsAllowed() explicitly rather than with using Scope::IsAllowed, to
     // allow SFINAE removal of IsAllowed() when it's not defined (under debug).
     return Scope::IsAllowed();
@@ -164,12 +164,12 @@ class CombinationAssertScope<Scope, Scopes...>
 
  public:
   // Constructor for per-thread scopes.
-  V8_EXPORT_PRIVATE CombinationAssertScope() : Scope(), NextScopes() {}
+  CombinationAssertScope() : Scope(), NextScopes() {}
   // Constructor for per-isolate scopes.
-  V8_EXPORT_PRIVATE explicit CombinationAssertScope(Isolate* isolate)
+  explicit CombinationAssertScope(Isolate* isolate)
       : Scope(isolate), NextScopes(isolate) {}
 
-  V8_EXPORT_PRIVATE static bool IsAllowed() {
+  static bool IsAllowed() {
     return Scope::IsAllowed() && NextScopes::IsAllowed();
   }
 
diff --git a/src/execution/interrupts-scope.h b/src/execution/interrupts-scope.h
index 8be3ce9..76815c3 100644
--- a/src/execution/interrupts-scope.h
+++ b/src/execution/interrupts-scope.h
@@ -19,7 +19,7 @@ class V8_NODISCARD InterruptsScope {
  public:
   enum Mode : uint8_t { kPostponeInterrupts, kRunInterrupts, kNoop };
 
-  V8_EXPORT_PRIVATE InterruptsScope(Isolate* isolate, uint32_t intercept_mask,
+  InterruptsScope(Isolate* isolate, uint32_t intercept_mask,
                                     Mode mode)
       : stack_guard_(nullptr),
         intercept_mask_(intercept_mask),
diff --git a/src/heap/new-spaces.h b/src/heap/new-spaces.h
index dc57faf..ec08364 100644
--- a/src/heap/new-spaces.h
+++ b/src/heap/new-spaces.h
@@ -516,7 +516,7 @@ class V8_EXPORT_PRIVATE SemiSpaceNewSpace final : public NewSpace {
 // -----------------------------------------------------------------------------
 // PagedNewSpace
 
-class V8_EXPORT_PRIVATE PagedSpaceForNewSpace final : public PagedSpaceBase {
+class PagedSpaceForNewSpace final : public PagedSpaceBase {
  public:
   // Creates an old space object. The constructor does not allocate pages
   // from OS.
diff --git a/src/objects/js-objects.h b/src/objects/js-objects.h
index e0cd974..b9edff1 100644
--- a/src/objects/js-objects.h
+++ b/src/objects/js-objects.h
@@ -663,7 +663,7 @@ class JSObject : public TorqueGeneratedJSObject<JSObject, JSReceiver> {
       Isolate* isolate, Handle<JSObject> object, PropertyNormalizationMode mode,
       int expected_additional_properties, bool use_cache, const char* reason);
 
-  V8_EXPORT_PRIVATE static void NormalizeProperties(
+  static void NormalizeProperties(
       Isolate* isolate, Handle<JSObject> object, PropertyNormalizationMode mode,
       int expected_additional_properties, const char* reason) {
     const bool kUseCache = true;
diff --git a/src/objects/map.h b/src/objects/map.h
index 46930be..c0ff7e5 100644
--- a/src/objects/map.h
+++ b/src/objects/map.h
@@ -549,7 +549,7 @@ class Map : public TorqueGeneratedMap<Map, HeapObject> {
   V8_EXPORT_PRIVATE static Handle<Map> Normalize(
       Isolate* isolate, Handle<Map> map, ElementsKind new_elements_kind,
       PropertyNormalizationMode mode, bool use_cache, const char* reason);
-  V8_EXPORT_PRIVATE static Handle<Map> Normalize(Isolate* isolate,
+  static Handle<Map> Normalize(Isolate* isolate,
                                                  Handle<Map> map,
                                                  ElementsKind new_elements_kind,
                                                  PropertyNormalizationMode mode,
diff --git a/src/utils/address-map.h b/src/utils/address-map.h
index 2f7c633..e672b1e 100644
--- a/src/utils/address-map.h
+++ b/src/utils/address-map.h
@@ -59,7 +59,7 @@ class RootIndexMap {
   RootIndexMap& operator=(const RootIndexMap&) = delete;
 
   // Returns true on successful lookup and sets *|out_root_list|.
-  V8_EXPORT_PRIVATE bool Lookup(Tagged<HeapObject> obj,
+  bool Lookup(Tagged<HeapObject> obj,
                                 RootIndex* out_root_list) const {
     Maybe<uint32_t> maybe_index = map_->Get(obj);
     if (maybe_index.IsJust()) {
diff -aurp a/src/logging/runtime-call-stats.h b/src/logging/runtime-call-stats.h
--- a/src/logging/runtime-call-stats.h	2023-10-08 16:27:48.000000000 +0200
+++ b/src/logging/runtime-call-stats.h	2023-10-08 16:27:52.000000000 +0200
@@ -794,7 +794,7 @@ class WorkerThreadRuntimeCallStats {};
 class RuntimeCallStats {
  public:
   enum ThreadType { kMainIsolateThread, kWorkerThread };
-  explicit V8_EXPORT_PRIVATE RuntimeCallStats(ThreadType thread_type) {}
+  explicit RuntimeCallStats(ThreadType thread_type) {}
 };
 
 class WorkerThreadRuntimeCallStatsScope {
