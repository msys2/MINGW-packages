--- a/include/v8-fast-api-calls.h
+++ b/include/v8-fast-api-calls.h
@@ -324,7 +324,7 @@
 struct FastApiTypedArrayBase {
  public:
   // Returns the length in number of elements.
-  size_t V8_EXPORT length() const { return length_; }
+  size_t length() const { return length_; }
   // Checks whether the given index is within the bounds of the collection.
   void V8_EXPORT ValidateIndex(size_t index) const;
 
--- a/src/common/assert-scope.h
+++ b/src/common/assert-scope.h
@@ -151,7 +151,7 @@
 template <typename Scope>
 class V8_NODISCARD CombinationAssertScope<Scope> : public Scope {
  public:
-  V8_EXPORT_PRIVATE static bool IsAllowed() {
+  static bool IsAllowed() {
     // Define IsAllowed() explicitly rather than with using Scope::IsAllowed, to
     // allow SFINAE removal of IsAllowed() when it's not defined (under debug).
     return Scope::IsAllowed();
@@ -168,12 +168,12 @@
 
  public:
   // Constructor for per-thread scopes.
-  V8_EXPORT_PRIVATE CombinationAssertScope() : Scope(), NextScopes() {}
+  CombinationAssertScope() : Scope(), NextScopes() {}
   // Constructor for per-isolate scopes.
-  V8_EXPORT_PRIVATE explicit CombinationAssertScope(Isolate* isolate)
+  explicit CombinationAssertScope(Isolate* isolate)
       : Scope(isolate), NextScopes(isolate) {}
 
-  V8_EXPORT_PRIVATE static bool IsAllowed() {
+  static bool IsAllowed() {
     return Scope::IsAllowed() && NextScopes::IsAllowed();
   }
 
