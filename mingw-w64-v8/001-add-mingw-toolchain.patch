diff --git a/config/BUILD.gn b/config/BUILD.gn
index 53511ac36..8c57b86b3 100644
--- a/config/BUILD.gn
+++ b/config/BUILD.gn
@@ -162,25 +162,25 @@ config("default_libs") {
     # instead the targets that use the less common ones (e.g. wininet or
     # winspool) should include those explicitly.
     libs = [
-      "advapi32.lib",
-      "comdlg32.lib",
-      "dbghelp.lib",
-      "dnsapi.lib",
-      "gdi32.lib",
-      "msimg32.lib",
-      "odbc32.lib",
-      "odbccp32.lib",
-      "oleaut32.lib",
-      "shell32.lib",
-      "shlwapi.lib",
-      "user32.lib",
-      "usp10.lib",
-      "uuid.lib",
-      "version.lib",
-      "wininet.lib",
-      "winmm.lib",
-      "winspool.lib",
-      "ws2_32.lib",
+      "advapi32",
+      "comdlg32",
+      "dbghelp",
+      "dnsapi",
+      "gdi32",
+      "msimg32",
+      "odbc32",
+      "odbccp32",
+      "oleaut32",
+      "shell32",
+      "shlwapi",
+      "user32",
+      "usp10",
+      "uuid",
+      "version",
+      "wininet",
+      "winmm",
+      "winspool",
+      "ws2_32",
 
       # Please don't add more stuff here. We should actually be making this
       # list smaller, since all common things should be covered. If you need
@@ -196,9 +196,9 @@ config("default_libs") {
     } else {
       # These libraries are not compatible with Windows UWP (i.e. store apps.)
       libs += [
-        "delayimp.lib",
-        "kernel32.lib",
-        "ole32.lib",
+        "delayimp",
+        "kernel32",
+        "ole32",
       ]
     }
   } else if (is_android) {
diff --git a/config/BUILDCONFIG.gn b/config/BUILDCONFIG.gn
index 105e194dd..e661e359c 100644
--- a/config/BUILDCONFIG.gn
+++ b/config/BUILDCONFIG.gn
@@ -135,6 +135,9 @@ declare_args() {
   # set "is_official_build" to true for any build intended to ship to end-users.
   is_official_build = false
 
+  # Set to true when compiling with the MinGW GCC compiler on the MSYS2 environment.
+  is_mingw = current_os == "win" && (getenv("CXX") == "g++" || getenv("CXX") == "clang++")
+
   # Set to true when compiling with the Clang compiler.
   is_clang = current_os != "linux" ||
              (current_cpu != "s390x" && current_cpu != "s390" &&
@@ -210,16 +213,20 @@ if (host_toolchain == "") {
     # On Windows always use the target CPU for host builds for x86/x64. On the
     # configurations we support this will always work and it saves build steps.
     # Windows ARM64 targets require an x64 host for cross build.
-    if (target_cpu == "x86" || target_cpu == "x64") {
-      if (is_clang) {
-        host_toolchain = "//build/toolchain/win:win_clang_$target_cpu"
+    if (is_mingw) {
+        host_toolchain = "//build/toolchain/win:mingw_$target_cpu"
+    } else {
+      if (target_cpu == "x86" || target_cpu == "x64") {
+        if (is_clang) {
+          host_toolchain = "//build/toolchain/win:win_clang_$target_cpu"
+        } else {
+          host_toolchain = "//build/toolchain/win:$target_cpu"
+        }
+      } else if (is_clang) {
+        host_toolchain = "//build/toolchain/win:win_clang_$host_cpu"
       } else {
-        host_toolchain = "//build/toolchain/win:$target_cpu"
+        host_toolchain = "//build/toolchain/win:$host_cpu"
       }
-    } else if (is_clang) {
-      host_toolchain = "//build/toolchain/win:win_clang_$host_cpu"
-    } else {
-      host_toolchain = "//build/toolchain/win:$host_cpu"
     }
   } else if (host_os == "aix") {
     host_toolchain = "//build/toolchain/aix:$host_cpu"
@@ -253,10 +260,14 @@ if (target_os == "android") {
 } else if (target_os == "win") {
   # On Windows, we use the same toolchain for host and target by default.
   # Beware, win cross builds have some caveats, see docs/win_cross.md
-  if (is_clang) {
-    _default_toolchain = "//build/toolchain/win:win_clang_$target_cpu"
+  if (is_mingw) {
+    _default_toolchain = "//build/toolchain/win:mingw_$target_cpu"
   } else {
-    _default_toolchain = "//build/toolchain/win:$target_cpu"
+    if (is_clang) {
+      _default_toolchain = "//build/toolchain/win:win_clang_$target_cpu"
+    } else {
+      _default_toolchain = "//build/toolchain/win:$target_cpu"
+    }
   }
 } else if (target_os == "winuwp") {
   # Only target WinUWP on for a Windows store application and only
@@ -309,6 +320,7 @@ is_win = current_os == "win" || current_os == "winuwp"
 
 is_apple = is_ios || is_mac
 is_posix = !is_win && !is_fuchsia
+is_msvc = is_win && !is_mingw
 
 # =============================================================================
 # TARGET DEFAULTS
@@ -412,7 +424,7 @@ set_defaults("rust_library") {
 
 # Compute the set of configs common to all linked targets (shared libraries,
 # loadable modules, executables) to avoid duplication below.
-if (is_win) {
+if (is_msvc) {
   # Many targets remove these configs, so they are not contained within
   # //build/config:executable_config for easy removal.
   _linker_configs = [
@@ -434,7 +446,7 @@ default_executable_configs = default_compiler_configs + [
                                "//build/config:executable_config",
                              ] + _linker_configs
 
-if (is_win) {
+if (is_msvc) {
   # Turn on linker CFI for executables, and position it so it can be removed
   # if needed.
   default_executable_configs += [ "//build/config/win:cfi_linker" ]
@@ -458,7 +470,7 @@ default_shared_library_configs = default_compiler_configs + [
                                    "//build/config:default_libs",
                                    "//build/config:shared_library_config",
                                  ] + _linker_configs
-if (is_win) {
+if (is_msvc) {
   # Turn on linker CFI for DLLs, and position it so it can be removed if needed.
   default_shared_library_configs += [ "//build/config/win:cfi_linker" ]
 }
diff --git a/config/clang/clang.gni b/config/clang/clang.gni
index 1a065b5e3..97fd8c9f7 100644
--- a/config/clang/clang.gni
+++ b/config/clang/clang.gni
@@ -12,7 +12,7 @@ declare_args() {
   # coding guidelines, etc. Only used when compiling with Chrome's Clang, not
   # Chrome OS's.
   clang_use_chrome_plugins =
-      is_clang && !is_nacl && current_os != "zos" &&
+      is_clang && !is_nacl && !is_mingw && current_os != "zos" &&
       default_toolchain != "//build/toolchain/cros:target"
 
   enable_check_raw_ptr_fields =
diff --git a/config/compiler/BUILD.gn b/config/compiler/BUILD.gn
index 06812fb9c..cd510594b 100644
--- a/config/compiler/BUILD.gn
+++ b/config/compiler/BUILD.gn
@@ -338,7 +338,7 @@ config("compiler") {
 
   # In general, Windows is totally different, but all the other builds share
   # some common compiler and linker configuration.
-  if (!is_win) {
+  if (!is_msvc) {
     # Common POSIX compiler flags setup.
     # --------------------------------
     cflags += [ "-fno-strict-aliasing" ]  # See http://crbug.com/32204
@@ -414,7 +414,7 @@ config("compiler") {
 
   # Non-Apple Posix and Fuchsia compiler flags setup.
   # -----------------------------------
-  if ((is_posix && !is_apple) || is_fuchsia) {
+  if ((is_posix && !is_apple) || is_fuchsia || is_mingw) {
     if (enable_profiling) {
       if (!is_debug) {
         cflags += [ "-g" ]
@@ -567,11 +567,11 @@ config("compiler") {
     # TODO(thakis): Make the driver pass --color-diagnostics to the linker
     # if -fcolor-diagnostics is passed to it, and pass -fcolor-diagnostics
     # in ldflags instead.
-    if (is_win) {
+    if (is_msvc) {
       # On Windows, we call the linker directly, instead of calling it through
       # the driver.
       ldflags += [ "--color-diagnostics" ]
-    } else {
+    } else if (!is_clang) {
       ldflags += [ "-Wl,--color-diagnostics" ]
     }
   }
@@ -582,7 +582,7 @@ config("compiler") {
     ldflags += [ "-Wl,-z,keep-text-section-prefix" ]
   }
 
-  if (is_clang && !is_nacl && current_os != "zos") {
+  if (is_clang && !is_nacl && !is_mingw && current_os != "zos") {
     cflags += [ "-fcrash-diagnostics-dir=" + clang_diagnostic_dir ]
     if (save_reproducers_on_lld_crash && use_lld) {
       ldflags += [
@@ -598,7 +598,7 @@ config("compiler") {
       "-instcombine-lower-dbg-declare=0",
     ]
     if (!is_debug && use_thin_lto && is_a_target_toolchain) {
-      if (is_win) {
+      if (is_msvc) {
         ldflags += [ "-mllvm:-instcombine-lower-dbg-declare=0" ]
       } else {
         ldflags += [ "-Wl,-mllvm,-instcombine-lower-dbg-declare=0" ]
@@ -606,7 +606,7 @@ config("compiler") {
     }
 
     # TODO(crbug.com/1235145): Investigate why/if this should be needed.
-    if (is_win) {
+    if (is_msvc) {
       cflags += [ "/clang:-ffp-contract=off" ]
     } else {
       cflags += [ "-ffp-contract=off" ]
@@ -615,9 +615,9 @@ config("compiler") {
 
   # C11/C++11 compiler flags setup.
   # ---------------------------
-  if (is_linux || is_chromeos || is_android || (is_nacl && is_clang) ||
+  if (is_linux || is_mingw || is_chromeos || is_android || (is_nacl && is_clang) ||
       current_os == "aix") {
-    if (is_clang) {
+    if (is_clang && !is_mingw) {
       standard_prefix = "c"
 
       # Since we build with -std=c* and not -std=gnu*, _GNU_SOURCE will not be
@@ -657,9 +657,9 @@ config("compiler") {
     } else {
       # The gcc bots are currently using GCC 9, which is not new enough to
       # support "c++20"/"gnu++20".
-      cflags_cc += [ "-std=${standard_prefix}++2a" ]
+      cflags_cc += [ "-std=${standard_prefix}++20" ]
     }
-  } else if (is_win) {
+  } else if (is_msvc) {
     cflags_c += [ "/std:c11" ]
     if ((defined(use_cxx17) && use_cxx17) ||
         (!is_clang && defined(msvc_use_cxx17) && msvc_use_cxx17)) {
@@ -682,6 +682,10 @@ config("compiler") {
     }
   }
 
+  if (is_mingw && !is_clang) {
+    cflags += [ "-fdiagnostics-color" ]
+  }
+
   if (is_clang && current_os != "zos") {
     # C++17 removes trigraph support, but clang still warns that it ignores
     # them when seeing them.  Don't.
@@ -719,7 +723,7 @@ config("compiler") {
     # should be able to better manage binary size increases on its own.
     import_instr_limit = 30
 
-    if (is_win) {
+    if (is_msvc) {
       ldflags += [
         "/opt:lldltojobs=all",
         "-mllvm:-import-instr-limit=$import_instr_limit",
@@ -808,7 +812,7 @@ config("compiler") {
   if (compiler_timing) {
     if (is_clang && !is_nacl) {
       cflags += [ "-ftime-trace" ]
-    } else if (is_win) {
+    } else if (is_msvc) {
       cflags += [
         # "Documented" here:
         # http://aras-p.info/blog/2017/10/23/Best-unknown-MSVC-flag-d2cgsummary/
@@ -838,15 +842,15 @@ config("compiler") {
   # jumps. Turn it off by default and enable selectively for targets where it's
   # beneficial.
   if (use_lld && !enable_call_graph_profile_sort) {
-    if (is_win) {
+    if (is_msvc) {
       ldflags += [ "/call-graph-profile-sort:no" ]
-    } else {
+    } else if (!is_mingw) {
       ldflags += [ "-Wl,--no-call-graph-profile-sort" ]
     }
   }
 
   if (is_clang && !is_nacl && show_includes) {
-    if (is_win) {
+    if (is_msvc) {
       # TODO(crbug.com/1223741): Goma mixes the -H and /showIncludes output.
       assert(!use_goma, "show_includes on Windows is not reliable with goma")
       cflags += [
@@ -865,7 +869,7 @@ config("compiler") {
   # prevent us from running into problems in the Microsoft C++ ABI (see
   # https://crbug.com/847724).
   if (is_clang && !is_nacl && target_os != "chromeos" &&
-      (is_win || use_custom_libcxx)) {
+      (is_msvc || use_custom_libcxx)) {
     cflags += [ "-fcomplete-member-pointers" ]
   }
 
@@ -1030,7 +1034,7 @@ config("thinlto_optimize_default") {
   if (!is_debug && use_thin_lto && is_a_target_toolchain) {
     lto_opt_level = 0
 
-    if (is_win) {
+    if (is_msvc) {
       ldflags = [ "/opt:lldlto=" + lto_opt_level ]
     } else {
       ldflags = [ "-Wl,--lto-O" + lto_opt_level ]
@@ -1059,7 +1063,7 @@ config("thinlto_optimize_max") {
       lto_opt_level = 0
     }
 
-    if (is_win) {
+    if (is_msvc) {
       ldflags = [ "/opt:lldlto=" + lto_opt_level ]
     } else {
       ldflags = [ "-Wl,--lto-O" + lto_opt_level ]
@@ -1093,7 +1097,7 @@ config("compiler_cpu_abi") {
     ldflags += [ "-fno-global-isel" ]
   }
 
-  if ((is_posix && !is_apple) || is_fuchsia) {
+  if ((is_posix && !is_apple) || is_fuchsia || is_mingw) {
     # CPU architecture. We may or may not be doing a cross compile now, so for
     # simplicity we always explicitly set the architecture.
     if (current_cpu == "x64") {
@@ -1127,7 +1131,7 @@ config("compiler_cpu_abi") {
         cflags += [ "-mtune=$arm_tune" ]
       }
     } else if (current_cpu == "arm64") {
-      if (is_clang && !is_android && !is_nacl && !is_fuchsia &&
+      if (is_clang && !is_android && !is_nacl && !is_fuchsia && !is_mingw &&
           !(is_chromeos_lacros && is_chromeos_device)) {
         cflags += [ "--target=aarch64-linux-gnu" ]
         ldflags += [ "--target=aarch64-linux-gnu" ]
@@ -1438,7 +1442,7 @@ config("compiler_deterministic") {
   # Eliminate build metadata (__DATE__, __TIME__ and __TIMESTAMP__) for
   # deterministic build.  See https://crbug.com/314403
   if (!is_official_build) {
-    if (is_win && !is_clang) {
+    if (is_msvc && !is_clang) {
       cflags += [
         "/wd4117",  # Trying to define or undefine a predefined macro.
         "/D__DATE__=",
@@ -1476,12 +1480,12 @@ config("compiler_deterministic") {
       cflags += [ "-ffile-compilation-dir=." ]
       swiftflags += [ "-file-compilation-dir=." ]
     }
-    if (!is_win) {
+    if (!is_msvc) {
       # We don't use clang -cc1as on Windows (yet? https://crbug.com/762167)
       asmflags = [ "-Wa,-fdebug-compilation-dir,." ]
     }
 
-    if (is_win && use_lld) {
+    if (is_msvc && use_lld) {
       if (symbol_level == 2 || (is_clang && using_sanitizer)) {
         # Absolutize source file paths for PDB. Pass the real build directory
         # if the pdb contains source-level debug information and if linker
@@ -1514,7 +1518,7 @@ config("compiler_deterministic") {
 }
 
 config("clang_revision") {
-  if (is_clang && clang_base_path == default_clang_base_path) {
+  if (is_msvc && is_clang && clang_base_path == default_clang_base_path) {
     update_args = [
       "--print-revision",
       "--verify-version=$clang_version",
@@ -1648,7 +1652,7 @@ config("default_warnings") {
   cflags_cc = []
   ldflags = []
 
-  if (is_win) {
+  if (is_msvc) {
     if (treat_warnings_as_errors) {
       cflags += [ "/WX" ]
     }
@@ -1723,10 +1727,30 @@ config("default_warnings") {
       # files.
       cflags += [ "-Wno-packed-not-aligned" ]
     }
+
+    if (is_mingw) {
+      cflags += [
+        "-Wno-attributes",           # "__decspec(dllimport) inline"
+        "-Wno-format",               # PRIu64 llu support on MinGW
+        "-Wno-unknown-pragmas",
+      ]
+      if (!is_clang) {
+        cflags_cc += [
+          "-Wno-invalid-offsetof",
+          "-Wno-pessimizing-move",
+          "-Wno-subobject-linkage",    # Tests having code in header files
+        ]
+        cflags += [
+          "-Wno-array-bounds",
+          "-Wno-unused-but-set-variable",
+          "-Wno-stringop-overflow",    # False positive overflow error on gcc 10
+        ]
+      }
+    }
   }
 
   # Common Clang and GCC warning setup.
-  if (!is_win || is_clang) {
+  if (!is_msvc || is_clang) {
     cflags += [
       # Disables.
       "-Wno-missing-field-initializers",  # "struct foo f = {0};"
@@ -1858,7 +1882,7 @@ config("prevent_unsafe_narrowing") {
 # part of Chromium.
 
 config("chromium_code") {
-  if (is_win) {
+  if (is_msvc) {
     if (is_clang) {
       cflags = [ "/W4" ]  # Warning level 4.
 
@@ -1924,7 +1948,7 @@ config("chromium_code") {
     }
   }
 
-  if (is_clang) {
+  if (is_clang && !is_mingw) {
     cflags += [
       # Warn on missing break statements at the end of switch cases.
       # For intentional fallthrough, use [[fallthrough]].
@@ -1959,7 +1983,7 @@ config("no_chromium_code") {
   cflags_cc = []
   defines = []
 
-  if (is_win) {
+  if (is_msvc) {
     if (is_clang) {
       cflags += [ "/W3" ]  # Warning level 3.
     }
@@ -2026,7 +2050,7 @@ config("noshadowing") {
 # Allows turning Run-Time Type Identification on or off.
 
 config("rtti") {
-  if (is_win) {
+  if (is_msvc) {
     cflags_cc = [ "/GR" ]
   } else {
     cflags_cc = [ "-frtti" ]
@@ -2036,7 +2060,7 @@ config("rtti") {
 config("no_rtti") {
   # Some sanitizer configs may require RTTI to be left enabled globally
   if (!use_rtti) {
-    if (is_win) {
+    if (is_msvc) {
       cflags_cc = [ "/GR-" ]
     } else {
       cflags_cc = [ "-fno-rtti" ]
@@ -2080,7 +2104,7 @@ config("thin_archive") {
   # confuses lldb.
   if ((is_posix && !is_nacl && !is_apple) || is_fuchsia) {
     arflags = [ "-T" ]
-  } else if (is_win && use_lld) {
+  } else if (is_msvc && use_lld) {
     arflags = [ "/llvmlibthin" ]
   }
 }
@@ -2091,7 +2115,7 @@ config("thin_archive") {
 # Note: exceptions are disallowed in Google code.
 
 config("exceptions") {
-  if (is_win) {
+  if (is_msvc) {
     # Enables exceptions in the STL.
     if (!use_custom_libcxx) {
       defines = [ "_HAS_EXCEPTIONS=1" ]
@@ -2100,11 +2124,18 @@ config("exceptions") {
   } else {
     cflags_cc = [ "-fexceptions" ]
     cflags_objcc = cflags_cc
+
+    if (is_mingw && exclude_unwind_tables) {
+      # With exceptions explicitly allowed,
+      # override exclude_unwind_tables or
+      # linking will fail on MinGW
+      cflags_cc += [ "-funwind-tables", "-fasynchronous-unwind-tables", ]
+    }
   }
 }
 
 config("no_exceptions") {
-  if (is_win) {
+  if (is_msvc) {
     # Disables exceptions in the STL.
     # libc++ uses the __has_feature macro to control whether to use exceptions,
     # so defining this macro is unnecessary. Defining _HAS_EXCEPTIONS to 0 also
@@ -2115,8 +2146,10 @@ config("no_exceptions") {
       defines = [ "_HAS_EXCEPTIONS=0" ]
     }
   } else {
-    cflags_cc = [ "-fno-exceptions" ]
-    cflags_objcc = cflags_cc
+    if (!is_mingw) {
+      cflags_cc = [ "-fno-exceptions" ]
+      cflags_objcc = cflags_cc
+    }
   }
 }
 
@@ -2170,7 +2203,7 @@ config("no_incompatible_pointer_warnings") {
 
 # Shared settings for both "optimize" and "optimize_max" configs.
 # IMPORTANT: On Windows "/O1" and "/O2" must go before the common flags.
-if (is_win) {
+if (is_msvc) {
   common_optimize_on_cflags = [
     "/Ob2",  # Both explicit and auto inlining.
     "/Oy-",  # Disable omitting frame pointers, must be after /O2.
@@ -2276,7 +2309,7 @@ config("default_stack_frames") {
 
 # Default "optimization on" config.
 config("optimize") {
-  if (is_win) {
+  if (is_msvc) {
     if (chrome_pgo_phase != 2) {
       # Favor size over speed, /O1 must be before the common flags.
       # /O1 implies /Os and /GF.
@@ -2335,7 +2368,7 @@ config("optimize") {
 
 # Turn off optimizations.
 config("no_optimize") {
-  if (is_win) {
+  if (is_msvc) {
     cflags = [
       "/Od",  # Disable optimization.
       "/Ob0",  # Disable all inlining (on by default).
@@ -2387,7 +2420,7 @@ config("optimize_max") {
     configs = [ "//build/config/nacl:irt_optimize" ]
   } else {
     ldflags = common_optimize_on_ldflags
-    if (is_win) {
+    if (is_msvc) {
       # Favor speed over size, /O2 must be before the common flags.
       # /O2 implies /Ot, /Oi, and /GF.
       cflags = [ "/O2" ] + common_optimize_on_cflags
@@ -2420,7 +2453,7 @@ config("optimize_speed") {
     configs = [ "//build/config/nacl:irt_optimize" ]
   } else {
     ldflags = common_optimize_on_ldflags
-    if (is_win) {
+    if (is_msvc) {
       # Favor speed over size, /O2 must be before the common flags.
       # /O2 implies /Ot, /Oi, and /GF.
       cflags = [ "/O2" ] + common_optimize_on_cflags
@@ -2568,7 +2601,7 @@ config("win_pdbaltpath") {
 # Full symbols.
 config("symbols") {
   rustflags = []
-  if (is_win) {
+  if (is_msvc) {
     if (is_clang) {
       cflags = [
         # Debug information in the .obj files.
@@ -2603,7 +2636,7 @@ config("symbols") {
     }
 
     # On aix -gdwarf causes linker failures due to thread_local variables.
-    if (!is_nacl && current_os != "aix") {
+    if (!is_nacl && !is_mingw && current_os != "aix") {
       if (use_dwarf5) {
         cflags += [ "-gdwarf-5" ]
         rustflags += [ "-Zdwarf-version=5" ]
@@ -2629,11 +2662,11 @@ config("symbols") {
     # build-directory-independent output.
     # Keeping -g2 for saigo as it's the only toolchain whose artifacts that are
     # part of chromium release (other nacl toolchains are used only for tests).
-    if ((!is_nacl || is_nacl_saigo) && current_os != "zos") {
+    if ((!is_nacl || is_nacl_saigo) && !is_mingw && current_os != "zos") {
       cflags += [ "-g2" ]
     }
 
-    if (!is_nacl && is_clang && !is_tsan && !is_asan) {
+    if (!is_nacl && !is_mingw && is_clang && !is_tsan && !is_asan) {
       # gcc generates dwarf-aranges by default on -g1 and -g2. On clang it has
       # to be manually enabled.
       #
@@ -2665,7 +2698,7 @@ config("symbols") {
     # DWARF info may be corrupt; offsets in a range list entry are in different
     # sections" there.  Maybe just a bug in nacl_switch_32.S.
     _enable_gdb_index =
-        symbol_level == 2 && !is_apple && !is_nacl && current_cpu != "x86" &&
+        symbol_level == 2 && !is_apple && !is_mingw && !is_nacl && current_cpu != "x86" &&
         current_os != "zos" && (use_gold || use_lld) &&
         # Disable on non-fission 32-bit Android because it pushes
         # libcomponents_unittests over the 4gb size limit.
@@ -2717,7 +2750,7 @@ config("symbols") {
 # when crash happens in unittests running on buildbot.
 config("minimal_symbols") {
   rustflags = []
-  if (is_win) {
+  if (is_msvc) {
     # Functions, files, and line tables only.
     cflags = []
 
@@ -2744,7 +2777,7 @@ config("minimal_symbols") {
       # former.
       cflags += [ "-gline-tables-only" ]
     }
-  } else {
+  } else if (!is_mingw) {
     cflags = []
     if (is_mac && !use_dwarf5) {
       # clang defaults to DWARF2 on macOS unless mac_deployment_target is
@@ -2801,7 +2834,7 @@ config("minimal_symbols") {
 # told to not generate debug information and the linker then just puts function
 # names in the final debug information.
 config("no_symbols") {
-  if (is_win) {
+  if (is_msvc) {
     ldflags = [ "/DEBUG" ]
 
     # All configs using /DEBUG should include this:
@@ -2901,7 +2934,7 @@ buildflag_header("compiler_buildflags") {
 }
 
 config("cet_shadow_stack") {
-  if (enable_cet_shadow_stack && is_win) {
+  if (enable_cet_shadow_stack && is_win && !is_mingw) {
     assert(target_cpu == "x64")
     ldflags = [ "/CETCOMPAT" ]
   }
diff --git a/config/linux/pkg-config.py b/config/linux/pkg-config.py
index 2e38c7ffb..fa462e560 100755
--- a/config/linux/pkg-config.py
+++ b/config/linux/pkg-config.py
@@ -108,7 +108,7 @@ def main():
   # If this is run on non-Linux platforms, just return nothing and indicate
   # success. This allows us to "kind of emulate" a Linux build from other
   # platforms.
-  if "linux" not in sys.platform:
+  if sys.platform not in ["linux", "win32"]:
     print("[[],[],[],[],[]]")
     return 0
 
diff --git a/config/sanitizers/BUILD.gn b/config/sanitizers/BUILD.gn
index a3426ea67..12186d762 100644
--- a/config/sanitizers/BUILD.gn
+++ b/config/sanitizers/BUILD.gn
@@ -228,7 +228,7 @@ config("default_sanitizer_ldflags") {
         }
       }
     }
-  } else if (is_win) {
+  } else if (is_msvc) {
     # Windows directly calls link.exe instead of the compiler driver when
     # linking.  Hence, pass the runtime libraries instead of -fsanitize=address
     # or -fsanitize=fuzzer.
@@ -298,14 +298,14 @@ config("asan_flags") {
 }
 
 config("link_executable") {
-  if (is_asan && is_win && !is_component_build) {
+  if (is_asan && is_msvc && !is_component_build) {
     assert(current_cpu == "x64", "WinASan unsupported architecture")
     ldflags = [ "-wholearchive:clang_rt.asan-x86_64.lib" ]
   }
 }
 
 config("link_shared_library") {
-  if (is_asan && is_win && !is_component_build) {
+  if (is_asan && is_msvc && !is_component_build) {
     assert(current_cpu == "x64", "WinASan unsupported architecture")
     libs = [ "clang_rt.asan_dll_thunk-x86_64.lib" ]
   }
@@ -350,7 +350,7 @@ config("cfi_flags") {
 
     if (use_cfi_diag) {
       cflags += [ "-fno-sanitize-trap=cfi" ]
-      if (is_win) {
+      if (is_msvc) {
         cflags += [
           "/Oy-",
           "/Ob0",
diff --git a/config/win/BUILD.gn b/config/win/BUILD.gn
index 497d47989..5a2f3f036 100644
--- a/config/win/BUILD.gn
+++ b/config/win/BUILD.gn
@@ -49,6 +49,7 @@ declare_args() {
 # is applied to all targets. It is here to separate out the logic that is
 # Windows-only.
 config("compiler") {
+  if (is_msvc) {
   if (current_cpu == "x86") {
     asmflags = [
       # When /safeseh is specified, the linker will only produce an image if it
@@ -214,6 +215,14 @@ config("compiler") {
     # the source file is a no-op.
     "/ignore:4221",
   ]
+  } else { # is_mingw
+    if (current_cpu != "arm64"){
+      cflags = [ "-Wa,-mbig-obj" ]
+    }
+    if (!is_clang) {
+      cflags += [ "-fno-keep-inline-dllexport" ]
+    }
+  }
 }
 
 # This is included by reference in the //build/config/compiler:runtime_library
@@ -302,7 +311,7 @@ config("winver") {
 
 # Linker flags for Windows SDK setup, this is applied only to EXEs and DLLs.
 config("sdk_link") {
-  if (current_cpu == "x86") {
+  if (is_msvc && current_cpu == "x86") {
     ldflags = [
       "/SAFESEH",  # Not compatible with x64 so use only for x86.
       "/largeaddressaware",
@@ -314,19 +323,27 @@ config("sdk_link") {
 # targets who want different library configurations can remove this and specify
 # their own.
 config("common_linker_setup") {
-  ldflags = [
-    "/FIXED:NO",
-    "/ignore:4199",
-    "/ignore:4221",
-    "/NXCOMPAT",
-    "/DYNAMICBASE",
-  ]
-
-  if (win_linker_timing) {
-    ldflags += [
-      "/time",
-      "/verbose:incr",
+  if (is_mingw) {
+    # Enable DEP and ASLR
+    ldflags = [
+      "-Wl,-dynamicbase",
+      "-Wl,-nxcompat",
+     ]
+  } else {
+    ldflags = [
+      "/FIXED:NO",
+      "/ignore:4199",
+      "/ignore:4221",
+      "/NXCOMPAT",
+      "/DYNAMICBASE",
     ]
+
+    if (win_linker_timing) {
+      ldflags += [
+        "/time",
+        "/verbose:incr",
+      ]
+    }
   }
 }
 
@@ -337,12 +354,20 @@ config("default_cfg_compiler") {
   # The CFG guards are only emitted if |win_enable_cfg_guards| is enabled.
   if (win_enable_cfg_guards) {
     if (is_clang) {
-      cflags = [ "/guard:cf" ]
+      if (is_mingw) {
+        cflags = [ "-fcf-protection=full" ]
+      } else {
+        cflags = [ "/guard:cf" ]
+      }
     }
     rustflags = [ "-Ccontrol-flow-guard" ]
   } else {
     if (is_clang) {
-      cflags = [ "/guard:cf,nochecks" ]
+      if (is_mingw) {
+        cflags = [ "-fcf-protection=none" ]
+      } else {
+        cflags = [ "/guard:cf,nochecks" ]
+      }
     }
     rustflags = [ "-Ccontrol-flow-guard=nochecks" ]
   }
@@ -355,7 +380,11 @@ config("disable_guards_cfg_compiler") {
   # This is needed to allow functions to be called by code that is built
   # with CFG enabled, such as system libraries.
   if (is_clang) {
-    cflags = [ "/guard:cf,nochecks" ]
+    if (is_mingw) {
+      cflags = [ "-fcf-protection=none" ]
+    } else {
+      cflags = [ "/guard:cf,nochecks" ]
+    }
   }
   rustflags = [ "-Ccontrol-flow-guard=nochecks" ]
 }
@@ -368,7 +397,7 @@ config("cfi_linker") {
   # ASan and CFG leads to slow process startup. Chromium's test runner uses
   # lots of child processes, so this means things are really slow. Disable CFG
   # for now. https://crbug.com/846966
-  if (!is_debug && !is_asan) {
+  if (is_msvc && !is_debug && !is_asan) {
     # Turn on CFG bitmap generation and CFG load config.
     ldflags = [ "/guard:cf" ]
   }
@@ -475,12 +504,12 @@ config("delayloads_not_for_child_dll") {
 # See https://msdn.microsoft.com/en-us/library/2kzt1wy3.aspx for a reference of
 # what each value does.
 config("default_crt") {
-  if (is_component_build) {
+  if (is_msvc && is_component_build) {
     # Component mode: dynamic CRT. Since the library is shared, it requires
     # exceptions or will give errors about things not matching, so keep
     # exceptions on.
     configs = [ ":dynamic_crt" ]
-  } else {
+  } else if (!is_mingw) {
     if (current_os == "winuwp") {
       # https://blogs.msdn.microsoft.com/vcblog/2014/06/10/the-great-c-runtime-crt-refactoring/
       # contains a details explanation of what is happening with the Windows
@@ -498,7 +527,7 @@ config("default_crt") {
 # when the debug CRT is part of the bottleneck. This also avoids *implicitly*
 # defining _DEBUG.
 config("release_crt") {
-  if (is_component_build) {
+  if (is_msvc && is_component_build) {
     cflags = [ "/MD" ]
 
     if (rust_prebuilt_stdlib) {
@@ -516,7 +545,7 @@ config("release_crt") {
       # standard library, which libc++ needs for exception_ptr internals.
       ldflags = [ "/DEFAULTLIB:msvcprt.lib" ]
     }
-  } else {
+  } else if (!is_mingw) {
     cflags = [ "/MT" ]
 
     if (rust_prebuilt_stdlib) {
@@ -536,7 +565,7 @@ config("release_crt") {
 }
 
 config("dynamic_crt") {
-  if (is_debug) {
+  if (is_msvc && is_debug) {
     # This pulls in the DLL debug CRT and defines _DEBUG
     cflags = [ "/MDd" ]
 
@@ -550,7 +579,7 @@ config("dynamic_crt") {
     if (use_custom_libcxx) {
       ldflags = [ "/DEFAULTLIB:msvcprtd.lib" ]
     }
-  } else {
+  } else if (!is_mingw) {
     cflags = [ "/MD" ]
 
     if (rust_prebuilt_stdlib) {
@@ -571,7 +600,7 @@ config("dynamic_crt") {
 }
 
 config("static_crt") {
-  if (is_debug) {
+  if (is_msvc && is_debug) {
     # This pulls in the static debug CRT and defines _DEBUG
     cflags = [ "/MTd" ]
 
@@ -585,7 +614,7 @@ config("static_crt") {
     if (use_custom_libcxx) {
       ldflags = [ "/DEFAULTLIB:libcpmtd.lib" ]
     }
-  } else {
+  } else if (!is_mingw) {
     cflags = [ "/MT" ]
 
     if (rust_prebuilt_stdlib) {
@@ -611,20 +640,28 @@ config("static_crt") {
 if (current_cpu == "x64") {
   # The number after the comma is the minimum required OS version.
   # 5.02 = Windows Server 2003.
-  subsystem_version_suffix = ",5.02"
+  subsystem_version_suffix = "5.02"
 } else if (current_cpu == "arm64") {
   # Windows ARM64 requires Windows 10.
-  subsystem_version_suffix = ",10.0"
+  subsystem_version_suffix = "10.0"
 } else {
   # 5.01 = Windows XP.
-  subsystem_version_suffix = ",5.01"
+  subsystem_version_suffix = "5.01"
 }
 
 config("console") {
-  ldflags = [ "/SUBSYSTEM:CONSOLE$subsystem_version_suffix" ]
+  if (is_mingw) {
+    ldflags = [ "-Wl,-subsystem,console:$subsystem_version_suffix" ]
+  } else {
+    ldflags = [ "/SUBSYSTEM:CONSOLE,$subsystem_version_suffix" ]
+  }
 }
 config("windowed") {
-  ldflags = [ "/SUBSYSTEM:WINDOWS$subsystem_version_suffix" ]
+  if (is_mingw) {
+    ldflags = [ "-Wl,-subsystem,windows:$subsystem_version_suffix" ]
+  } else {
+    ldflags = [ "/SUBSYSTEM:WINDOWS,$subsystem_version_suffix" ]
+  }
 }
 
 # Incremental linking ----------------------------------------------------------
@@ -634,7 +671,7 @@ config("default_incremental_linking") {
   # Enable incremental linking for debug builds and all component builds - any
   # builds where performance is not job one.
   # TODO(thakis): Always turn this on with lld, no reason not to.
-  if (is_debug || is_component_build) {
+  if (is_msvc && (is_debug || is_component_build)) {
     ldflags = [ "/INCREMENTAL" ]
     if (use_lld) {
       # lld doesn't use ilk files and doesn't really have an incremental link
@@ -649,7 +686,7 @@ config("default_incremental_linking") {
       # in lld-link.
       ldflags += [ "/OPT:NOICF" ]
     }
-  } else {
+  } else if (!is_mingw){
     ldflags = [ "/INCREMENTAL:NO" ]
   }
 }
@@ -682,3 +719,21 @@ config("lean_and_mean") {
 config("nominmax") {
   defines = [ "NOMINMAX" ]
 }
+
+# Let unit tests see all "for_testing" dll symbols.
+config("export_all_symbols") {
+  if (is_mingw) {
+    ldflags = [ "-Wl,--export-all-symbols" ]
+  }
+}
+
+# Workaround a Mingw ld bug where large debug symbol data
+# causes the produced executable to be corrupted
+# https://stackoverflow.com/questions/22261539/ld-exe-crashing-in-mingw
+# this affects mksnapshot and v8 component.
+
+config("strip_all_symbols_at_link_time") {
+  if (is_mingw) {
+    ldflags = [ "-Wl,--strip-all" ]
+  }
+}
diff --git a/config/win/manifest.gni b/config/win/manifest.gni
index e1859eacd..579026d97 100644
--- a/config/win/manifest.gni
+++ b/config/win/manifest.gni
@@ -72,7 +72,7 @@ segment_heap_manifest = "//build/win/segment_heap.manifest"
 #     ...
 #   }
 
-if (is_win) {
+if (is_win && !is_mingw) {
   template("windows_manifest") {
     config_name = "${target_name}__config"
     source_set_name = target_name
diff --git a/config/win/visual_studio_version.gni b/config/win/visual_studio_version.gni
index 1da479dd5..e13e94d69 100644
--- a/config/win/visual_studio_version.gni
+++ b/config/win/visual_studio_version.gni
@@ -24,7 +24,7 @@ declare_args() {
   windows_sdk_version = ""
 }
 
-if (visual_studio_path == "") {
+if (is_msvc && visual_studio_path == "") {
   toolchain_data =
       exec_script("../../vs_toolchain.py", [ "get_toolchain_dir" ], "scope")
   visual_studio_path = toolchain_data.vs_path
@@ -33,7 +33,7 @@ if (visual_studio_path == "") {
   visual_studio_version = toolchain_data.vs_version
   wdk_path = toolchain_data.wdk_dir
   visual_studio_runtime_dirs = toolchain_data.runtime_dirs
-} else {
+} else if (!is_mingw) {
   assert(visual_studio_version != "",
          "You must set the visual_studio_version if you set the path")
   assert(windows_sdk_version != "",
diff --git a/toolchain/gcc_solink_wrapper.py b/toolchain/gcc_solink_wrapper.py
index 03ef04261..0437a638b 100755
--- a/toolchain/gcc_solink_wrapper.py
+++ b/toolchain/gcc_solink_wrapper.py
@@ -24,6 +24,8 @@ def CollectSONAME(args):
   # TODO(crbug.com/1259067): Come up with a way to get this info without having
   # to bundle readelf in the toolchain package.
   toc = ''
+  if ("GCC" in sys.version and sys.platform=='win32'): # Mingw's readelf doesn't work on PE files
+    return 0, toc
   readelf = subprocess.Popen(wrapper_utils.CommandToRun(
       [args.readelf, '-d', args.sofile]),
                              stdout=subprocess.PIPE,
@@ -38,6 +40,10 @@ def CollectSONAME(args):
 def CollectDynSym(args):
   """Replaces: nm --format=posix -g -D -p $sofile | cut -f1-2 -d' '"""
   toc = ''
+
+  if ("GCC" in sys.version and sys.platform=='win32'): # Mingw's nm doesn't work on PE/COFF files
+    return 0, toc
+
   nm = subprocess.Popen(wrapper_utils.CommandToRun(
       [args.nm, '--format=posix', '-g', '-D', '-p', args.sofile]),
                         stdout=subprocess.PIPE,
@@ -103,6 +109,9 @@ def main():
                       help='The strip binary to run',
                       metavar='PATH')
   parser.add_argument('--dwp', help='The dwp binary to run', metavar='PATH')
+  parser.add_argument('--objcopy',
+                      help='The objcopy binary to run',
+                      metavar='PATH')
   parser.add_argument('--sofile',
                       required=True,
                       help='Shared object file produced by linking command',
@@ -194,9 +203,19 @@ def main():
 
     # Finally, strip the linked shared object file (if desired).
     if args.strip:
+      if args.objcopy:
+        result = subprocess.call(wrapper_utils.CommandToRun(
+            [args.objcopy, '--only-keep-debug', args.sofile, args.output + '.debug']))
+        if result != 0:
+          return result
       result = subprocess.call(
           wrapper_utils.CommandToRun(
               [args.strip, '-o', args.output, args.sofile]))
+    if result != 0:
+      return result
+    if args.objcopy:
+      result = subprocess.call(wrapper_utils.CommandToRun(
+          [args.objcopy, '--add-gnu-debuglink', args.output + '.debug',args.output]))
 
   if dwp_proc:
     dwp_result = dwp_proc.wait()
diff --git a/toolchain/gcc_toolchain.gni b/toolchain/gcc_toolchain.gni
index 20c106694..0985480d6 100644
--- a/toolchain/gcc_toolchain.gni
+++ b/toolchain/gcc_toolchain.gni
@@ -61,6 +61,7 @@ if (enable_resource_allowlist_generation) {
 #  - cc
 #  - cxx
 #  - ld
+#  - rc (mingw only)
 #
 # Optional parameters that control the tools:
 #
@@ -305,6 +306,11 @@ template("single_gcc_toolchain") {
     } else {
       nm = "nm"
     }
+    if (defined(invoker.rc)) {
+      rc = invoker.rc
+    } else {
+      rc = "windres"
+    }
     if (defined(invoker.dwp)) {
       dwp_switch = " --dwp=\"${invoker.dwp}\""
     } else {
@@ -394,6 +400,14 @@ template("single_gcc_toolchain") {
       outputs = [ "$object_subdir/{{source_name_part}}.o" ]
     }
 
+    tool("rc") {
+      depfile = "{{output}}.d"
+      command = "$rc -i {{source}} -o {{output}} {{include_dirs}} -O coff"
+      depsformat = "gcc"
+      description = "RC {{output}}"
+      outputs = [ "$object_subdir/{{source_name_part}}.o" ]
+    }
+
     tool("asm") {
       # For GCC we can just use the C compiler to compile assembly.
       depfile = "{{output}}.d"
@@ -456,9 +470,12 @@ template("single_gcc_toolchain") {
       tocfile = sofile + ".TOC"
 
       soname_flag = ""
-      if (current_os != "aix") {
+      if (current_os != "aix" && current_os != "win") {
         # -soname flag is not available on aix ld
         soname_flag = "-Wl,-soname=\"$soname\""
+      } else if (is_mingw) {
+        # Have MinGW linker generate an import library
+        soname_flag = "-Wl,--out-implib=\"$sofile\".a "
       }
       link_command = "$ld -shared $soname_flag {{ldflags}}${extra_ldflags} -o \"$unstripped_sofile\" @\"$rspfile\" {{rlibs}}"
 
diff --git a/toolchain/win/BUILD.gn b/toolchain/win/BUILD.gn
index fe0979038..0e36114e1 100644
--- a/toolchain/win/BUILD.gn
+++ b/toolchain/win/BUILD.gn
@@ -15,7 +15,7 @@ assert(is_win, "Should only be running on Windows")
 
 # Copy the VS runtime DLL for the default toolchain to the root build directory
 # so things will run.
-if (current_toolchain == default_toolchain) {
+if (is_msvc && current_toolchain == default_toolchain) {
   if (is_debug) {
     configuration_name = "Debug"
   } else {
@@ -30,7 +30,7 @@ if (current_toolchain == default_toolchain) {
               ])
 }
 
-if (target_cpu == "x86" || target_cpu == "x64") {
+if (is_msvc && (target_cpu == "x86" || target_cpu == "x64")) {
   win_toolchains("x86") {
     toolchain_arch = "x86"
   }
@@ -39,7 +39,7 @@ if (target_cpu == "x86" || target_cpu == "x64") {
   }
 }
 
-if (target_cpu == "arm64") {
+if (is_msvc && target_cpu == "arm64") {
   win_toolchains("arm64") {
     toolchain_arch = "arm64"
   }
@@ -53,10 +53,12 @@ if (target_cpu == "arm64") {
 # The only reason it's a separate toolchain is so that it can force
 # is_component_build to false in the toolchain_args() block, because
 # building nacl64.exe in component style does not work.
-win_toolchains("nacl_win64") {
-  toolchain_arch = "x64"
-  toolchain_args = {
-    is_component_build = false
+if (is_msvc) {
+  win_toolchains("nacl_win64") {
+    toolchain_arch = "x64"
+    toolchain_args = {
+      is_component_build = false
+    }
   }
 }
 
@@ -92,3 +94,17 @@ if (target_os == "winuwp") {
     }
   }
 }
+
+if (is_mingw) {
+  mingw_toolchain("x86") {
+    toolchain_arch = "x86"
+  }
+
+  mingw_toolchain("x64") {
+    toolchain_arch = "x64"
+  }
+
+  mingw_toolchain("arm64") {
+    toolchain_arch = "arm64"
+  }
+}
diff --git a/toolchain/win/toolchain.gni b/toolchain/win/toolchain.gni
index b296cfbdc..dfe0c8118 100644
--- a/toolchain/win/toolchain.gni
+++ b/toolchain/win/toolchain.gni
@@ -11,7 +11,12 @@ import("//build/toolchain/cc_wrapper.gni")
 import("//build/toolchain/goma.gni")
 import("//build/toolchain/rbe.gni")
 import("//build/toolchain/toolchain.gni")
-import("//build/toolchain/win/win_toolchain_data.gni")
+
+if (is_mingw) {
+  import("//build/toolchain/gcc_toolchain.gni")
+} else {
+  import("//build/toolchain/win/win_toolchain_data.gni")
+}
 
 assert(is_win, "Should only be running on Windows")
 
@@ -757,3 +762,29 @@ template("win_toolchains") {
     }
   }
 }
+
+if (is_mingw) {
+  template("mingw_toolchain") {
+    gcc_toolchain("mingw_" + target_name) {
+      forward_variables_from(invoker, "*")
+      if (is_clang) {
+        cc = "clang"
+        cxx = "clang++"
+      } else {
+        cc = "gcc"
+        cxx = "g++"
+      }
+      ld = cxx
+      nm = "nm"
+      ar = "ar"
+      rc = "windres"
+      strip = "strip"
+      executable_extension = ".exe"
+      enable_linker_map = false
+      toolchain_args = {
+        current_os = "win"
+        current_cpu = toolchain_arch
+      }
+    }
+  }
+}
diff --git a/util/lastchange.py b/util/lastchange.py
index 98a6360b4..8a055310c 100755
--- a/util/lastchange.py
+++ b/util/lastchange.py
@@ -191,7 +191,10 @@ def GetGitTopDirectory(source_dir):
   Returns:
     The output of "git rev-parse --show-toplevel" as a string
   """
-  return _RunGitCommand(source_dir, ['rev-parse', '--show-toplevel'])
+  directory = _RunGitCommand(source_dir, ['rev-parse', '--show-toplevel'])
+  if "GCC" in sys.version and sys.platform=='win32':
+    return subprocess.check_output(["cygpath", "-w", directory]).strip(b"\n").decode()
+  return directory
 
 
 def WriteIfChanged(file_name, contents):
diff --git a/win/BUILD.gn b/win/BUILD.gn
index 864581851..4f0b7b454 100644
--- a/win/BUILD.gn
+++ b/win/BUILD.gn
@@ -16,7 +16,7 @@ windows_manifest("default_exe_manifest") {
   ]
 }
 
-if (is_win) {
+if (is_win && !is_mingw) {
   assert(host_os != "mac" || target_cpu != "x86",
          "Windows cross-builds from Mac must be 64-bit.")
 
@@ -78,4 +78,8 @@ if (is_win) {
       }
     }
   }
+} else {
+  group("runtime_libs") {
+    data = []
+  }
 }
