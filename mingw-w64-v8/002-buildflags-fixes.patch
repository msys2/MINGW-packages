diff --git a/BUILD.gn b/BUILD.gn
index 2cc9e36..8c70f78 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -39,10 +39,10 @@ declare_args() {
   v8_enable_future = false
 
   # Sets -DENABLE_SYSTEM_INSTRUMENTATION. Enables OS-dependent event tracing
-  v8_enable_system_instrumentation = (is_win || is_mac) && !v8_use_perfetto
+  v8_enable_system_instrumentation = (is_msvc || is_mac) && !v8_use_perfetto
 
   # Sets -DV8_ENABLE_ETW_STACK_WALKING. Enables ETW Stack Walking
-  v8_enable_etw_stack_walking = is_win
+  v8_enable_etw_stack_walking = is_msvc
 
   # Sets the GUID for the ETW provider
   v8_etw_guid = ""
@@ -1363,7 +1363,12 @@ config("toolchain") {
     defines += [ "V8_TARGET_ARCH_IA32" ]
     if (is_win) {
       # Ensure no surprising artifacts from 80bit double math with x86.
-      cflags += [ "/arch:SSE2" ]
+      if (is_msvc) {
+        cflags += [ "/arch:SSE2" ]
+      } else {
+        cflags += [ "-msse2" ]
+        defines += [ "V8_SWISS_TABLE_HAVE_SSE2_HOST=1" ]
+      }
     }
   }
   if (v8_current_cpu == "x64") {
@@ -1372,7 +1377,11 @@ config("toolchain") {
       # Increase the initial stack size. The default is 1MB, this is 2MB. This
       # applies only to executables and shared libraries produced by V8 since
       # ldflags are not pushed to dependants.
-      ldflags += [ "/STACK:2097152" ]
+      if (is_msvc) {
+        ldflags += [ "/STACK:2097152" ]
+      } else {
+        ldflags += [ "-Wl,--stack,2097152" ]
+      }
     }
   }
   if (is_android && v8_android_log_stdout) {
@@ -1430,7 +1439,7 @@ config("toolchain") {
   }
 
   if (v8_no_inline) {
-    if (is_win) {
+    if (is_msvc) {
       cflags += [ "/Ob0" ]
     } else {
       cflags += [
@@ -1474,7 +1483,7 @@ config("toolchain") {
     ]
   }
 
-  if (is_win) {
+  if (is_msvc) {
     cflags += [
       "/wd4245",  # Conversion with signed/unsigned mismatch.
       "/wd4267",  # Conversion with possible loss of data.
@@ -1496,7 +1505,7 @@ config("toolchain") {
     ]
   }
 
-  if (!is_clang && is_win) {
+  if (!is_clang && is_msvc) {
     cflags += [
       "/wd4506",  # Benign "no definition for inline function"
 
@@ -1637,7 +1646,7 @@ config("toolchain") {
     ]
   }
 
-  if (!is_clang && !is_win) {
+  if (!is_clang && !is_msvc) {
     cflags += [
       # Disable gcc warnings for optimizations based on the assumption that
       # signed overflow does not occur. Generates false positives (see
@@ -6158,9 +6167,9 @@ v8_component("v8_libbase") {
     defines += [ "_CRT_RAND_S" ]  # for rand_s()
 
     libs = [
-      "dbghelp.lib",
-      "winmm.lib",
-      "ws2_32.lib",
+      "dbghelp",
+      "winmm",
+      "ws2_32",
     ]
 
     if (v8_enable_etw_stack_walking) {
@@ -6374,7 +6383,7 @@ v8_source_set("v8_heap_base") {
     "src/heap/base/worklist.cc",
   ]
 
-  if (is_clang || !is_win) {
+  if (is_clang || !is_msvc) {
     if (current_cpu == "x64") {
       sources += [ "src/heap/base/asm/x64/push_registers_asm.cc" ]
     } else if (current_cpu == "x86") {
@@ -6394,7 +6403,7 @@ v8_source_set("v8_heap_base") {
     } else if (current_cpu == "riscv64" || current_cpu == "riscv32") {
       sources += [ "src/heap/base/asm/riscv/push_registers_asm.cc" ]
     }
-  } else if (is_win) {
+  } else if (is_msvc) {
     if (current_cpu == "x64") {
       sources += [ "src/heap/base/asm/x64/push_registers_masm.asm" ]
     } else if (current_cpu == "x86") {
