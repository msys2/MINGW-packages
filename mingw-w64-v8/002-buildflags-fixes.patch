--- a/BUILD.gn
+++ b/BUILD.gn
@@ -1188,7 +1188,12 @@
     defines += [ "V8_TARGET_ARCH_IA32" ]
     if (is_win) {
       # Ensure no surprising artifacts from 80bit double math with x86.
-      cflags += [ "/arch:SSE2" ]
+      if (is_msvs) {
+        cflags += [ "/arch:SSE2" ]
+      } else {
+        cflags += [ "-msse2" ]
+        defines += [ "V8_SWISS_TABLE_HAVE_SSE2_HOST=1" ]
+      }
     }
   }
   if (v8_current_cpu == "x64") {
@@ -1197,7 +1202,11 @@
       # Increase the initial stack size. The default is 1MB, this is 2MB. This
       # applies only to executables and shared libraries produced by V8 since
       # ldflags are not pushed to dependants.
-      ldflags += [ "/STACK:2097152" ]
+      if (is_msvs) {
+        ldflags += [ "/STACK:2097152" ]
+      } else {
+        ldflags += [ "-Wl,--stack,2097152" ]
+      }
     }
   }
   if (is_android && v8_android_log_stdout) {
@@ -1253,7 +1262,7 @@
   }
 
   if (v8_no_inline) {
-    if (is_win) {
+    if (is_msvs) {
       cflags += [ "/Ob0" ]
     } else {
       cflags += [
@@ -1282,7 +1291,7 @@
     }
   }
 
-  if (is_win) {
+  if (is_msvs) {
     cflags += [
       "/wd4245",  # Conversion with signed/unsigned mismatch.
       "/wd4267",  # Conversion with possible loss of data.
@@ -1304,7 +1313,7 @@
     ]
   }
 
-  if (!is_clang && is_win) {
+  if (!is_clang && is_msvs) {
     cflags += [
       "/wd4506",  # Benign "no definition for inline function"
 
@@ -1445,7 +1454,7 @@
     ]
   }
 
-  if (!is_clang && !is_win) {
+  if (!is_clang && !is_msvs) {
     cflags += [
       # Disable gcc warnings for optimizations based on the assumption that
       # signed overflow does not occur. Generates false positives (see
@@ -4862,7 +4866,7 @@
   }
 
   # Architecture independent but platform-specific sources
-  if (is_win) {
+  if (is_msvs) {
     if (v8_enable_system_instrumentation) {
       sources += [
         "src/diagnostics/system-jit-metadata-win.h",
@@ -5317,13 +5321,13 @@
     defines += [ "_CRT_RAND_S" ]  # for rand_s()
 
     libs = [
-      "dbghelp.lib",
-      "winmm.lib",
-      "ws2_32.lib",
+      "dbghelp",
+      "winmm",
+      "ws2_32",
     ]
 
     if (v8_enable_system_instrumentation) {
-      libs += [ "advapi32.lib" ]  # Needed for TraceLoggingProvider.h
+      libs += [ "advapi32" ]  # Needed for TraceLoggingProvider.h
     }
 
     data_deps += [ "//build/win:runtime_libs" ]
@@ -5427,7 +5431,7 @@
     sources += [ "src/libplatform/tracing/recorder.h" ]
     if (is_mac) {
       sources += [ "src/libplatform/tracing/recorder-mac.cc" ]
-    } else if (is_win) {
+    } else if (is_msvs) {
       sources += [ "src/libplatform/tracing/recorder-win.cc" ]
     }
   }
@@ -5505,7 +5509,7 @@
     "src/heap/base/worklist.cc",
   ]
 
-  if (is_clang || !is_win) {
+  if (is_clang || !is_msvs) {
     if (current_cpu == "x64") {
       sources += [ "src/heap/base/asm/x64/push_registers_asm.cc" ]
     } else if (current_cpu == "x86") {
@@ -5527,7 +5531,7 @@
     } else if (current_cpu == "riscv64") {
       sources += [ "src/heap/base/asm/riscv64/push_registers_asm.cc" ]
     }
-  } else if (is_win) {
+  } else if (is_msvs) {
     if (current_cpu == "x64") {
       sources += [ "src/heap/base/asm/x64/push_registers_masm.S" ]
     } else if (current_cpu == "x86") {
