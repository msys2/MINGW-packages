diff --git a/include/dxc/Support/Global.h b/include/dxc/Support/Global.h
index 3b88ed683..4ca863b2a 100644
--- a/include/dxc/Support/Global.h
+++ b/include/dxc/Support/Global.h
@@ -129,7 +129,7 @@ template<typename T> T *VerifyNullAndThrow(T *p) {
 }
 #define VNT(__p) VerifyNullAndThrow(__p)
 
-#ifdef _MSC_VER
+#ifdef _WIN32
 
 extern "C" __declspec(dllimport) void __stdcall OutputDebugStringA(_In_opt_ const char *msg);
 
@@ -167,7 +167,7 @@ inline void OutputDebugFormatA(_In_ _Printf_format_string_ _Null_terminated_ con
 
   va_list argList;
   va_start(argList, pszFormat);
-  int count = vsnprintf_s(buffer, _countof(buffer), pszFormat, argList);
+  int count = vsnprintf_s(buffer, _countof(buffer), NULL, pszFormat, argList);
   va_end(argList);
 
   OutputDebugStringA(buffer);
@@ -176,7 +176,7 @@ inline void OutputDebugFormatA(_In_ _Printf_format_string_ _Null_terminated_ con
   }
 }
 
-#endif // _MSC_VER
+#endif // _WIN32
 
 #ifndef NDEBUG
 
@@ -196,7 +196,7 @@ inline void OutputDebugFormatA(_In_ _Printf_format_string_ _Null_terminated_ con
 //
 #define DXASSERT_ARGS(exp, fmt, ...)\
   do { _Analysis_assume_(exp); if(!(exp)) {                              \
-    OutputDebugFormatA("Error: \t%s\nFile:\n%s(%d)\nFunc:\t%s.\n\t" fmt "\n", "!(" #exp ")", __FILE__, __LINE__, __FUNCTION__, __VA_ARGS__); \
+    OutputDebugFormatA("Error: \t%s\nFile:\n%s(%d)\nFunc:\t%s.\n\t" fmt "\n", "!(" #exp ")", __FILE__, __LINE__, __FUNCTION__, ##__VA_ARGS__); \
     __debugbreak();\
   } } while(0)
 #define DXASSERT(exp, msg) DXASSERT_ARGS(exp, msg)
diff --git a/include/dxc/Support/WinIncludes.h b/include/dxc/Support/WinIncludes.h
index a0c611c48..4379fe1cd 100644
--- a/include/dxc/Support/WinIncludes.h
+++ b/include/dxc/Support/WinIncludes.h
@@ -61,6 +61,7 @@ template <class T> void swap(CComHeapPtr<T> &a, CComHeapPtr<T> &b) {
 
 #include "dxc/WinAdapter.h"
 
+#ifndef __MINGW32__
 #ifdef __cplusplus
 // Define operator overloads to enable bit operations on enum values that are
 // used to define flags. Use DEFINE_ENUM_FLAG_OPERATORS(YOUR_TYPE) to enable these
@@ -108,5 +109,6 @@ inline ENUMTYPE &operator ^= (ENUMTYPE &a, ENUMTYPE b) { return (ENUMTYPE &)(((_
 #else
 #define DEFINE_ENUM_FLAG_OPERATORS(ENUMTYPE) // NOP, C allows these operators.
 #endif
+#endif
 
 #endif // _MSC_VER
diff --git a/include/dxc/Support/microcom.h b/include/dxc/Support/microcom.h
index 5d80d252f..8faf5079c 100644
--- a/include/dxc/Support/microcom.h
+++ b/include/dxc/Support/microcom.h
@@ -190,7 +190,7 @@ HRESULT AssignToOut(T value, _Out_ T* pResult) {
   return S_OK;
 }
 template <typename T>
-HRESULT AssignToOut(nullptr_t value, _Out_ T* pResult) {
+HRESULT AssignToOut(std::nullptr_t value, _Out_ T* pResult) {
   if (pResult == nullptr)
     return E_POINTER;
   *pResult = value;
@@ -210,7 +210,7 @@ void AssignToOutOpt(T value, _Out_opt_ T* pResult) {
     *pResult = value;
 }
 template <typename T>
-void AssignToOutOpt(nullptr_t value, _Out_opt_ T* pResult) {
+void AssignToOutOpt(std::nullptr_t value, _Out_opt_ T* pResult) {
   if (pResult != nullptr)
     *pResult = value;
 }
diff --git a/include/dxc/WinAdapter.h b/include/dxc/WinAdapter.h
index 1b0b6a8bf..497ed533b 100644
--- a/include/dxc/WinAdapter.h
+++ b/include/dxc/WinAdapter.h
@@ -15,7 +15,7 @@
 #ifndef LLVM_SUPPORT_WIN_ADAPTER_H
 #define LLVM_SUPPORT_WIN_ADAPTER_H
 
-#ifndef _WIN32
+#ifndef _MSC_VER
 
 #ifdef __cplusplus
 #include <atomic>
@@ -33,6 +33,86 @@
 #include <vector>
 #endif // __cplusplus
 
+#ifdef __MINGW32__
+
+#undef _WIN32_WINNT
+#undef _WIN32_IE
+
+// Require at least Windows 7 (Updated from XP)
+#define _WIN32_WINNT 0x0601
+#define _WIN32_IE    0x0800
+
+#define WIN32_LEAN_AND_MEAN
+#define STRSAFE_NO_DEPRECATE
+
+#include <windows.h>
+#include <strsafe.h>
+#include <intsafe.h>
+#include <sal.h>
+#include <unknwn.h>
+#include <objidl.h>
+
+#undef EN
+#undef IN
+#undef OUT
+#undef MemoryFence
+#undef ReplaceText
+
+typedef BSTR CComBSTR;
+
+#undef UNREFERENCED_PARAMETER
+#define UNREFERENCED_PARAMETER(P) (void)(P)
+
+#ifndef ERROR_NOT_CAPABLE
+#define ERROR_NOT_CAPABLE __MSABI_LONG(775)
+#endif
+#ifndef ERROR_UNHANDLED_EXCEPTION
+#define ERROR_UNHANDLED_EXCEPTION __MSABI_LONG(574)
+#endif
+
+#define EventRegisterMicrosoft_Windows_DXCompiler_API()
+#define EventUnregisterMicrosoft_Windows_DXCompiler_API()
+
+#define DxcEtw_DXCompilerCompile_Start()
+#define DxcEtw_DXCompilerCompile_Stop(hr)
+#define DxcEtw_DXCompilerCreateInstance_Start()
+#define DxcEtw_DXCompilerCreateInstance_Stop(hr)
+#define DxcEtw_DXCompilerDisassemble_Start()
+#define DxcEtw_DXCompilerDisassemble_Stop(hr)
+#define DxcEtw_DXCompilerInitialization_Start()
+#define DxcEtw_DXCompilerInitialization_Stop(hr)
+#define DxcEtw_DXCompilerPreprocess_Start()
+#define DxcEtw_DXCompilerPreprocess_Stop(hr)
+#define DxcEtw_DXCompilerShutdown_Start()
+#define DxcEtw_DXCompilerShutdown_Stop(S_OK)
+#define DxcEtw_DxcValidation_Start()
+#define DxcEtw_DxcValidation_Stop(hr)
+
+#define ATLASSERT assert
+
+#define UInt32Add UIntAdd
+#define Int32ToUInt32 IntToUInt
+
+HRESULT UInt32Mult(UINT a, UINT b, UINT *out);
+
+#define E_BOUNDS (HRESULT)0x8000000B
+#define E_NOT_VALID_STATE (HRESULT)0x8007139F
+
+// missing from sal.h
+#define _In_NLS_string_(x)
+#define _Maybenull_
+#define _Notnull_
+#define _Ret_opt_
+
+// FIXME: missing from d3dcommon.h (D3D_NAME enum)
+// D3D_NAME_STENCIL_REF = 69
+// D3D_NAME_INNER_COVERAGE = 70
+
+// FIXME: missing from d3d12shader.h
+#define D3D_SHADER_REQUIRES_EARLY_DEPTH_STENCIL 0x00000002
+
+#else // __MINGW32__
+
 #define COM_NO_WINDOWS_H // needed to inform d3d headers that this isn't windows
 
 //===----------------------------------------------------------------------===//
@@ -686,6 +766,12 @@ struct IStream : public ISequentialStream {
 CROSS_PLATFORM_UUIDOF(ID3D12LibraryReflection, "8E349D19-54DB-4A56-9DC9-119D87BDB804")
 CROSS_PLATFORM_UUIDOF(ID3D12ShaderReflection, "5A58797D-A72C-478D-8BA2-EFC6B0EFE88E")
 
+#endif // __cplusplus
+
+#endif // __MINGW32__
+
+#ifdef __cplusplus
+
 //===--------------------- COM Pointer Types ------------------------------===//
 
 class CAllocator {
@@ -945,6 +1031,7 @@ public:
 
 #define CComHeapPtr CHeapPtr
 
+#ifndef __MINGW32__
 //===--------------------------- BSTR Allocation --------------------------===//
 
 void SysFreeString(BSTR bstrString);
@@ -952,6 +1039,7 @@ void SysFreeString(BSTR bstrString);
 BSTR SysAllocStringLen(const OLECHAR *strIn, UINT ui);
 
 //===--------------------- UTF-8 Related Types ----------------------------===//
+#endif
 
 // Code Page
 #define CP_ACP 0
@@ -1041,6 +1129,6 @@ private:
 
 #endif // __cplusplus
 
-#endif // _WIN32
+#endif // _MSC_VER
 
 #endif // LLVM_SUPPORT_WIN_ADAPTER_H
diff --git a/include/dxc/dxcapi.h b/include/dxc/dxcapi.h
index 8f72b380c..7d2512910 100644
--- a/include/dxc/dxcapi.h
+++ b/include/dxc/dxcapi.h
@@ -13,7 +13,7 @@
 #ifndef __DXC_API__
 #define __DXC_API__
 
-#ifdef _WIN32
+#ifdef _MSC_VER
 #ifndef DXC_API_IMPORT
 #define DXC_API_IMPORT __declspec(dllimport)
 #endif
@@ -25,6 +25,10 @@
 
 #ifdef _WIN32
 
+#ifdef __MINGW32__
+#include "WinAdapter.h"
+#endif
+
 #ifndef CROSS_PLATFORM_UUIDOF
 // Warning: This macro exists in WinAdapter.h as well
 #define CROSS_PLATFORM_UUIDOF(interface, spec)                                 \
@@ -147,6 +151,7 @@ typedef struct DxcShaderHash {
 
 // IDxcBlob is an alias of ID3D10Blob and ID3DBlob
 CROSS_PLATFORM_UUIDOF(IDxcBlob, "8BA5FB08-5195-40e2-AC58-0D989C3A0102")
+__CRT_UUID_DECL(IDxcBlob, 0x8ba5fb08, 0x5195, 0x40e2, 0xac,0x58, 0x0d,0x98,0x9c,0x3a,0x01,0x02);
 struct IDxcBlob : public IUnknown {
 public:
   virtual LPVOID STDMETHODCALLTYPE GetBufferPointer(void) = 0;
@@ -154,6 +159,7 @@ public:
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcBlobEncoding, "7241d424-2646-4191-97c0-98e96e42fc68")
+__CRT_UUID_DECL(IDxcBlobEncoding, 0x7241d424, 0x2646, 0x4191, 0x97,0xc0, 0x98,0xe9,0x6e,0x42,0xfc,0x68);
 struct IDxcBlobEncoding : public IDxcBlob {
 public:
   virtual HRESULT STDMETHODCALLTYPE GetEncoding(_Out_ BOOL *pKnown,
@@ -170,12 +176,14 @@ public:
 
 // The API will use this interface for output name strings
 CROSS_PLATFORM_UUIDOF(IDxcBlobWide, "A3F84EAB-0FAA-497E-A39C-EE6ED60B2D84")
+__CRT_UUID_DECL(IDxcBlobWide, 0xa3f84eab, 0x0faa, 0x497e, 0xa3,0x9c, 0xee,0x6e,0xd6,0x0b,0x2d,0x84);
 struct IDxcBlobWide : public IDxcBlobEncoding {
 public:
   virtual LPCWSTR STDMETHODCALLTYPE GetStringPointer(void) = 0;
   virtual SIZE_T STDMETHODCALLTYPE GetStringLength(void) = 0;
 };
 CROSS_PLATFORM_UUIDOF(IDxcBlobUtf8, "3DA636C9-BA71-4024-A301-30CBF125305B")
+__CRT_UUID_DECL(IDxcBlobUtf8, 0x3da636c9, 0xba71, 0x4024, 0xa3,0x01, 0x30,0xcb,0xf1,0x25,0x30,0x5b);
 struct IDxcBlobUtf8 : public IDxcBlobEncoding {
 public:
   virtual LPCSTR STDMETHODCALLTYPE GetStringPointer(void) = 0;
@@ -188,6 +196,7 @@ typedef IDxcBlobWide IDxcBlobUtf16;
 #endif
 
 CROSS_PLATFORM_UUIDOF(IDxcIncludeHandler, "7f61fc7d-950d-467f-b3e3-3c02fb49187c")
+__CRT_UUID_DECL(IDxcIncludeHandler, 0x7f61fc7d, 0x950d, 0x467f, 0xb3,0xe3, 0x3c,0x02,0xfb,0x49,0x18,0x7c);
 struct IDxcIncludeHandler : public IUnknown {
   virtual HRESULT STDMETHODCALLTYPE LoadSource(
     _In_z_ LPCWSTR pFilename,                                 // Candidate filename.
@@ -209,6 +218,7 @@ struct DxcDefine {
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcCompilerArgs, "73EFFE2A-70DC-45F8-9690-EFF64C02429D")
+__CRT_UUID_DECL(IDxcCompilerArgs, 0x73effe2a, 0x70dc, 0x45f8, 0x96,0x90, 0xef,0xf6,0x4c,0x02,0x42,0x9d);
 struct IDxcCompilerArgs : public IUnknown {
   // Pass GetArguments() and GetCount() to Compile
   virtual LPCWSTR* STDMETHODCALLTYPE GetArguments() = 0;
@@ -235,6 +245,7 @@ struct IDxcCompilerArgs : public IUnknown {
 
 // NOTE: IDxcUtils replaces IDxcLibrary
 CROSS_PLATFORM_UUIDOF(IDxcLibrary, "e5204dc7-d18c-4c3c-bdfb-851673980fe7")
+__CRT_UUID_DECL(IDxcLibrary, 0xe5204dc7, 0xd18c, 0x4c3c, 0xbd,0xfb, 0x85,0x16,0x73,0x98,0x0f,0xe7);
 struct IDxcLibrary : public IUnknown {
   virtual HRESULT STDMETHODCALLTYPE SetMalloc(_In_opt_ IMalloc *pMalloc) = 0;
   virtual HRESULT STDMETHODCALLTYPE CreateBlobFromBlob(
@@ -273,6 +284,7 @@ struct IDxcLibrary : public IUnknown {
 
 // NOTE: IDxcResult replaces IDxcOperationResult
 CROSS_PLATFORM_UUIDOF(IDxcOperationResult, "CEDB484A-D4E9-445A-B991-CA21CA157DC2")
+__CRT_UUID_DECL(IDxcOperationResult, 0xcedb484a, 0xd4e9, 0x445a, 0xb9,0x91, 0xca,0x21,0xca,0x15,0x7d,0xc2);
 struct IDxcOperationResult : public IUnknown {
   virtual HRESULT STDMETHODCALLTYPE GetStatus(_Out_ HRESULT *pStatus) = 0;
 
@@ -290,6 +302,7 @@ struct IDxcOperationResult : public IUnknown {
 
 // NOTE: IDxcCompiler3 replaces IDxcCompiler and IDxcCompiler2
 CROSS_PLATFORM_UUIDOF(IDxcCompiler, "8c210bf3-011f-4422-8d70-6f9acb8db617")
+__CRT_UUID_DECL(IDxcCompiler, 0x8c210bf3, 0x011f, 0x4422, 0x8d,0x70, 0x6f,0x9a,0xcb,0x8d,0xb6,0x17);
 struct IDxcCompiler : public IUnknown {
   // Compile a single entry point to the target shader model
   virtual HRESULT STDMETHODCALLTYPE Compile(
@@ -328,6 +341,7 @@ struct IDxcCompiler : public IUnknown {
 
 // NOTE: IDxcCompiler3 replaces IDxcCompiler and IDxcCompiler2
 CROSS_PLATFORM_UUIDOF(IDxcCompiler2, "A005A9D9-B8BB-4594-B5C9-0E633BEC4D37")
+__CRT_UUID_DECL(IDxcCompiler2, 0xa005a9d9, 0xb8bb, 0x4594, 0xb5,0xc9, 0x0e,0x63,0x3b,0xec,0x4d,0x37);
 struct IDxcCompiler2 : public IDxcCompiler {
   // Compile a single entry point to the target shader model with debug information.
   virtual HRESULT STDMETHODCALLTYPE CompileWithDebug(
@@ -348,6 +362,7 @@ struct IDxcCompiler2 : public IDxcCompiler {
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcLinker, "F1B5BE2A-62DD-4327-A1C2-42AC1E1E78E6")
+__CRT_UUID_DECL(IDxcLinker, 0xf1b5be2a, 0x62dd, 0x4327, 0xa1,0xc2, 0x42,0xac,0x1e,0x1e,0x78,0xe6);
 struct IDxcLinker : public IUnknown {
 public:
   // Register a library with name to ref it later.
@@ -377,6 +392,7 @@ public:
 
 // NOTE: IDxcUtils replaces IDxcLibrary
 CROSS_PLATFORM_UUIDOF(IDxcUtils, "4605C4CB-2019-492A-ADA4-65F20BB7D67F")
+__CRT_UUID_DECL(IDxcUtils, 0x4605c4cb, 0x2019, 0x492a, 0xad,0xa4, 0x65,0xf2,0x0b,0xb7,0xd6,0x7f);
 struct IDxcUtils : public IUnknown {
   // Create a sub-blob that holds a reference to the outer blob and points to its memory.
   virtual HRESULT STDMETHODCALLTYPE CreateBlobFromBlob(
@@ -490,6 +506,7 @@ static_assert(DXC_OUT_NUM_ENUMS == DXC_OUT_LAST + 1,
               "DXC_OUT_* Enum added and last value not updated.");
 
 CROSS_PLATFORM_UUIDOF(IDxcResult, "58346CDA-DDE7-4497-9461-6F87AF5E0659")
+__CRT_UUID_DECL(IDxcResult, 0x58346cda, 0xdde7, 0x4497, 0x94,0x61, 0x6f,0x87,0xaf,0x5e,0x06,0x59);
 struct IDxcResult : public IDxcOperationResult {
   virtual BOOL STDMETHODCALLTYPE HasOutput(_In_ DXC_OUT_KIND dxcOutKind) = 0;
   virtual HRESULT STDMETHODCALLTYPE GetOutput(_In_ DXC_OUT_KIND dxcOutKind,
@@ -506,6 +523,7 @@ struct IDxcResult : public IDxcOperationResult {
 #define DXC_EXTRA_OUTPUT_NAME_STDERR L"*stderr*"
 
 CROSS_PLATFORM_UUIDOF(IDxcExtraOutputs, "319b37a2-a5c2-494a-a5de-4801b2faf989")
+__CRT_UUID_DECL(IDxcExtraOutputs, 0x319b37a2, 0xa5c2, 0x494a, 0xa5,0xde, 0x48,0x01,0xb2,0xfa,0xf9,0x89);
 struct IDxcExtraOutputs : public IUnknown {
 
   virtual UINT32 STDMETHODCALLTYPE GetOutputCount() = 0;
@@ -516,6 +534,7 @@ struct IDxcExtraOutputs : public IUnknown {
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcCompiler3, "228B4687-5A6A-4730-900C-9702B2203F54")
+__CRT_UUID_DECL(IDxcCompiler3, 0x228b4687, 0x5a6a, 0x4730, 0x90,0x0c, 0x97,0x02,0xb2,0x20,0x3f,0x54);
 struct IDxcCompiler3 : public IUnknown {
   // Compile a single entry point to the target shader model,
   // Compile a library to a library target (-T lib_*),
@@ -543,6 +562,7 @@ static const UINT32 DxcValidatorFlags_ModuleOnly = 4;
 static const UINT32 DxcValidatorFlags_ValidMask = 0x7;
 
 CROSS_PLATFORM_UUIDOF(IDxcValidator, "A6E82BD2-1FD7-4826-9811-2857E797F49A")
+__CRT_UUID_DECL(IDxcValidator, 0xa6e82bd2, 0x1fd7, 0x4826, 0x98,0x11, 0x28,0x57,0xe7,0x97,0xf4,0x9a);
 struct IDxcValidator : public IUnknown {
   // Validate a shader.
   virtual HRESULT STDMETHODCALLTYPE Validate(
@@ -553,6 +573,7 @@ struct IDxcValidator : public IUnknown {
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcValidator2, "458e1fd1-b1b2-4750-a6e1-9c10f03bed92")
+__CRT_UUID_DECL(IDxcValidator2, 0x458e1fd1, 0xb1b2, 0x4750, 0xa6,0xe1, 0x9c,0x10,0xf0,0x3b,0xed,0x92);
 struct IDxcValidator2 : public IDxcValidator {
   // Validate a shader.
   virtual HRESULT STDMETHODCALLTYPE ValidateWithDebug(
@@ -564,6 +585,7 @@ struct IDxcValidator2 : public IDxcValidator {
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcContainerBuilder, "334b1f50-2292-4b35-99a1-25588d8c17fe")
+__CRT_UUID_DECL(IDxcContainerBuilder, 0x334b1f50, 0x2292, 0x4b35, 0x99,0xa1, 0x25,0x58,0x8d,0x8c,0x17,0xfe);
 struct IDxcContainerBuilder : public IUnknown {
   virtual HRESULT STDMETHODCALLTYPE Load(_In_ IDxcBlob *pDxilContainerHeader) = 0;                // Loads DxilContainer to the builder
   virtual HRESULT STDMETHODCALLTYPE AddPart(_In_ UINT32 fourCC, _In_ IDxcBlob *pSource) = 0;      // Part to add to the container
@@ -572,6 +594,7 @@ struct IDxcContainerBuilder : public IUnknown {
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcAssembler, "091f7a26-1c1f-4948-904b-e6e3a8a771d5")
+__CRT_UUID_DECL(IDxcAssembler, 0x091f7a26, 0x1c1f, 0x4948, 0x90,0x4b, 0xe6,0xe3,0xa8,0xa7,0x71,0xd5);
 struct IDxcAssembler : public IUnknown {
   // Assemble dxil in ll or llvm bitcode to DXIL container.
   virtual HRESULT STDMETHODCALLTYPE AssembleToContainer(
@@ -581,6 +604,7 @@ struct IDxcAssembler : public IUnknown {
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcContainerReflection, "d2c21b26-8350-4bdc-976a-331ce6f4c54c")
+__CRT_UUID_DECL(IDxcContainerReflection, 0xd2c21b26, 0x8350, 0x4bdc, 0x97,0x6a, 0x33,0x1c,0xe6,0xf4,0xc5,0x4c);
 struct IDxcContainerReflection : public IUnknown {
   virtual HRESULT STDMETHODCALLTYPE Load(_In_ IDxcBlob *pContainer) = 0; // Container to load.
   virtual HRESULT STDMETHODCALLTYPE GetPartCount(_Out_ UINT32 *pResult) = 0;
@@ -591,6 +615,7 @@ struct IDxcContainerReflection : public IUnknown {
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcOptimizerPass, "AE2CD79F-CC22-453F-9B6B-B124E7A5204C")
+__CRT_UUID_DECL(IDxcOptimizerPass, 0xae2cd79f, 0xcc22, 0x453f, 0x9b,0x6b, 0xb1,0x24,0xe7,0xa5,0x20,0x4c);
 struct IDxcOptimizerPass : public IUnknown {
   virtual HRESULT STDMETHODCALLTYPE GetOptionName(_COM_Outptr_ LPWSTR *ppResult) = 0;
   virtual HRESULT STDMETHODCALLTYPE GetDescription(_COM_Outptr_ LPWSTR *ppResult) = 0;
@@ -600,6 +625,7 @@ struct IDxcOptimizerPass : public IUnknown {
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcOptimizer, "25740E2E-9CBA-401B-9119-4FB42F39F270")
+__CRT_UUID_DECL(IDxcOptimizer, 0x25740e2e, 0x9cba, 0x401b, 0x91,0x19, 0x4f,0xb4,0x2f,0x39,0xf2,0x70);
 struct IDxcOptimizer : public IUnknown {
   virtual HRESULT STDMETHODCALLTYPE GetAvailablePassCount(_Out_ UINT32 *pCount) = 0;
   virtual HRESULT STDMETHODCALLTYPE GetAvailablePass(UINT32 index, _COM_Outptr_ IDxcOptimizerPass** ppResult) = 0;
@@ -614,12 +640,14 @@ static const UINT32 DxcVersionInfoFlags_Debug = 1; // Matches VS_FF_DEBUG
 static const UINT32 DxcVersionInfoFlags_Internal = 2; // Internal Validator (non-signing)
 
 CROSS_PLATFORM_UUIDOF(IDxcVersionInfo, "b04f5b50-2059-4f12-a8ff-a1e0cde1cc7e")
+__CRT_UUID_DECL(IDxcVersionInfo, 0xb04f5b50, 0x2059, 0x4f12, 0xa8,0xff, 0xa1,0xe0,0xcd,0xe1,0xcc,0x7e);
 struct IDxcVersionInfo : public IUnknown {
   virtual HRESULT STDMETHODCALLTYPE GetVersion(_Out_ UINT32 *pMajor, _Out_ UINT32 *pMinor) = 0;
   virtual HRESULT STDMETHODCALLTYPE GetFlags(_Out_ UINT32 *pFlags) = 0;
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcVersionInfo2, "fb6904c4-42f0-4b62-9c46-983af7da7c83")
+__CRT_UUID_DECL(IDxcVersionInfo2, 0xfb6904c4, 0x42f0, 0x4b62, 0x9c,0x46, 0x98,0x3a,0xf7,0xda,0x7c,0x83);
 struct IDxcVersionInfo2 : public IDxcVersionInfo {
   virtual HRESULT STDMETHODCALLTYPE GetCommitInfo(
     _Out_ UINT32 *pCommitCount,           // The total number commits.
@@ -628,6 +656,7 @@ struct IDxcVersionInfo2 : public IDxcVersionInfo {
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcVersionInfo3, "5e13e843-9d25-473c-9ad2-03b2d0b44b1e")
+__CRT_UUID_DECL(IDxcVersionInfo3, 0x5e13e843, 0x9d25, 0x473c, 0x9a,0xd2, 0x03,0xb2,0xd0,0xb4,0x4b,0x1e);
 struct IDxcVersionInfo3 : public IUnknown {
   virtual HRESULT STDMETHODCALLTYPE GetCustomVersionString(
     _Outptr_result_z_ char **pVersionString // Custom version string for compiler. (Must be CoTaskMemFree()'d!)
@@ -640,6 +669,7 @@ struct DxcArgPair {
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcPdbUtils, "E6C9647E-9D6A-4C3B-B94C-524B5A6C343D")
+__CRT_UUID_DECL(IDxcPdbUtils, 0xe6c9647e, 0x9d6a, 0x4c3b, 0xb9,0x4c, 0x52,0x4b,0x5a,0x6c,0x34,0x3d);
 struct IDxcPdbUtils : public IUnknown {
   virtual HRESULT STDMETHODCALLTYPE Load(_In_ IDxcBlob *pPdbOrDxil) = 0;
 
@@ -678,6 +708,7 @@ struct IDxcPdbUtils : public IUnknown {
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcPdbUtils2, "4315D938-F369-4F93-95A2-252017CC3807")
+__CRT_UUID_DECL(IDxcPdbUtils2, 0x4315d938, 0xf369, 0x4f93, 0x95,0xa2, 0x25,0x20,0x17,0xcc,0x38,0x07);
 struct IDxcPdbUtils2 : public IUnknown {
   virtual HRESULT STDMETHODCALLTYPE Load(_In_ IDxcBlob *pPdbOrDxil) = 0;
 
@@ -720,7 +751,7 @@ struct IDxcPdbUtils2 : public IUnknown {
 
 // Note: __declspec(selectany) requires 'extern'
 // On Linux __declspec(selectany) is removed and using 'extern' results in link error.
-#ifdef _MSC_VER
+#ifdef _WIN32
 #define CLSID_SCOPE __declspec(selectany) extern
 #else
 #define CLSID_SCOPE
diff --git a/include/dxc/dxcapi.internal.h b/include/dxc/dxcapi.internal.h
index 359721abe..f964c965b 100644
--- a/include/dxc/dxcapi.internal.h
+++ b/include/dxc/dxcapi.internal.h
@@ -134,6 +134,7 @@ struct HLSL_INTRINSIC {
 ///////////////////////////////////////////////////////////////////////////////
 // Interfaces.
 CROSS_PLATFORM_UUIDOF(IDxcIntrinsicTable, "f0d4da3f-f863-4660-b8b4-dfd94ded6215")
+__CRT_UUID_DECL(IDxcIntrinsicTable, 0xf0d4da3f, 0xf863, 0x4660, 0xb8,0xb4, 0xdf,0xd9,0x4d,0xed,0x62,0x15);
 struct IDxcIntrinsicTable : public IUnknown
 {
 public:
@@ -161,6 +162,7 @@ public:
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcSemanticDefineValidator, "1d063e4f-515a-4d57-a12a-431f6a44cfb9")
+__CRT_UUID_DECL(IDxcSemanticDefineValidator, 0x1d063e4f, 0x515a, 0x4d57, 0xa1,0x2a, 0x43,0x1f,0x6a,0x44,0xcf,0xb9);
 struct IDxcSemanticDefineValidator : public IUnknown
 {
 public:
@@ -168,6 +170,7 @@ public:
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcLangExtensions, "282a56b4-3f56-4360-98c7-9ea04a752272")
+__CRT_UUID_DECL(IDxcLangExtensions, 0x282a56b4, 0x3f56, 0x4360, 0x98,0xc7, 0x9e,0xa0,0x4a,0x75,0x22,0x72);
 struct IDxcLangExtensions : public IUnknown
 {
 public:
@@ -191,12 +194,14 @@ public:
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcLangExtensions2, "2490C368-89EE-4491-A4B2-C6547B6C9381")
+__CRT_UUID_DECL(IDxcLangExtensions2, 0x2490c368, 0x89ee, 0x4491, 0xa4,0xb2, 0xc6,0x54,0x7b,0x6c,0x93,0x81);
 struct IDxcLangExtensions2 : public IDxcLangExtensions {
 public:
   virtual HRESULT STDMETHODCALLTYPE SetTargetTriple(LPCSTR name) = 0;
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcLangExtensions3, "A1B19880-FB1F-4920-9BC5-50356483BAC1")
+__CRT_UUID_DECL(IDxcLangExtensions3, 0xa1b19880, 0xfb1f, 0x4920, 0x9b,0xc5, 0x50,0x35,0x64,0x83,0xba,0xc1);
 struct IDxcLangExtensions3 : public IDxcLangExtensions2 {
 public:
   /// Registers a semantic define which cannot be overriden using the flag -override-opt-semdefs
@@ -204,6 +209,7 @@ public:
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcSystemAccess, "454b764f-3549-475b-958c-a7a6fcd05fbc")
+__CRT_UUID_DECL(IDxcSystemAccess, 0x454b764f, 0x3549, 0x475b, 0x95,0x8c, 0xa7,0xa6,0xfc,0xd0,0x5f,0xbc);
 struct IDxcSystemAccess : public IUnknown
 {
 public:
@@ -249,6 +255,7 @@ public:
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcContainerEventsHandler, "e991ca8d-2045-413c-a8b8-788b2c06e14d")
+__CRT_UUID_DECL(IDxcContainerEventsHandler, 0xe991ca8d, 0x2045, 0x413c, 0xa8,0xb8, 0x78,0x8b,0x2c,0x06,0xe1,0x4d);
 struct IDxcContainerEventsHandler : public IUnknown
 {
 public:
@@ -256,6 +263,7 @@ public:
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcContainerEvent, "0cfc5058-342b-4ff2-83f7-04c12aad3d01")
+__CRT_UUID_DECL(IDxcContainerEvent, 0x0cfc5058, 0x342b, 0x4ff2, 0x83,0xf7, 0x04,0xc1,0x2a,0xad,0x3d,0x01);
 struct IDxcContainerEvent : public IUnknown
 {
 public:
diff --git a/include/dxc/dxcdxrfallbackcompiler.h b/include/dxc/dxcdxrfallbackcompiler.h
index 2da833d7f..1f2040da4 100644
--- a/include/dxc/dxcdxrfallbackcompiler.h
+++ b/include/dxc/dxcdxrfallbackcompiler.h
@@ -98,7 +98,7 @@ struct __declspec(uuid("76bb3c85-006d-4b72-9e10-63cd97df57f0"))
 
 // Note: __declspec(selectany) requires 'extern'
 // On Linux __declspec(selectany) is removed and using 'extern' results in link error.
-#ifdef _MSC_VER
+#ifdef _WIN32
 #define CLSID_SCOPE __declspec(selectany) extern
 #else
 #define CLSID_SCOPE
diff --git a/include/dxc/dxcisense.h b/include/dxc/dxcisense.h
index de1a7ea5c..879f540df 100644
--- a/include/dxc/dxcisense.h
+++ b/include/dxc/dxcisense.h
@@ -13,7 +13,7 @@
 #define __DXC_ISENSE__
 
 #include "dxcapi.h"
-#ifndef _WIN32
+#ifndef _MSC_VER
 #include "WinAdapter.h"
 #endif
 
@@ -616,6 +616,7 @@ struct IDxcCompletionResult;
 struct IDxcCompletionString;
 
 CROSS_PLATFORM_UUIDOF(IDxcCursor, "1467b985-288d-4d2a-80c1-ef89c42c40bc")
+__CRT_UUID_DECL(IDxcCursor, 0x1467b985, 0x288d, 0x4d2a, 0x80,0xc1, 0xef,0x89,0xc4,0x2c,0x40,0xbc);
 struct IDxcCursor : public IUnknown
 {
   virtual HRESULT STDMETHODCALLTYPE GetExtent(_Outptr_result_nullonfailure_ IDxcSourceRange** pRange) = 0;
@@ -655,6 +656,7 @@ struct IDxcCursor : public IUnknown
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcDiagnostic, "4f76b234-3659-4d33-99b0-3b0db994b564")
+__CRT_UUID_DECL(IDxcDiagnostic, 0x4f76b234, 0x3659, 0x4d,0x33, 0x99b0, 0x3b,0x0d,0xb9,0x94,0xb5,0x64);
 struct IDxcDiagnostic : public IUnknown
 {
   virtual HRESULT STDMETHODCALLTYPE FormatDiagnostic(
@@ -672,6 +674,7 @@ struct IDxcDiagnostic : public IUnknown
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcFile, "bb2fca9e-1478-47ba-b08c-2c502ada4895")
+__CRT_UUID_DECL(IDxcFile, 0xbb2fca9e, 0x1478, 0x47ba, 0xb0,0x8c, 0x2c,0x50,0x2a,0xda,0x48,0x95);
 struct IDxcFile : public IUnknown
 {
   /// <summary>Gets the file name for this file.</summary>
@@ -681,6 +684,7 @@ struct IDxcFile : public IUnknown
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcInclusion, "0c364d65-df44-4412-888e-4e552fc5e3d6")
+__CRT_UUID_DECL(IDxcInclusion, 0x0c364d65, 0xdf44, 0x4412, 0x88,0x8e, 0x4e,0x55,0x2f,0xc5,0xe3,0xd6);
 struct IDxcInclusion : public IUnknown
 {
   virtual HRESULT STDMETHODCALLTYPE GetIncludedFile(_Outptr_result_nullonfailure_ IDxcFile** pResult) = 0;
@@ -689,6 +693,7 @@ struct IDxcInclusion : public IUnknown
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcIntelliSense, "b1f99513-46d6-4112-8169-dd0d6053f17d")
+__CRT_UUID_DECL(IDxcIntelliSense, 0xb1f99513, 0x46d6, 0x4112, 0x81,0x69, 0xdd,0x0d,0x60,0x53,0xf1,0x7d);
 struct IDxcIntelliSense : public IUnknown
 {
   virtual HRESULT STDMETHODCALLTYPE CreateIndex(_Outptr_result_nullonfailure_ IDxcIndex** index) = 0;
@@ -705,6 +710,7 @@ struct IDxcIntelliSense : public IUnknown
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcIndex, "937824a0-7f5a-4815-9ba7-7fc0424f4173")
+__CRT_UUID_DECL(IDxcIndex, 0x937824a0, 0x7f5a, 0x4815, 0x9b,0xa7, 0x7f,0xc0,0x42,0x4f,0x41,0x73);
 struct IDxcIndex : public IUnknown
 {
   virtual HRESULT STDMETHODCALLTYPE SetGlobalOptions(DxcGlobalOptions options) = 0;
@@ -720,6 +726,7 @@ struct IDxcIndex : public IUnknown
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcSourceLocation, "8e7ddf1c-d7d3-4d69-b286-85fccba1e0cf")
+__CRT_UUID_DECL(IDxcSourceLocation, 0x8e7ddf1c, 0xd7d3, 0x4d69, 0xb2,0x86, 0x85,0xfc,0xcb,0xa1,0xe0,0xcf);
 struct IDxcSourceLocation : public IUnknown
 {
   virtual HRESULT STDMETHODCALLTYPE IsEqualTo(_In_ IDxcSourceLocation* other, _Out_ BOOL* pResult) = 0;
@@ -736,6 +743,7 @@ struct IDxcSourceLocation : public IUnknown
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcSourceRange, "f1359b36-a53f-4e81-b514-b6b84122a13f")
+__CRT_UUID_DECL(IDxcSourceRange, 0xf1359b36, 0xa53f, 0x4e81, 0xb5,0x14, 0xb6,0xb8,0x41,0x22,0xa1,0x3f);
 struct IDxcSourceRange : public IUnknown
 {
   virtual HRESULT STDMETHODCALLTYPE IsNull(_Out_ BOOL* pValue) = 0;
@@ -745,6 +753,7 @@ struct IDxcSourceRange : public IUnknown
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcToken, "7f90b9ff-a275-4932-97d8-3cfd234482a2")
+__CRT_UUID_DECL(IDxcToken, 0x7f90b9ff, 0xa275, 0x4932, 0x97,0xd8, 0x3c,0xfd,0x23,0x44,0x82,0xa2);
 struct IDxcToken : public IUnknown
 {
   virtual HRESULT STDMETHODCALLTYPE GetKind(_Out_ DxcTokenKind* pValue) = 0;
@@ -754,6 +763,7 @@ struct IDxcToken : public IUnknown
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcTranslationUnit, "9677dee0-c0e5-46a1-8b40-3db3168be63d")
+__CRT_UUID_DECL(IDxcTranslationUnit, 0x9677dee0, 0xc0e5, 0x46a1, 0x8b,0x40, 0x3d,0xb3,0x16,0x8b,0xe6,0x3d);
 struct IDxcTranslationUnit : public IUnknown
 {
   virtual HRESULT STDMETHODCALLTYPE GetCursor(_Out_ IDxcCursor** pCursor) = 0;
@@ -792,6 +802,7 @@ struct IDxcTranslationUnit : public IUnknown
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcType, "2ec912fd-b144-4a15-ad0d-1c5439c81e46")
+__CRT_UUID_DECL(IDxcType, 0x2ec912fd, 0xb144, 0x4a15, 0xad,0x0d, 0x1c,0x54,0x39,0xc8,0x1e,0x46);
 struct IDxcType : public IUnknown
 {
   virtual HRESULT STDMETHODCALLTYPE GetSpelling(_Outptr_result_z_ LPSTR* pResult) = 0;
@@ -800,6 +811,7 @@ struct IDxcType : public IUnknown
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcUnsavedFile, "8ec00f98-07d0-4e60-9d7c-5a50b5b0017f")
+__CRT_UUID_DECL(IDxcUnsavedFile, 0x8ec00f98, 0x07d0, 0x4e60, 0x9d,0x7c, 0x5a,0x50,0xb5,0xb0,0x01,0x7f);
 struct IDxcUnsavedFile : public IUnknown
 {
   virtual HRESULT STDMETHODCALLTYPE GetFileName(_Outptr_result_z_ LPSTR* pFileName) = 0;
@@ -809,6 +821,7 @@ struct IDxcUnsavedFile : public IUnknown
 
 
 CROSS_PLATFORM_UUIDOF(IDxcCodeCompleteResults, "1E06466A-FD8B-45F3-A78F-8A3F76EBB552")
+__CRT_UUID_DECL(IDxcCodeCompleteResults, 0x1e06466a, 0xfd8b, 0x45f3, 0xa7,0x8f, 0x8a,0x3f,0x76,0xeb,0xb5,0x52);
 struct IDxcCodeCompleteResults : public IUnknown
 {
   virtual HRESULT STDMETHODCALLTYPE GetNumResults(_Out_ unsigned* pResult) = 0;
@@ -816,6 +829,7 @@ struct IDxcCodeCompleteResults : public IUnknown
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcCompletionResult, "943C0588-22D0-4784-86FC-701F802AC2B6")
+__CRT_UUID_DECL(IDxcCompletionResult, 0x943c0588, 0x22d0, 0x4784, 0x86,0xfc, 0x70,0x1f,0x80,0x2a,0xc2,0xb6);
 struct IDxcCompletionResult : public IUnknown
 {
   virtual HRESULT STDMETHODCALLTYPE GetCursorKind(_Out_ DxcCursorKind* pResult) = 0;
@@ -823,6 +837,7 @@ struct IDxcCompletionResult : public IUnknown
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcCompletionString, "06B51E0F-A605-4C69-A110-CD6E14B58EEC")
+__CRT_UUID_DECL(IDxcCompletionString, 0x06b51e0f, 0xa605, 0x4c69, 0xa1,0x10, 0xcd,0x6e,0x14,0xb5,0x8e,0xec);
 struct IDxcCompletionString : public IUnknown
 {
   virtual HRESULT STDMETHODCALLTYPE GetNumCompletionChunks(_Out_ unsigned* pResult) = 0;
@@ -834,7 +849,7 @@ struct IDxcCompletionString : public IUnknown
 // CLSID_DxcIntelliSense is not visible externally (this is OK in C, since const is
 // not by default static in C)
 
-#ifdef _MSC_VER
+#ifdef _WIN32
 #define CLSID_SCOPE __declspec(selectany) extern
 #else
 #define CLSID_SCOPE
diff --git a/include/dxc/dxcpix.h b/include/dxc/dxcpix.h
index dc7792d51..4d1caf674 100644
--- a/include/dxc/dxcpix.h
+++ b/include/dxc/dxcpix.h
@@ -208,7 +208,7 @@ IDxcPixDxilDebugInfoFactory : public IUnknown
 };
 
 #ifndef CLSID_SCOPE
-#ifdef _MSC_VER
+#ifdef _WIN32
 #define CLSID_SCOPE __declspec(selectany) extern
 #else
 #define CLSID_SCOPE
diff --git a/include/dxc/dxctools.h b/include/dxc/dxctools.h
index 59527b163..6281f37e7 100644
--- a/include/dxc/dxctools.h
+++ b/include/dxc/dxctools.h
@@ -23,6 +23,7 @@ enum RewriterOptionMask {
 };
 
 CROSS_PLATFORM_UUIDOF(IDxcRewriter, "c012115b-8893-4eb9-9c5a-111456ea1c45")
+__CRT_UUID_DECL(IDxcRewriter, 0xc012115b, 0x8893, 0x4eb9, 0x9c,0x5a, 0x11,0x14,0x56,0xea,0x1c,0x45);
 struct IDxcRewriter : public IUnknown {
 
   virtual HRESULT STDMETHODCALLTYPE RemoveUnusedGlobals(_In_ IDxcBlobEncoding *pSource,
@@ -48,7 +49,7 @@ struct IDxcRewriter : public IUnknown {
                                                      _COM_Outptr_ IDxcOperationResult **ppResult) = 0;
 };
 
-#ifdef _MSC_VER
+#ifdef _WIN32
 #define CLSID_SCOPE __declspec(selectany) extern
 #else
 #define CLSID_SCOPE
@@ -62,6 +63,7 @@ CLSID_SCOPE const CLSID
                          {0x96, 0x8d, 0x93, 0xe1, 0x24, 0x73, 0x4d, 0xa4}};
 
 CROSS_PLATFORM_UUIDOF(IDxcRewriter2, "261afca1-0609-4ec6-a77f-d98c7035194e")
+__CRT_UUID_DECL(IDxcRewriter2, 0x261afca1, 0x0609, 0x4ec6, 0xa7,0x7f, 0xd9,0x8c,0x70,0x35,0x19,0x4e);
 struct IDxcRewriter2 : public IDxcRewriter {
 
   virtual HRESULT STDMETHODCALLTYPE RewriteWithOptions(_In_ IDxcBlobEncoding *pSource,
diff --git a/include/llvm/ADT/StringRef.h b/include/llvm/ADT/StringRef.h
index 957707f42..f5a49a4cf 100644
--- a/include/llvm/ADT/StringRef.h
+++ b/include/llvm/ADT/StringRef.h
@@ -12,6 +12,7 @@
 
 #include <algorithm>
 #include <cassert>
+#include <cstdint>
 #include <cstring>
 #include <limits>
 #include <string>
diff --git a/include/llvm/Object/COFF.h b/include/llvm/Object/COFF.h
index 025a9dbc6..e8162849b 100644
--- a/include/llvm/Object/COFF.h
+++ b/include/llvm/Object/COFF.h
@@ -334,31 +334,31 @@ public:
   }
 
   bool isExternal() const {
-    return getStorageClass() == COFF::IMAGE_SYM_CLASS_EXTERNAL;
+    return getStorageClass() == IMAGE_SYM_CLASS_EXTERNAL;
   }
 
   bool isCommon() const {
-    return isExternal() && getSectionNumber() == COFF::IMAGE_SYM_UNDEFINED &&
+    return isExternal() && getSectionNumber() == IMAGE_SYM_UNDEFINED &&
            getValue() != 0;
   }
 
   bool isUndefined() const {
-    return isExternal() && getSectionNumber() == COFF::IMAGE_SYM_UNDEFINED &&
+    return isExternal() && getSectionNumber() == IMAGE_SYM_UNDEFINED &&
            getValue() == 0;
   }
 
   bool isWeakExternal() const {
-    return getStorageClass() == COFF::IMAGE_SYM_CLASS_WEAK_EXTERNAL;
+    return getStorageClass() == IMAGE_SYM_CLASS_WEAK_EXTERNAL;
   }
 
   bool isFunctionDefinition() const {
-    return isExternal() && getBaseType() == COFF::IMAGE_SYM_TYPE_NULL &&
-           getComplexType() == COFF::IMAGE_SYM_DTYPE_FUNCTION &&
+    return isExternal() && getBaseType() == IMAGE_SYM_TYPE_NULL &&
+           getComplexType() == IMAGE_SYM_DTYPE_FUNCTION &&
            !COFF::isReservedSectionNumber(getSectionNumber());
   }
 
   bool isFunctionLineInfo() const {
-    return getStorageClass() == COFF::IMAGE_SYM_CLASS_FUNCTION;
+    return getStorageClass() == IMAGE_SYM_CLASS_FUNCTION;
   }
 
   bool isAnyUndefined() const {
@@ -366,27 +366,27 @@ public:
   }
 
   bool isFileRecord() const {
-    return getStorageClass() == COFF::IMAGE_SYM_CLASS_FILE;
+    return getStorageClass() == IMAGE_SYM_CLASS_FILE;
   }
 
   bool isSection() const {
-    return getStorageClass() == COFF::IMAGE_SYM_CLASS_SECTION;
+    return getStorageClass() == IMAGE_SYM_CLASS_SECTION;
   }
 
   bool isSectionDefinition() const {
     // C++/CLI creates external ABS symbols for non-const appdomain globals.
     // These are also followed by an auxiliary section definition.
     bool isAppdomainGlobal =
-        getStorageClass() == COFF::IMAGE_SYM_CLASS_EXTERNAL &&
-        getSectionNumber() == COFF::IMAGE_SYM_ABSOLUTE;
-    bool isOrdinarySection = getStorageClass() == COFF::IMAGE_SYM_CLASS_STATIC;
+        getStorageClass() == IMAGE_SYM_CLASS_EXTERNAL &&
+        getSectionNumber() == IMAGE_SYM_ABSOLUTE;
+    bool isOrdinarySection = getStorageClass() == IMAGE_SYM_CLASS_STATIC;
     if (!getNumberOfAuxSymbols())
       return false;
     return isAppdomainGlobal || isOrdinarySection;
   }
 
   bool isCLRToken() const {
-    return getStorageClass() == COFF::IMAGE_SYM_CLASS_CLR_TOKEN;
+    return getStorageClass() == IMAGE_SYM_CLASS_CLR_TOKEN;
   }
 
 private:
@@ -411,7 +411,7 @@ struct coff_section {
   // Returns true if the actual number of relocations is stored in
   // VirtualAddress field of the first relocation table entry.
   bool hasExtendedRelocations() const {
-    return (Characteristics & COFF::IMAGE_SCN_LNK_NRELOC_OVFL) &&
+    return (Characteristics & IMAGE_SCN_LNK_NRELOC_OVFL) &&
            NumberOfRelocations == UINT16_MAX;
   }
 };
diff --git a/include/llvm/Object/RelocVisitor.h b/include/llvm/Object/RelocVisitor.h
index d5e4258cb..8ccf707fa 100644
--- a/include/llvm/Object/RelocVisitor.h
+++ b/include/llvm/Object/RelocVisitor.h
@@ -206,17 +206,17 @@ private:
     switch (ObjToVisit.getArch()) {
     case Triple::x86:
       switch (RelocType) {
-      case COFF::IMAGE_REL_I386_SECREL:
+      case IMAGE_REL_I386_SECREL:
         return visitCOFF_I386_SECREL(R, Value);
-      case COFF::IMAGE_REL_I386_DIR32:
+      case IMAGE_REL_I386_DIR32:
         return visitCOFF_I386_DIR32(R, Value);
       }
       break;
     case Triple::x86_64:
       switch (RelocType) {
-      case COFF::IMAGE_REL_AMD64_SECREL:
+      case IMAGE_REL_AMD64_SECREL:
         return visitCOFF_AMD64_SECREL(R, Value);
-      case COFF::IMAGE_REL_AMD64_ADDR64:
+      case IMAGE_REL_AMD64_ADDR64:
         return visitCOFF_AMD64_ADDR64(R, Value);
       }
       break;
diff --git a/include/llvm/Support/Atomic.h b/include/llvm/Support/Atomic.h
index 9ec23e827..7088f2421 100644
--- a/include/llvm/Support/Atomic.h
+++ b/include/llvm/Support/Atomic.h
@@ -20,7 +20,7 @@ namespace llvm {
   namespace sys {
     void MemoryFence();
 
-#ifdef _MSC_VER
+#ifdef _WIN32
     typedef long cas_flag;
 #else
     typedef uint32_t cas_flag;
diff --git a/include/llvm/Support/COFF.h b/include/llvm/Support/COFF.h
index 3c5ee0696..3a34be5b0 100644
--- a/include/llvm/Support/COFF.h
+++ b/include/llvm/Support/COFF.h
@@ -80,6 +80,7 @@ namespace COFF {
     uint32_t NumberOfSymbols;
   };
 
+#ifndef __MINGW32__
   enum MachineTypes {
     MT_Invalid = 0xffff,
 
@@ -222,11 +223,15 @@ namespace COFF {
     IMAGE_SYM_DTYPE_POINTER  = 1, ///< A pointer to base type.
     IMAGE_SYM_DTYPE_FUNCTION = 2, ///< A function that returns a base type.
     IMAGE_SYM_DTYPE_ARRAY    = 3, ///< An array of base type.
+  };
+#endif
 
+  enum SymComplexType {
     /// Type is formed as (base + (derived << SCT_COMPLEX_TYPE_SHIFT))
     SCT_COMPLEX_TYPE_SHIFT   = 4
   };
 
+#ifndef __MINGW32__
   enum AuxSymbolType {
     IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1
   };
@@ -416,6 +421,7 @@ namespace COFF {
     uint32_t NameRVA;
     uint32_t ImportAddressTableRVA;
   };
+#endif
 
   /// @brief The PE32 Import Lookup Table.
   ///
@@ -521,6 +527,7 @@ namespace COFF {
     uint32_t Size;
   };
 
+#ifndef __MINGW32__
   enum DataDirectoryIndex {
     EXPORT_TABLE = 0,
     IMPORT_TABLE,
@@ -612,6 +619,7 @@ namespace COFF {
     IMAGE_REL_BASED_MIPS_JMPADDR16 = 9,
     IMAGE_REL_BASED_DIR64          = 10
   };
+#endif
 
   enum ImportType {
     IMPORT_CODE  = 0,
