diff --git a/tools/clang/include/clang/AST/Attr.h b/tools/clang/include/clang/AST/Attr.h
index 4e282d68b..8abc524ba 100644
--- a/tools/clang/include/clang/AST/Attr.h
+++ b/tools/clang/include/clang/AST/Attr.h
@@ -149,6 +149,7 @@ public:
   }
 };
 
+#undef interface
 #include "clang/AST/Attrs.inc"
 
 inline const DiagnosticBuilder &operator<<(const DiagnosticBuilder &DB,
diff --git a/tools/clang/include/clang/Analysis/CFG.h b/tools/clang/include/clang/Analysis/CFG.h
index 68ed8d3ef..2139de7d5 100644
--- a/tools/clang/include/clang/Analysis/CFG.h
+++ b/tools/clang/include/clang/Analysis/CFG.h
@@ -913,8 +913,8 @@ public:
   // Member templates useful for various batch operations over CFGs.
   //===--------------------------------------------------------------------===//
 
-  template <typename CALLBACK>
-  void VisitBlockStmts(CALLBACK& O) const {
+  template <typename Callback>
+  void VisitBlockStmts(Callback& O) const {
     for (const_iterator I=begin(), E=end(); I != E; ++I)
       for (CFGBlock::const_iterator BI=(*I)->begin(), BE=(*I)->end();
            BI != BE; ++BI) {
diff --git a/tools/clang/lib/Analysis/UninitializedValues.cpp b/tools/clang/lib/Analysis/UninitializedValues.cpp
index f2f791957..8c01e3205 100644
--- a/tools/clang/lib/Analysis/UninitializedValues.cpp
+++ b/tools/clang/lib/Analysis/UninitializedValues.cpp
@@ -88,7 +88,7 @@ Optional<unsigned> DeclToIndex::getValueIndex(const VarDecl *d) const {
 
 // These values are defined in such a way that a merge can be done using
 // a bitwise OR.
-enum Value { Unknown = 0x0,         /* 00 */
+enum Value { UnknownVal = 0x0,         /* 00 */
              Initialized = 0x1,     /* 01 */
              Uninitialized = 0x2,   /* 10 */
              MayUninitialized = 0x3 /* 11 */ };
@@ -721,7 +721,7 @@ void TransferFunctions::VisitCallExpr(CallExpr *ce) {
       // suppressing branch-specific false positives when we call one of these
       // functions but keep pretending the path continues (when in reality the
       // user doesn't care).
-      vals.setAllScratchValues(Unknown);
+      vals.setAllScratchValues(UnknownVal);
     }
   }
 }
@@ -790,7 +790,7 @@ void TransferFunctions::VisitObjCMessageExpr(ObjCMessageExpr *ME) {
   // If the Objective-C message expression is an implicit no-return that
   // is not modeled in the CFG, set the tracked dataflow values to Unknown.
   if (objCNoRet.isImplicitNoReturn(ME)) {
-    vals.setAllScratchValues(Unknown);
+    vals.setAllScratchValues(UnknownVal);
   }
 }
 
diff --git a/tools/clang/tools/dxc/dxcmain.cpp b/tools/clang/tools/dxc/dxcmain.cpp
index 17afe868f..27f155715 100644
--- a/tools/clang/tools/dxc/dxcmain.cpp
+++ b/tools/clang/tools/dxc/dxcmain.cpp
@@ -14,7 +14,7 @@
 #ifdef _WIN32
 int __cdecl wmain(int argc, const wchar_t **argv_) 
 {
-    return dxc::main(argc, argv_);
+    return dxc::wmain(argc, argv_);
 #else
 int main(int argc, const char **argv_) {
     return dxc::main(argc, argv_);
diff --git a/tools/clang/tools/dxclib/dxc.cpp b/tools/clang/tools/dxclib/dxc.cpp
index 5a7801970..9f677d17e 100644
--- a/tools/clang/tools/dxclib/dxc.cpp
+++ b/tools/clang/tools/dxclib/dxc.cpp
@@ -62,14 +62,14 @@
 #include "llvm/Support/raw_ostream.h"
 #include "llvm/Support/MemoryBuffer.h"
 #include "llvm/Support/Path.h"
-#ifdef _WIN32
+#ifdef _MSC_VER
 #include <dia2.h>
 #include <comdef.h>
 #endif
 #include <algorithm>
 #include <unordered_map>
 
-#ifdef _WIN32
+#ifdef _MSC_VER
 #pragma comment(lib, "version.lib")
 #endif
 
@@ -136,10 +136,10 @@ private:
   HRESULT ReadFileIntoPartContent(hlsl::DxilFourCC fourCC, LPCWSTR fileName, IDxcBlob **ppResult);
 
 // Dia is only supported on Windows.
-#ifdef _WIN32
+#ifdef _MSC_VER
   // TODO : Refactor two functions below. There are duplicate functions in DxcContext in dxa.cpp
   HRESULT GetDxcDiaTable(IDxcLibrary *pLibrary, IDxcBlob *pTargetBlob, IDiaTable **ppTable, LPCWSTR tableName);
-#endif // _WIN32
+#endif // _MSC_VER
 
   HRESULT FindModuleBlob(hlsl::DxilFourCC fourCC, IDxcBlob *pSource, IDxcLibrary *pLibrary, IDxcBlob **ppTargetBlob);
   void ExtractRootSignature(IDxcBlob *pBlob, IDxcBlob **ppResult);
@@ -646,14 +646,14 @@ public:
 
   HRESULT insertIncludeFile(_In_ LPCWSTR pFilename, _In_ IDxcBlobEncoding *pBlob, _In_ UINT32 dataLen) {
     try {
-#ifdef _WIN32
+#ifdef _MSC_VER
       includeFiles.try_emplace(std::wstring(pFilename), pBlob);
 #else
       // Note: try_emplace is only available in C++17 on Linux.
       // try_emplace does nothing if the key already exists in the map.
       if (includeFiles.find(std::wstring(pFilename)) != includeFiles.end())
         includeFiles.emplace(std::wstring(pFilename), pBlob);
-#endif // _WIN32
+#endif // _MSC_VER
     }
     CATCH_CPP_RETURN_HRESULT()
     return S_OK;
@@ -1090,7 +1090,7 @@ HRESULT DxcContext::FindModuleBlob(hlsl::DxilFourCC fourCC, IDxcBlob *pSource, I
 }
 
 // This function is currently only supported on Windows due to usage of IDiaTable.
-#ifdef _WIN32
+#ifdef _MSC_VER
 // TODO : There is an identical code in DxaContext in Dxa.cpp. Refactor this function.
 HRESULT DxcContext::GetDxcDiaTable(IDxcLibrary *pLibrary, IDxcBlob *pTargetBlob, IDiaTable **ppTable, LPCWSTR tableName) {
   if (!pLibrary || !pTargetBlob || !ppTable)
@@ -1122,7 +1122,7 @@ HRESULT DxcContext::GetDxcDiaTable(IDxcLibrary *pLibrary, IDxcBlob *pTargetBlob,
   *ppTable = pTable.Detach();
   return S_OK;
 }
-#endif // _WIN32
+#endif // _MSC_VER
 
 bool GetDLLFileVersionInfo(const char *dllPath, unsigned int *version) {
   // This function is used to get version information from the DLL file.
@@ -1344,7 +1344,7 @@ static LONG CALLBACK ExceptionFilter(PEXCEPTION_POINTERS pExceptionInfo)
 
 
 #ifdef _WIN32
-int dxc::main(int argc, const wchar_t **argv_) {
+int dxc::wmain(int argc, const wchar_t **argv_) {
 #else
 int dxc::main(int argc, const char **argv_) {
 #endif // _WIN32
@@ -1382,7 +1382,11 @@ int dxc::main(int argc, const char **argv_) {
 
     // Apply defaults.
     if (dxcOpts.EntryPoint.empty() && !dxcOpts.RecompileFromBinary) {
+#ifdef _WIN32
+      dxcOpts.EntryPoint = "wmain";
+#else
       dxcOpts.EntryPoint = "main";
+#endif
     }
 
 #ifdef _WIN32
diff --git a/tools/clang/tools/dxclib/dxc.h b/tools/clang/tools/dxclib/dxc.h
index 60a775dc8..9e32334b9 100644
--- a/tools/clang/tools/dxclib/dxc.h
+++ b/tools/clang/tools/dxclib/dxc.h
@@ -30,7 +30,7 @@ void WriteDXILVersionInfo(llvm::raw_ostream &OS,
                           dxc::DxcDllSupport &DxilSupport);
 
 #ifdef _WIN32
-int main(int argc, const wchar_t **argv_);
+int wmain(int argc, const wchar_t **argv_);
 #else
 int main(int argc, const char **argv_);
 #endif // _WIN32
diff --git a/tools/clang/tools/dxcompiler/DXCompiler.cpp b/tools/clang/tools/dxcompiler/DXCompiler.cpp
index bfe0d7872..941e89a93 100644
--- a/tools/clang/tools/dxcompiler/DXCompiler.cpp
+++ b/tools/clang/tools/dxcompiler/DXCompiler.cpp
@@ -14,7 +14,7 @@
 #include "dxc/Support/Global.h"
 #include "dxc/Support/WinIncludes.h"
 #include "dxc/Support/HLSLOptions.h"
-#ifdef LLVM_ON_WIN32
+#ifdef _MSC_VER
 #include "dxcetw.h"
 #endif
 #include "dxillib.h"
diff --git a/tools/clang/tools/dxcompiler/dxcapi.cpp b/tools/clang/tools/dxcompiler/dxcapi.cpp
index bb7403066..ac29c39ce 100644
--- a/tools/clang/tools/dxcompiler/dxcapi.cpp
+++ b/tools/clang/tools/dxcompiler/dxcapi.cpp
@@ -11,7 +11,7 @@
 
 #include "dxc/Support/WinIncludes.h"
 
-#ifdef _WIN32
+#ifdef _MSC_VER
 #define DXC_API_IMPORT __declspec(dllexport)
 #else
 #define DXC_API_IMPORT __attribute__ ((visibility ("default")))
@@ -20,7 +20,7 @@
 #include "dxc/dxcisense.h"
 #include "dxc/dxctools.h"
 #include "dxc/Support/Global.h"
-#ifdef _WIN32
+#ifdef _MSC_VER
 #include "dxcetw.h"
 #endif
 #include "dxillib.h"
@@ -116,15 +116,17 @@ static HRESULT ThreadMallocDxcCreateInstance(
   else if (IsEqualCLSID(rclsid, CLSID_DxcRewriter)) {
     hr = CreateDxcRewriter(riid, ppv);
   }
+#ifdef _MSC_VER
   else if (IsEqualCLSID(rclsid, CLSID_DxcDiaDataSource)) {
     hr = CreateDxcDiaDataSource(riid, ppv);
   }
-  else if (IsEqualCLSID(rclsid, CLSID_DxcLinker)) {
-    hr = CreateDxcLinker(riid, ppv);
-  }
   else if (IsEqualCLSID(rclsid, CLSID_DxcPdbUtils)) {
     hr = CreateDxcPdbUtils(riid, ppv);
   }
+#endif
+  else if (IsEqualCLSID(rclsid, CLSID_DxcLinker)) {
+    hr = CreateDxcLinker(riid, ppv);
+  }
 #endif
   else {
     hr = REGDB_E_CLASSNOTREG;
diff --git a/tools/clang/tools/dxcompiler/dxclinker.cpp b/tools/clang/tools/dxcompiler/dxclinker.cpp
index 438a422ec..7208ab5d1 100644
--- a/tools/clang/tools/dxcompiler/dxclinker.cpp
+++ b/tools/clang/tools/dxcompiler/dxclinker.cpp
@@ -87,7 +87,7 @@ public:
     return S_OK;
   }
 
-  HRESULT STDMETHODCALLTYPE QueryInterface(REFIID riid, void **ppvObject) {
+  HRESULT STDMETHODCALLTYPE QueryInterface(REFIID riid, void **ppvObject) override {
     return DoBasicQueryInterface<IDxcLinker>(this, riid, ppvObject);
   }
 
diff --git a/tools/clang/tools/dxcompiler/dxcompilerobj.cpp b/tools/clang/tools/dxcompiler/dxcompilerobj.cpp
index 895dad465..613df6399 100644
--- a/tools/clang/tools/dxcompiler/dxcompilerobj.cpp
+++ b/tools/clang/tools/dxcompiler/dxcompilerobj.cpp
@@ -48,7 +48,7 @@
 #include "dxc/Support/DxcLangExtensionsHelper.h"
 #include "dxc/Support/HLSLOptions.h"
 
-#ifdef _WIN32
+#ifdef _MSC_VER
 #include "dxcetw.h"
 #endif
 #include "dxillib.h"
diff --git a/tools/clang/tools/dxcompiler/dxcpdbutils.cpp b/tools/clang/tools/dxcompiler/dxcpdbutils.cpp
index 892c9a97f..d3ffdc9b9 100644
--- a/tools/clang/tools/dxcompiler/dxcpdbutils.cpp
+++ b/tools/clang/tools/dxcompiler/dxcpdbutils.cpp
@@ -10,7 +10,7 @@
 //                                                                           //
 ///////////////////////////////////////////////////////////////////////////////
 
-#ifdef _WIN32
+#ifdef _MSC_VER
 
 #include "dxc/Support/Global.h"
 #include "dxc/Support/WinIncludes.h"
diff --git a/tools/clang/tools/dxcompiler/dxcvalidator.cpp b/tools/clang/tools/dxcompiler/dxcvalidator.cpp
index 63499c412..4e843f042 100644
--- a/tools/clang/tools/dxcompiler/dxcvalidator.cpp
+++ b/tools/clang/tools/dxcompiler/dxcvalidator.cpp
@@ -26,7 +26,7 @@
 #include "dxc/Support/dxcapi.impl.h"
 #include "dxc/DxilRootSignature/DxilRootSignature.h"
 
-#ifdef _WIN32
+#ifdef _MSC_VER
 #include "dxcetw.h"
 #endif
 
