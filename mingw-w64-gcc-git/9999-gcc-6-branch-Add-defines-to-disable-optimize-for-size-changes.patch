From 0436f76da397aef1b088d7fe8ad68f3fd259f750 Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Sat, 16 Jul 2016 18:06:04 +0100
Subject: [PATCH] Add defines to disable optimize for size changes

---
 gcc/c-family/c-opts.c  |  4 ++++
 gcc/cgraph.c           |  2 ++
 gcc/cgraph.h           |  2 ++
 gcc/config.in          | 11 +++++++++++
 gcc/config/i386/i386.c | 15 +++++++++++++--
 gcc/ipa-icf.c          | 14 ++++++++++----
 gcc/ipa-inline.c       | 16 +++++++++++-----
 gcc/predict.c          |  4 ++++
 8 files changed, 57 insertions(+), 11 deletions(-)

diff --git a/gcc/c-family/c-opts.c b/gcc/c-family/c-opts.c
index fec58bc..4db2809 100644
--- a/gcc/c-family/c-opts.c
+++ b/gcc/c-family/c-opts.c
@@ -869,8 +869,12 @@ c_common_post_options (const char **pfilename)
 				 && (cxx_dialect >= cxx11 || flag_isoc99));
 
   /* Declone C++ 'structors if -Os.  */
+#ifdef OSIZE_FLAG_DECLONE_CTOR_DTOR
   if (flag_declone_ctor_dtor == -1)
     flag_declone_ctor_dtor = optimize_size;
+#else
+  flag_declone_ctor_dtor = 0;
+#endif
 
   if (warn_abi_version == -1)
     {
diff --git a/gcc/cgraph.c b/gcc/cgraph.c
index e256dd0..5be5aad 100644
--- a/gcc/cgraph.c
+++ b/gcc/cgraph.c
@@ -2097,8 +2097,10 @@ cgraph_node::dump (FILE *f)
     fprintf (f, " only_called_at_startup");
   if (only_called_at_exit)
     fprintf (f, " only_called_at_exit");
+#ifdef OSIZE_CGRAPH_NODE_DUMP
   if (opt_for_fn (decl, optimize_size))
     fprintf (f, " optimize_size");
+#endif
   if (parallelized_function)
     fprintf (f, " parallelized_function");
 
diff --git a/gcc/cgraph.h b/gcc/cgraph.h
index ecafe63..ce5c7bb 100644
--- a/gcc/cgraph.h
+++ b/gcc/cgraph.h
@@ -3070,8 +3070,10 @@ cgraph_node::mark_force_output (void)
 inline bool
 cgraph_node::optimize_for_size_p (void)
 {
+#ifdef OSIZE_CGRAPH_NODE_OPTIMIZE_FOR_SIZE_P
   if (opt_for_fn (decl, optimize_size))
     return true;
+#endif
   if (frequency == NODE_FREQUENCY_UNLIKELY_EXECUTED)
     return true;
   else
diff --git a/gcc/config.in b/gcc/config.in
index 2deb8ed..a7ab371 100644
--- a/gcc/config.in
+++ b/gcc/config.in
@@ -2361,3 +2361,14 @@
 #undef vfork
 #endif
 
+#define OSIZE_FLAG_DECLONE_CTOR_DTOR
+#define OSIZE_CGRAPH_NODE_DUMP
+#define OSIZE_CGRAPH_NODE_OPTIMIZE_FOR_SIZE_P
+#define OSIZE_DONT_PASS_INSERT_VZEROUPPER
+#define OSIZE_USE_SIZE_COST
+#define OSIZE_CHECK_FOR_X_FLAG_PREFETCH_LOOP_ARRAYS
+#define OSIZE_USE_SIZE_COST2
+#define OSIZE_DECIDE_ALIGNMENT_AS_1
+#define OSIZE_OPTIMIZE_FUNCTION_FOR_SIZE_P
+#define OSIZE_IPA_ICF_CHECK_OPT_FOR_SIZE
+#define OSIZE_IPA_INLINE_CHECK_OPT_FOR_SIZE
diff --git a/gcc/config/i386/i386.c b/gcc/config/i386/i386.c
index c5e5e12..d0fbe17 100644
--- a/gcc/config/i386/i386.c
+++ b/gcc/config/i386/i386.c
@@ -4015,7 +4015,11 @@ public:
     {
       return TARGET_AVX && !TARGET_AVX512F
 	     && TARGET_VZEROUPPER && flag_expensive_optimizations
-	     && !optimize_size;
+#ifdef OSIZE_DONT_PASS_INSERT_VZEROUPPER
+              && !optimize_size;
+#else
+              ;
+#endif
     }
 
   virtual unsigned int execute (function *)
@@ -5483,9 +5487,11 @@ ix86_option_override_internal (bool main_args_p,
   ix86_tune_cost = processor_target_table[ix86_tune].cost;
   /* TODO: ix86_cost should be chosen at instruction or function granuality
      so for cold code we use size_cost even in !optimize_size compilation.  */
+#ifdef OSIZE_USE_SIZE_COST
   if (opts->x_optimize_size)
     ix86_cost = &ix86_size_cost;
   else
+#endif
     ix86_cost = ix86_tune_cost;
 
   /* Arrange to set up i386_stack_locals for all functions.  */
@@ -5779,7 +5785,9 @@ ix86_option_override_internal (bool main_args_p,
   if (opts->x_flag_prefetch_loop_arrays < 0
       && HAVE_prefetch
       && (opts->x_optimize >= 3 || opts->x_flag_profile_use)
+#ifdef OSIZE_CHECK_FOR_X_FLAG_PREFETCH_LOOP_ARRAYS
       && !opts->x_optimize_size
+#endif
       && TARGET_SOFTWARE_PREFETCHING_BENEFICIAL)
     opts->x_flag_prefetch_loop_arrays = 1;
 
@@ -6196,9 +6204,11 @@ ix86_function_specific_restore (struct gcc_options *opts,
   ix86_tune_cost = processor_target_table[ix86_tune].cost;
   /* TODO: ix86_cost should be chosen at instruction or function granuality
      so for cold code we use size_cost even in !optimize_size compilation.  */
+#ifdef OSIZE_USE_SIZE_COST2
   if (opts->x_optimize_size)
     ix86_cost = &ix86_size_cost;
   else
+#endif
     ix86_cost = ix86_tune_cost;
 
   /* Recreate the arch feature tests if the arch changed */
@@ -26789,9 +26799,10 @@ decide_alignment (int align,
   if (TARGET_PENTIUMPRO
       && (alg == rep_prefix_4_byte || alg == rep_prefix_1_byte))
     desired_align = 8;
-
+#ifdef OSIZE_DECIDE_ALIGNMENT_AS_1
   if (optimize_size)
     desired_align = 1;
+#endif
   if (desired_align < align)
     desired_align = align;
   if (expected_size != -1 && expected_size < 4)
diff --git a/gcc/ipa-icf.c b/gcc/ipa-icf.c
index 3c04b5a..a6976a5 100644
--- a/gcc/ipa-icf.c
+++ b/gcc/ipa-icf.c
@@ -84,6 +84,12 @@ along with GCC; see the file COPYING3.  If not see
 #include "stor-layout.h"
 #include "dbgcnt.h"
 
+#ifdef OSIZE_IPA_ICF_CHECK_OPT_FOR_SIZE
+#define opt_for_fn_2(fndecl, opt) (opts_for_fn (fndecl)->x_##opt)
+#else
+#define opt_for_fn_2(fndecl, opt) (0)
+#endif
+
 using namespace ipa_icf_gimple;
 
 namespace ipa_icf {
@@ -393,8 +399,8 @@ sem_item::compare_referenced_symbol_properties (symtab_node *used_by,
 	 unit has no !optimize_size functions. */
 
       if ((!used_by || address || !is_a <cgraph_node *> (used_by)
-	   || !opt_for_fn (used_by->decl, optimize_size))
-	  && !opt_for_fn (n1->decl, optimize_size)
+           || !opt_for_fn_2 (used_by->decl, optimize_size))
+          && !opt_for_fn_2 (n1->decl, optimize_size)
 	  && n1->get_availability () > AVAIL_INTERPOSABLE
 	  && (!DECL_UNINLINABLE (n1->decl) || !DECL_UNINLINABLE (n2->decl)))
 	{
@@ -466,8 +472,8 @@ sem_item::hash_referenced_symbol_properties (symtab_node *ref,
 {
   if (is_a <cgraph_node *> (ref))
     {
-      if ((type != FUNC || address || !opt_for_fn (decl, optimize_size))
-	  && !opt_for_fn (ref->decl, optimize_size)
+      if ((type != FUNC || address || !opt_for_fn_2 (decl, optimize_size))
+          && !opt_for_fn_2 (ref->decl, optimize_size)
 	  && !DECL_UNINLINABLE (ref->decl))
 	{
 	  hstate.add_flag (DECL_DISREGARD_INLINE_LIMITS (ref->decl));
diff --git a/gcc/ipa-inline.c b/gcc/ipa-inline.c
index 5c9366a..d247654 100644
--- a/gcc/ipa-inline.c
+++ b/gcc/ipa-inline.c
@@ -124,6 +124,12 @@ static int overall_size;
 static gcov_type max_count;
 static gcov_type spec_rem;
 
+#ifdef OSIZE_IPA_INLINE_CHECK_OPT_FOR_SIZE
+#define opt_for_fn_2(fndecl, opt) (opts_for_fn (fndecl)->x_##opt)
+#else
+#define opt_for_fn_2(fndecl, opt) (0)
+#endif
+
 /* Pre-computed constants 1/CGRAPH_FREQ_BASE and 1/100. */
 static sreal cgraph_freq_base_rec, percent_rec;
 
@@ -483,8 +489,8 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,
 	 code shrinks or we are in MAX_INLINE_INSNS_SINGLE limit and callee
 	 is inline (and thus likely an unified comdat).  This will allow caller
 	 to run faster.  */
-      else if (opt_for_fn (callee->decl, optimize_size)
-	       > opt_for_fn (caller->decl, optimize_size))
+      else if (opt_for_fn_2 (callee->decl, optimize_size)
+               > opt_for_fn_2 (caller->decl, optimize_size))
 	{
 	  int growth = estimate_edge_growth (e);
 	  if (growth > 0
@@ -498,8 +504,8 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,
 	}
       /* If callee is more aggressively optimized for performance than caller,
 	 we generally want to inline only cheap (runtime wise) functions.  */
-      else if (opt_for_fn (callee->decl, optimize_size)
-	       < opt_for_fn (caller->decl, optimize_size)
+      else if (opt_for_fn_2 (callee->decl, optimize_size)
+               < opt_for_fn_2 (caller->decl, optimize_size)
 	       || (opt_for_fn (callee->decl, optimize)
 		   > opt_for_fn (caller->decl, optimize)))
 	{
@@ -1704,7 +1710,7 @@ bool
 inline_account_function_p (struct cgraph_node *node)
 {
    return (!DECL_EXTERNAL (node->decl)
-	   && !opt_for_fn (node->decl, optimize_size)
+           && !opt_for_fn_2 (node->decl, optimize_size)
 	   && node->frequency != NODE_FREQUENCY_UNLIKELY_EXECUTED);
 }
 
diff --git a/gcc/predict.c b/gcc/predict.c
index 7d55ff7..84c2390 100644
--- a/gcc/predict.c
+++ b/gcc/predict.c
@@ -272,7 +272,11 @@ bool
 optimize_function_for_size_p (struct function *fun)
 {
   if (!fun || !fun->decl)
+#ifdef OSIZE_OPTIMIZE_FUNCTION_FOR_SIZE_P
     return optimize_size;
+#else
+    return 0;
+#endif
   cgraph_node *n = cgraph_node::get (fun->decl);
   return n && n->optimize_for_size_p ();
 }
-- 
2.9.1

