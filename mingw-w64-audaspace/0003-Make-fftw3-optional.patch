From 19c8d9f5f2f0fbe386ba52e7b04fc3e4a1c8a553 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B6rg=20M=C3=BCller?= <nexyon@gmail.com>
Date: Sun, 13 Aug 2017 14:29:33 +0200
Subject: [PATCH 03/16] Make fftw3 optional.

---
 CMakeLists.txt              | 130 ++++++++++++++++++++++++------------
 bindings/C/AUD_Sound.cpp    |   4 ++
 bindings/C/AUD_Sound.h      |   6 +-
 bindings/python/PyAPI.cpp   |  18 +++--
 bindings/python/PySound.cpp |  20 ++++--
 bindings/python/setup.py.in |   4 +-
 6 files changed, 126 insertions(+), 56 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0d549b5..d82dc21 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -42,14 +42,9 @@ set(SRC
 	src/fx/ADSR.cpp
 	src/fx/ADSRReader.cpp
 	src/fx/BaseIIRFilterReader.cpp
-	src/fx/BinauralSound.cpp
-	src/fx/BinauralReader.cpp
 	src/fx/ButterworthCalculator.cpp
 	src/fx/Butterworth.cpp
 	src/fx/CallbackIIRFilterReader.cpp
-	src/fx/Convolver.cpp
-	src/fx/ConvolverReader.cpp
-	src/fx/ConvolverSound.cpp
 	src/fx/Delay.cpp
 	src/fx/DelayReader.cpp
 	src/fx/DynamicIIRFilter.cpp
@@ -60,13 +55,10 @@ set(SRC
 	src/fx/Envelope.cpp
 	src/fx/Fader.cpp
 	src/fx/FaderReader.cpp
-	src/fx/FFTConvolver.cpp
 	src/fx/HighpassCalculator.cpp
 	src/fx/Highpass.cpp
-	src/fx/HRTF.cpp
 	src/fx/IIRFilter.cpp
 	src/fx/IIRFilterReader.cpp
-	src/fx/ImpulseResponse.cpp
 	src/fx/Limiter.cpp
 	src/fx/LimiterReader.cpp
 	src/fx/Loop.cpp
@@ -126,7 +118,6 @@ set(SRC
 	src/util/Barrier.cpp
 	src/util/Buffer.cpp
 	src/util/BufferReader.cpp
-	src/util/FFTPlan.cpp
 	src/util/StreamBuffer.cpp
 	src/util/ThreadPool.cpp
 )
@@ -158,14 +149,9 @@ set(PUBLIC_HDR
 	include/fx/ADSR.h
 	include/fx/ADSRReader.h
 	include/fx/BaseIIRFilterReader.h
-	include/fx/BinauralSound.h
-	include/fx/BinauralReader.h
 	include/fx/ButterworthCalculator.h
 	include/fx/Butterworth.h
 	include/fx/CallbackIIRFilterReader.h
-	include/fx/Convolver.h
-	include/fx/ConvolverReader.h
-	include/fx/ConvolverSound.h
 	include/fx/Delay.h
 	include/fx/DelayReader.h
 	include/fx/DynamicIIRFilter.h
@@ -176,15 +162,11 @@ set(PUBLIC_HDR
 	include/fx/Envelope.h
 	include/fx/Fader.h
 	include/fx/FaderReader.h
-	include/fx/FFTConvolver.h
 	include/fx/HighpassCalculator.h
 	include/fx/Highpass.h
-	include/fx/HRTF.h
-	include/fx/HRTFLoader.h
 	include/fx/IDynamicIIRFilterCalculator.h
 	include/fx/IIRFilter.h
 	include/fx/IIRFilterReader.h
-	include/fx/ImpulseResponse.h
 	include/fx/Limiter.h
 	include/fx/LimiterReader.h
 	include/fx/Loop.h
@@ -246,7 +228,6 @@ set(PUBLIC_HDR
 	include/util/Barrier.h
 	include/util/Buffer.h
 	include/util/BufferReader.h
-	include/util/FFTPlan.h
 	include/util/ILockable.h
 	include/util/Math3D.h
 	include/util/StreamBuffer.h
@@ -281,6 +262,7 @@ option(SHARED_LIBRARY "Build Shared Library" TRUE)
 option(WITH_C "Build C Module" TRUE)
 option(WITH_DOCS "Build C++ HTML Documentation with Doxygen" TRUE)
 option(WITH_FFMPEG "Build With FFMPEG" TRUE)
+option(WITH_FFTW "Build With FFTW" TRUE)
 option(WITH_JACK "Build With Plugin" TRUE)
 option(WITH_LIBSNDFILE "Build With LibSndFile" TRUE)
 option(WITH_OPENAL "Build With OpenAL" TRUE)
@@ -351,8 +333,6 @@ if(WITH_C)
 	set(C_SRC
 		bindings/C/AUD_ThreadPool.cpp
 		bindings/C/AUD_Source.cpp
-		bindings/C/AUD_HRTF.cpp
-		bindings/C/AUD_ImpulseResponse.cpp
 		bindings/C/AUD_Device.cpp
 		bindings/C/AUD_DynamicMusic.cpp
 		bindings/C/AUD_Handle.cpp
@@ -364,8 +344,6 @@ if(WITH_C)
 	set(C_HDR
 		bindings/C/AUD_ThreadPool.h
 		bindings/C/AUD_Source.h
-		bindings/C/AUD_HRTF.h
-		bindings/C/AUD_ImpulseResponse.h
 		bindings/C/AUD_Device.h
 		bindings/C/AUD_DynamicMusic.h
 		bindings/C/AUD_Handle.h
@@ -376,6 +354,18 @@ if(WITH_C)
 		bindings/C/AUD_Types.h
 	)
 
+if(WITH_FFTW)
+	list(APPEND C_SRC
+			bindings/C/AUD_HRTF.cpp
+			bindings/C/AUD_ImpulseResponse.cpp
+			)
+
+		list(APPEND C_HDR
+			bindings/C/AUD_HRTF.h
+			bindings/C/AUD_ImpulseResponse.h
+			)
+	endif()
+
 	if(NOT SEPARATE_C)
 		list(APPEND SRC ${C_SRC})
 		list(APPEND HDR ${C_HDR})
@@ -419,13 +409,50 @@ if(WITH_FFMPEG)
 endif()
 
 # FFTW
-find_package(FFTW REQUIRED)
-list(APPEND INCLUDE ${FFTW_INCLUDE_DIR})
-list(APPEND LIBRARIES ${FFTW_LIBRARY})
+if(WITH_FFTW)
+	find_package(FFTW ${PACKAGE_OPTION})
+
+	if(FFTW_FOUND)
+		set(FFTW_SRC
+			src/fx/BinauralSound.cpp
+			src/fx/BinauralReader.cpp
+			src/fx/Convolver.cpp
+			src/fx/ConvolverReader.cpp
+			src/fx/ConvolverSound.cpp
+			src/fx/FFTConvolver.cpp
+			src/fx/HRTF.cpp
+			src/fx/ImpulseResponse.cpp
+			src/util/FFTPlan.cpp
+		)
+	set(FFTW_HDR
+		include/fx/BinauralSound.h
+			include/fx/BinauralReader.h
+			include/fx/Convolver.h
+			include/fx/ConvolverReader.h
+			include/fx/ConvolverSound.h
+			include/fx/FFTConvolver.h
+			include/fx/HRTF.h
+			include/fx/HRTFLoader.h
+			include/fx/ImpulseResponse.h
+			include/util/FFTPlan.h
+		)
 
-if(WIN32)
-	file(GLOB FFTW_DLLS ${LIBRARY_PATH}/fftw/bin/*.dll)
-	list(APPEND DLLS ${FFTW_DLLS})
+		add_definitions(-DWITH_CONVOLUTION)
+
+		list(APPEND INCLUDE ${FFTW_INCLUDE_DIR})
+		list(APPEND LIBRARIES ${FFTW_LIBRARY})
+
+		list(APPEND SRC ${FFTW_SRC})
+		list(APPEND HDR ${FFTW_HDR})
+
+		if(WIN32)
+			file(GLOB FFTW_DLLS ${LIBRARY_PATH}/fftw/bin/*.dll)
+			list(APPEND DLLS ${FFTW_DLLS})
+		endif()
+	else()
+		set(WITH_FFTW FALSE CACHE BOOL "Build With FFTW" FORCE)
+		message(WARNING "FFTW not found, convolution functionality will not be built.")
+	endif()
 endif()
 
 # JACK
@@ -445,7 +472,7 @@ if(WITH_JACK)
 			plugins/jack/JackSymbols.h
 		)
 
-	    if(DYNLOAD_JACK)
+	if(DYNLOAD_JACK)
 			add_definitions(-DDYNLOAD_JACK)
 		endif()
 
@@ -464,7 +491,7 @@ if(WITH_JACK)
 			list(APPEND DLLS ${JACK_DLLS})
 		endif()
 	else()
-		set(WITH_JACK FALSE CACHE BOOL "Build With Plugin" FORCE)
+		set(WITH_JACK FALSE CACHE BOOL "Build With JACK" FORCE)
 		message(WARNING "JACK not found, plugin will not be built.")
 	endif()
 endif()
@@ -635,14 +662,20 @@ string(CONCAT STATIC_PLUGIN_REGISTERS ${STATIC_PLUGIN_REGISTERS})
 
 if(WIN32)
 	configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/plugin/PluginManagerWindows.cpp.in ${CMAKE_CURRENT_BINARY_DIR}/PluginManager.cpp ESCAPE_QUOTES @ONLY)
-	configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/fx/HRTFLoaderWindows.cpp ${CMAKE_CURRENT_BINARY_DIR}/HRTFLoader.cpp COPYONLY)
+	if(WITH_FFTW)
+		configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/fx/HRTFLoaderWindows.cpp ${CMAKE_CURRENT_BINARY_DIR}/HRTFLoader.cpp COPYONLY)
+	endif()
 else()
 	configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/plugin/PluginManagerUnix.cpp.in ${CMAKE_CURRENT_BINARY_DIR}/PluginManager.cpp ESCAPE_QUOTES @ONLY)
-	configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/fx/HRTFLoaderUnix.cpp ${CMAKE_CURRENT_BINARY_DIR}/HRTFLoader.cpp COPYONLY)
+	if(WITH_FFTW)
+		configure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/fx/HRTFLoaderUnix.cpp ${CMAKE_CURRENT_BINARY_DIR}/HRTFLoader.cpp COPYONLY)
+	endif()
 endif()
 
 list(APPEND SRC ${CMAKE_CURRENT_BINARY_DIR}/PluginManager.cpp)
-list(APPEND SRC ${CMAKE_CURRENT_BINARY_DIR}/HRTFLoader.cpp)
+if(WITH_FFTW)
+	list(APPEND SRC ${CMAKE_CURRENT_BINARY_DIR}/HRTFLoader.cpp)
+endif()
 
 # directories
 
@@ -743,7 +776,7 @@ endif()
 if(BUILD_DEMOS)
 	include_directories(${INCLUDE})
 
-	set(DEMOS audaplay audaconvert audaremap signalgen randsounds dynamicmusic playbackmanager convolution binaural)
+	set(DEMOS audaplay audaconvert audaremap signalgen randsounds dynamicmusic playbackmanager)
 
 	add_executable(audaplay demos/audaplay.cpp)
 	target_link_libraries(audaplay audaspace)
@@ -766,11 +799,15 @@ if(BUILD_DEMOS)
 	add_executable(playbackmanager demos/playbackmanager.cpp)
 	target_link_libraries(playbackmanager audaspace)
 
-	add_executable(convolution demos/convolution.cpp)
-	target_link_libraries(convolution audaspace)
+	if(WITH_FFTW)
+		list(APPEND DEMOS convolution binaural)
+
+		add_executable(convolution demos/convolution.cpp)
+		target_link_libraries(convolution audaspace)
 
-	add_executable(binaural demos/binaural.cpp)
-	target_link_libraries(binaural audaspace)
+		add_executable(binaural demos/binaural.cpp)
+		target_link_libraries(binaural audaspace)
+	endif()
 
 	if(WITH_OPENAL)
 		list(APPEND DEMOS openaldevices)
@@ -813,8 +850,6 @@ if(WITH_PYTHON)
 		bindings/python/PyDevice.cpp
 		bindings/python/PyDynamicMusic.cpp
 		bindings/python/PyHandle.cpp
-		bindings/python/PyHRTF.cpp
-		bindings/python/PyImpulseResponse.cpp
 		bindings/python/PyPlaybackManager.cpp
 		bindings/python/PySequence.cpp
 		bindings/python/PySequenceEntry.cpp
@@ -827,8 +862,6 @@ if(WITH_PYTHON)
 		bindings/python/PyDevice.h
 		bindings/python/PyDynamicMusic.h
 		bindings/python/PyHandle.h
-		bindings/python/PyHRTF.h
-		bindings/python/PyImpulseResponse.h
 		bindings/python/PyPlaybackManager.h
 		bindings/python/PySequence.h
 		bindings/python/PySequenceEntry.h
@@ -837,6 +870,17 @@ if(WITH_PYTHON)
 		bindings/python/PyThreadPool.h
 	)
 
+if(WITH_FFTW)
+	list(APPEND PYTHON_SRC
+			bindings/python/PyHRTF.cpp
+			bindings/python/PyImpulseResponse.cpp
+			)
+		list(APPEND PYTHON_HDR
+			bindings/python/PyHRTF.h
+			bindings/python/PyImpulseResponse.h
+			)
+	endif()
+
 	add_library(audaspace-py ${LIBRARY_TYPE} ${PYTHON_SRC} ${PYTHON_HDR})
 	target_link_libraries(audaspace-py audaspace ${PYTHON_LIBRARIES})
 	set_target_properties(audaspace-py PROPERTIES SOVERSION ${AUDASPACE_VERSION})
diff --git a/bindings/C/AUD_Sound.cpp b/bindings/C/AUD_Sound.cpp
index 8d024b2..9c572cf 100644
--- a/bindings/C/AUD_Sound.cpp
+++ b/bindings/C/AUD_Sound.cpp
@@ -668,6 +668,8 @@ AUD_API AUD_Sound* AUD_Sound_mutable(AUD_Sound* sound)
 	}
 }
 
+#ifdef WITH_CONVOLUTION
+
 AUD_API AUD_Sound* AUD_Sound_Convolver(AUD_Sound* sound, AUD_ImpulseResponse* filter, AUD_ThreadPool* threadPool)
 {
 	assert(sound);
@@ -700,3 +702,5 @@ AUD_API AUD_Sound* AUD_Sound_Binaural(AUD_Sound* sound, AUD_HRTF* hrtfs, AUD_Sou
 		return nullptr;
 	}
 }
+
+#endif
diff --git a/bindings/C/AUD_Sound.h b/bindings/C/AUD_Sound.h
index 7d205fa..b18e3c3 100644
--- a/bindings/C/AUD_Sound.h
+++ b/bindings/C/AUD_Sound.h
@@ -360,8 +360,10 @@ extern AUD_API int AUD_SoundList_addSound(AUD_Sound* list, AUD_Sound* sound);
 */
 extern AUD_API AUD_Sound* AUD_Sound_mutable(AUD_Sound* sound);
 
-extern AUD_API AUD_Sound* AUD_Sound_Convolver(AUD_Sound* sound, AUD_ImpulseResponse* filter, AUD_ThreadPool* threadPool);
-extern AUD_API AUD_Sound* AUD_Sound_Binaural(AUD_Sound* sound, AUD_HRTF* hrtfs, AUD_Source* source, AUD_ThreadPool* threadPool);
+#ifdef WITH_CONVOLUTION
+	extern AUD_API AUD_Sound* AUD_Sound_Convolver(AUD_Sound* sound, AUD_ImpulseResponse* filter, AUD_ThreadPool* threadPool);
+	extern AUD_API AUD_Sound* AUD_Sound_Binaural(AUD_Sound* sound, AUD_HRTF* hrtfs, AUD_Source* source, AUD_ThreadPool* threadPool);
+#endif
 
 #ifdef __cplusplus
 }
diff --git a/bindings/python/PyAPI.cpp b/bindings/python/PyAPI.cpp
index e2b307c..cceadbc 100644
--- a/bindings/python/PyAPI.cpp
+++ b/bindings/python/PyAPI.cpp
@@ -23,9 +23,12 @@
 #include "PyPlaybackManager.h"
 #include "PyDynamicMusic.h"
 #include "PyThreadPool.h"
+#include "PySource.h"
+
+#ifdef WITH_CONVOLUTION
 #include "PyImpulseResponse.h"
 #include "PyHRTF.h"
-#include "PySource.h"
+#endif
 
 #include "respec/Specification.h"
 #include "devices/IHandle.h"
@@ -95,14 +98,16 @@ PyInit_aud()
 	if(!initializeThreadPool())
 		return nullptr;
 
-	if(!initializeImpulseResponse())
+	if(!initializeSource())
 		return nullptr;
 
-	if(!initializeHRTF())
+#ifdef WITH_CONVOLUTION
+	if(!initializeImpulseResponse())
 		return nullptr;
 
-	if(!initializeSource())
+	if(!initializeHRTF())
 		return nullptr;
+#endif
 
 	module = PyModule_Create(&audmodule);
 	if(module == nullptr)
@@ -116,9 +121,12 @@ PyInit_aud()
 	addDynamicMusicToModule(module);
 	addPlaybackManagerToModule(module);
 	addThreadPoolToModule(module);
+	addSourceToModule(module);
+
+#ifdef WITH_CONVOLUTION
 	addImpulseResponseToModule(module);
 	addHRTFToModule(module);
-	addSourceToModule(module);
+#endif
 
 	AUDError = PyErr_NewException("aud.error", nullptr, nullptr);
 	Py_INCREF(AUDError);
diff --git a/bindings/python/PySound.cpp b/bindings/python/PySound.cpp
index 635ac19..2ab1974 100644
--- a/bindings/python/PySound.cpp
+++ b/bindings/python/PySound.cpp
@@ -14,12 +14,15 @@
  * limitations under the License.
  ******************************************************************************/
 
-#include "PyHRTF.h"
-#include "PyImpulseResponse.h"
 #include "PySound.h"
 #include "PySource.h"
 #include "PyThreadPool.h"
 
+#ifdef WITH_CONVOLUTION
+#include "PyHRTF.h"
+#include "PyImpulseResponse.h"
+#endif
+
 #include "Exception.h"
 #include "file/File.h"
 #include "file/FileWriter.h"
@@ -31,8 +34,6 @@
 #include "generator/Triangle.h"
 #include "fx/Accumulator.h"
 #include "fx/ADSR.h"
-#include "fx/BinauralSound.h"
-#include "fx/ConvolverSound.h"
 #include "fx/Delay.h"
 #include "fx/Envelope.h"
 #include "fx/Fader.h"
@@ -57,6 +58,11 @@
 #include "sequence/PingPong.h"
 #include "sequence/Superpose.h"
 
+#ifdef WITH_CONVOLUTION
+#include "fx/BinauralSound.h"
+#include "fx/ConvolverSound.h"
+#endif
+
 #include <cstring>
 #include <structmember.h>
 #define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
@@ -1614,6 +1620,8 @@ Sound_list_addSound(Sound* self, PyObject* object)
 	}
 }
 
+#ifdef WITH_CONVOLUTION
+
 PyDoc_STRVAR(M_aud_Sound_convolver_doc,
 	"convolver()\n\n"
 	"Creates a sound that will apply convolution to another sound.\n\n"
@@ -1719,6 +1727,8 @@ Sound_binaural(Sound* self, PyObject* args)
 	return (PyObject *)parent;
 }
 
+#endif
+
 static PyMethodDef Sound_methods[] = {
 	{"data", (PyCFunction)Sound_data, METH_NOARGS,
 	 M_aud_Sound_data_doc
@@ -1822,12 +1832,14 @@ static PyMethodDef Sound_methods[] = {
 	{ "addSound", (PyCFunction)Sound_list_addSound, METH_O,
 	M_aud_Sound_list_addSound_doc
 	},
+#ifdef WITH_CONVOLUTION
 	{ "convolver", (PyCFunction)Sound_convolver, METH_VARARGS,
 	M_aud_Sound_convolver_doc
 	},
 	{ "binaural", (PyCFunction)Sound_binaural, METH_VARARGS,
 	M_aud_Sound_binaural_doc
 	},
+#endif
 	{nullptr}  /* Sentinel */
 };
 
diff --git a/bindings/python/setup.py.in b/bindings/python/setup.py.in
index 949e12b..add1a2d 100644
--- a/bindings/python/setup.py.in
+++ b/bindings/python/setup.py.in
@@ -43,7 +43,7 @@ audaspace = Extension(
                       library_dirs = ['.', 'Release', 'Debug'],
                       language = 'c++',
                       extra_compile_args = extra_args,
-                      sources = [os.path.join(source_directory, file) for file in ['PyAPI.cpp', 'PyDevice.cpp', 'PyHandle.cpp', 'PySound.cpp', 'PySequenceEntry.cpp', 'PySequence.cpp', 'PyPlaybackManager.cpp', 'PyDynamicMusic.cpp', 'PyThreadPool.cpp', 'PyImpulseResponse.cpp', 'PyHRTF.cpp', 'PySource.cpp']]
+					  sources = [os.path.join(source_directory, file) for file in ['PyAPI.cpp', 'PyDevice.cpp', 'PyHandle.cpp', 'PySound.cpp', 'PySequenceEntry.cpp', 'PySequence.cpp', 'PyPlaybackManager.cpp', 'PyDynamicMusic.cpp', 'PyThreadPool.cpp', 'PySource.cpp'] + (['PyImpulseResponse.cpp', 'PyHRTF.cpp'] if '@WITH_FFTW@' == 'ON' else [])]
 )
 
 setup(
@@ -56,6 +56,6 @@ setup(
       license = 'Apache License 2.0',
       long_description = codecs.open(os.path.join(source_directory, '../../README.md'), 'r', 'utf-8').read(),
       ext_modules = [audaspace],
-      headers = [os.path.join(source_directory, file) for file in ['PyAPI.h', 'PyDevice.h', 'PyHandle.h', 'PySound.h', 'PySequenceEntry.h', 'PySequence.h', 'PyPlaybackManager.h', 'PyDynamicMusic.h', 'PyThreadPool.h', 'PyImpulseResponse.h', 'PyHRTF.h', 'PySource.h']] + ['Audaspace.h']
+	  headers = [os.path.join(source_directory, file) for file in ['PyAPI.h', 'PyDevice.h', 'PyHandle.h', 'PySound.h', 'PySequenceEntry.h', 'PySequence.h', 'PyPlaybackManager.h', 'PyDynamicMusic.h', 'PyThreadPool.h', 'PySource.h'] + (['PyImpulseResponse.h', 'PyHRTF.h'] if '@WITH_FFTW@' == 'ON' else [])] + ['Audaspace.h']
 )
 
-- 
2.22.0

