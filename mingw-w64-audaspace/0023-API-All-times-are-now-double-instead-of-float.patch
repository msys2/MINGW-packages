From 7a6054fdd832d133df22d071d7c708198d15a4db Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B6rg=20M=C3=BCller?= <nexyon@gmail.com>
Date: Thu, 30 Apr 2020 22:34:57 +0200
Subject: [PATCH 23/35] API: All times are now double instead of float.

---
 bindings/C/AUD_Device.cpp             |  4 ++--
 bindings/C/AUD_Device.h               |  4 ++--
 bindings/C/AUD_DynamicMusic.cpp       |  6 +++---
 bindings/C/AUD_DynamicMusic.h         |  6 +++---
 bindings/C/AUD_Handle.cpp             |  4 ++--
 bindings/C/AUD_Handle.h               |  4 ++--
 bindings/C/AUD_Sequence.cpp           |  4 ++--
 bindings/C/AUD_Sequence.h             |  4 ++--
 bindings/C/AUD_Special.cpp            |  2 +-
 bindings/C/AUD_Special.h              |  2 +-
 bindings/python/PyDynamicMusic.cpp    |  6 +++---
 bindings/python/PyHandle.cpp          |  6 +++---
 bindings/python/PySequence.cpp        | 14 +++++++-------
 bindings/python/PySequenceEntry.cpp   | 10 +++++-----
 include/devices/DefaultSynchronizer.h |  4 ++--
 include/devices/IHandle.h             |  4 ++--
 include/devices/ISynchronizer.h       |  4 ++--
 include/devices/NULLDevice.h          |  4 ++--
 include/devices/SoftwareDevice.h      |  4 ++--
 include/fx/DynamicMusic.h             |  4 ++--
 include/sequence/Sequence.h           |  2 +-
 include/sequence/SequenceData.h       |  2 +-
 include/sequence/SequenceEntry.h      | 10 +++++-----
 plugins/jack/JackDevice.cpp           |  6 +++---
 plugins/jack/JackDevice.h             |  4 ++--
 plugins/jack/JackSynchronizer.cpp     |  4 ++--
 plugins/jack/JackSynchronizer.h       |  4 ++--
 plugins/openal/OpenALDevice.cpp       |  4 ++--
 plugins/openal/OpenALDevice.h         |  4 ++--
 src/devices/DefaultSynchronizer.cpp   |  4 ++--
 src/devices/NULLDevice.cpp            |  4 ++--
 src/devices/SoftwareDevice.cpp        |  6 +++---
 src/fx/DynamicMusic.cpp               |  6 +++---
 src/sequence/Sequence.cpp             |  2 +-
 src/sequence/SequenceData.cpp         |  2 +-
 src/sequence/SequenceEntry.cpp        |  4 ++--
 src/sequence/SequenceHandle.cpp       |  8 ++++----
 src/sequence/SequenceHandle.h         |  6 +++---
 src/sequence/SequenceReader.cpp       |  7 +++----
 39 files changed, 94 insertions(+), 95 deletions(-)

diff --git a/bindings/C/AUD_Device.cpp b/bindings/C/AUD_Device.cpp
index 441f228..d464309 100644
--- a/bindings/C/AUD_Device.cpp
+++ b/bindings/C/AUD_Device.cpp
@@ -290,14 +290,14 @@ AUD_API AUD_Device* AUD_Device_getCurrent()
 	return new AUD_Device(device);
 }
 
-AUD_API void AUD_seekSynchronizer(AUD_Handle* handle, float time)
+AUD_API void AUD_seekSynchronizer(AUD_Handle* handle, double time)
 {
 	auto synchronizer = DeviceManager::getDevice()->getSynchronizer();
 	if(synchronizer)
 		synchronizer->seek(*reinterpret_cast<std::shared_ptr<IHandle>*>(handle), time);
 }
 
-AUD_API float AUD_getSynchronizerPosition(AUD_Handle* handle)
+AUD_API double AUD_getSynchronizerPosition(AUD_Handle* handle)
 {
 	auto synchronizer = DeviceManager::getDevice()->getSynchronizer();
 	if(synchronizer)
diff --git a/bindings/C/AUD_Device.h b/bindings/C/AUD_Device.h
index 0dfa21f..05e004a 100644
--- a/bindings/C/AUD_Device.h
+++ b/bindings/C/AUD_Device.h
@@ -221,14 +221,14 @@ extern AUD_API AUD_Device* AUD_Device_getCurrent();
  * \param handle Playback handle.
  * \param time Time in seconds to seek to.
  */
-extern AUD_API void AUD_seekSynchronizer(AUD_Handle* handle, float time);
+extern AUD_API void AUD_seekSynchronizer(AUD_Handle* handle, double time);
 
 /**
  * Returns the current sound scene playback time.
  * \param handle Playback handle.
  * \return The playback time in seconds.
  */
-extern AUD_API float AUD_getSynchronizerPosition(AUD_Handle* handle);
+extern AUD_API double AUD_getSynchronizerPosition(AUD_Handle* handle);
 
 /**
  * Starts the playback of jack transport if possible.
diff --git a/bindings/C/AUD_DynamicMusic.cpp b/bindings/C/AUD_DynamicMusic.cpp
index bb7a129..62e626c 100644
--- a/bindings/C/AUD_DynamicMusic.cpp
+++ b/bindings/C/AUD_DynamicMusic.cpp
@@ -101,14 +101,14 @@ AUD_API int AUD_DynamicMusic_pause(AUD_DynamicMusic* player)
 	return (*player)->pause();
 }
 
-AUD_API int AUD_DynamicMusic_seek(AUD_DynamicMusic* player, float position)
+AUD_API int AUD_DynamicMusic_seek(AUD_DynamicMusic* player, double position)
 {
 	assert(player);
 
 	return (*player)->seek(position);
 }
 
-AUD_API float AUD_DynamicMusic_getPosition(AUD_DynamicMusic* player)
+AUD_API double AUD_DynamicMusic_getPosition(AUD_DynamicMusic* player)
 {
 	assert(player);
 
@@ -141,4 +141,4 @@ AUD_API int AUD_DynamicMusic_stop(AUD_DynamicMusic* player)
 	assert(player);
 
 	return (*player)->stop();
-}
\ No newline at end of file
+}
diff --git a/bindings/C/AUD_DynamicMusic.h b/bindings/C/AUD_DynamicMusic.h
index c362479..b8b78e5 100644
--- a/bindings/C/AUD_DynamicMusic.h
+++ b/bindings/C/AUD_DynamicMusic.h
@@ -103,14 +103,14 @@ extern AUD_API int AUD_DynamicMusic_pause(AUD_DynamicMusic* player);
 * \param position The new position from which to play back, in seconds.
 * \return 0 if the seeking wasn't possible.
 */
-extern AUD_API int AUD_DynamicMusic_seek(AUD_DynamicMusic* player, float position);
+extern AUD_API int AUD_DynamicMusic_seek(AUD_DynamicMusic* player, double position);
 
 /**
 * Retrieves the position of the current scene of a dynamic music player.
 * \param player The DynamicMusic object.
 * \return The position of the current playing scene.
 */
-extern AUD_API float AUD_DynamicMusic_getPosition(AUD_DynamicMusic* player);
+extern AUD_API double AUD_DynamicMusic_getPosition(AUD_DynamicMusic* player);
 
 /**
 * Retrieves the volume of the current scene of a dynamic music player.
@@ -142,4 +142,4 @@ extern AUD_API int AUD_DynamicMusic_stop(AUD_DynamicMusic* player);
 
 #ifdef __cplusplus
 }
-#endif
\ No newline at end of file
+#endif
diff --git a/bindings/C/AUD_Handle.cpp b/bindings/C/AUD_Handle.cpp
index 265c7bf..88d46d6 100644
--- a/bindings/C/AUD_Handle.cpp
+++ b/bindings/C/AUD_Handle.cpp
@@ -259,13 +259,13 @@ AUD_API int AUD_Handle_setPitch(AUD_Handle* handle, float value)
 	return (*handle)->setPitch(value);
 }
 
-AUD_API float AUD_Handle_getPosition(AUD_Handle* handle)
+AUD_API double AUD_Handle_getPosition(AUD_Handle* handle)
 {
 	assert(handle);
 	return (*handle)->getPosition();
 }
 
-AUD_API int AUD_Handle_setPosition(AUD_Handle* handle, float value)
+AUD_API int AUD_Handle_setPosition(AUD_Handle* handle, double value)
 {
 	assert(handle);
 	return (*handle)->seek(value);
diff --git a/bindings/C/AUD_Handle.h b/bindings/C/AUD_Handle.h
index 27cbd25..2182346 100644
--- a/bindings/C/AUD_Handle.h
+++ b/bindings/C/AUD_Handle.h
@@ -211,14 +211,14 @@ extern AUD_API int AUD_Handle_setPitch(AUD_Handle* handle, float value);
  * param handle The handle to get the position from.
  * return The position of the handle.
  */
-extern AUD_API float AUD_Handle_getPosition(AUD_Handle* handle);
+extern AUD_API double AUD_Handle_getPosition(AUD_Handle* handle);
 
 /**
  * Sets the position of a handle.
  * param handle The handle to set the position from.
  * param value The new position to set.
  */
-extern AUD_API int AUD_Handle_setPosition(AUD_Handle* handle, float value);
+extern AUD_API int AUD_Handle_setPosition(AUD_Handle* handle, double value);
 
 /**
  * Retrieves the relative of a handle.
diff --git a/bindings/C/AUD_Sequence.cpp b/bindings/C/AUD_Sequence.cpp
index d278cb1..e3f8862 100644
--- a/bindings/C/AUD_Sequence.cpp
+++ b/bindings/C/AUD_Sequence.cpp
@@ -41,7 +41,7 @@ AUD_API void AUD_Sequence_free(AUD_Sound* sequence)
 	delete sequence;
 }
 
-AUD_API AUD_SequenceEntry* AUD_Sequence_add(AUD_Sound* sequence, AUD_Sound* sound, float begin, float end, float skip)
+AUD_API AUD_SequenceEntry* AUD_Sequence_add(AUD_Sound* sequence, AUD_Sound* sound, double begin, double end, double skip)
 {
 	if(!sound)
 		return new AUD_SequenceEntry(((Sequence *)sequence->get())->add(AUD_Sound(), begin, end, skip));
@@ -160,7 +160,7 @@ AUD_API void AUD_Sequence_setSpeedOfSound(AUD_Sound* sequence, float value)
 
 
 
-AUD_API void AUD_SequenceEntry_move(AUD_SequenceEntry* entry, float begin, float end, float skip)
+AUD_API void AUD_SequenceEntry_move(AUD_SequenceEntry* entry, double begin, double end, double skip)
 {
 	(*entry)->move(begin, end, skip);
 }
diff --git a/bindings/C/AUD_Sequence.h b/bindings/C/AUD_Sequence.h
index 668960c..bdf1a61 100644
--- a/bindings/C/AUD_Sequence.h
+++ b/bindings/C/AUD_Sequence.h
@@ -55,7 +55,7 @@ extern AUD_API void AUD_Sequence_free(AUD_Sound* sequence);
  * \param skip How much seconds should be skipped at the beginning.
  * \return The entry added.
  */
-extern AUD_API AUD_SequenceEntry* AUD_Sequence_add(AUD_Sound* sequence, AUD_Sound* sound, float begin, float end, float skip);
+extern AUD_API AUD_SequenceEntry* AUD_Sequence_add(AUD_Sound* sequence, AUD_Sound* sound, double begin, double end, double skip);
 
 /**
  * Removes an entry from the scene.
@@ -167,7 +167,7 @@ extern AUD_API void AUD_Sequence_setSpeedOfSound(AUD_Sound* sequence, float valu
  * \param end The new end time or a negative value if unknown.
  * \param skip How many seconds to skip at the beginning.
  */
-extern AUD_API void AUD_SequenceEntry_move(AUD_SequenceEntry* entry, float begin, float end, float skip);
+extern AUD_API void AUD_SequenceEntry_move(AUD_SequenceEntry* entry, double begin, double end, double skip);
 
 /**
  * Writes animation data to a sequenced entry.
diff --git a/bindings/C/AUD_Special.cpp b/bindings/C/AUD_Special.cpp
index 30148fa..f5fb122 100644
--- a/bindings/C/AUD_Special.cpp
+++ b/bindings/C/AUD_Special.cpp
@@ -336,7 +336,7 @@ AUD_API const char* AUD_mixdown_per_channel(AUD_Sound* sound, unsigned int start
 	}
 }
 
-AUD_API AUD_Device* AUD_openMixdownDevice(AUD_DeviceSpecs specs, AUD_Sound* sequencer, float volume, float start)
+AUD_API AUD_Device* AUD_openMixdownDevice(AUD_DeviceSpecs specs, AUD_Sound* sequencer, float volume, double start)
 {
 	try
 	{
diff --git a/bindings/C/AUD_Special.h b/bindings/C/AUD_Special.h
index ab79ae9..3167b9e 100644
--- a/bindings/C/AUD_Special.h
+++ b/bindings/C/AUD_Special.h
@@ -101,7 +101,7 @@ extern AUD_API const char* AUD_mixdown_per_channel(AUD_Sound* sound, unsigned in
  * \param start The start time of the mixdown in the sound scene.
  * \return The read device for the mixdown.
  */
-extern AUD_API AUD_Device* AUD_openMixdownDevice(AUD_DeviceSpecs specs, AUD_Sound* sequencer, float volume, float start);
+extern AUD_API AUD_Device* AUD_openMixdownDevice(AUD_DeviceSpecs specs, AUD_Sound* sequencer, float volume, double start);
 
 /**
  * Initializes audio routines (FFMPEG/JACK if it is enabled).
diff --git a/bindings/python/PyDynamicMusic.cpp b/bindings/python/PyDynamicMusic.cpp
index cab8563..8a7d826 100644
--- a/bindings/python/PyDynamicMusic.cpp
+++ b/bindings/python/PyDynamicMusic.cpp
@@ -228,9 +228,9 @@ PyDoc_STRVAR(M_aud_DynamicMusic_position_doc,
 static int
 DynamicMusic_set_position(DynamicMusicP* self, PyObject* args, void* nothing)
 {
-	float position;
+	double position;
 
-	if(!PyArg_Parse(args, "f:position", &position))
+	if(!PyArg_Parse(args, "d:position", &position))
 		return -1;
 
 	try
@@ -252,7 +252,7 @@ DynamicMusic_get_position(DynamicMusicP* self, void* nothing)
 {
 	try
 	{
-		return Py_BuildValue("f", (*reinterpret_cast<std::shared_ptr<aud::DynamicMusic>*>(self->dynamicMusic))->getPosition());
+		return Py_BuildValue("d", (*reinterpret_cast<std::shared_ptr<aud::DynamicMusic>*>(self->dynamicMusic))->getPosition());
 	}
 	catch(aud::Exception& e)
 	{
diff --git a/bindings/python/PyHandle.cpp b/bindings/python/PyHandle.cpp
index 828c1b1..4ecf2ff 100644
--- a/bindings/python/PyHandle.cpp
+++ b/bindings/python/PyHandle.cpp
@@ -696,7 +696,7 @@ Handle_get_position(Handle* self, void* nothing)
 {
 	try
 	{
-		return Py_BuildValue("f", (*reinterpret_cast<std::shared_ptr<IHandle>*>(self->handle))->getPosition());
+		return Py_BuildValue("d", (*reinterpret_cast<std::shared_ptr<IHandle>*>(self->handle))->getPosition());
 	}
 	catch(Exception& e)
 	{
@@ -708,9 +708,9 @@ Handle_get_position(Handle* self, void* nothing)
 static int
 Handle_set_position(Handle* self, PyObject* args, void* nothing)
 {
-	float position;
+	double position;
 
-	if(!PyArg_Parse(args, "f:position", &position))
+	if(!PyArg_Parse(args, "d:position", &position))
 		return -1;
 
 	try
diff --git a/bindings/python/PySequence.cpp b/bindings/python/PySequence.cpp
index 2e08059..26f0c9e 100644
--- a/bindings/python/PySequence.cpp
+++ b/bindings/python/PySequence.cpp
@@ -104,11 +104,11 @@ PyDoc_STRVAR(M_aud_Sequence_add_doc,
 			 "   :arg sound: The sound this entry should play.\n"
 			 "   :type sound: :class:`Sound`\n"
 			 "   :arg begin: The start time.\n"
-			 "   :type begin: float\n"
+			 "   :type begin: double\n"
 			 "   :arg end: The end time or a negative value if determined by the sound.\n"
-			 "   :type end: float\n"
+			 "   :type end: double\n"
 			 "   :arg skip: How much seconds should be skipped at the beginning.\n"
-			 "   :type skip: float\n"
+			 "   :type skip: double\n"
 			 "   :return: The entry added.\n"
 			 "   :rtype: :class:`SequenceEntry`");
 
@@ -116,13 +116,13 @@ static PyObject *
 Sequence_add(Sequence* self, PyObject* args, PyObject* kwds)
 {
 	PyObject* object;
-	float begin;
-	float end = -1.0f;
-	float skip = 0.0f;
+	double begin;
+	double end = -1.0;
+	double skip = 0.0;
 
 	static const char* kwlist[] = {"sound", "begin", "end", "skip", nullptr};
 
-	if(!PyArg_ParseTupleAndKeywords(args, kwds, "Of|ff:add", const_cast<char**>(kwlist), &object, &begin, &end, &skip))
+	if(!PyArg_ParseTupleAndKeywords(args, kwds, "Od|dd:add", const_cast<char**>(kwlist), &object, &begin, &end, &skip))
 		return nullptr;
 
 	Sound* sound = checkSound(object);
diff --git a/bindings/python/PySequenceEntry.cpp b/bindings/python/PySequenceEntry.cpp
index a1bf3db..74c038d 100644
--- a/bindings/python/PySequenceEntry.cpp
+++ b/bindings/python/PySequenceEntry.cpp
@@ -46,18 +46,18 @@ PyDoc_STRVAR(M_aud_SequenceEntry_move_doc,
 			 ".. classmethod:: move()\n\n"
 			 "   Moves the entry.\n\n"
 			 "   :arg begin: The new start time.\n"
-			 "   :type begin: float\n"
+			 "   :type begin: double\n"
 			 "   :arg end: The new end time or a negative value if unknown.\n"
-			 "   :type end: float\n"
+			 "   :type end: double\n"
 			 "   :arg skip: How many seconds to skip at the beginning.\n"
-			 "   :type skip: float\n");
+			 "   :type skip: double\n");
 
 static PyObject *
 SequenceEntry_move(SequenceEntry* self, PyObject* args)
 {
-	float begin, end, skip;
+	double begin, end, skip;
 
-	if(!PyArg_ParseTuple(args, "fff:move", &begin, &end, &skip))
+	if(!PyArg_ParseTuple(args, "ddd:move", &begin, &end, &skip))
 		return nullptr;
 
 	try
diff --git a/include/devices/DefaultSynchronizer.h b/include/devices/DefaultSynchronizer.h
index 31f6c65..e818306 100644
--- a/include/devices/DefaultSynchronizer.h
+++ b/include/devices/DefaultSynchronizer.h
@@ -33,8 +33,8 @@ AUD_NAMESPACE_BEGIN
 class AUD_API DefaultSynchronizer : public ISynchronizer
 {
 public:
-	virtual void seek(std::shared_ptr<IHandle> handle, float time);
-	virtual float getPosition(std::shared_ptr<IHandle> handle);
+	virtual void seek(std::shared_ptr<IHandle> handle, double time);
+	virtual double getPosition(std::shared_ptr<IHandle> handle);
 	virtual void play();
 	virtual void stop();
 	virtual void setSyncCallback(syncFunction function, void* data);
diff --git a/include/devices/IHandle.h b/include/devices/IHandle.h
index 3f42fc3..a10ef3d 100644
--- a/include/devices/IHandle.h
+++ b/include/devices/IHandle.h
@@ -105,14 +105,14 @@ public:
 	 *        - false if the handle is invalid.
 	 * \warning Whether the seek works or not depends on the sound source.
 	 */
-	virtual bool seek(float position)=0;
+	virtual bool seek(double position)=0;
 
 	/**
 	 * Retrieves the current playback position of a sound.
 	 * \return The playback position in seconds, or 0.0 if the handle is
 	 *         invalid.
 	 */
-	virtual float getPosition()=0;
+	virtual double getPosition()=0;
 
 	/**
 	 * Returns the status of a played back sound.
diff --git a/include/devices/ISynchronizer.h b/include/devices/ISynchronizer.h
index 6f14de5..430230f 100644
--- a/include/devices/ISynchronizer.h
+++ b/include/devices/ISynchronizer.h
@@ -56,14 +56,14 @@ public:
 	 * @param handle The handle that should be synchronized/seeked.
 	 * @param time The absolute time to synchronize to.
 	 */
-	virtual void seek(std::shared_ptr<IHandle> handle, float time) = 0;
+	virtual void seek(std::shared_ptr<IHandle> handle, double time) = 0;
 
 	/**
 	 * Retrieves the position of the synchronizer.
 	 * @param handle The handle which is synchronized.
 	 * @return The position in seconds.
 	 */
-	virtual float getPosition(std::shared_ptr<IHandle> handle) = 0;
+	virtual double getPosition(std::shared_ptr<IHandle> handle) = 0;
 
 	/**
 	 * Starts the synchronizer playback.
diff --git a/include/devices/NULLDevice.h b/include/devices/NULLDevice.h
index 76211a7..9af7891 100644
--- a/include/devices/NULLDevice.h
+++ b/include/devices/NULLDevice.h
@@ -53,8 +53,8 @@ private:
 		virtual bool stop();
 		virtual bool getKeep();
 		virtual bool setKeep(bool keep);
-		virtual bool seek(float position);
-		virtual float getPosition();
+		virtual bool seek(double position);
+		virtual double getPosition();
 		virtual Status getStatus();
 		virtual float getVolume();
 		virtual bool setVolume(float volume);
diff --git a/include/devices/SoftwareDevice.h b/include/devices/SoftwareDevice.h
index 8f38463..e92a35e 100644
--- a/include/devices/SoftwareDevice.h
+++ b/include/devices/SoftwareDevice.h
@@ -180,8 +180,8 @@ protected:
 		virtual bool stop();
 		virtual bool getKeep();
 		virtual bool setKeep(bool keep);
-		virtual bool seek(float position);
-		virtual float getPosition();
+		virtual bool seek(double position);
+		virtual double getPosition();
 		virtual Status getStatus();
 		virtual float getVolume();
 		virtual bool setVolume(float volume);
diff --git a/include/fx/DynamicMusic.h b/include/fx/DynamicMusic.h
index 5d59f77..cdbde33 100644
--- a/include/fx/DynamicMusic.h
+++ b/include/fx/DynamicMusic.h
@@ -177,14 +177,14 @@ public:
 	*        - false if the handle is invalid.
 	* \warning Whether the seek works or not depends on the sound source.
 	*/
-	bool seek(float position); 
+	bool seek(double position);
 
 	/**
 	* Retrieves the current playback position of a sound.
 	* \return The playback position in seconds, or 0.0 if the handle is
 	*         invalid.
 	*/
-	float getPosition();
+	double getPosition();
 
 	/**
 	* Retrieves the volume of the scenes.
diff --git a/include/sequence/Sequence.h b/include/sequence/Sequence.h
index 7005171..de14fd9 100644
--- a/include/sequence/Sequence.h
+++ b/include/sequence/Sequence.h
@@ -151,7 +151,7 @@ public:
 	 * \param skip How much seconds should be skipped at the beginning.
 	 * \return The entry added.
 	 */
-	std::shared_ptr<SequenceEntry> add(std::shared_ptr<ISound> sound, float begin, float end, float skip);
+	std::shared_ptr<SequenceEntry> add(std::shared_ptr<ISound> sound, double begin, double end, double skip);
 
 	/**
 	 * Removes an entry from the scene.
diff --git a/include/sequence/SequenceData.h b/include/sequence/SequenceData.h
index b3df054..c3380e6 100644
--- a/include/sequence/SequenceData.h
+++ b/include/sequence/SequenceData.h
@@ -203,7 +203,7 @@ public:
 	 * \param skip How much seconds should be skipped at the beginning.
 	 * \return The entry added.
 	 */
-	std::shared_ptr<SequenceEntry> add(std::shared_ptr<ISound> sound, float begin, float end, float skip);
+	std::shared_ptr<SequenceEntry> add(std::shared_ptr<ISound> sound, double begin, double end, double skip);
 
 	/**
 	 * Removes an entry from the scene.
diff --git a/include/sequence/SequenceEntry.h b/include/sequence/SequenceEntry.h
index 98f15fa..b8e9f11 100644
--- a/include/sequence/SequenceEntry.h
+++ b/include/sequence/SequenceEntry.h
@@ -55,13 +55,13 @@ private:
 	std::shared_ptr<ISound> m_sound;
 
 	/// The begin time.
-	float m_begin;
+	double m_begin;
 
 	/// The end time.
-	float m_end;
+	double m_end;
 
 	/// How many seconds are skipped at the beginning.
-	float m_skip;
+	double m_skip;
 
 	/// Whether the entry is muted.
 	bool m_muted;
@@ -124,7 +124,7 @@ public:
 	 * \param skip How much seconds should be skipped at the beginning.
 	 * \param id The ID of the entry.
 	 */
-	SequenceEntry(std::shared_ptr<ISound> sound, float begin, float end, float skip, int id);
+	SequenceEntry(std::shared_ptr<ISound> sound, double begin, double end, double skip, int id);
 	virtual ~SequenceEntry();
 
 	/**
@@ -155,7 +155,7 @@ public:
 	 * \param end The new end time or a negative value if unknown.
 	 * \param skip How many seconds to skip at the beginning.
 	 */
-	void move(float begin, float end, float skip);
+	void move(double begin, double end, double skip);
 
 	/**
 	 * Retrieves the muting state of the entry.
diff --git a/plugins/jack/JackDevice.cpp b/plugins/jack/JackDevice.cpp
index 1d238f7..32874fd 100644
--- a/plugins/jack/JackDevice.cpp
+++ b/plugins/jack/JackDevice.cpp
@@ -292,7 +292,7 @@ void JackDevice::stopPlayback()
 	m_nextState = JackTransportStopped;
 }
 
-void JackDevice::seekPlayback(float time)
+void JackDevice::seekPlayback(double time)
 {
 	if(time >= 0.0f)
 		AUD_jack_transport_locate(m_client, time * m_specs.rate);
@@ -304,11 +304,11 @@ void JackDevice::setSyncCallback(ISynchronizer::syncFunction sync, void* data)
 	m_syncFuncData = data;
 }
 
-float JackDevice::getPlaybackPosition()
+double JackDevice::getPlaybackPosition()
 {
 	jack_position_t position;
 	AUD_jack_transport_query(m_client, &position);
-	return position.frame / (float) m_specs.rate;
+	return position.frame / (double) m_specs.rate;
 }
 
 bool JackDevice::doesPlayback()
diff --git a/plugins/jack/JackDevice.h b/plugins/jack/JackDevice.h
index 72143ed..4e6b1f5 100644
--- a/plugins/jack/JackDevice.h
+++ b/plugins/jack/JackDevice.h
@@ -174,7 +174,7 @@ public:
 	 * Seeks jack transport playback.
 	 * \param time The time to seek to.
 	 */
-	void seekPlayback(float time);
+	void seekPlayback(double time);
 
 	/**
 	 * Sets the sync callback for jack transport playback.
@@ -187,7 +187,7 @@ public:
 	 * Retrieves the jack transport playback time.
 	 * \return The current time position.
 	 */
-	float getPlaybackPosition();
+	double getPlaybackPosition();
 
 	/**
 	 * Returns whether jack transport plays back.
diff --git a/plugins/jack/JackSynchronizer.cpp b/plugins/jack/JackSynchronizer.cpp
index cd4c448..0bcafa1 100644
--- a/plugins/jack/JackSynchronizer.cpp
+++ b/plugins/jack/JackSynchronizer.cpp
@@ -25,12 +25,12 @@ JackSynchronizer::JackSynchronizer(JackDevice* device) :
 {
 }
 
-void JackSynchronizer::seek(std::shared_ptr<IHandle> handle, float time)
+void JackSynchronizer::seek(std::shared_ptr<IHandle> handle, double time)
 {
 	m_device->seekPlayback(time);
 }
 
-float JackSynchronizer::getPosition(std::shared_ptr<IHandle> handle)
+double JackSynchronizer::getPosition(std::shared_ptr<IHandle> handle)
 {
 	return m_device->getPlaybackPosition();
 }
diff --git a/plugins/jack/JackSynchronizer.h b/plugins/jack/JackSynchronizer.h
index 5c7341a..8a1f930 100644
--- a/plugins/jack/JackSynchronizer.h
+++ b/plugins/jack/JackSynchronizer.h
@@ -48,8 +48,8 @@ public:
 	 */
 	JackSynchronizer(JackDevice* device);
 
-	virtual void seek(std::shared_ptr<IHandle> handle, float time);
-	virtual float getPosition(std::shared_ptr<IHandle> handle);
+	virtual void seek(std::shared_ptr<IHandle> handle, double time);
+	virtual double getPosition(std::shared_ptr<IHandle> handle);
 	virtual void play();
 	virtual void stop();
 	virtual void setSyncCallback(syncFunction function, void* data);
diff --git a/plugins/openal/OpenALDevice.cpp b/plugins/openal/OpenALDevice.cpp
index f41e9c6..536ec4c 100644
--- a/plugins/openal/OpenALDevice.cpp
+++ b/plugins/openal/OpenALDevice.cpp
@@ -269,7 +269,7 @@ bool OpenALDevice::OpenALHandle::setKeep(bool keep)
 	return true;
 }
 
-bool OpenALDevice::OpenALHandle::seek(float position)
+bool OpenALDevice::OpenALHandle::seek(double position)
 {
 	if(!m_status)
 		return false;
@@ -335,7 +335,7 @@ bool OpenALDevice::OpenALHandle::seek(float position)
 	return true;
 }
 
-float OpenALDevice::OpenALHandle::getPosition()
+double OpenALDevice::OpenALHandle::getPosition()
 {
 	if(!m_status)
 		return false;
diff --git a/plugins/openal/OpenALDevice.h b/plugins/openal/OpenALDevice.h
index c2bec44..b6ba545 100644
--- a/plugins/openal/OpenALDevice.h
+++ b/plugins/openal/OpenALDevice.h
@@ -126,8 +126,8 @@ private:
 		virtual bool stop();
 		virtual bool getKeep();
 		virtual bool setKeep(bool keep);
-		virtual bool seek(float position);
-		virtual float getPosition();
+		virtual bool seek(double position);
+		virtual double getPosition();
 		virtual Status getStatus();
 		virtual float getVolume();
 		virtual bool setVolume(float volume);
diff --git a/src/devices/DefaultSynchronizer.cpp b/src/devices/DefaultSynchronizer.cpp
index aa8945d..3ef1f0b 100644
--- a/src/devices/DefaultSynchronizer.cpp
+++ b/src/devices/DefaultSynchronizer.cpp
@@ -19,12 +19,12 @@
 
 AUD_NAMESPACE_BEGIN
 
-void DefaultSynchronizer::seek(std::shared_ptr<IHandle> handle, float time)
+void DefaultSynchronizer::seek(std::shared_ptr<IHandle> handle, double time)
 {
 	handle->seek(time);
 }
 
-float DefaultSynchronizer::getPosition(std::shared_ptr<IHandle> handle)
+double DefaultSynchronizer::getPosition(std::shared_ptr<IHandle> handle)
 {
 	return handle->getPosition();
 }
diff --git a/src/devices/NULLDevice.cpp b/src/devices/NULLDevice.cpp
index a82537f..c329046 100644
--- a/src/devices/NULLDevice.cpp
+++ b/src/devices/NULLDevice.cpp
@@ -52,12 +52,12 @@ bool NULLDevice::NULLHandle::setKeep(bool keep)
 	return false;
 }
 
-bool NULLDevice::NULLHandle::seek(float position)
+bool NULLDevice::NULLHandle::seek(double position)
 {
 	return false;
 }
 
-float NULLDevice::NULLHandle::getPosition()
+double NULLDevice::NULLHandle::getPosition()
 {
 	return std::numeric_limits<float>::quiet_NaN();
 }
diff --git a/src/devices/SoftwareDevice.cpp b/src/devices/SoftwareDevice.cpp
index 8c16c75..7186f8b 100644
--- a/src/devices/SoftwareDevice.cpp
+++ b/src/devices/SoftwareDevice.cpp
@@ -347,7 +347,7 @@ bool SoftwareDevice::SoftwareHandle::setKeep(bool keep)
 	return true;
 }
 
-bool SoftwareDevice::SoftwareHandle::seek(float position)
+bool SoftwareDevice::SoftwareHandle::seek(double position)
 {
 	if(!m_status)
 		return false;
@@ -366,7 +366,7 @@ bool SoftwareDevice::SoftwareHandle::seek(float position)
 	return true;
 }
 
-float SoftwareDevice::SoftwareHandle::getPosition()
+double SoftwareDevice::SoftwareHandle::getPosition()
 {
 	if(!m_status)
 		return false;
@@ -376,7 +376,7 @@ float SoftwareDevice::SoftwareHandle::getPosition()
 	if(!m_status)
 		return 0.0f;
 
-	float position = m_reader->getPosition() / (float)m_device->m_specs.rate;
+	double position = m_reader->getPosition() / (double)m_device->m_specs.rate;
 
 	return position;
 }
diff --git a/src/fx/DynamicMusic.cpp b/src/fx/DynamicMusic.cpp
index c682108..d5b094c 100644
--- a/src/fx/DynamicMusic.cpp
+++ b/src/fx/DynamicMusic.cpp
@@ -169,7 +169,7 @@ bool DynamicMusic::pause()
 	return result || resultTrans;
 }
 
-bool DynamicMusic::seek(float position)
+bool DynamicMusic::seek(double position)
 {
 	bool result;
 
@@ -183,9 +183,9 @@ bool DynamicMusic::seek(float position)
 	return result;
 }
 
-float DynamicMusic::getPosition()
+double DynamicMusic::getPosition()
 {
-	float result = 0.0f;
+	double result = 0.0f;
 
 	if(m_currentHandle != nullptr)
 		result = m_currentHandle->getPosition();
diff --git a/src/sequence/Sequence.cpp b/src/sequence/Sequence.cpp
index eaec4d8..ab7e6e7 100644
--- a/src/sequence/Sequence.cpp
+++ b/src/sequence/Sequence.cpp
@@ -90,7 +90,7 @@ AnimateableProperty* Sequence::getAnimProperty(AnimateablePropertyType type)
 	return m_sequence->getAnimProperty(type);
 }
 
-std::shared_ptr<SequenceEntry> Sequence::add(std::shared_ptr<ISound> sound, float begin, float end, float skip)
+std::shared_ptr<SequenceEntry> Sequence::add(std::shared_ptr<ISound> sound, double begin, double end, double skip)
 {
 	return m_sequence->add(sound, begin, end, skip);
 }
diff --git a/src/sequence/SequenceData.cpp b/src/sequence/SequenceData.cpp
index fb920ac..288f0bd 100644
--- a/src/sequence/SequenceData.cpp
+++ b/src/sequence/SequenceData.cpp
@@ -149,7 +149,7 @@ AnimateableProperty* SequenceData::getAnimProperty(AnimateablePropertyType type)
 	}
 }
 
-std::shared_ptr<SequenceEntry> SequenceData::add(std::shared_ptr<ISound> sound, float begin, float end, float skip)
+std::shared_ptr<SequenceEntry> SequenceData::add(std::shared_ptr<ISound> sound, double begin, double end, double skip)
 {
 	std::lock_guard<std::recursive_mutex> lock(m_mutex);
 
diff --git a/src/sequence/SequenceEntry.cpp b/src/sequence/SequenceEntry.cpp
index de53819..b63bdd2 100644
--- a/src/sequence/SequenceEntry.cpp
+++ b/src/sequence/SequenceEntry.cpp
@@ -22,7 +22,7 @@
 
 AUD_NAMESPACE_BEGIN
 
-SequenceEntry::SequenceEntry(std::shared_ptr<ISound> sound, float begin, float end, float skip, int id) :
+SequenceEntry::SequenceEntry(std::shared_ptr<ISound> sound, double begin, double end, double skip, int id) :
 	m_status(0),
 	m_pos_status(1),
 	m_sound_status(0),
@@ -84,7 +84,7 @@ void SequenceEntry::setSound(std::shared_ptr<ISound> sound)
 	}
 }
 
-void SequenceEntry::move(float begin, float end, float skip)
+void SequenceEntry::move(double begin, double end, double skip)
 {
 	std::lock_guard<std::recursive_mutex> lock(m_mutex);
 
diff --git a/src/sequence/SequenceHandle.cpp b/src/sequence/SequenceHandle.cpp
index 140b1fb..0437b05 100644
--- a/src/sequence/SequenceHandle.cpp
+++ b/src/sequence/SequenceHandle.cpp
@@ -57,7 +57,7 @@ void SequenceHandle::start()
 	m_valid = m_handle.get();
 }
 
-bool SequenceHandle::updatePosition(float position)
+bool SequenceHandle::updatePosition(double position)
 {
 	std::lock_guard<ILockable> lock(*m_entry);
 
@@ -140,7 +140,7 @@ void SequenceHandle::stop()
 	m_3dhandle = nullptr;
 }
 
-void SequenceHandle::update(float position, float frame, float fps)
+void SequenceHandle::update(double position, float frame, float fps)
 {
 	if(m_sound_status != m_entry->m_sound_status)
 	{
@@ -229,7 +229,7 @@ void SequenceHandle::update(float position, float frame, float fps)
 		m_handle->setVolume(0);
 }
 
-bool SequenceHandle::seek(float position)
+bool SequenceHandle::seek(double position)
 {
 	if(!m_valid)
 		// sound not valid, aborting
@@ -240,7 +240,7 @@ bool SequenceHandle::seek(float position)
 		return false;
 
 	std::lock_guard<ILockable> lock(*m_entry);
-	float seekpos = position - m_entry->m_begin;
+	double seekpos = position - m_entry->m_begin;
 	if(seekpos < 0)
 		seekpos = 0;
 	seekpos += m_entry->m_skip;
diff --git a/src/sequence/SequenceHandle.h b/src/sequence/SequenceHandle.h
index 9a77489..14a9436 100644
--- a/src/sequence/SequenceHandle.h
+++ b/src/sequence/SequenceHandle.h
@@ -71,7 +71,7 @@ private:
 	 * \param position Current playback position in seconds.
 	 * \return Whether the handle is valid.
 	 */
-	bool updatePosition(float position);
+	bool updatePosition(double position);
 
 public:
 	/**
@@ -104,14 +104,14 @@ public:
 	 * \param frame The current frame during playback.
 	 * \param fps The animation frames per second.
 	 */
-	void update(float position, float frame, float fps);
+	void update(double position, float frame, float fps);
 
 	/**
 	 * Seeks the handle to a specific time position.
 	 * \param position The time to seek to.
 	 * \return Whether the handle is valid.
 	 */
-	bool seek(float position);
+	bool seek(double position);
 };
 
 AUD_NAMESPACE_END
diff --git a/src/sequence/SequenceReader.cpp b/src/sequence/SequenceReader.cpp
index 38647aa..c903e8e 100644
--- a/src/sequence/SequenceReader.cpp
+++ b/src/sequence/SequenceReader.cpp
@@ -49,7 +49,7 @@ void SequenceReader::seek(int position)
 
 	for(auto& handle : m_handles)
 	{
-		handle->seek(position / m_sequence->m_specs.rate);
+		handle->seek(position / (double)m_sequence->m_specs.rate);
 	}
 }
 
@@ -150,13 +150,12 @@ void SequenceReader::read(int& length, bool& eos, sample_t* buffer)
 
 	Specs specs = m_sequence->m_specs;
 	int pos = 0;
-	float time = float(m_position) / float(specs.rate);
+	double time = double(m_position) / double(specs.rate);
 	float volume, frame;
 	int len, cfra;
 	Vector3 v, v2;
 	Quaternion q;
 
-
 	while(pos < length)
 	{
 		frame = time * m_sequence->m_fps;
@@ -187,7 +186,7 @@ void SequenceReader::read(int& length, bool& eos, sample_t* buffer)
 		m_device.read(reinterpret_cast<data_t*>(buffer + specs.channels * pos), len);
 
 		pos += len;
-		time += float(len) / float(specs.rate);
+		time += double(len) / double(specs.rate);
 	}
 
 	m_position += length;
-- 
2.29.2

