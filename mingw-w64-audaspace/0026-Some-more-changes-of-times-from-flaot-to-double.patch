From c92400771b5e730602c2dd8c1371a630b19903f1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B6rg=20M=C3=BCller?= <nexyon@gmail.com>
Date: Fri, 1 May 2020 13:45:31 +0200
Subject: [PATCH 26/35] Some more changes of times from flaot to double.

---
 bindings/C/AUD_Special.cpp |  2 +-
 bindings/C/AUD_Special.h   |  2 +-
 include/fx/Delay.h         |  6 +++---
 include/fx/DelayReader.h   |  2 +-
 include/fx/DynamicMusic.h  |  6 +++---
 include/fx/Fader.h         | 10 +++++-----
 include/fx/FaderReader.h   |  6 +++---
 include/fx/Limiter.h       | 10 +++++-----
 include/fx/LimiterReader.h |  6 +++---
 src/fx/Delay.cpp           |  4 ++--
 src/fx/DelayReader.cpp     |  2 +-
 src/fx/DynamicMusic.cpp    |  4 ++--
 src/fx/Fader.cpp           |  6 +++---
 src/fx/FaderReader.cpp     |  8 ++++----
 src/fx/Limiter.cpp         |  6 +++---
 src/fx/LimiterReader.cpp   |  2 +-
 16 files changed, 41 insertions(+), 41 deletions(-)

diff --git a/bindings/C/AUD_Special.cpp b/bindings/C/AUD_Special.cpp
index f5fb122..c715527 100644
--- a/bindings/C/AUD_Special.cpp
+++ b/bindings/C/AUD_Special.cpp
@@ -175,7 +175,7 @@ static void pauseSound(AUD_Handle* handle)
 	(*handle)->pause();
 }
 
-AUD_API AUD_Handle* AUD_pauseAfter(AUD_Handle* handle, float seconds)
+AUD_API AUD_Handle* AUD_pauseAfter(AUD_Handle* handle, double seconds)
 {
 	auto device = DeviceManager::getDevice();
 
diff --git a/bindings/C/AUD_Special.h b/bindings/C/AUD_Special.h
index 3167b9e..9faf9e4 100644
--- a/bindings/C/AUD_Special.h
+++ b/bindings/C/AUD_Special.h
@@ -45,7 +45,7 @@ extern AUD_API float* AUD_readSoundBuffer(const char* filename, float low, float
  * \param seconds The time in seconds.
  * \return The silence handle.
  */
-extern AUD_API AUD_Handle* AUD_pauseAfter(AUD_Handle* handle, float seconds);
+extern AUD_API AUD_Handle* AUD_pauseAfter(AUD_Handle* handle, double seconds);
 
 /**
  * Reads a sound into a buffer for drawing at a specific sampling rate.
diff --git a/include/fx/Delay.h b/include/fx/Delay.h
index d6ab93c..d873080 100644
--- a/include/fx/Delay.h
+++ b/include/fx/Delay.h
@@ -35,7 +35,7 @@ private:
 	/**
 	 * The delay in samples.
 	 */
-	const float m_delay;
+	const double m_delay;
 
 	// delete copy constructor and operator=
 	Delay(const Delay&) = delete;
@@ -47,12 +47,12 @@ public:
 	 * \param sound The input sound.
 	 * \param delay The desired delay in seconds.
 	 */
-	Delay(std::shared_ptr<ISound> sound, float delay = 0);
+	Delay(std::shared_ptr<ISound> sound, double delay = 0);
 
 	/**
 	 * Returns the delay in seconds.
 	 */
-	float getDelay() const;
+	double getDelay() const;
 
 	virtual std::shared_ptr<IReader> createReader();
 };
diff --git a/include/fx/DelayReader.h b/include/fx/DelayReader.h
index fe37e56..3810608 100644
--- a/include/fx/DelayReader.h
+++ b/include/fx/DelayReader.h
@@ -52,7 +52,7 @@ public:
 	 * \param reader The reader to read from.
 	 * \param delay The delay in seconds.
 	 */
-	DelayReader(std::shared_ptr<IReader> reader, float delay);
+	DelayReader(std::shared_ptr<IReader> reader, double delay);
 
 	virtual void seek(int position);
 	virtual int getLength() const;
diff --git a/include/fx/DynamicMusic.h b/include/fx/DynamicMusic.h
index cdbde33..c2a1c75 100644
--- a/include/fx/DynamicMusic.h
+++ b/include/fx/DynamicMusic.h
@@ -55,7 +55,7 @@ private:
 	/**
 	* Length of the crossfade transition in seconds, used when no custom transition has been set.
 	*/
-	float m_fadeTime;
+	double m_fadeTime;
 
 	/**
 	* Handle to the playback of the current scene.
@@ -145,13 +145,13 @@ public:
 	* Sets the length of the crossfade transition (default 1 second).
 	* \param seconds The time in seconds.
 	*/
-	void setFadeTime(float seconds);
+	void setFadeTime(double seconds);
 
 	/**
 	* Gets the length of the crossfade transition (default 1 second).
 	* \return The length of the cressfade transition in seconds.
 	*/
-	float getFadeTime();
+	double getFadeTime();
 
 	/**
 	* Resumes a paused sound.
diff --git a/include/fx/Fader.h b/include/fx/Fader.h
index 63280ae..452d525 100644
--- a/include/fx/Fader.h
+++ b/include/fx/Fader.h
@@ -43,12 +43,12 @@ private:
 	/**
 	 * The fading start.
 	 */
-	const float m_start;
+	const double m_start;
 
 	/**
 	 * The fading length.
 	 */
-	const float m_length;
+	const double m_length;
 
 	// delete copy constructor and operator=
 	Fader(const Fader&) = delete;
@@ -64,7 +64,7 @@ public:
 	 */
 	Fader(std::shared_ptr<ISound> sound,
 	                 FadeType type = FADE_IN,
-	                 float start = 0.0f, float length = 1.0f);
+					 double start = 0, double length = 1);
 
 	/**
 	 * Returns the fading type.
@@ -74,12 +74,12 @@ public:
 	/**
 	 * Returns the fading start.
 	 */
-	float getStart() const;
+	double getStart() const;
 
 	/**
 	 * Returns the fading length.
 	 */
-	float getLength() const;
+	double getLength() const;
 
 	virtual std::shared_ptr<IReader> createReader();
 };
diff --git a/include/fx/FaderReader.h b/include/fx/FaderReader.h
index 99ea3d2..9e5fc6d 100644
--- a/include/fx/FaderReader.h
+++ b/include/fx/FaderReader.h
@@ -49,12 +49,12 @@ private:
 	/**
 	 * The fading start.
 	 */
-	const float m_start;
+	const double m_start;
 
 	/**
 	 * The fading length.
 	 */
-	const float m_length;
+	const double m_length;
 
 	// delete copy constructor and operator=
 	FaderReader(const FaderReader&) = delete;
@@ -69,7 +69,7 @@ public:
 	 * \param length How long fading should last in seconds.
 	 */
 	FaderReader(std::shared_ptr<IReader> reader, FadeType type,
-					float start,float length);
+					double start,double length);
 
 	virtual void read(int& length, bool& eos, sample_t* buffer);
 };
diff --git a/include/fx/Limiter.h b/include/fx/Limiter.h
index 0b5451b..b3cf598 100644
--- a/include/fx/Limiter.h
+++ b/include/fx/Limiter.h
@@ -35,12 +35,12 @@ private:
 	/**
 	 * The start time.
 	 */
-	const float m_start;
+	const double m_start;
 
 	/**
 	 * The end time.
 	 */
-	const float m_end;
+	const double m_end;
 
 	// delete copy constructor and operator=
 	Limiter(const Limiter&) = delete;
@@ -55,17 +55,17 @@ public:
 	 *            play to the end.
 	 */
 	Limiter(std::shared_ptr<ISound> sound,
-					   float start = 0, float end = -1);
+					   double start = 0, double end = -1);
 
 	/**
 	 * Returns the start time.
 	 */
-	float getStart() const;
+	double getStart() const;
 
 	/**
 	 * Returns the end time.
 	 */
-	float getEnd() const;
+	double getEnd() const;
 
 	virtual std::shared_ptr<IReader> createReader();
 };
diff --git a/include/fx/LimiterReader.h b/include/fx/LimiterReader.h
index 49a07b5..00ad02e 100644
--- a/include/fx/LimiterReader.h
+++ b/include/fx/LimiterReader.h
@@ -35,12 +35,12 @@ private:
 	/**
 	 * The start sample: inclusive.
 	 */
-	const float m_start;
+	const double m_start;
 
 	/**
 	 * The end sample: exlusive.
 	 */
-	const float m_end;
+	const double m_end;
 
 	// delete copy constructor and operator=
 	LimiterReader(const LimiterReader&) = delete;
@@ -54,7 +54,7 @@ public:
 	 * \param end The desired end time (sample exklusive), a negative value
 	 *            signals that it should play to the end.
 	 */
-	LimiterReader(std::shared_ptr<IReader> reader, float start = 0, float end = -1);
+	LimiterReader(std::shared_ptr<IReader> reader, double start = 0, double end = -1);
 
 	virtual void seek(int position);
 	virtual int getLength() const;
diff --git a/src/fx/Delay.cpp b/src/fx/Delay.cpp
index e2a8229..3ce16f5 100644
--- a/src/fx/Delay.cpp
+++ b/src/fx/Delay.cpp
@@ -19,13 +19,13 @@
 
 AUD_NAMESPACE_BEGIN
 
-Delay::Delay(std::shared_ptr<ISound> sound, float delay) :
+Delay::Delay(std::shared_ptr<ISound> sound, double delay) :
 	Effect(sound),
 	m_delay(delay)
 {
 }
 
-float Delay::getDelay() const
+double Delay::getDelay() const
 {
 	return m_delay;
 }
diff --git a/src/fx/DelayReader.cpp b/src/fx/DelayReader.cpp
index 530aed6..ec171a7 100644
--- a/src/fx/DelayReader.cpp
+++ b/src/fx/DelayReader.cpp
@@ -20,7 +20,7 @@
 
 AUD_NAMESPACE_BEGIN
 
-DelayReader::DelayReader(std::shared_ptr<IReader> reader, float delay) :
+DelayReader::DelayReader(std::shared_ptr<IReader> reader, double delay) :
 	EffectReader(reader),
 	m_delay(int((SampleRate)delay * reader->getSpecs().rate)),
 	m_remdelay(int((SampleRate)delay * reader->getSpecs().rate))
diff --git a/src/fx/DynamicMusic.cpp b/src/fx/DynamicMusic.cpp
index 9a6b8dc..ad4a76f 100644
--- a/src/fx/DynamicMusic.cpp
+++ b/src/fx/DynamicMusic.cpp
@@ -133,14 +133,14 @@ bool DynamicMusic::addTransition(int init, int end, std::shared_ptr<ISound> soun
 	return false;
 }
 
-void DynamicMusic::setFadeTime(float seconds)
+void DynamicMusic::setFadeTime(double seconds)
 {
 	m_device->lock();
 	m_fadeTime = seconds;
 	m_device->unlock();
 }
 
-float DynamicMusic::getFadeTime()
+double DynamicMusic::getFadeTime()
 {
 	return m_fadeTime;
 }
diff --git a/src/fx/Fader.cpp b/src/fx/Fader.cpp
index 041d836..778720b 100644
--- a/src/fx/Fader.cpp
+++ b/src/fx/Fader.cpp
@@ -18,7 +18,7 @@
 
 AUD_NAMESPACE_BEGIN
 
-Fader::Fader(std::shared_ptr<ISound> sound, FadeType type, float start, float length) :
+Fader::Fader(std::shared_ptr<ISound> sound, FadeType type, double start, double length) :
 		Effect(sound),
 		m_type(type),
 		m_start(start),
@@ -31,12 +31,12 @@ FadeType Fader::getType() const
 	return m_type;
 }
 
-float Fader::getStart() const
+double Fader::getStart() const
 {
 	return m_start;
 }
 
-float Fader::getLength() const
+double Fader::getLength() const
 {
 	return m_length;
 }
diff --git a/src/fx/FaderReader.cpp b/src/fx/FaderReader.cpp
index b1e23b9..10783f9 100644
--- a/src/fx/FaderReader.cpp
+++ b/src/fx/FaderReader.cpp
@@ -20,7 +20,7 @@
 
 AUD_NAMESPACE_BEGIN
 
-FaderReader::FaderReader(std::shared_ptr<IReader> reader, FadeType type, float start,float length) :
+FaderReader::FaderReader(std::shared_ptr<IReader> reader, FadeType type, double start, double length) :
 		EffectReader(reader),
 		m_type(type),
 		m_start(start),
@@ -36,14 +36,14 @@ void FaderReader::read(int& length, bool& eos, sample_t* buffer)
 
 	m_reader->read(length, eos, buffer);
 
-	if((position + length) / (float)specs.rate <= m_start)
+	if((position + length) / specs.rate <= m_start)
 	{
 		if(m_type != FADE_OUT)
 		{
 			std::memset(buffer, 0, length * samplesize);
 		}
 	}
-	else if(position / (float)specs.rate >= m_start+m_length)
+	else if(position / specs.rate >= m_start+m_length)
 	{
 		if(m_type == FADE_OUT)
 		{
@@ -58,7 +58,7 @@ void FaderReader::read(int& length, bool& eos, sample_t* buffer)
 		{
 			if(i % specs.channels == 0)
 			{
-				volume = (((position+i)/(float)specs.rate)-m_start) / m_length;
+				volume = float((((position + i) / specs.rate) - m_start) / m_length);
 				if(volume > 1.0f)
 					volume = 1.0f;
 				else if(volume < 0.0f)
diff --git a/src/fx/Limiter.cpp b/src/fx/Limiter.cpp
index 38a7288..031283b 100644
--- a/src/fx/Limiter.cpp
+++ b/src/fx/Limiter.cpp
@@ -20,19 +20,19 @@
 AUD_NAMESPACE_BEGIN
 
 Limiter::Limiter(std::shared_ptr<ISound> sound,
-									   float start, float end) :
+									   double start, double end) :
 		Effect(sound),
 		m_start(start),
 		m_end(end)
 {
 }
 
-float Limiter::getStart() const
+double Limiter::getStart() const
 {
 	return m_start;
 }
 
-float Limiter::getEnd() const
+double Limiter::getEnd() const
 {
 	return m_end;
 }
diff --git a/src/fx/LimiterReader.cpp b/src/fx/LimiterReader.cpp
index 1d003c2..28eb47a 100644
--- a/src/fx/LimiterReader.cpp
+++ b/src/fx/LimiterReader.cpp
@@ -21,7 +21,7 @@
 
 AUD_NAMESPACE_BEGIN
 
-LimiterReader::LimiterReader(std::shared_ptr<IReader> reader, float start, float end) :
+LimiterReader::LimiterReader(std::shared_ptr<IReader> reader, double start, double end) :
 		EffectReader(reader),
 		m_start(start),
 		m_end(end)
-- 
2.29.2

