# Maintainer: LH_Mouse <lh_mouse@126.com>

_realname=mcfgthread
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}"
         "${MINGW_PACKAGE_PREFIX}-${_realname}"-libs)
pkgver=1.7.1
pkgrel=1
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clangarm64' 'clang32')
url="https://github.com/lhmouse/mcfgthread"
license=('spdx:LGPL-3.0-or-later' 'custom')
options=('staticlibs' 'strip' '!buildflags')
_commit='cf78d8a037a87373db9f2ca50c4f4fab7a60dae4'
makedepends=(
  "${MINGW_PACKAGE_PREFIX}-cc"
  "${MINGW_PACKAGE_PREFIX}-meson"
  "${MINGW_PACKAGE_PREFIX}-crt"
  "${MINGW_PACKAGE_PREFIX}-headers"
  "git"
)
source=("git+https://github.com/lhmouse/mcfgthread.git#commit=${_commit}")
sha256sums=('SKIP')

build() {
  [[ -d "${srcdir}/build-${MSYSTEM}" ]] && rm -rf "${srcdir}/build-${MSYSTEM}"
  mkdir -p "${srcdir}/build-${MSYSTEM}" && cd "${srcdir}/build-${MSYSTEM}"

  export CFLAGS+=' -Os -g'
  MSYS2_ARG_CONV_EXCL="--prefix=" meson setup -Dbuildtype=plain  \
    --prefix="${MINGW_PREFIX}" . ../${_realname}

  # Build the DLL first, as Meson creates the DLL in the working directory,
  # which might get picked up by cc1.exe when it is only half-baked.
  ninja libmcfgthread-1.dll
  meson compile

  rm -rf "${srcdir}${MINGW_PREFIX}"
  DESTDIR="${srcdir}" meson install
}

check() {
  cd "${srcdir}/build-${MSYSTEM}"
  meson test
}

package_mcfgthread() {
  pkgdesc="An efficient gthread implementation, providing C++11 threading support (devel)"
  depends=("${MINGW_PACKAGE_PREFIX}-${_realname}"-libs)

  mkdir -p "${pkgdir}${MINGW_PREFIX}"
  cd "${srcdir}${MINGW_PREFIX}"
  cp --parents -r include -t "${pkgdir}${MINGW_PREFIX}"
  cp --parents -r lib -t "${pkgdir}${MINGW_PREFIX}"
}

package_mcfgthread-libs() {
  pkgdesc="An efficient gthread implementation, providing C++11 threading support (libs)"

  mkdir -p "${pkgdir}${MINGW_PREFIX}"
  cd "${srcdir}${MINGW_PREFIX}"
  cp --parents -r bin/libmcfgthread-1.dll -t "${pkgdir}${MINGW_PREFIX}"
}

# template start; name=mingw-w64-splitpkg-wrappers; version=1.0;
# vim: set ft=bash :

# generate wrappers
for _name in "${pkgname[@]}"; do
  _short="package_${_name#${MINGW_PACKAGE_PREFIX}-}"
  _func="$(declare -f "${_short}")"
  eval "${_func/#${_short}/package_${_name}}"
done
# template end;
