Only in libgd-2.2.3-new: .vscode
diff -ur libgd-2.2.3/CMakeLists.txt libgd-2.2.3-new/CMakeLists.txt
--- libgd-2.2.3/CMakeLists.txt	2016-07-21 10:32:27.000000000 +0200
+++ libgd-2.2.3-new/CMakeLists.txt	2016-09-24 10:02:06.156526100 +0200
@@ -31,6 +31,10 @@
 IF(CMAKE_COMPILER_IS_GNUCC)
   SET(CMAKE_C_FLAGS_DEBUG "-g -Wall -Wextra -O0") # will be added to CMAKE_C_FLAGS when CMAKE_BUILD_TYPE is "Debug"
 ENDIF(CMAKE_COMPILER_IS_GNUCC)
+
+# Pre-defines standard install locations on *nix systems.
+include(GNUInstallDirs)
+
 SET (CMAKE_LIBRARY_OUTPUT_DIRECTORY 
   ${PROJECT_BINARY_DIR}/Bin 
   CACHE PATH 
@@ -74,7 +78,7 @@
 	SET(GD_VERSION_PATCH "3")
 	SET(GD_VERSION_EXTRA "")
 	SET(GD_VERSION "${GD_VERSION_MAJOR}.${GD_VERSION_MINOR}.${GD_VERSION_PATCH}${GD_VERSION_EXTRA}")
-	SET(GD_VERSION_STRING "${GD_VERSION}")
+	SET(GD_VERSION_STRING "${GD_VERSION_MAJOR}.${GD_VERSION_MINOR}")
 
 	SET(GD_VERSION_INT "2020333")
 
@@ -203,6 +207,7 @@
 			ADD_DEFINITIONS("/D_CRT_SECURE_NO_DEPRECATE")
 		endif(NOT MINGW AND MSVC_VERSION GREATER 1399)
 		if (MINGW OR MSYS)
+			SET(GD_LIB gd)
 			ADD_DEFINITIONS("-mms-bitfields") # -m32
 		endif (MINGW OR MSYS)
 	else (WIN32)
@@ -243,28 +248,27 @@
     ADD_DEPENDENCIES(${GD_LIB_STATIC} libimagequant)
 ENDIF(ENABLE_LIQ AND LIQ_BUILD)
 
-
-INSTALL(FILES docs/INSTALL DESTINATION share/docs)
-INSTALL(FILES docs/README.JPN DESTINATION share/docs)
-INSTALL(FILES docs/README.CMAKE DESTINATION share/docs)
-INSTALL(FILES docs/README.TESTING DESTINATION share/docs)
-INSTALL(FILES docs/README.TXT DESTINATION share/docs)
-
-
-INSTALL(FILES examples/arc.c DESTINATION share/docs)
-INSTALL(FILES examples/copyrotated.c DESTINATION share/docs)
-INSTALL(FILES examples/crop.c DESTINATION share/docs)
-INSTALL(FILES examples/flip.c DESTINATION share/docs)
-INSTALL(FILES examples/gif.c DESTINATION share/docs)
-INSTALL(FILES examples/nnquant.c DESTINATION share/docs)
-INSTALL(FILES examples/noIcon.pic DESTINATION share/docs)
-INSTALL(FILES examples/noIcon.sgi DESTINATION share/docs)
-INSTALL(FILES examples/noIcon.tga DESTINATION share/docs)
-INSTALL(FILES examples/noIconAlpha.tga DESTINATION share/docs)
-INSTALL(FILES examples/test_crop_threshold.png DESTINATION share/docs)
-INSTALL(FILES examples/tgaread.c DESTINATION share/docs)
-INSTALL(FILES examples/tiffread.c DESTINATION share/docs)
-INSTALL(FILES examples/windows.c DESTINATION share/docs)
+INSTALL(FILES docs/INSTALL DESTINATION share/doc/libgd-${GD_VERSION_STRING})
+INSTALL(FILES docs/README.JPN DESTINATION share/doc/libgd-${GD_VERSION_STRING})
+INSTALL(FILES docs/README.CMAKE DESTINATION share/doc/libgd-${GD_VERSION_STRING})
+INSTALL(FILES docs/README.TESTING DESTINATION share/doc/libgd-${GD_VERSION_STRING})
+INSTALL(FILES docs/README.TXT DESTINATION share/doc/libgd-${GD_VERSION_STRING})
+
+
+INSTALL(FILES examples/arc.c DESTINATION share/doc/libgd-${GD_VERSION_STRING})
+INSTALL(FILES examples/copyrotated.c DESTINATION share/doc/libgd-${GD_VERSION_STRING})
+INSTALL(FILES examples/crop.c DESTINATION share/doc/libgd-${GD_VERSION_STRING})
+INSTALL(FILES examples/flip.c DESTINATION share/doc/libgd-${GD_VERSION_STRING})
+INSTALL(FILES examples/gif.c DESTINATION share/doc/libgd-${GD_VERSION_STRING})
+INSTALL(FILES examples/nnquant.c DESTINATION share/doc/libgd-${GD_VERSION_STRING})
+INSTALL(FILES examples/noIcon.pic DESTINATION share/doc/libgd-${GD_VERSION_STRING})
+INSTALL(FILES examples/noIcon.sgi DESTINATION share/doc/libgd-${GD_VERSION_STRING})
+INSTALL(FILES examples/noIcon.tga DESTINATION share/doc/libgd-${GD_VERSION_STRING})
+INSTALL(FILES examples/noIconAlpha.tga DESTINATION share/doc/libgd-${GD_VERSION_STRING})
+INSTALL(FILES examples/test_crop_threshold.png DESTINATION share/doc/libgd-${GD_VERSION_STRING})
+INSTALL(FILES examples/tgaread.c DESTINATION share/doc/libgd-${GD_VERSION_STRING})
+INSTALL(FILES examples/tiffread.c DESTINATION share/doc/libgd-${GD_VERSION_STRING})
+INSTALL(FILES examples/windows.c DESTINATION share/doc/libgd-${GD_VERSION_STRING})
 
 
 set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/COPYING")
@@ -278,6 +282,6 @@
 "^${PROJECT_SOURCE_DIR}/old/"
 "^${PROJECT_SOURCE_DIR}/bld/"
 )
-install(FILES ${top_level_DOCFILES} DESTINATION ${DOC_DIR})
+# install(FILES ${top_level_DOCFILES} DESTINATION ${DOC_DIR})
 INCLUDE(CPack)
 
diff -ur libgd-2.2.3/config/gdlib.pc.in libgd-2.2.3-new/config/gdlib.pc.in
--- libgd-2.2.3/config/gdlib.pc.in	2016-06-03 10:34:39.000000000 +0200
+++ libgd-2.2.3-new/config/gdlib.pc.in	2016-09-25 11:09:38.702045800 +0200
@@ -1,11 +1,11 @@
-prefix=@prefix@
-exec_prefix=@exec_prefix@
-libdir=@libdir@
-includedir=@includedir@
+prefix=@CMAKE_INSTALL_PREFIX@
+exec_prefix=${prefix}
+libdir=${prefix}/lib/libgd-@GD_VERSION_STRING@
+includedir=${prefix}/include/libgd-@GD_VERSION_STRING@
 
 Name: gd
 Description: GD graphics library
-Version: @VERSION@
+Version: @GD_VERSION_STRING@     
 Cflags: -I${includedir}
-Libs.private: @LIBS@ @LIBICONV@
+Libs.private: z png iconv jpeg tiff freetype webp
 Libs: -L${libdir} -lgd
diff -ur libgd-2.2.3/src/CMakeLists.txt libgd-2.2.3-new/src/CMakeLists.txt
--- libgd-2.2.3/src/CMakeLists.txt	2016-06-03 10:34:39.000000000 +0200
+++ libgd-2.2.3-new/src/CMakeLists.txt	2016-09-21 20:57:51.018032200 +0200
@@ -135,10 +135,13 @@
   set(GD_INSTALL_TARGETS ${GD_LIB_STATIC} ${GD_PROGRAMS})
 endif()
 
+# Install library into its own directory under LIBDIR
+set(INSTALL_SUFFIX /libgd-${GD_VERSION_STRING})
+
 install(TARGETS ${GD_INSTALL_TARGETS}
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
-        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${INSTALL_SUFFIX}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}${INSTALL_SUFFIX})
 install(PROGRAMS bdftogd DESTINATION bin)
 install(FILES
 	entities.h
@@ -154,4 +157,7 @@
 	gdfontt.h
 	gdfx.h
 	gdpp.h
-	DESTINATION include)
+	DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}${INSTALL_SUFFIX})
+
+configure_file(../config/gdlib.pc.in ${PROJECT_BINARY_DIR}/gdlib.pc @ONLY)
+install(FILES ${PROJECT_BINARY_DIR}/gdlib.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
\ No newline at end of file
Only in libgd-2.2.3-new/src: config.h
diff -ur libgd-2.2.3/src/webpng.c libgd-2.2.3-new/src/webpng.c
--- libgd-2.2.3/src/webpng.c	2016-06-03 10:34:39.000000000 +0200
+++ libgd-2.2.3-new/src/webpng.c	2016-09-24 09:49:11.582098800 +0200
@@ -18,6 +18,25 @@
 #include <unistd.h>
 #endif
 
+#if defined (_WIN32)
+int     opterr = 1,             /* if error message should be printed */
+  optind = 1,             /* index into parent argv vector */
+  optopt,                 /* character checked for validity */
+  optreset;               /* reset getopt */
+char    *optarg;                /* argument associated with option */
+
+#define BADCH   (int)'?'
+#define BADARG  (int)':'
+#define EMSG    ""
+
+/*
+* getopt --
+*      Parse argc/argv argument vector.
+*/
+int getopt(int nargc, char * const nargv[], const char *ostr);
+
+#endif // defined (_WIN32)
+
 #ifdef __clang__
 /* Workaround broken clang behavior: https://llvm.org/bugs/show_bug.cgi?id=20144 */
 #undef strcmp
@@ -295,3 +314,65 @@
 	/* All's well that ends well. */
 	return 0;
 }
+
+#if defined (_WIN32)
+/*
+* getopt --
+*      Parse argc/argv argument vector.
+*/
+int
+  getopt(int nargc, char * const nargv[], const char *ostr)
+{
+  static char *place = EMSG;              /* option letter processing */
+  const char *oli;                        /* option letter list index */
+
+  if (optreset || !*place) {              /* update scanning pointer */
+    optreset = 0;
+    if (optind >= nargc || *(place = nargv[optind]) != '-') {
+      place = EMSG;
+      return (-1);
+    }
+    if (place[1] && *++place == '-') {      /* found "--" */
+      ++optind;
+      place = EMSG;
+      return (-1);
+    }
+  }                                       /* option letter okay? */
+  if ((optopt = (int)*place++) == (int)':' ||
+    !(oli = strchr(ostr, optopt))) {
+      /*
+      * if the user didn't specify '-' as an option,
+      * assume it means -1.
+      */
+      if (optopt == (int)'-')
+        return (-1);
+      if (!*place)
+        ++optind;
+      if (opterr && *ostr != ':')
+        (void)printf("illegal option -- %c\n", optopt);
+      return (BADCH);
+  }
+  if (*++oli != ':') {                    /* don't need argument */
+    optarg = NULL;
+    if (!*place)
+      ++optind;
+  }
+  else {                                  /* need an argument */
+    if (*place)                     /* no white space */
+      optarg = place;
+    else if (nargc <= ++optind) {   /* no arg */
+      place = EMSG;
+      if (*ostr == ':')
+        return (BADARG);
+      if (opterr)
+        (void)printf("option requires an argument -- %c\n", optopt);
+      return (BADCH);
+    }
+    else                            /* white space */
+      optarg = nargv[optind];
+    place = EMSG;
+    ++optind;
+  }
+  return (optopt);                        /* dump back option letter */
+}
+#endif //defined (_WIN32)
\ No newline at end of file
