diff -urN vigra-1.11.1-orig/include/vigra/fftw3.hxx vigra-1.11.1/include/vigra/fftw3.hxx
--- vigra-1.11.1-orig/include/vigra/fftw3.hxx	2017-05-19 23:01:08.000000000 +0800
+++ vigra-1.11.1/include/vigra/fftw3.hxx	2022-01-23 01:18:14.167867100 +0800
@@ -1489,7 +1489,7 @@
 
     // do not forget to normalize the result according to the image size
     transformImage(srcImageRange(spatial), destImage(spatial),
-                   std::bind1st(std::multiplies<FFTWComplex>(), 1.0 / width / height));
+                   std::bind(std::multiplies<FFTWComplex>(), 1.0 / width / height, std::placeholders::_1));
     \endcode
 
     Note that in the creation of a plan, the height must be given
@@ -2785,7 +2785,7 @@
 
     if(norm != 1.0)
         transformImage(srcImageRange(res), destIter(dul, dest),
-                       std::bind1st(std::multiplies<fftw_real>(), 1.0 / norm));
+                       std::bind(std::multiplies<fftw_real>(), 1.0 / norm, std::placeholders::_1));
     else
         copyImage(srcImageRange(res), destIter(dul, dest));
 }
diff -urN vigra-1.11.1-orig/include/vigra/functorexpression.hxx vigra-1.11.1/include/vigra/functorexpression.hxx
--- vigra-1.11.1-orig/include/vigra/functorexpression.hxx	2017-05-19 23:01:08.000000000 +0800
+++ vigra-1.11.1/include/vigra/functorexpression.hxx	2022-01-23 01:18:14.194868700 +0800
@@ -119,7 +119,7 @@
     
     vigra::transformImage(srcImageRange(src), destImage(dest), 
                    std::compose1(std::ptr_fun(exp),
-                                 std::bind1st(std::multiplies<float>(), -beta)));
+                                 std::bind(std::multiplies<float>(), -beta, std::placeholdes::_1)));
     \endcode
  
     I won't go into details on how this works. Suffice it to say that
diff -urN vigra-1.11.1-orig/include/vigra/functortraits.hxx vigra-1.11.1/include/vigra/functortraits.hxx
--- vigra-1.11.1-orig/include/vigra/functortraits.hxx	2017-05-19 23:01:08.000000000 +0800
+++ vigra-1.11.1/include/vigra/functortraits.hxx	2022-01-23 01:18:14.449883200 +0800
@@ -195,8 +195,6 @@
 VIGRA_DEFINE_STL_FUNCTOR(std::negate, VigraTrueType, VigraFalseType)
 VIGRA_DEFINE_STL_FUNCTOR(std::logical_not, VigraTrueType, VigraFalseType)
 VIGRA_DEFINE_STL_FUNCTOR(std::unary_negate, VigraTrueType, VigraFalseType)
-VIGRA_DEFINE_STL_FUNCTOR(std::binder1st, VigraTrueType, VigraFalseType)
-VIGRA_DEFINE_STL_FUNCTOR(std::binder2nd, VigraTrueType, VigraFalseType)
 #undef VIGRA_DEFINE_STL_FUNCTOR
 
 template <class R>
diff -urN vigra-1.11.1-orig/include/vigra/numpy_array_traits.hxx vigra-1.11.1/include/vigra/numpy_array_traits.hxx
--- vigra-1.11.1-orig/include/vigra/numpy_array_traits.hxx	2017-05-19 23:01:08.000000000 +0800
+++ vigra-1.11.1/include/vigra/numpy_array_traits.hxx	2022-01-23 01:18:14.242871400 +0800
@@ -762,7 +762,7 @@
         TinyVector<npy_intp, N+1> npyStride;
         std::transform(
             stride.begin(), stride.end(), npyStride.begin(),
-            std::bind2nd(std::multiplies<npy_intp>(), sizeof(value_type)));
+            std::bind(std::multiplies<npy_intp>(), sizeof(value_type), std::placeholders::_2));
         npyStride[N] = sizeof(T);
 
         return constructNumpyArrayFromData(npyShape, npyStride.begin(),
diff -urN vigra-1.11.1-orig/test/classifier/test.cxx vigra-1.11.1/test/classifier/test.cxx
--- vigra-1.11.1-orig/test/classifier/test.cxx	2017-05-19 23:01:08.000000000 +0800
+++ vigra-1.11.1/test/classifier/test.cxx	2022-01-23 01:18:14.267872800 +0800
@@ -533,7 +533,7 @@
             totalWeight = std::accumulate(a, a + data.ClassIter(ii).size(),
                                           totalWeight);
             std::transform(tmp.begin(), tmp.end(),tmp.begin(), 
-                           std::bind2nd(std::divides<double>(), totalWeight));
+                           std::bind(std::divides<double>(), totalWeight, std::placeholders::_2));
             MultiArrayView<2, double> 
                 should_resp(Shp(1, data.ClassIter(ii).size()), tmp.data());
 
diff -urN vigra-1.11.1-orig/test/imagehierarchy/basic_image_test.hxx vigra-1.11.1/test/imagehierarchy/basic_image_test.hxx
--- vigra-1.11.1-orig/test/imagehierarchy/basic_image_test.hxx	2017-05-19 23:01:08.000000000 +0800
+++ vigra-1.11.1/test/imagehierarchy/basic_image_test.hxx	2022-01-23 01:18:14.294874400 +0800
@@ -19,10 +19,10 @@
     void testOperatorAssignmentPixel()
     {
         (*image1_) = data[4];
-        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[4])));
+        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind(Pixels_not_equal_to<value_type>(), data[4], std::placeholders::_2)));
         
         (*image0_) = data[5];
-        should(image0_->end() == std::find_if(image0_->begin(), image0_->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[5])));
+        should(image0_->end() == std::find_if(image0_->begin(), image0_->end(), std::bind(Pixels_not_equal_to<value_type>(), data[5], std::placeholders::_2)));
     }
     
     void testResizeInt()
@@ -57,13 +57,13 @@
         should(image1_->height() == 6);
         should(image1_->width() == 4);
         should(image1_->size() == vigra::Diff2D(4,6));
-        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[9])));
+        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind(Pixels_not_equal_to<value_type>(), data[9], std::placeholders::_2)));
         
         image0_->resize(1, 4, data[10]);
         should(image0_->height() == 4);
         should(image0_->width() == 1);
         should(image0_->size() == vigra::Diff2D(1,4));
-        should(image0_->end() == std::find_if(image0_->begin(), image0_->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[10])));      
+        should(image0_->end() == std::find_if(image0_->begin(), image0_->end(), std::bind(Pixels_not_equal_to<value_type>(), data[10], std::placeholders::_2)));      
     }
     
     /** testet die Methode resizeCopy(BasicImage img) an Instanzen der Klasse BasicImage.
diff -urN vigra-1.11.1-orig/test/imagehierarchy/imagehierarchy_test.hxx vigra-1.11.1/test/imagehierarchy/imagehierarchy_test.hxx
--- vigra-1.11.1-orig/test/imagehierarchy/imagehierarchy_test.hxx	2017-05-19 23:01:08.000000000 +0800
+++ vigra-1.11.1/test/imagehierarchy/imagehierarchy_test.hxx	2022-01-23 01:18:14.329876400 +0800
@@ -22,13 +22,13 @@
         should(image1->height() == 4);
         should(image1->width() == 3);
         should(image1->size() == vigra::Diff2D(3,4));
-        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), child_data[0])));    
+        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind(Pixels_not_equal_to<value_type>(), child_data[0], std::placeholders::_2)));    
         
         std::auto_ptr<Image> image2(Policy::factory(new typename ChildImage::InnerImage(0, 0, child_data[1])));
         should(image2->height() == 0);
         should(image2->width() == 0);
         should(image2->size() == vigra::Diff2D(0,0));
-        should(image2->end() == std::find_if(image2->begin(), image2->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), child_data[1])));    
+        should(image2->end() == std::find_if(image2->begin(), image2->end(), std::bind(Pixels_not_equal_to<value_type>(), child_data[1], std::placeholders::_2)));    
     }
     
     /** testet die clone() Methode der Klasse aus imagehierarchy
@@ -47,11 +47,11 @@
         */
         image1->init(data[5]); 
         should((*image1_->begin()) != static_cast<typename Image::PixelType> (data[5]));
-        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[5])));
+        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind(Pixels_not_equal_to<value_type>(), data[5], std::placeholders::_2)));
         
         image1_->init(data[6]);
-        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[5])));
-        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[6])));
+        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind(Pixels_not_equal_to<value_type>(), data[5], std::placeholders::_2)));
+        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind(Pixels_not_equal_to<value_type>(), data[6], std::placeholders::_2)));
         
         std::auto_ptr<typename Image::CloneType> image0(image0_->clone());
         should(equal(*image0, *image0_));
@@ -84,12 +84,12 @@
         /* Aenderung mit der init-Funktion
         */
         image1->init(data[7]);
-        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[7])));
-        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[7])));
+        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind(Pixels_not_equal_to<value_type>(), data[7], std::placeholders::_2)));
+        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind(Pixels_not_equal_to<value_type>(), data[7], std::placeholders::_2)));
         
         image1->init(data[8]);
-        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[8])));
-        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[8])));
+        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind(Pixels_not_equal_to<value_type>(), data[8], std::placeholders::_2)));
+        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind(Pixels_not_equal_to<value_type>(), data[8], std::placeholders::_2)));
         
         /* Eine shallowCopy zeigt auf die selben Daten des kopierten Objektes
         */
@@ -98,9 +98,9 @@
         should(&(*image1Copy) != &(*image1_));
         
         image1Copy->init(data[9]);
-        should(image1Copy->end() == std::find_if(image1Copy->begin(), image1Copy->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[9])));
-        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[9])));
-        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[9])));
+        should(image1Copy->end() == std::find_if(image1Copy->begin(), image1Copy->end(), std::bind(Pixels_not_equal_to<value_type>(), data[9], std::placeholders::_2)));
+        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind(Pixels_not_equal_to<value_type>(), data[9], std::placeholders::_2)));
+        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind(Pixels_not_equal_to<value_type>(), data[9], std::placeholders::_2)));
         
         std::auto_ptr<Image> image0(image0_->shallowCopy());
         should(equal(*image0, *image0_));
@@ -213,7 +213,7 @@
         */
         image1_->init(data[7]);
         
-        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[7])));
+        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind(Pixels_not_equal_to<value_type>(), data[7], std::placeholders::_2)));
                     
         for(int x = 0; x < image1_->width(); x++)
             for(int y = 0; y < image1_->height(); y++)
diff -urN vigra-1.11.1-orig/test/imagehierarchy/parent_test_class.hxx vigra-1.11.1/test/imagehierarchy/parent_test_class.hxx
--- vigra-1.11.1-orig/test/imagehierarchy/parent_test_class.hxx	2017-05-19 23:01:08.000000000 +0800
+++ vigra-1.11.1/test/imagehierarchy/parent_test_class.hxx	2022-01-23 01:18:14.350877600 +0800
@@ -217,13 +217,13 @@
         should(image1->height() == 3);
         should(image1->width() == 2);
         should(image1->size() == vigra::Diff2D(2,3));
-        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), child_data[0])));    
+        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind(Pixels_not_equal_to<value_type>(), child_data[0], std::placeholders::_2)));    
         
         std::auto_ptr<Image> image2(Policy::factory(0, 0, child_data[1]));
         should(image2->height() == 0);
         should(image2->width() == 0);
         should(image2->size() == vigra::Diff2D(0,0));
-        should(image2->end() == std::find_if(image2->begin(), image2->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), child_data[1])));    
+        should(image2->end() == std::find_if(image2->begin(), image2->end(), std::bind(Pixels_not_equal_to<value_type>(), child_data[1], std::placeholders::_2)));    
     }
     
     /** Testet den Copy Konstruktor ( Image(Image img) ).
@@ -266,13 +266,13 @@
     void testInit()
     {
         image1_->init(data[6]);
-        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[6])));
+        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind(Pixels_not_equal_to<value_type>(), data[6], std::placeholders::_2)));
         image1_->init(data[7]);
-        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[7])));
-        should(image1_->end() != std::find_if(image1_->begin(), image1_->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[6])));
+        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind(Pixels_not_equal_to<value_type>(), data[7], std::placeholders::_2)));
+        should(image1_->end() != std::find_if(image1_->begin(), image1_->end(), std::bind(Pixels_not_equal_to<value_type>(), data[6], std::placeholders::_2)));
         
         image0_->init(data[8]);
-        should(image0_->end() == std::find_if(image0_->begin(), image0_->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[8])));
+        should(image0_->end() == std::find_if(image0_->begin(), image0_->end(), std::bind(Pixels_not_equal_to<value_type>(), data[8], std::placeholders::_2)));
     }
     
     void testWidth()
diff -urN vigra-1.11.1-orig/test/imagehierarchy/select_image_test.hxx vigra-1.11.1/test/imagehierarchy/select_image_test.hxx
--- vigra-1.11.1-orig/test/imagehierarchy/select_image_test.hxx	2017-05-19 23:01:08.000000000 +0800
+++ vigra-1.11.1/test/imagehierarchy/select_image_test.hxx	2022-01-23 01:18:14.377879100 +0800
@@ -23,7 +23,7 @@
         should(image1->size() == vigra::Diff2D(2,3));
     
         // Bei SelectBandImage wird nur der selektierte Band mit dem Pixel child_data[0] initialisiert   
-        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), child_data[0][Policy::n])));
+        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind(Pixels_not_equal_to<value_type>(), child_data[0][Policy::n], std::placeholders::_2)));
         
         std::auto_ptr<Image> image2(Policy::factory(0, 0, child_data[1]));
         should(image2->height() == 0);
@@ -31,7 +31,7 @@
         should(image2->size() == vigra::Diff2D(0,0));
     
         // Bei SelectBandImage wird nur der selektierte Band mit dem Pixel child_data[1] initialisiert   
-        should(image2->end() == std::find_if(image2->begin(), image2->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), child_data[1][Policy::n])));
+        should(image2->end() == std::find_if(image2->begin(), image2->end(), std::bind(Pixels_not_equal_to<value_type>(), child_data[1][Policy::n], std::placeholders::_2)));
     }
     
     /** Testet den Copy Konstruktor ( Image(Image img) ).
@@ -62,13 +62,13 @@
         should(image1->height() == 4);
         should(image1->width() == 3);
         should(image1->size() == vigra::Diff2D(3,4));
-        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), child_data[0][Policy::n])));
+        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind(Pixels_not_equal_to<value_type>(), child_data[0][Policy::n], std::placeholders::_2)));
 
         std::auto_ptr<Image> image2(Policy::factory(new typename ChildImage::InnerImage(0, 0, child_data[1])));
         should(image2->height() == 0);
         should(image2->width() == 0);
         should(image2->size() == vigra::Diff2D(0,0));
-        should(image2->end() == std::find_if(image2->begin(), image2->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), child_data[1][Policy::n])));
+        should(image2->end() == std::find_if(image2->begin(), image2->end(), std::bind(Pixels_not_equal_to<value_type>(), child_data[1][Policy::n], std::placeholders::_2)));
     }
     
     /** testet die clone() Methode der Klasse aus imagehierarchy
@@ -87,11 +87,11 @@
         */
         image1->init(data[5]); 
         should((*image1_->begin()) != static_cast<typename Image::PixelType> (data[5]));
-        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[5])));
+        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind(Pixels_not_equal_to<value_type>(), data[5], std::placeholders::_2)));
         
         image1_->init(data[6]);
-        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[5])));
-        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[6])));
+        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind(Pixels_not_equal_to<value_type>(), data[5], std::placeholders::_2)));
+        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind(Pixels_not_equal_to<value_type>(), data[6], std::placeholders::_2)));
         
         std::auto_ptr<typename Image::CloneType> image0(image0_->clone());
         should(equal(*image0, *image0_));
diff -urN vigra-1.11.1-orig/test/imagehierarchy/single_band_image_test.hxx vigra-1.11.1/test/imagehierarchy/single_band_image_test.hxx
--- vigra-1.11.1-orig/test/imagehierarchy/single_band_image_test.hxx	2017-05-19 23:01:08.000000000 +0800
+++ vigra-1.11.1/test/imagehierarchy/single_band_image_test.hxx	2022-01-23 01:18:14.393880000 +0800
@@ -29,11 +29,11 @@
         */
         image1->init(data[5]); 
         should((*image1_->begin()) != static_cast<typename Image::PixelType> (data[5]));
-        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[5])));
+        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind(Pixels_not_equal_to<value_type>(), data[5], std::placeholders::_2)));
         
         image1_->init(data[6]);
-        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[5])));
-        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[6])));
+        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind(Pixels_not_equal_to<value_type>(), data[5])));
+        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind(Pixels_not_equal_to<value_type>(), data[6], std::placeholders::_2)));
         
         std::auto_ptr<typename Image::CloneType> image0(image0_->clone());
         should(equal(*image0, *image0_));
@@ -58,12 +58,12 @@
         /* Aenderung mit der init-Funktion
         */
         image1->init(data[7]);
-        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[7])));
-        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[7])));
+        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind(Pixels_not_equal_to<value_type>(), data[7], std::placeholders::_2)));
+        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind(Pixels_not_equal_to<value_type>(), data[7], std::placeholders::_2)));
         
         image1->init(data[8]);
-        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[8])));
-        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[8])));
+        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind(Pixels_not_equal_to<value_type>(), data[8], std::placeholders::_2)));
+        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind(Pixels_not_equal_to<value_type>(), data[8], std::placeholders::_2)));
         
         /* Eine shallowCopy zeigt auf die selben Daten des kopierten Objektes
         */
@@ -72,9 +72,9 @@
         should(&(*image1Copy) != &(*image1_));
         
         image1Copy->init(data[9]);
-        should(image1Copy->end() == std::find_if(image1Copy->begin(), image1Copy->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[9])));
-        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[9])));
-        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[9])));
+        should(image1Copy->end() == std::find_if(image1Copy->begin(), image1Copy->end(), std::bind(Pixels_not_equal_to<value_type>(), data[9], std::placeholders::_2)));
+        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind(Pixels_not_equal_to<value_type>(), data[9], std::placeholders::_2)));
+        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind(Pixels_not_equal_to<value_type>(), data[9], std::placeholders::_2)));
         
         std::auto_ptr<Image> image0(image0_->shallowCopy());
         should(equal(*image0, *image0_));
diff -urN vigra-1.11.1-orig/test/imagehierarchy/variable_bands_image_test.hxx vigra-1.11.1/test/imagehierarchy/variable_bands_image_test.hxx
--- vigra-1.11.1-orig/test/imagehierarchy/variable_bands_image_test.hxx	2017-05-19 23:01:08.000000000 +0800
+++ vigra-1.11.1/test/imagehierarchy/variable_bands_image_test.hxx	2022-01-23 01:18:14.415881300 +0800
@@ -29,11 +29,11 @@
         */
         image1->init(data[5]); 
         should((*image1_->begin()) != static_cast<typename Image::PixelType> (data[5]));
-        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[5])));
+        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind(Pixels_not_equal_to<value_type>(), data[5], std::placeholders::_2)));
         
         image1_->init(data[6]);
-        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[5])));
-        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[6])));
+        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind(Pixels_not_equal_to<value_type>(), data[5], std::placeholders::_2)));
+        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind(Pixels_not_equal_to<value_type>(), data[6], std::placeholders::_2)));
         
         std::auto_ptr<typename Image::CloneType> image0(image0_->clone());
         should(equal(*image0, *image0_));
@@ -58,12 +58,12 @@
         /* Aenderung mit der init-Funktion
         */
         image1->init(data[7]);
-        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[7])));
-        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[7])));
+        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind(Pixels_not_equal_to<value_type>(), data[7], std::placeholders::_2)));
+        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind(Pixels_not_equal_to<value_type>(), data[7], std::placeholders::_2)));
         
         image1->init(data[8]);
-        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[8])));
-        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[8])));
+        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind(Pixels_not_equal_to<value_type>(), data[8], std::placeholders::_2)));
+        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind(Pixels_not_equal_to<value_type>(), data[8], std::placeholders::_2)));
         
         /* Eine shallowCopy zeigt auf die selben Daten des kopierten Objektes
         */
@@ -72,9 +72,9 @@
         should(&(*image1Copy) != &(*image1_));
         
         image1Copy->init(data[9]);
-        should(image1Copy->end() == std::find_if(image1Copy->begin(), image1Copy->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[9])));
-        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[9])));
-        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind2nd(Pixels_not_equal_to<value_type>(), data[9])));
+        should(image1Copy->end() == std::find_if(image1Copy->begin(), image1Copy->end(), std::bind(Pixels_not_equal_to<value_type>(), data[9], std::placeholders::_2)));
+        should(image1_->end() == std::find_if(image1_->begin(), image1_->end(), std::bind(Pixels_not_equal_to<value_type>(), data[9], std::placeholders::_2)));
+        should(image1->end() == std::find_if(image1->begin(), image1->end(), std::bind(Pixels_not_equal_to<value_type>(), data[9], std::placeholders::_2)));
         
         std::auto_ptr<Image> image0(image0_->shallowCopy());
         should(equal(*image0, *image0_));
