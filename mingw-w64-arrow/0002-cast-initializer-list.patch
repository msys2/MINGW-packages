From f64fb07ddbe70969533cc947e2815d40454c5c2d Mon Sep 17 00:00:00 2001
From: jeremyd2019 <github@jdrake.com>
Date: Sun, 22 Aug 2021 19:57:03 -0700
Subject: [PATCH] Update numpy_convert.cc

add static_cast to initializer list to avoid C++11 narrowing error in Clang.

error: non-constant-expression cannot be narrowed from type 'int64_t' (aka 'long long') to 'int' in initializer list [-Wc++11-narrowing]
---
 cpp/src/arrow/python/numpy_convert.cc | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/cpp/src/arrow/python/numpy_convert.cc b/cpp/src/arrow/python/numpy_convert.cc
index bf4afb2a0a11..eedf257f9d9c 100644
--- a/cpp/src/arrow/python/numpy_convert.cc
+++ b/cpp/src/arrow/python/numpy_convert.cc
@@ -322,7 +322,7 @@ Status SparseCOOTensorToNdarray(const std::shared_ptr<SparseCOOTensor>& sparse_t
   // Wrap tensor data
   OwnedRef result_data;
   RETURN_NOT_OK(SparseTensorDataToNdarray(
-      *sparse_tensor, {sparse_tensor->non_zero_length(), 1}, base, result_data.ref()));
+      *sparse_tensor, {static_cast<npy_intp>(sparse_tensor->non_zero_length()), 1}, base, result_data.ref()));
 
   // Wrap indices
   PyObject* result_coords;
@@ -362,7 +362,7 @@ Status SparseCSXMatrixToNdarray(const std::shared_ptr<SparseTensor>& sparse_tens
   // Wrap tensor data
   OwnedRef result_data;
   RETURN_NOT_OK(SparseTensorDataToNdarray(
-      *sparse_tensor, {sparse_tensor->non_zero_length(), 1}, base, result_data.ref()));
+      *sparse_tensor, {static_cast<npy_intp>(sparse_tensor->non_zero_length()), 1}, base, result_data.ref()));
 
   *out_data = result_data.detach();
   *out_indptr = result_indptr.detach();
@@ -391,7 +391,7 @@ Status SparseCSFTensorToNdarray(const std::shared_ptr<SparseCSFTensor>& sparse_t
   // Wrap tensor data
   OwnedRef result_data;
   RETURN_NOT_OK(SparseTensorDataToNdarray(
-      *sparse_tensor, {sparse_tensor->non_zero_length(), 1}, base, result_data.ref()));
+      *sparse_tensor, {static_cast<npy_intp>(sparse_tensor->non_zero_length()), 1}, base, result_data.ref()));
 
   // Wrap indices
   int ndim = static_cast<int>(sparse_index.indices().size());
