--- matplotlib-2.1.2/setupext.py.orig	2018-01-18 07:21:34.000000000 +0300
+++ matplotlib-2.1.2/setupext.py	2018-01-25 08:37:44.104394400 +0300
@@ -22,6 +22,8 @@
 
 PY3min = (sys.version_info[0] >= 3)
 
+MSYS = "MSYSTEM" in os.environ
+
 
 def _get_home():
     """Find user's home directory if possible.
@@ -70,9 +72,17 @@
 # md5 hash of the freetype tarball
 LOCAL_FREETYPE_HASH = '348e667d728c597360e4a87c16556597'
 
-if sys.platform != 'win32':
+if sys.platform != 'win32' or MSYS:
     if not PY3min:
         from commands import getstatusoutput
+        def getstatusoutput(cmd):
+            """Return (status, output) of executing cmd in a shell."""
+            pipe = os.popen(cmd, 'r')
+            text = pipe.read()
+            sts = pipe.close()
+            if sts is None: sts = 0
+            if text[-1:] == '\n': text = text[:-1]
+            return sts, text
     else:
         from subprocess import getstatusoutput
 
@@ -150,9 +160,10 @@
     Returns `True` if `filename` can be found in one of the
     directories in `include_dirs`.
     """
-    if sys.platform == 'win32':
+    if sys.platform == 'win32' and not MSYS:
         include_dirs += os.environ.get('INCLUDE', '.').split(';')
     for dir in include_dirs:
+        dir = os.popen(' '.join(['cygpath', '-w', dir])).readline().strip()
         if os.path.exists(os.path.join(dir, filename)):
             return True
     return False
@@ -275,6 +286,7 @@
     """
     ext = DelayedExtension(name, files, *args, **kwargs)
     for dir in get_base_dirs():
+        dir = os.popen(' '.join(['cygpath', '-w', dir])).readline().strip()
         include_dir = os.path.join(dir, 'include')
         if os.path.exists(include_dir):
             ext.include_dirs.append(include_dir)
@@ -310,7 +322,7 @@
         """
         Determines whether pkg-config exists on this machine.
         """
-        if sys.platform == 'win32':
+        if sys.platform == 'win32' and not MSYS:
             self.has_pkgconfig = False
         else:
             try:
@@ -319,7 +331,7 @@
                 self.pkg_config = 'pkg-config'
 
             self.set_pkgconfig_path()
-            status, output = getstatusoutput(self.pkg_config + " --help")
+            status, output = getstatusoutput('sh -c "' + self.pkg_config + ' --help"')
             self.has_pkgconfig = (status == 0)
             if not self.has_pkgconfig:
                 print("IMPORTANT WARNING:")
@@ -360,7 +372,7 @@
             command = "{0} --libs --cflags ".format(executable)
 
             try:
-                output = check_output(command, shell=True,
+                output = check_output('sh -c "%s"' % command, shell=True,
                                       stderr=subprocess.STDOUT)
             except subprocess.CalledProcessError:
                 pass
@@ -370,11 +382,16 @@
                 for token in output.split():
                     attr = flag_map.get(token[:2])
                     if attr is not None:
-                        getattr(ext, attr).insert(0, token[2:])
+                        if attr.endswith('dirs'):
+                            dir = os.popen(' '.join(['cygpath', '-w', token[2:]])).readline().strip()
+                            getattr(ext, attr).insert(0, dir)
+                        else:
+                            getattr(ext, attr).insert(0, token[2:])
 
         if use_defaults:
             basedirs = get_base_dirs()
             for base in basedirs:
+                base = os.popen(' '.join(['cygpath', '-w', base])).readline().strip()
                 for include in default_include_dirs:
                     dir = os.path.join(base, include)
                     if os.path.exists(dir):
@@ -396,7 +413,7 @@
             return None
 
         status, output = getstatusoutput(
-            self.pkg_config + " %s --modversion" % (package))
+            'sh -c "' + self.pkg_config + ' %s --modversion"' % (package))
         if status == 0:
             return output
         return None
@@ -1042,14 +1059,14 @@
         if options.get('local_freetype'):
             return "Using local version for testing"
 
-        if sys.platform == 'win32':
+        if sys.platform == 'win32' and not MSYS:
             try:
                 check_include_file(get_include_dirs(), 'ft2build.h', 'freetype')
             except CheckFailed:
                 check_include_file(get_include_dirs(), 'freetype2\\ft2build.h', 'freetype')
             return 'Using unknown version found on system.'
 
-        status, output = getstatusoutput("freetype-config --ftversion")
+        status, output = getstatusoutput('sh -c "freetype-config --ftversion"')
         if status == 0:
             version = output
         else:
@@ -1074,6 +1091,8 @@
             return version
         # Return the first version found in the include dirs.
         for include_dir in ext.include_dirs:
+            include_dir = os.popen(' '.join(['cygpath', '-w', include_dir])).readline().st
+            rip()
             header_fname = os.path.join(include_dir, 'freetype.h')
             if os.path.exists(header_fname):
                 major, minor, patch = 0, 0, 0
@@ -1284,11 +1303,11 @@
         }
 
     def check(self):
-        if sys.platform == 'win32':
+        if sys.platform == 'win32' and not MSYS:
             check_include_file(get_include_dirs(), 'png.h', 'png')
             return 'Using unknown version found on system.'
 
-        status, output = getstatusoutput("libpng-config --version")
+        status, output = getstatusoutput('sh -c "libpng-config --version"')
         if status == 0:
             version = output
         else:
@@ -1708,7 +1727,7 @@
         return ext
 
     def add_flags(self, ext):
-        if sys.platform == 'win32':
+        if sys.platform == 'win32' and not MSYS:
             def getoutput(s):
                 ret = os.popen(s).read().strip()
                 return ret
@@ -1763,7 +1782,7 @@
                 'm' in ext.libraries):
                 ext.libraries.remove('m')
 
-        elif sys.platform != 'win32':
+        elif sys.platform != 'win32' or MSYS:
             pkg_config.setup_extension(ext, 'pygtk-2.0')
             pkg_config.setup_extension(ext, 'gtk+-2.0')
 
@@ -2182,7 +2201,7 @@
 
     def check(self):
         try:
-            output = check_output('dvipng -version', shell=True,
+            output = check_output('sh -c "dvipng -version"', shell=True,
                                   stderr=subprocess.STDOUT)
             return "version %s" % output.splitlines()[1].decode().split()[-1]
         except (IndexError, ValueError, subprocess.CalledProcessError):
@@ -2194,14 +2213,14 @@
     optional = True
 
     def check(self):
-        if sys.platform == 'win32':
+        if sys.platform == 'win32' and not MSYS:
             # mgs is the name in miktex
             gs_execs = ['gswin32c', 'gswin64c', 'mgs', 'gs']
         else:
             gs_execs = ['gs']
         for gs_exec in gs_execs:
             try:
-                command = gs_exec + ' --version'
+                command = 'sh -c "%s --version"' % gs_exec
                 output = check_output(command, shell=True,
                                       stderr=subprocess.STDOUT)
                 return "version %s" % output.decode()[:-1]
@@ -2217,7 +2236,7 @@
 
     def check(self):
         try:
-            output = check_output('latex -version', shell=True,
+            output = check_output('sh -c "latex -version"', shell=True,
                                   stderr=subprocess.STDOUT)
             line = output.splitlines()[0].decode()
             pattern = '(3\.1\d+)|(MiKTeX \d+.\d+)'
@@ -2233,7 +2252,7 @@
 
     def check(self):
         try:
-            output = check_output('pdftops -v', shell=True,
+            output = check_output('sh -c "pdftops -v"', shell=True,
                                   stderr=subprocess.STDOUT)
             for line in output.splitlines():
                 line = line.decode()
