# Contributor: Frederic Wang <fred.wang@free.fr>

_realname=pytest
pkgbase=mingw-w64-python2-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-python2-${_realname}")
pkgver=4.6.4
pkgrel=2
pkgdesc='simple powerful testing with Python (mingw-w64)'
url='https://pytest.org/'
license=('MIT')
arch=('any')
install=${_realname}2-${CARCH}.install
depends=("${MINGW_PACKAGE_PREFIX}-python2"
         "${MINGW_PACKAGE_PREFIX}-python2-atomicwrites>=1.0"
         "${MINGW_PACKAGE_PREFIX}-python2-attrs>=17.4.0"
         "${MINGW_PACKAGE_PREFIX}-python2-more-itertools>=4.0.0"
         "${MINGW_PACKAGE_PREFIX}-python2-pluggy>=0.7"
         "${MINGW_PACKAGE_PREFIX}-python2-py>=1.5.0"
         "${MINGW_PACKAGE_PREFIX}-python2-setuptools"
         "${MINGW_PACKAGE_PREFIX}-python2-six"
         "${MINGW_PACKAGE_PREFIX}-python2-colorama"
         "${MINGW_PACKAGE_PREFIX}-python2-wcwidth"
         "${MINGW_PACKAGE_PREFIX}-python2-funcsigs"
         "${MINGW_PACKAGE_PREFIX}-python2-pathlib2>=2.2.0")
makedepends=("${MINGW_PACKAGE_PREFIX}-python2-setuptools-scm")
checkdepends=("${MINGW_PACKAGE_PREFIX}-python2-hypothesis"
              "${MINGW_PACKAGE_PREFIX}-python2-mock"
              "${MINGW_PACKAGE_PREFIX}-python2-nose"
              "${MINGW_PACKAGE_PREFIX}-python2-pytest-xdist"
              "${MINGW_PACKAGE_PREFIX}-python2-requests"
              "${MINGW_PACKAGE_PREFIX}-python2-tox"
              "${MINGW_PACKAGE_PREFIX}-python2-yaml")
source=("${_realname}-${pkgver}.tar.gz::https://github.com/pytest-dev/pytest/archive/${pkgver}.tar.gz")
sha256sums=('1e5a31e00c9656c1abc03bec63f41aee0d3ecb2eb4fc8cab6e459c3f2fc23276')

prepare() {
  sed -i "s/'_pytest.vendored_packages'//" ${_realname}-${pkgver}/setup.py
  sed -i 's/assert numentries == 0/assert numentries == 26/' ${_realname}-${pkgver}/testing/python/collect.py
  export SETUPTOOLS_SCM_PRETEND_VERSION=${pkgver}

  rm -rf python2-build-${CARCH}
  cp -r "${_realname}-${pkgver}" "python2-build-${CARCH}"
}

# Note that build() is sometimes skipped because it's done in 
# the packages setup.py install for simplicity if you can do so.
# but sometimes, you want to do a check before install which would
# also trigger the build.  
build() {
  cd "${srcdir}/python2-build-${CARCH}"
  MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
    ${MINGW_PREFIX}/bin/python2 setup.py build
}

check() {
  cd "${srcdir}/python2-build-${CARCH}"
  # Python2: 13 failed, 2239 passed, 118 skipped, 12 xfailed, 1 warnings
  PYTHONPATH="$(pwd)/build/lib" \
    ${MINGW_PREFIX}/bin/python2 src/pytest.py || warning "Test failed"
}

package() {
  cd "${srcdir}/python2-build-${CARCH}"
  MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
  ${MINGW_PREFIX}/bin/python2 setup.py install --prefix=${MINGW_PREFIX} \
    --root="${pkgdir}" --optimize=1 --skip-build

  install -Dm644 LICENSE "${pkgdir}${MINGW_PREFIX}/share/licenses/python2-${_realname}/COPYING"

  # You should OMIT this section if your package is not installing anything in the bin dir.
  local PREFIX_WIN=$(cygpath -wm ${MINGW_PREFIX})
  # fix python command in files
  for _ff in ${pkgdir}${MINGW_PREFIX}/bin/*.py; do
    sed -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" -i ${_ff}
  done
  # This is for packages that install scripts and .exe into the /mingw*/bin
  for f in py.test pytest; do
    mv "${pkgdir}${MINGW_PREFIX}"/bin/${f}{,2}.exe
    if [ -f "${pkgdir}${MINGW_PREFIX}"/bin/${f}.exe.manifest ]; then
      mv "${pkgdir}${MINGW_PREFIX}"/bin/${f}{,2}.exe.manifest
      sed -e "s|${f}|${f}2|g" -i "${pkgdir}${MINGW_PREFIX}"/bin/${f}2.exe.manifest
    fi
    mv "${pkgdir}${MINGW_PREFIX}"/bin/${f}{,2}-script.py
  done
}
