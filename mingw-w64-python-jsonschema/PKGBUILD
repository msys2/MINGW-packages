# Maintainer: Patrick Stewart <patstew@gmail.com>

_realname=jsonschema
pkgbase=mingw-w64-python-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-python2-${_realname}" "${MINGW_PACKAGE_PREFIX}-python3-${_realname}")
pkgver=2.6.0
pkgrel=4
pkgdesc="An implementation of JSON Schema validation for Python (mingw-w64)"
arch=('any')
url="https://pypi.python.org/pypi/jsonschema"
license=('MIT')
makedepends=("${MINGW_PACKAGE_PREFIX}-python2-setuptools"
             "${MINGW_PACKAGE_PREFIX}-python3-setuptools"
             "${MINGW_PACKAGE_PREFIX}-python2-functools32"
             "${MINGW_PACKAGE_PREFIX}-python3-vcversioner"
             "${MINGW_PACKAGE_PREFIX}-python2-vcversioner")
#checkdepends=("${MINGW_PACKAGE_PREFIX}-python3-twisted"
#              "${MINGW_PACKAGE_PREFIX}-python2-twisted" 
#              "${MINGW_PACKAGE_PREFIX}-python3-mock"
#              "${MINGW_PACKAGE_PREFIX}-python2-mock"
#              "${MINGW_PACKAGE_PREFIX}-python3-strict-rfc3339"
#              "${MINGW_PACKAGE_PREFIX}-python2-strict-rfc3339"
#              "${MINGW_PACKAGE_PREFIX}-python3-rfc3987"
#              "${MINGW_PACKAGE_PREFIX}-python2-rfc3987"
#              "${MINGW_PACKAGE_PREFIX}-python3-webcolors"
#              "${MINGW_PACKAGE_PREFIX}-python2-webcolors")
_dtoken="58/b9/171dbb07e18c6346090a37f03c7e74410a1a56123f847efed59af260a298"
source=("https://pypi.python.org/packages/${_dtoken}/${_realname}-${pkgver}.tar.gz")
sha256sums=('6ff5f3180870836cae40f06fa10419f557208175f13ad7bc26caa77beb1f6e02')

prepare() {
  cd "${srcdir}"
  echo -n "$pkgver-0-UNKNOWN" > jsonschema-$pkgver/version.txt
  for builddir in python{2,3}-build-${CARCH}; do
    rm -rf ${builddir} | true
    cp -r "${_realname}-${pkgver}" "${builddir}"
  done
  find python2-build-${CARCH} -name \*.py -exec sed -i '1s/python$/&2/' {} +
  find python2-build-${CARCH} -name \*.py -exec sed -i '1s/python$/&3/' {} +
  # Set version for setuptools_scm
  export SETUPTOOLS_SCM_PRETEND_VERSION=$pkgver
}

# Note that build() is sometimes skipped because it's done in 
# the packages setup.py install for simplicity if you can do so.
# but sometimes, you want to do a check before install which would
# also trigger the build.
build() {
  for pver in {2,3}; do  
    msg "Python ${pver} build for ${CARCH}"  
    cd "${srcdir}/python${pver}-build-${CARCH}"
    ${MINGW_PREFIX}/bin/python${pver} setup.py build
  done  
}

#check() {
#  for pver in {2,3}; do
#    msg "Python ${pver} test for ${CARCH}"
#    cd "${srcdir}/python${pver}-build-${CARCH}"
#    PYTHONPATH="$PWD/build/lib" JSON_SCHEMA_TEST_SUITE='json trial3 jsonschema' \
#      ${MINGW_PREFIX}/bin/python${pver} -m doctest README.rst
#  done
#}

package_python3-jsonschema() {
  depends=("${MINGW_PACKAGE_PREFIX}-python3")
  install=${_realname}3-${CARCH}.install

  cd "${srcdir}/python3-build-${CARCH}"
  MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
  ${MINGW_PREFIX}/bin/python3 setup.py install --prefix=${MINGW_PREFIX} \
    --root="${pkgdir}" --optimize=1 --skip-build
  install -D -m644 json/LICENSE ${pkgdir}${MINGW_PREFIX}/share/licenses/python3-${_realname}/LICENSE
  
  local _mingw_prefix=$(cygpath -am ${MINGW_PREFIX})
  for _ff in ${pkgdir}${MINGW_PREFIX}/bin/*.py; do
    sed -e "s|${_mingw_prefix}|${MINGW_PREFIX}|g" -i ${_ff}
  done
}

package_python2-jsonschema() {
  depends=("${MINGW_PACKAGE_PREFIX}-python2"
           "${MINGW_PACKAGE_PREFIX}-python2-functools32")
  install=${_realname}2-${CARCH}.install

  cd "${srcdir}/python2-build-${CARCH}"
  MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
  ${MINGW_PREFIX}/bin/python2 setup.py install --prefix=${MINGW_PREFIX} \
    --root="${pkgdir}" --optimize=1 --skip-build

  install -D -m644 json/LICENSE ${pkgdir}${MINGW_PREFIX}/share/licenses/python2-${_realname}/LICENSE

# This entire section should be removed if the package does NOT install
# anything in the /mingw*/bin directory. 
### begin section ###
  local PREFIX_WIN=$(cygpath -wm ${MINGW_PREFIX})
  # fix python command in files
  for _f in "${pkgdir}${MINGW_PREFIX}"/bin/*.py; do
    sed -e "s|/usr/bin/env |${MINGW_PREFIX}|g" \
        -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" -i ${_f}
  done

# for Python2 packages, you want to rename some stuff from the bin directory 
# with the 2 suffix like in the mingw-w64-python-pygments package to avoid
# conflicts when installing both the Python2 and Python3 packages
  for f in jsonschema; do
    mv "${pkgdir}${MINGW_PREFIX}"/bin/${f}{,2}.exe
    if [ -f "${pkgdir}${MINGW_PREFIX}"/bin/${f}.exe.manifest ]; then
      mv "${pkgdir}${MINGW_PREFIX}"/bin/${f}{,2}.exe.manifest
      sed -e "s|${f}|${f}2|g" -i "${pkgdir}${MINGW_PREFIX}"/bin/${f}2.exe.manifest
    fi
    mv "${pkgdir}${MINGW_PREFIX}"/bin/${f}{,2}-script.py
  done
#### end section ####

}

package_mingw-w64-i686-python2-jsonschema() {
  package_python2-jsonschema
}

package_mingw-w64-i686-python3-jsonschema() {
  package_python3-jsonschema
}

package_mingw-w64-x86_64-python2-jsonschema() {
  package_python2-jsonschema
}

package_mingw-w64-x86_64-python3-jsonschema() {
  package_python3-jsonschema
}
