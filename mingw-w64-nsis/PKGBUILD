# Maintainer: Renato Silva <br.renatosilva@gmail.com>

_realname=nsis
pkgbase="mingw-w64-${_realname}"
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
pkgver=3.08
pkgrel=1
url='https://nsis.sourceforge.io/'
pkgdesc='Nullsoft Scriptable Install System (mingw-w64)'
license=(spdx:Zlib)
arch=(any)
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clang32')
depends=("${MINGW_PACKAGE_PREFIX}-zlib")
makedepends=("${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-python"
             "${MINGW_PACKAGE_PREFIX}-scons")
source=("https://sourceforge.net/projects/nsis/files/NSIS%203/${pkgver}/${_realname}-${pkgver}-src.tar.bz2"
        001-fhs-directory-structure.patch
        002-compile-fixes.patch
        003-remove-redundant-architecture-suffix.patch
        004-crossmingw-tools-fix.patch
        005-fix-call-to-non-constexpr-function.patch
        006-fix-uninitialized-vars.patch
        007-fix-mingw-compile.patch
        008-fix-clang-asm.patch
        009-fix-clang-makensisw.patch)
sha256sums=('a85270ad5386182abecb2470e3d7e9bec9fe4efd95210b13551cb386830d1e87'
            '99ff1ffca78d588c4dd854c0e1335204d9b0ed668308231596637d960b9d46a9'
            '2a0656a4a6281785b801bf26487d82466ec83e75d869ced9df6f4e3a63bd59f4'
            '29fde872052adf05ee7e08d264ff3a6aa8661cf70559554beb0b450d2df31f43'
            '49e603370e7bb4690c07ceee202b857ae18ea4d198ed839d87b3a4716753388d'
            '6b2d63e5b2c43e5a314cf86608dee8d7424d4b68939994d128d43030a251161b'
            '761f012e5f24fe6a2121f340e5ac4310c8d678ff39f27c7da46499ae0c57d382'
            'de33d79269903348f3148db9f714e36e75b2d203cc7f06fdb0e472ee39f1b285'
            '154c0f0e8fde4c5c2f92815bc09be2765d688ea9b89c55d02fe6df4812f6db19'
            'ebe35b8ec80d95dcf0a7dab78cd0a47a286b07b71ffc2b300e24520d44d9d8be')

# Circumvent problem where makepkg will add the exe extension to some files
# when compressing the 64-bit package
options=('!strip')

prepare() {
  cd "${_realname}-${pkgver}-src"
  patch -p1 -i "${srcdir}"/001-fhs-directory-structure.patch
  patch -p1 -i "${srcdir}"/002-compile-fixes.patch
  patch -p1 -i "${srcdir}"/003-remove-redundant-architecture-suffix.patch
  patch -p1 -i "${srcdir}"/004-crossmingw-tools-fix.patch
  patch -p1 -i "${srcdir}"/005-fix-call-to-non-constexpr-function.patch
  patch -p1 -i "${srcdir}"/006-fix-uninitialized-vars.patch
  patch -p1 -i "${srcdir}"/007-fix-mingw-compile.patch

 if [[ ${MSYSTEM} == CLANG* ]]; then
    patch -p1 -i "${srcdir}"/008-fix-clang-asm.patch
    patch -p1 -i "${srcdir}"/009-fix-clang-makensisw.patch
 fi

  cp -p SCons/Config/{memcpy,memset}.c Contrib/AdvSplash
  cp -p SCons/Config/{memcpy,memset}.c Contrib/nsDialogs
  cp -p SCons/Config/{memcpy,memset}.c Source/exehead
}

_build() {
  local target_arch
  if [[ ${CARCH} == i686 ]]; then
    target_arch='x86'
  else
    target_arch='amd64'
  fi

  local arrVer=(${pkgver//./ })
  local arrLen=${#arrVer[@]}
  local major_version=${arrVer[0]}
  local minor_version=${arrVer[1]}
  local revision_version='0'
  local build_version='0'
  if ((arrLen > 2)); then
    revision_version=${arrVer[2]}
    if ((arrLen > 3)); then
      build_version=${arrVer[3]}
    fi
  fi

  minor_version="${minor_version%%[a-z]*}"
  msg2 "Version parts ${arrLen}"
  msg2 "Major version defined as ${major_version}"
  msg2 "Minor version defined as ${minor_version}"
  msg2 "Revision version defined as ${revision_version}"
  msg2 "Build version defined as ${build_version}"

  cd "${srcdir}/build-${MSYSTEM}"
  scons \
      TARGET_ARCH="${target_arch}" \
      VERSION="${pkgver}" \
      VER_MAJOR="${major_version}" \
      VER_MINOR="${minor_version}" \
      VER_REVISION="${revision_version}" \
      VER_BUILD="${build_version}" \
      TOOLSET=gcc,mingw \
      ZLIB_W32="${MINGW_PREFIX}" \
      UNICODE='yes' \
      NSIS_MAX_STRLEN='8192' \
      NSIS_CONFIG_CONST_DATA_PATH='no' \
      NSIS_CONFIG_LOG='yes' \
      SKIPUTILS='NSIS Menu,SubStart' \
      CC="${CC}" \
      CXX="${CXX}" \
      PREFIX_DEST="${PREFIX_DEST}" \
      ${target}
}

build() {
  rm -rf "${srcdir}/build-${MSYSTEM}"
  cp -r "${srcdir}/${_realname}-${pkgver}-src" "${srcdir}/build-${MSYSTEM}"

  _build
}

package() {
  PREFIX_DEST="${pkgdir}${MINGW_PREFIX}" target=install _build

  install -Dm644 "${srcdir}/build-${MSYSTEM}/COPYING" "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}/COPYING"
}
