--- a/configure.ac
+++ b/configure.ac
@@ -2,6 +2,7 @@
 # Process this file with autoconf to produce a configure script.
 AC_PREREQ(2.56)
 sinclude(acx_nlnetlabs.m4)
+sinclude(varexpand.m4)
 
 # must be numbers. ac_defun because of later processing.
 m4_define([VERSION_MAJOR],[1])
@@ -993,6 +993,9 @@
  AC_SUBST([LDNS_TRUST_ANCHOR_FILE], ["\$(sysconfdir)/unbound/root.key"])
 ])
 
+FULL_EXPAND_VARIABLE(ldns_bindir, "$bindir")
+AC_DEFINE_UNQUOTED(LDNS_BINDIR, "$ldns_bindir", [Runtime executables location])
+
 AC_ARG_WITH(ca-file, AC_HELP_STRING([--with-ca-file=CAFILE], [File containing CA certificates for ldns-dane]), [
  AC_DEFINE([HAVE_DANE_CA_FILE], [1], [Is a CAFILE given at configure time])
  AC_DEFINE_UNQUOTED([LDNS_DANE_CA_FILE], ["$withval"], [Is a CAFILE given at configure time])
--- a/drill/drill.c
+++ b/drill/drill.c
@@ -33,6 +33,7 @@
 static void
 usage(FILE *stream, const char *progname)
 {
+	const char * _trust_file = ldns_path_relocation(LDNS_BINDIR, LDNS_TRUST_ANCHOR_FILE);
 	fprintf(stream, "  Usage: %s name [@server] [type] [class]\n", progname);
 	fprintf(stream, "\t<name>  can be a domain name or an IP address (-x lookups)\n");
 	fprintf(stream, "\t<type>  defaults to A\n");
@@ -66,7 +67,7 @@
 	fprintf(stream, "\t\t\tWhen DNSSEC enabled tracing (-TD) or signature\n"
 			"\t\t\tchasing (-S) and no key files are given, keys are read\n"
 			"\t\t\tfrom: %s\n",
-			LDNS_TRUST_ANCHOR_FILE);
+			_trust_file);
 	fprintf(stream, "\t-o <mnemonic>\tset flags to:"
 			"\n\t\t\t[QR|qr][AA|aa][TC|tc][RD|rd][CD|cd][RA|ra][AD|ad]\n");
 	fprintf(stream, "\t\t\tlowercase: unset bit, uppercase: set bit\n");
@@ -426,7 +427,8 @@
 	if ((PURPOSE == DRILL_CHASE || (PURPOSE == DRILL_TRACE && qdnssec)) &&
 			ldns_rr_list_rr_count(key_list) == 0) {
 
-		(void) read_key_file(LDNS_TRUST_ANCHOR_FILE, key_list, true);
+		const char * _trust_file = ldns_path_relocation(LDNS_BINDIR, LDNS_TRUST_ANCHOR_FILE);
+		(void) read_key_file(_trust_file, key_list, true);
 	}
 	if (ldns_rr_list_rr_count(key_list) > 0) {
 		printf(";; Number of trusted keys: %d\n",
--- a/examples/ldns-dane.c
+++ b/examples/ldns-dane.c
@@ -115,7 +115,8 @@
 	       "use DNSKEY/DS rr(s) in <keyfile> to validate TLSAs\n"
 	       "\t\t\twhen signature chasing (i.e. -S)\n"
 	      );
-	printf("\t\t\tDefault is %s\n", LDNS_TRUST_ANCHOR_FILE);
+	const char * _trust_file = ldns_path_relocation(LDNS_BINDIR, LDNS_TRUST_ANCHOR_FILE);
+	printf("\t\t\tDefault is %s\n", _trust_file);
 	printf("\t-n\t\tdo *not* verify server name in certificate\n");
 	printf("\t-o <offset>\t"
 	       "select <offset>th certificate from the end of\n"
@@ -1397,7 +1398,8 @@
 
 	if (do_sigchase) {
 		if (nkeys == 0) {
-			(void) read_key_file(LDNS_TRUST_ANCHOR_FILE, keys);
+			const char * _trust_file = ldns_path_relocation(LDNS_BINDIR, LDNS_TRUST_ANCHOR_FILE);
+			(void) read_key_file(_trust_file, keys);
 			nkeys = ldns_rr_list_rr_count(keys);
 
 			if (nkeys == 0) {
--- a/examples/ldns-verify-zone.c
+++ b/examples/ldns-verify-zone.c
@@ -689,6 +689,7 @@
 
 static void print_usage(FILE *out, const char *progname)
 {
+	const char * _trust_file = ldns_path_relocation(LDNS_BINDIR, LDNS_TRUST_ANCHOR_FILE);
 	fprintf(out, "Usage: %s [OPTIONS] <zonefile>\n", progname);
 	fprintf(out, "\tReads the zonefile and checks for DNSSEC errors.\n");
 	fprintf(out, "\nIt checks whether NSEC(3)s are present, "
@@ -709,7 +710,7 @@
 	fprintf(out, "\t-k <file>\tspecify a file that contains a "
 	       "trusted DNSKEY or DS rr.\n\t\t\t"
 	       "This option may be given more than once.\n"
-	       "\t\t\tDefault is %s\n", LDNS_TRUST_ANCHOR_FILE);
+	       "\t\t\tDefault is %s\n", _trust_file);
 	fprintf(out, "\t-p [0-100]\tonly checks this percentage of "
 	       "the zone.\n\t\t\tDefaults to 100\n");
 	fprintf(out, "\t-S\t\tchase signature(s) to a known key. "
@@ -861,7 +862,8 @@
 		}
 	}
 	if (do_sigchase && nkeys == 0) {
-		(void) read_key_file(LDNS_TRUST_ANCHOR_FILE, keys);
+		const char * _trust_file = ldns_path_relocation(LDNS_BINDIR, LDNS_TRUST_ANCHOR_FILE);
+		(void) read_key_file(_trust_file, keys);
 		nkeys = ldns_rr_list_rr_count(keys);
 
 		if (nkeys == 0) {
--- a/varexpand.m4
+++ b/varexpand.m4
@@ -0,0 +1,8 @@
+AC_DEFUN([FULL_EXPAND_VARIABLE], [
+  $1=$2
+  $1=`(
+       test "x$prefix" = xNONE && prefix="$ac_default_prefix"
+       test "x$exec_prefix" = xNONE && exec_prefix="${prefix}"
+       eval echo \""[$]$1"\"
+      )`
+])
--- a/Makefile.in
+++ b/Makefile.in
@@ -89,7 +89,7 @@
 INSTALL		= $(srcdir)/install-sh
 
 LIBLOBJS	= $(LIBOBJS:.o=.lo)
-LDNS_LOBJS	= buffer.lo dane.lo dname.lo dnssec.lo dnssec_sign.lo dnssec_verify.lo dnssec_zone.lo duration.lo error.lo higher.lo host2str.lo host2wire.lo keys.lo net.lo packet.lo parse.lo radix.lo rbtree.lo rdata.lo resolver.lo rr.lo rr_functions.lo sha1.lo sha2.lo str2host.lo tsig.lo update.lo util.lo wire2host.lo zone.lo edns.lo
+LDNS_LOBJS	= buffer.lo dane.lo dname.lo dnssec.lo dnssec_sign.lo dnssec_verify.lo dnssec_zone.lo duration.lo error.lo higher.lo host2str.lo host2wire.lo keys.lo net.lo packet.lo parse.lo pathtools.lo radix.lo rbtree.lo rdata.lo resolver.lo rr.lo rr_functions.lo sha1.lo sha2.lo str2host.lo tsig.lo update.lo util.lo wire2host.lo zone.lo edns.lo
 LDNS_LOBJS_EX	= ^linktest\.c$$
 LDNS_ALL_LOBJS	= $(LDNS_LOBJS) $(LIBLOBJS)
 LIB		= libldns.la
@@ -144,6 +144,7 @@
 	@if test ! -d drill ; then mkdir drill ; fi
 	@if test ! -d examples ; then mkdir examples ; fi
 	@if test ! -h config.h ; then ln -s ldns/config.h . ; fi
+	@if test ! -d .libs ; then mkdir .libs ; fi
 	@if test ! -h lib ; then ln -s .libs lib ; fi ;
 	@if test ! -d include ; then $(INSTALL) -d include; fi
 	@if test ! -h include/ldns ; then ln -s ../ldns include/ldns || echo "include/ldns exists"; fi
@@ -258,7 +259,7 @@
 lib-export-all: libldns.la-export-all
 
 libldns.la: $(LDNS_ALL_LOBJS)
-	$(LINK_LIB) $(LIBSSL_LDFLAGS) $(LIBSSL_LIBS) -export-symbols-regex '^(ldns_|b32_[pn]to[pn]|mktime_from_utc|qsort_rr_compare_nsec3)' -o libldns.la $(LDNS_ALL_LOBJS) -rpath $(libdir) $(RUNTIME_PATH)
+	$(LINK_LIB) $(LIBSSL_LDFLAGS) $(LIBSSL_LIBS) -export-symbols-regex '^(ldns_|inet_[anp]to[pn]|b64_[pn]to[pn]|b32_[pn]to[pn]|mktime_from_utc|qsort_rr_compare_nsec3)' -o libldns.la $(LDNS_ALL_LOBJS) -rpath $(libdir) $(RUNTIME_PATH)
 
 libldns.la-export-all: $(LDNS_ALL_LOBJS)
 	$(LINK_LIB) -o libldns.la $(LDNS_ALL_LOBJS) -rpath $(libdir) $(RUNTIME_PATH)
--- a/util.c
+++ b/util.c
@@ -22,10 +22,31 @@
 #include <time.h>
 #include <ctype.h>
 
+#include "pathtools.h"
+
 #ifdef HAVE_SSL
 #include <openssl/rand.h>
 #endif
 
+char *
+ldns_path_relocation(const char *from, const char *to)
+{
+#if defined(__MINGW32__)
+  char exe_path[PATH_MAX];
+  get_executable_path (NULL, &exe_path[0], sizeof(exe_path)/sizeof(exe_path[0]));
+  if (strrchr (exe_path, '/') != NULL)
+  {
+     strrchr (exe_path, '/')[1] = '\0';
+  }
+  char * rel_to_datadir = get_relative_path (from, to);
+  strcat (exe_path, rel_to_datadir);
+  simplify_path (&exe_path[0]);
+  return malloc_copy_string(exe_path);
+#else
+  return malloc_copy_string(to);
+#endif
+}
+
 ldns_lookup_table *
 ldns_lookup_by_name(ldns_lookup_table *table, const char *name)
 {
--- a/ldns/util.h.in
+++ b/ldns/util.h.in
@@ -388,6 +388,7 @@
 
 #endif /* ! LDNS_BUILD_CONFIG_HAVE_B32_PTON */
 
+char * ldns_path_relocation(const char *from, const char *to);
 
 #ifdef __cplusplus
 }
