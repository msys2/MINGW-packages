--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -737,11 +737,12 @@
     endif()
 endif()

+set(PROBE_PREFIX "${CMAKE_SHARED_LIBRARY_PREFIX}")
 if(NOT GAMMARAY_INSTALL_QT_LAYOUT)
-    set(PROBE_BASENAME "gammaray_probe")
-else()
-    set(PROBE_BASENAME "${CMAKE_SHARED_LIBRARY_PREFIX}gammaray_probe")
+    set(PROBE_PREFIX "")
 endif()
+set(PROBE_BASENAME "${PROBE_PREFIX}gammaray_probe")
+set(WINLOADER_BASENAME "${PROBE_PREFIX}gammaray_winloader")
 
 if(GAMMARAY_INSTALL_QT_LAYOUT)
     if(WIN32)
--- a/config-gammaray.h.cmake
+++ b/config-gammaray.h.cmake
@@ -39,6 +39,9 @@
 // probe name
 #define GAMMARAY_PROBE_BASENAME "${PROBE_BASENAME}"
 
+// winloader name
+#define GAMMARAY_WINLOADER_BASENAME "${WINLOADER_BASENAME}"
+
 // library ABI suffix, as used with >= Qt 5.14 on Android
 #define ANDROID_ABI "${ANDROID_ABI}"
 
--- a/launcher/core/injector/windllinjector.cpp
+++ b/launcher/core/injector/windllinjector.cpp
@@ -191,7 +191,7 @@
 QString WinDllInjector::fixProbeDllPath(const QString &probeDll)
 {
     QString dllPath = QDir::toNativeSeparators(probeDll);
-    dllPath.replace(QLatin1String(GAMMARAY_PROBE_BASENAME), QLatin1String("gammaray_winloader"));
+    dllPath.replace(QLatin1String(GAMMARAY_PROBE_BASENAME), QLatin1String(GAMMARAY_WINLOADER_BASENAME));
     Q_ASSERT_X(QFileInfo::exists(dllPath), Q_FUNC_INFO, qPrintable(QString(QLatin1String("%1 does not exists!")).arg(dllPath)));
     return dllPath;
 }
--- a/probe/entry_win.cpp
+++ b/probe/entry_win.cpp
@@ -19,7 +19,7 @@
 typedef void (*gammaray_probe_inject)(void);
 
 namespace {
-static const std::wstring LOADER_NAME = L"gammaray_winloader";
+static const std::string LOADER_NAME = GAMMARAY_WINLOADER_BASENAME;
 static const std::string PROBE_NAME = GAMMARAY_PROBE_BASENAME;
 }
 
@@ -34,8 +34,9 @@
             break;
         }
         const std::wstring probeName(PROBE_NAME.cbegin(), PROBE_NAME.cend());
+        const std::wstring loaderName(LOADER_NAME.cbegin(), LOADER_NAME.cend());
         std::wstring path(buffer, size);
-        path.replace(path.find(LOADER_NAME), LOADER_NAME.length(), probeName);
+        path.replace(path.find(loaderName), loaderName.length(), probeName);
 
         HMODULE probe = GetModuleHandleW(path.c_str());
         if (!probe) {
