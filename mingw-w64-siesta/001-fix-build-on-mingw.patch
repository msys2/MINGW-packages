--- a/External/Wannier/Patches/3.1.0.patch
+++ b/External/Wannier/Patches/3.1.0.patch
@@ -212,6 +212,7 @@
 +  "${PROJECT_NAME}-lib"
 +  EXPORT
 +  "${PROJECT_NAME}-targets"
++  RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
 +  LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
 +  ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
 +)
--- a/Src/CMakeLists.txt
+++ b/Src/CMakeLists.txt
@@ -356,9 +356,7 @@
   matel_registry.F90
   md_out.F90
   memory.F
-  memory_all.F90
   memory_log.F90
-  memory_snapshot.f90
   mesh.F
   meshcomm.F
   meshdscf.F
@@ -441,7 +439,6 @@
   rhoofd.F90
   rhoofdsp.F90
   runinfo_m.F90
-  rusage.f90
   sankey_change_basis.F90
   save_density_matrix.F90
   savepsi.F
@@ -529,6 +526,9 @@
 if( SIESTA_WITH_PEXSI )
   list(APPEND libsiesta_sources
 
+    memory_all.F90
+    memory_snapshot.f90
+    rusage.f90
     pexsi-solver/m_pexsi.F90
     pexsi-solver/m_pexsi_dos.F90
     pexsi-solver/m_pexsi_driver.F90
@@ -610,6 +610,8 @@
   $<$<BOOL:${SIESTA_WITH_OPENMP}>:OpenMP::OpenMP_Fortran>
   # Profiling
   $<$<BOOL:${SIESTA_WITH_PROFILE_NVTX}>:nvtx-c>
+  # Windows
+  $<$<BOOL:${WIN32}>:ws2_32>
 )
 
 #get_target_property(out SIESTA_libsiesta INTERFACE_LINK_LIBRARIES)
@@ -750,7 +752,9 @@
 if( SIESTA_INSTALL )
   install(
     TARGETS SIESTA_libsiesta
-    RUNTIME DESTINATION "${CMAKE_INSTALL_LIBDIR}"
+    RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
+    LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
+    ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
     )
   install(
     TARGETS SIESTA_siesta_exe
--- a/Src/MatrixSwitch/src/CMakeLists.txt
+++ b/Src/MatrixSwitch/src/CMakeLists.txt
@@ -1,7 +1,7 @@
 # Built-in MatrixSwitch
 #
 add_library(${PROJECT_NAME}-libms
-
+  STATIC
   MatrixSwitch.F90
   MatrixSwitch_m_add.F90
   MatrixSwitch_m_copy.F90
--- a/Src/MPI/CMakeLists.txt
+++ b/Src/MPI/CMakeLists.txt
@@ -65,4 +65,11 @@
   COMMENT "Creating MPI interfaces and modules"
   )
 
-
+if( SIESTA_INSTALL )
+  install(
+    TARGETS mpi_siesta
+    RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
+    LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
+    ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
+    )
+endif()
--- a/Src/easy-fdict/CMakeLists.txt
+++ b/Src/easy-fdict/CMakeLists.txt
@@ -3,7 +3,7 @@
   
 add_library(
   ${PROJECT_NAME}-libfdict
-   
+  STATIC
   variable.F90
   dictionary.f90
   )
--- a/Src/easy-ncdf/CMakeLists.txt
+++ b/Src/easy-ncdf/CMakeLists.txt
@@ -3,7 +3,7 @@
 #
 add_library(
   ${PROJECT_NAME}-libncdf
-   
+  STATIC
   netcdf_ncdf.F90
   )
 
--- a/Src/libsys/CMakeLists.txt
+++ b/Src/libsys/CMakeLists.txt
@@ -2,6 +2,7 @@
 #
 add_library(
   ${PROJECT_NAME}-libsys
+  STATIC
   sys.F90
   external_entries.F90
   )
--- a/Src/libxc-compat/CMakeLists.txt
+++ b/Src/libxc-compat/CMakeLists.txt
@@ -1,4 +1,4 @@
-add_library(${PROJECT_NAME}-libxc-trans 
+add_library(${PROJECT_NAME}-libxc-trans STATIC
   m_libxc_compat.f90
   m_libxc_list.F90
   m_libxc_sxc_translation.F90
--- a/Src/ncps/src/CMakeLists.txt
+++ b/Src/ncps/src/CMakeLists.txt
@@ -1,6 +1,6 @@
 add_library(
   ${PROJECT_NAME}-libncps
-
+  STATIC
   interpolation.f90
   m_ncps.f90
   m_ncps_froyen_ps_t.f90
--- a/Src/psoplib/src/CMakeLists.txt
+++ b/Src/psoplib/src/CMakeLists.txt
@@ -1,6 +1,6 @@
 add_library(
   ${PROJECT_NAME}-libpsop
-
+  STATIC
   arw.f
   m_kbgen.F
   m_localgen.f
--- a/Src/sockets.c
+++ b/Src/sockets.c
@@ -39,10 +39,16 @@
 #include <unistd.h>
 #include <string.h>
 #include <sys/types.h>
+#ifndef _WIN32
 #include <sys/socket.h>
 #include <netinet/in.h>
 #include <sys/un.h>
 #include <netdb.h>
+#else
+#include <ws2tcpip.h>
+#include <winsock.h>
+#include <afunix.h>
+#endif
 
 void open_socket(int *psockfd, int* inet, int* port, const char* host)
 /* Opens a socket.
--- a/Util/Grid/CMakeLists.txt
+++ b/Util/Grid/CMakeLists.txt
@@ -8,8 +8,8 @@
 # To avoid "multiple rules" in Ninja
 # Maybe turn into global-utility targets
 
-add_library(aux_opts     ${top_src_dir}/m_getopts.f90)
-add_library(aux_gridfunc  m_gridfunc.F90)
+add_library(aux_opts     STATIC ${top_src_dir}/m_getopts.f90)
+add_library(aux_gridfunc STATIC m_gridfunc.F90)
 
 #-----------------------------------------
 add_executable(g2c_ng
@@ -81,7 +81,7 @@
 
 # To avoid "multiple rules" in Ninja
 # (could add OBJECT qualifier to avoid the lib appearing)
-add_library(aux_m_grid  m_grid.F90)
+add_library(aux_m_grid STATIC m_grid.F90)
 target_compile_definitions(aux_m_grid  PRIVATE CDF )
 target_link_libraries(aux_m_grid PUBLIC NetCDF::NetCDF_Fortran )
 
@@ -100,7 +100,7 @@
 #-----------------------------------------
 
 # To avoid "multiple rules" in Ninja
-add_library(aux_fft  ${top_src_dir}/m_fft_gpfa.F)
+add_library(aux_fft STATIC ${top_src_dir}/m_fft_gpfa.F)
 target_link_libraries(aux_fft PRIVATE ${PROJECT_NAME}-libsys)
 
 add_executable(cdf_laplacian
--- a/Util/JobList/Src/CMakeLists.txt
+++ b/Util/JobList/Src/CMakeLists.txt
@@ -1,7 +1,7 @@
 # To avoid "multiple rules" in Ninja
 # Maybe turn into global-utility targets
 
-add_library(aux_joblist     jobList.f90 posix_calls.f90)
+add_library(aux_joblist  STATIC   jobList.f90 posix_calls.f90)
 
 add_executable(countJobs  countJobs.f90 )
 add_executable(runJobs    runJobs.f90 )
--- a/Util/Optimizer/CMakeLists.txt
+++ b/Util/Optimizer/CMakeLists.txt
@@ -1,4 +1,5 @@
 add_library(aux_optim
+    STATIC
     io.f
     parse.f
     minimizer.f90
--- a/Util/STM/simple-stm/CMakeLists.txt
+++ b/Util/STM/simple-stm/CMakeLists.txt
@@ -4,7 +4,7 @@
 # To avoid "multiple rules" in Ninja
 # Maybe turn into global-utility targets
 
-add_library(stm_gridfunc   ${grid_srcdir}/m_gridfunc.F90)
+add_library(stm_gridfunc STATIC  ${grid_srcdir}/m_gridfunc.F90)
 
 add_executable( plstm 
   plstm.f90
--- a/Util/SiestaSubroutine/SimpleTest/Src/CMakeLists.txt
+++ b/Util/SiestaSubroutine/SimpleTest/Src/CMakeLists.txt
@@ -10,7 +10,7 @@
 # to satisfy Ninja. This is also good practice in general
 # 
 # -- Sockets
-siesta_add_library(sockets-siesta-dispatch 
+siesta_add_library(sockets-siesta-dispatch STATIC
     ${top_srcdir}/fsiesta_sockets.F90
     ${top_srcdir}/fsockets.f90
     ${top_srcdir}/sockets.c
@@ -19,6 +19,9 @@
 set_target_properties(sockets-siesta-dispatch
   PROPERTIES
   Fortran_MODULE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/sockets-include")
+if(WIN32)
+  target_link_libraries(sockets-siesta-dispatch PUBLIC ws2_32)
+endif()
 
 target_include_directories(sockets-siesta-dispatch
   INTERFACE
@@ -25,7 +28,7 @@
   "${CMAKE_CURRENT_BINARY_DIR}/sockets-include")
 
 # -- Pipes
-siesta_add_library(pipes-siesta-dispatch 
+siesta_add_library(pipes-siesta-dispatch STATIC
     ${top_srcdir}/fsiesta_pipes.F90
     ${top_srcdir}/pxf.F90
     ${top_srcdir}/posix_calls.f90
@@ -40,7 +43,7 @@
 if (SIESTA_WITH_MPI)
 
 # -- MPI dispatch -- uses 'libsiesta'
-siesta_add_library(mpi-siesta-dispatch
+siesta_add_library(mpi-siesta-dispatch STATIC
   ${top_srcdir}/fsiesta_mpi.F90
 )
 target_link_libraries(mpi-siesta-dispatch PUBLIC SIESTA_libsiesta)
--- a/Util/Sockets/CMakeLists.txt
+++ b/Util/Sockets/CMakeLists.txt
@@ -11,6 +11,10 @@
 
 target_link_libraries(f2fmaster sockets_objs )
 target_link_libraries(f2fslave sockets_objs )
+if(WIN32)
+  target_link_libraries(f2fmaster ws2_32)
+  target_link_libraries(f2fslave ws2_32)
+endif()
     
 if( SIESTA_INSTALL )
   install(
