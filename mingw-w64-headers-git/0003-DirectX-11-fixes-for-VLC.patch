From 36ca5cc53511a3da352759b613b0bc988ba97cd2 Mon Sep 17 00:00:00 2001
From: Alexey Pavlov <alexpux@gmail.com>
Date: Thu, 14 Sep 2017 11:21:16 +0300
Subject: [PATCH 3/3] DirectX 11 fixes for VLC

---
 mingw-w64-headers/Makefile.am                    |    4 +
 mingw-w64-headers/Makefile.in                    |    4 +
 mingw-w64-headers/direct-x/include/d3d11.h       |    5 +
 mingw-w64-headers/direct-x/include/d3d11.idl     |    5 +
 mingw-w64-headers/direct-x/include/d3d11_1.h     |    5 +
 mingw-w64-headers/direct-x/include/d3d11_1.idl   |    6 +
 mingw-w64-headers/direct-x/include/dxgi1_3.h     | 2131 ++++++++++++++++++++++
 mingw-w64-headers/direct-x/include/dxgi1_3.idl   |  242 +++
 mingw-w64-headers/direct-x/include/dxgi1_4.h     |  525 ++++++
 mingw-w64-headers/direct-x/include/dxgi1_4.idl   |   76 +
 mingw-w64-headers/direct-x/include/dxgi1_5.h     |  485 +++++
 mingw-w64-headers/direct-x/include/dxgi1_5.idl   |   51 +
 mingw-w64-headers/direct-x/include/dxgidebug.h   |  139 ++
 mingw-w64-headers/direct-x/include/dxgidebug.idl |   43 +
 16 files changed, 4616 insertions(+)
 create mode 100644 mingw-w64-headers/direct-x/include/dxgi1_3.h
 create mode 100644 mingw-w64-headers/direct-x/include/dxgi1_3.idl
 create mode 100644 mingw-w64-headers/direct-x/include/dxgi1_4.h
 create mode 100644 mingw-w64-headers/direct-x/include/dxgi1_4.idl
 create mode 100644 mingw-w64-headers/direct-x/include/dxgi1_5.h
 create mode 100644 mingw-w64-headers/direct-x/include/dxgi1_5.idl
 create mode 100644 mingw-w64-headers/direct-x/include/dxgidebug.h
 create mode 100644 mingw-w64-headers/direct-x/include/dxgidebug.idl

diff --git a/mingw-w64-headers/Makefile.am b/mingw-w64-headers/Makefile.am
index dae83478..00f32ac5 100644
--- a/mingw-w64-headers/Makefile.am
+++ b/mingw-w64-headers/Makefile.am
@@ -213,6 +213,10 @@ IDL_SRCS = \
   direct-x/include/dmodshow.idl \
   direct-x/include/dxgi.idl \
   direct-x/include/dxgi1_2.idl \
+  direct-x/include/dxgi1_3.idl \
+  direct-x/include/dxgi1_4.idl \
+  direct-x/include/dxgi1_5.idl \
+  direct-x/include/dxgidebug.idl \
   direct-x/include/mediaobj.idl \
   direct-x/include/medparam.idl \
   direct-x/include/mmstream.idl \
diff --git a/mingw-w64-headers/Makefile.in b/mingw-w64-headers/Makefile.in
index 3282b088..d938283a 100644
--- a/mingw-w64-headers/Makefile.in
+++ b/mingw-w64-headers/Makefile.in
@@ -512,6 +512,10 @@ EXTRA_HEADERS = \
 @HAVE_WIDL_TRUE@  direct-x/include/dmodshow.idl \
 @HAVE_WIDL_TRUE@  direct-x/include/dxgi.idl \
 @HAVE_WIDL_TRUE@  direct-x/include/dxgi1_2.idl \
+@HAVE_WIDL_TRUE@  direct-x/include/dxgi1_3.idl \
+@HAVE_WIDL_TRUE@  direct-x/include/dxgi1_4.idl \
+@HAVE_WIDL_TRUE@  direct-x/include/dxgi1_5.idl \
+@HAVE_WIDL_TRUE@  direct-x/include/dxgidebug.idl \
 @HAVE_WIDL_TRUE@  direct-x/include/mediaobj.idl \
 @HAVE_WIDL_TRUE@  direct-x/include/medparam.idl \
 @HAVE_WIDL_TRUE@  direct-x/include/mmstream.idl \
diff --git a/mingw-w64-headers/direct-x/include/d3d11.h b/mingw-w64-headers/direct-x/include/d3d11.h
index 52c7248f..548a11a8 100644
--- a/mingw-w64-headers/direct-x/include/d3d11.h
+++ b/mingw-w64-headers/direct-x/include/d3d11.h
@@ -13018,6 +13018,11 @@ typedef enum D3D11_CREATE_DEVICE_FLAG {
     D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT = 0x100,
     D3D11_CREATE_DEVICE_VIDEO_SUPPORT = 0x800
 } D3D11_CREATE_DEVICE_FLAG;
+typedef enum D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT {
+    D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT = 0x00000001,
+    D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT = 0x00000002,
+} D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT;
+
 #define D3D11_SDK_VERSION (7)
 
 #include <d3d10_1.h>
diff --git a/mingw-w64-headers/direct-x/include/d3d11.idl b/mingw-w64-headers/direct-x/include/d3d11.idl
index 244020a8..2efb8f20 100644
--- a/mingw-w64-headers/direct-x/include/d3d11.idl
+++ b/mingw-w64-headers/direct-x/include/d3d11.idl
@@ -3363,6 +3363,11 @@ typedef enum D3D11_CREATE_DEVICE_FLAG {
     D3D11_CREATE_DEVICE_VIDEO_SUPPORT   = 0x0800
 } D3D11_CREATE_DEVICE_FLAG;
 
+typedef enum D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT {
+    D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT = 0x00000001,
+    D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT = 0x00000002,
+} D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT;
+
 const UINT D3D11_SDK_VERSION = 7;
 
 cpp_quote("#include <d3d10_1.h>")
diff --git a/mingw-w64-headers/direct-x/include/d3d11_1.h b/mingw-w64-headers/direct-x/include/d3d11_1.h
index 51ca735c..2460b3d8 100644
--- a/mingw-w64-headers/direct-x/include/d3d11_1.h
+++ b/mingw-w64-headers/direct-x/include/d3d11_1.h
@@ -59,6 +59,11 @@ typedef interface ID3D11Device1 ID3D11Device1;
 extern "C" {
 #endif
 
+typedef enum D3D11_COPY_FLAGS {
+    D3D11_COPY_NO_OVERWRITE = 0x1,
+    D3D11_COPY_DISCARD = 0x2
+} D3D11_COPY_FLAGS;
+
 typedef enum D3D11_LOGIC_OP {
     D3D11_LOGIC_OP_CLEAR = 0,
     D3D11_LOGIC_OP_SET = 1,
diff --git a/mingw-w64-headers/direct-x/include/d3d11_1.idl b/mingw-w64-headers/direct-x/include/d3d11_1.idl
index 1a46abf1..319d522e 100644
--- a/mingw-w64-headers/direct-x/include/d3d11_1.idl
+++ b/mingw-w64-headers/direct-x/include/d3d11_1.idl
@@ -22,6 +22,12 @@ import "dxgi1_2.idl";
 import "d3dcommon.idl";
 import "d3d11.idl";
 
+typedef enum D3D11_COPY_FLAGS
+{
+    D3D11_COPY_NO_OVERWRITE = 0x1,
+    D3D11_COPY_DISCARD = 0x2,
+} D3D11_COPY_FLAGS;
+
 typedef enum D3D11_LOGIC_OP {
     D3D11_LOGIC_OP_CLEAR = 0,
     D3D11_LOGIC_OP_SET,
diff --git a/mingw-w64-headers/direct-x/include/dxgi1_3.h b/mingw-w64-headers/direct-x/include/dxgi1_3.h
new file mode 100644
index 00000000..b6042124
--- /dev/null
+++ b/mingw-w64-headers/direct-x/include/dxgi1_3.h
@@ -0,0 +1,2131 @@
+/*** Autogenerated by WIDL 1.6 from dxgi1_3.idl - Do not edit ***/
+
+#ifndef __REQUIRED_RPCNDR_H_VERSION__
+#define __REQUIRED_RPCNDR_H_VERSION__ 475
+#endif
+
+#include <rpc.h>
+#include <rpcndr.h>
+
+#ifndef COM_NO_WINDOWS_H
+#include <windows.h>
+#include <ole2.h>
+#endif
+
+#ifndef __dxgi1_3_h__
+#define __dxgi1_3_h__
+
+/* Forward declarations */
+
+#ifndef __IDXGIDecodeSwapChain_FWD_DEFINED__
+#define __IDXGIDecodeSwapChain_FWD_DEFINED__
+typedef interface IDXGIDecodeSwapChain IDXGIDecodeSwapChain;
+#endif
+
+#ifndef __IDXGIFactoryMedia_FWD_DEFINED__
+#define __IDXGIFactoryMedia_FWD_DEFINED__
+typedef interface IDXGIFactoryMedia IDXGIFactoryMedia;
+#endif
+
+#ifndef __IDXGISwapChainMedia_FWD_DEFINED__
+#define __IDXGISwapChainMedia_FWD_DEFINED__
+typedef interface IDXGISwapChainMedia IDXGISwapChainMedia;
+#endif
+
+#ifndef __IDXGIDevice3_FWD_DEFINED__
+#define __IDXGIDevice3_FWD_DEFINED__
+typedef interface IDXGIDevice3 IDXGIDevice3;
+#endif
+
+#ifndef __IDXGIOutput2_FWD_DEFINED__
+#define __IDXGIOutput2_FWD_DEFINED__
+typedef interface IDXGIOutput2 IDXGIOutput2;
+#endif
+
+#ifndef __IDXGIOutput3_FWD_DEFINED__
+#define __IDXGIOutput3_FWD_DEFINED__
+typedef interface IDXGIOutput3 IDXGIOutput3;
+#endif
+
+#ifndef __IDXGISwapChain2_FWD_DEFINED__
+#define __IDXGISwapChain2_FWD_DEFINED__
+typedef interface IDXGISwapChain2 IDXGISwapChain2;
+#endif
+
+#ifndef __IDXGIFactory3_FWD_DEFINED__
+#define __IDXGIFactory3_FWD_DEFINED__
+typedef interface IDXGIFactory3 IDXGIFactory3;
+#endif
+
+/* Headers for imported files */
+
+#include <dxgi1_2.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define DXGI_CREATE_FACTORY_DEBUG   0x1
+typedef struct DXGI_DECODE_SWAP_CHAIN_DESC {
+    UINT Flags;
+} DXGI_DECODE_SWAP_CHAIN_DESC;
+typedef enum DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS {
+    DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_NOMINAL_RANGE = 0x1,
+    DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_BT709 = 0x2,
+    DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_xvYCC = 0x4
+} DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS;
+/*****************************************************************************
+ * IDXGIDecodeSwapChain interface
+ */
+#ifndef __IDXGIDecodeSwapChain_INTERFACE_DEFINED__
+#define __IDXGIDecodeSwapChain_INTERFACE_DEFINED__
+
+DEFINE_GUID(IID_IDXGIDecodeSwapChain, 0x2633066b, 0x4514, 0x4c7a, 0x8f,0xd8, 0x12,0xea,0x98,0x05,0x9d,0x18);
+#if defined(__cplusplus) && !defined(CINTERFACE)
+MIDL_INTERFACE("2633066b-4514-4c7a-8fd8-12ea98059d18")
+IDXGIDecodeSwapChain : public IUnknown
+{
+    virtual HRESULT STDMETHODCALLTYPE PresentBuffer(
+        UINT buffer,
+        UINT sync,
+        UINT flags) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE SetSourceRect(
+        const RECT *rect) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE SetTargetRect(
+        const RECT *rect) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE SetDestSize(
+        UINT width,
+        UINT height) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetSourceRect(
+        RECT *rect) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetTargetRect(
+        RECT *rect) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetDestSize(
+        UINT *width,
+        UINT *height) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE SetColorSpace(
+        DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS colorSpace) = 0;
+
+    virtual DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS STDMETHODCALLTYPE GetColorSpace(
+        ) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(IDXGIDecodeSwapChain, 0x2633066b, 0x4514, 0x4c7a, 0x8f,0xd8, 0x12,0xea,0x98,0x05,0x9d,0x18)
+#endif
+#else
+typedef struct IDXGIDecodeSwapChainVtbl {
+    BEGIN_INTERFACE
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        IDXGIDecodeSwapChain* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        IDXGIDecodeSwapChain* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        IDXGIDecodeSwapChain* This);
+
+    /*** IDXGIDecodeSwapChain methods ***/
+    HRESULT (STDMETHODCALLTYPE *PresentBuffer)(
+        IDXGIDecodeSwapChain* This,
+        UINT buffer,
+        UINT sync,
+        UINT flags);
+
+    HRESULT (STDMETHODCALLTYPE *SetSourceRect)(
+        IDXGIDecodeSwapChain* This,
+        const RECT *rect);
+
+    HRESULT (STDMETHODCALLTYPE *SetTargetRect)(
+        IDXGIDecodeSwapChain* This,
+        const RECT *rect);
+
+    HRESULT (STDMETHODCALLTYPE *SetDestSize)(
+        IDXGIDecodeSwapChain* This,
+        UINT width,
+        UINT height);
+
+    HRESULT (STDMETHODCALLTYPE *GetSourceRect)(
+        IDXGIDecodeSwapChain* This,
+        RECT *rect);
+
+    HRESULT (STDMETHODCALLTYPE *GetTargetRect)(
+        IDXGIDecodeSwapChain* This,
+        RECT *rect);
+
+    HRESULT (STDMETHODCALLTYPE *GetDestSize)(
+        IDXGIDecodeSwapChain* This,
+        UINT *width,
+        UINT *height);
+
+    HRESULT (STDMETHODCALLTYPE *SetColorSpace)(
+        IDXGIDecodeSwapChain* This,
+        DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS colorSpace);
+
+    DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS (STDMETHODCALLTYPE *GetColorSpace)(
+        IDXGIDecodeSwapChain* This);
+
+    END_INTERFACE
+} IDXGIDecodeSwapChainVtbl;
+interface IDXGIDecodeSwapChain {
+    CONST_VTBL IDXGIDecodeSwapChainVtbl* lpVtbl;
+};
+
+#ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
+#define IDXGIDecodeSwapChain_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define IDXGIDecodeSwapChain_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define IDXGIDecodeSwapChain_Release(This) (This)->lpVtbl->Release(This)
+/*** IDXGIDecodeSwapChain methods ***/
+#define IDXGIDecodeSwapChain_PresentBuffer(This,buffer,sync,flags) (This)->lpVtbl->PresentBuffer(This,buffer,sync,flags)
+#define IDXGIDecodeSwapChain_SetSourceRect(This,rect) (This)->lpVtbl->SetSourceRect(This,rect)
+#define IDXGIDecodeSwapChain_SetTargetRect(This,rect) (This)->lpVtbl->SetTargetRect(This,rect)
+#define IDXGIDecodeSwapChain_SetDestSize(This,width,height) (This)->lpVtbl->SetDestSize(This,width,height)
+#define IDXGIDecodeSwapChain_GetSourceRect(This,rect) (This)->lpVtbl->GetSourceRect(This,rect)
+#define IDXGIDecodeSwapChain_GetTargetRect(This,rect) (This)->lpVtbl->GetTargetRect(This,rect)
+#define IDXGIDecodeSwapChain_GetDestSize(This,width,height) (This)->lpVtbl->GetDestSize(This,width,height)
+#define IDXGIDecodeSwapChain_SetColorSpace(This,colorSpace) (This)->lpVtbl->SetColorSpace(This,colorSpace)
+#define IDXGIDecodeSwapChain_GetColorSpace(This) (This)->lpVtbl->GetColorSpace(This)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT IDXGIDecodeSwapChain_QueryInterface(IDXGIDecodeSwapChain* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG IDXGIDecodeSwapChain_AddRef(IDXGIDecodeSwapChain* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG IDXGIDecodeSwapChain_Release(IDXGIDecodeSwapChain* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IDXGIDecodeSwapChain methods ***/
+static FORCEINLINE HRESULT IDXGIDecodeSwapChain_PresentBuffer(IDXGIDecodeSwapChain* This,UINT buffer,UINT sync,UINT flags) {
+    return This->lpVtbl->PresentBuffer(This,buffer,sync,flags);
+}
+static FORCEINLINE HRESULT IDXGIDecodeSwapChain_SetSourceRect(IDXGIDecodeSwapChain* This,const RECT *rect) {
+    return This->lpVtbl->SetSourceRect(This,rect);
+}
+static FORCEINLINE HRESULT IDXGIDecodeSwapChain_SetTargetRect(IDXGIDecodeSwapChain* This,const RECT *rect) {
+    return This->lpVtbl->SetTargetRect(This,rect);
+}
+static FORCEINLINE HRESULT IDXGIDecodeSwapChain_SetDestSize(IDXGIDecodeSwapChain* This,UINT width,UINT height) {
+    return This->lpVtbl->SetDestSize(This,width,height);
+}
+static FORCEINLINE HRESULT IDXGIDecodeSwapChain_GetSourceRect(IDXGIDecodeSwapChain* This,RECT *rect) {
+    return This->lpVtbl->GetSourceRect(This,rect);
+}
+static FORCEINLINE HRESULT IDXGIDecodeSwapChain_GetTargetRect(IDXGIDecodeSwapChain* This,RECT *rect) {
+    return This->lpVtbl->GetTargetRect(This,rect);
+}
+static FORCEINLINE HRESULT IDXGIDecodeSwapChain_GetDestSize(IDXGIDecodeSwapChain* This,UINT *width,UINT *height) {
+    return This->lpVtbl->GetDestSize(This,width,height);
+}
+static FORCEINLINE HRESULT IDXGIDecodeSwapChain_SetColorSpace(IDXGIDecodeSwapChain* This,DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS colorSpace) {
+    return This->lpVtbl->SetColorSpace(This,colorSpace);
+}
+static FORCEINLINE DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS IDXGIDecodeSwapChain_GetColorSpace(IDXGIDecodeSwapChain* This) {
+    return This->lpVtbl->GetColorSpace(This);
+}
+#endif
+#endif
+
+#endif
+
+HRESULT STDMETHODCALLTYPE IDXGIDecodeSwapChain_PresentBuffer_Proxy(
+    IDXGIDecodeSwapChain* This,
+    UINT buffer,
+    UINT sync,
+    UINT flags);
+void __RPC_STUB IDXGIDecodeSwapChain_PresentBuffer_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IDXGIDecodeSwapChain_SetSourceRect_Proxy(
+    IDXGIDecodeSwapChain* This,
+    const RECT *rect);
+void __RPC_STUB IDXGIDecodeSwapChain_SetSourceRect_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IDXGIDecodeSwapChain_SetTargetRect_Proxy(
+    IDXGIDecodeSwapChain* This,
+    const RECT *rect);
+void __RPC_STUB IDXGIDecodeSwapChain_SetTargetRect_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IDXGIDecodeSwapChain_SetDestSize_Proxy(
+    IDXGIDecodeSwapChain* This,
+    UINT width,
+    UINT height);
+void __RPC_STUB IDXGIDecodeSwapChain_SetDestSize_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IDXGIDecodeSwapChain_GetSourceRect_Proxy(
+    IDXGIDecodeSwapChain* This,
+    RECT *rect);
+void __RPC_STUB IDXGIDecodeSwapChain_GetSourceRect_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IDXGIDecodeSwapChain_GetTargetRect_Proxy(
+    IDXGIDecodeSwapChain* This,
+    RECT *rect);
+void __RPC_STUB IDXGIDecodeSwapChain_GetTargetRect_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IDXGIDecodeSwapChain_GetDestSize_Proxy(
+    IDXGIDecodeSwapChain* This,
+    UINT *width,
+    UINT *height);
+void __RPC_STUB IDXGIDecodeSwapChain_GetDestSize_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IDXGIDecodeSwapChain_SetColorSpace_Proxy(
+    IDXGIDecodeSwapChain* This,
+    DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS colorSpace);
+void __RPC_STUB IDXGIDecodeSwapChain_SetColorSpace_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS STDMETHODCALLTYPE IDXGIDecodeSwapChain_GetColorSpace_Proxy(
+    IDXGIDecodeSwapChain* This);
+void __RPC_STUB IDXGIDecodeSwapChain_GetColorSpace_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __IDXGIDecodeSwapChain_INTERFACE_DEFINED__ */
+
+/*****************************************************************************
+ * IDXGIFactoryMedia interface
+ */
+#ifndef __IDXGIFactoryMedia_INTERFACE_DEFINED__
+#define __IDXGIFactoryMedia_INTERFACE_DEFINED__
+
+DEFINE_GUID(IID_IDXGIFactoryMedia, 0x41e7d1f2, 0xa591, 0x4f7b, 0xa2,0xe5, 0xfa,0x9c,0x84,0x3e,0x1c,0x12);
+#if defined(__cplusplus) && !defined(CINTERFACE)
+MIDL_INTERFACE("41e7d1f2-a591-4f7b-a2e5-fa9c843e1c12")
+IDXGIFactoryMedia : public IUnknown
+{
+    virtual HRESULT STDMETHODCALLTYPE CreateSwapChainForCompositionSurfaceHandle(
+        IUnknown *device,
+        HANDLE surface,
+        const DXGI_SWAP_CHAIN_DESC1 *desc,
+        IDXGIOutput *output,
+        IDXGISwapChain1 **swapchain) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE CreateDecodeSwapChainForCompositionSurfaceHandle(
+        IUnknown *device,
+        HANDLE surface,
+        DXGI_DECODE_SWAP_CHAIN_DESC *desc,
+        IDXGIResource *buffer,
+        IDXGIOutput *output,
+        IDXGIDecodeSwapChain **swapchain) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(IDXGIFactoryMedia, 0x41e7d1f2, 0xa591, 0x4f7b, 0xa2,0xe5, 0xfa,0x9c,0x84,0x3e,0x1c,0x12)
+#endif
+#else
+typedef struct IDXGIFactoryMediaVtbl {
+    BEGIN_INTERFACE
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        IDXGIFactoryMedia* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        IDXGIFactoryMedia* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        IDXGIFactoryMedia* This);
+
+    /*** IDXGIFactoryMedia methods ***/
+    HRESULT (STDMETHODCALLTYPE *CreateSwapChainForCompositionSurfaceHandle)(
+        IDXGIFactoryMedia* This,
+        IUnknown *device,
+        HANDLE surface,
+        const DXGI_SWAP_CHAIN_DESC1 *desc,
+        IDXGIOutput *output,
+        IDXGISwapChain1 **swapchain);
+
+    HRESULT (STDMETHODCALLTYPE *CreateDecodeSwapChainForCompositionSurfaceHandle)(
+        IDXGIFactoryMedia* This,
+        IUnknown *device,
+        HANDLE surface,
+        DXGI_DECODE_SWAP_CHAIN_DESC *desc,
+        IDXGIResource *buffer,
+        IDXGIOutput *output,
+        IDXGIDecodeSwapChain **swapchain);
+
+    END_INTERFACE
+} IDXGIFactoryMediaVtbl;
+interface IDXGIFactoryMedia {
+    CONST_VTBL IDXGIFactoryMediaVtbl* lpVtbl;
+};
+
+#ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
+#define IDXGIFactoryMedia_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define IDXGIFactoryMedia_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define IDXGIFactoryMedia_Release(This) (This)->lpVtbl->Release(This)
+/*** IDXGIFactoryMedia methods ***/
+#define IDXGIFactoryMedia_CreateSwapChainForCompositionSurfaceHandle(This,device,surface,desc,output,swapchain) (This)->lpVtbl->CreateSwapChainForCompositionSurfaceHandle(This,device,surface,desc,output,swapchain)
+#define IDXGIFactoryMedia_CreateDecodeSwapChainForCompositionSurfaceHandle(This,device,surface,desc,buffer,output,swapchain) (This)->lpVtbl->CreateDecodeSwapChainForCompositionSurfaceHandle(This,device,surface,desc,buffer,output,swapchain)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT IDXGIFactoryMedia_QueryInterface(IDXGIFactoryMedia* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG IDXGIFactoryMedia_AddRef(IDXGIFactoryMedia* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG IDXGIFactoryMedia_Release(IDXGIFactoryMedia* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IDXGIFactoryMedia methods ***/
+static FORCEINLINE HRESULT IDXGIFactoryMedia_CreateSwapChainForCompositionSurfaceHandle(IDXGIFactoryMedia* This,IUnknown *device,HANDLE surface,const DXGI_SWAP_CHAIN_DESC1 *desc,IDXGIOutput *output,IDXGISwapChain1 **swapchain) {
+    return This->lpVtbl->CreateSwapChainForCompositionSurfaceHandle(This,device,surface,desc,output,swapchain);
+}
+static FORCEINLINE HRESULT IDXGIFactoryMedia_CreateDecodeSwapChainForCompositionSurfaceHandle(IDXGIFactoryMedia* This,IUnknown *device,HANDLE surface,DXGI_DECODE_SWAP_CHAIN_DESC *desc,IDXGIResource *buffer,IDXGIOutput *output,IDXGIDecodeSwapChain **swapchain) {
+    return This->lpVtbl->CreateDecodeSwapChainForCompositionSurfaceHandle(This,device,surface,desc,buffer,output,swapchain);
+}
+#endif
+#endif
+
+#endif
+
+HRESULT STDMETHODCALLTYPE IDXGIFactoryMedia_CreateSwapChainForCompositionSurfaceHandle_Proxy(
+    IDXGIFactoryMedia* This,
+    IUnknown *device,
+    HANDLE surface,
+    const DXGI_SWAP_CHAIN_DESC1 *desc,
+    IDXGIOutput *output,
+    IDXGISwapChain1 **swapchain);
+void __RPC_STUB IDXGIFactoryMedia_CreateSwapChainForCompositionSurfaceHandle_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IDXGIFactoryMedia_CreateDecodeSwapChainForCompositionSurfaceHandle_Proxy(
+    IDXGIFactoryMedia* This,
+    IUnknown *device,
+    HANDLE surface,
+    DXGI_DECODE_SWAP_CHAIN_DESC *desc,
+    IDXGIResource *buffer,
+    IDXGIOutput *output,
+    IDXGIDecodeSwapChain **swapchain);
+void __RPC_STUB IDXGIFactoryMedia_CreateDecodeSwapChainForCompositionSurfaceHandle_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __IDXGIFactoryMedia_INTERFACE_DEFINED__ */
+
+typedef enum DXGI_FRAME_PRESENTATION_MODE {
+    DXGI_FRAME_PRESENTATION_MODE_COMPOSED = 0,
+    DXGI_FRAME_PRESENTATION_MODE_OVERLAY = 1,
+    DXGI_FRAME_PRESENTATION_MODE_NONE = 2
+} DXGI_FRAME_PRESENTATION_MODE;
+typedef struct DXGI_FRAME_STATISTICS_MEDIA {
+    UINT PresentCount;
+    UINT PresentRefreshCount;
+    UINT SyncRefreshCount;
+    LARGE_INTEGER SyncQPCTime;
+    LARGE_INTEGER SyncGPUTime;
+    DXGI_FRAME_PRESENTATION_MODE CompositionMode;
+    UINT ApprovedPresentDuration;
+} DXGI_FRAME_STATISTICS_MEDIA;
+/*****************************************************************************
+ * IDXGISwapChainMedia interface
+ */
+#ifndef __IDXGISwapChainMedia_INTERFACE_DEFINED__
+#define __IDXGISwapChainMedia_INTERFACE_DEFINED__
+
+DEFINE_GUID(IID_IDXGISwapChainMedia, 0xdd95b90b, 0xf05f, 0x4f6a, 0xbd,0x65, 0x25,0xbf,0xb2,0x64,0xbd,0x84);
+#if defined(__cplusplus) && !defined(CINTERFACE)
+MIDL_INTERFACE("dd95b90b-f05f-4f6a-bd65-25bfb264bd84")
+IDXGISwapChainMedia : public IUnknown
+{
+    virtual HRESULT STDMETHODCALLTYPE GetFrameStatisticsMedia(
+        DXGI_FRAME_STATISTICS_MEDIA *pStats) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE SetPresentDuration(
+        UINT duration) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE CheckPresentDurationSupport(
+        UINT duration,
+        UINT *smallerduration,
+        UINT *largerduration) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(IDXGISwapChainMedia, 0xdd95b90b, 0xf05f, 0x4f6a, 0xbd,0x65, 0x25,0xbf,0xb2,0x64,0xbd,0x84)
+#endif
+#else
+typedef struct IDXGISwapChainMediaVtbl {
+    BEGIN_INTERFACE
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        IDXGISwapChainMedia* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        IDXGISwapChainMedia* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        IDXGISwapChainMedia* This);
+
+    /*** IDXGISwapChainMedia methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetFrameStatisticsMedia)(
+        IDXGISwapChainMedia* This,
+        DXGI_FRAME_STATISTICS_MEDIA *pStats);
+
+    HRESULT (STDMETHODCALLTYPE *SetPresentDuration)(
+        IDXGISwapChainMedia* This,
+        UINT duration);
+
+    HRESULT (STDMETHODCALLTYPE *CheckPresentDurationSupport)(
+        IDXGISwapChainMedia* This,
+        UINT duration,
+        UINT *smallerduration,
+        UINT *largerduration);
+
+    END_INTERFACE
+} IDXGISwapChainMediaVtbl;
+interface IDXGISwapChainMedia {
+    CONST_VTBL IDXGISwapChainMediaVtbl* lpVtbl;
+};
+
+#ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
+#define IDXGISwapChainMedia_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define IDXGISwapChainMedia_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define IDXGISwapChainMedia_Release(This) (This)->lpVtbl->Release(This)
+/*** IDXGISwapChainMedia methods ***/
+#define IDXGISwapChainMedia_GetFrameStatisticsMedia(This,pStats) (This)->lpVtbl->GetFrameStatisticsMedia(This,pStats)
+#define IDXGISwapChainMedia_SetPresentDuration(This,duration) (This)->lpVtbl->SetPresentDuration(This,duration)
+#define IDXGISwapChainMedia_CheckPresentDurationSupport(This,duration,smallerduration,largerduration) (This)->lpVtbl->CheckPresentDurationSupport(This,duration,smallerduration,largerduration)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT IDXGISwapChainMedia_QueryInterface(IDXGISwapChainMedia* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG IDXGISwapChainMedia_AddRef(IDXGISwapChainMedia* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG IDXGISwapChainMedia_Release(IDXGISwapChainMedia* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IDXGISwapChainMedia methods ***/
+static FORCEINLINE HRESULT IDXGISwapChainMedia_GetFrameStatisticsMedia(IDXGISwapChainMedia* This,DXGI_FRAME_STATISTICS_MEDIA *pStats) {
+    return This->lpVtbl->GetFrameStatisticsMedia(This,pStats);
+}
+static FORCEINLINE HRESULT IDXGISwapChainMedia_SetPresentDuration(IDXGISwapChainMedia* This,UINT duration) {
+    return This->lpVtbl->SetPresentDuration(This,duration);
+}
+static FORCEINLINE HRESULT IDXGISwapChainMedia_CheckPresentDurationSupport(IDXGISwapChainMedia* This,UINT duration,UINT *smallerduration,UINT *largerduration) {
+    return This->lpVtbl->CheckPresentDurationSupport(This,duration,smallerduration,largerduration);
+}
+#endif
+#endif
+
+#endif
+
+HRESULT STDMETHODCALLTYPE IDXGISwapChainMedia_GetFrameStatisticsMedia_Proxy(
+    IDXGISwapChainMedia* This,
+    DXGI_FRAME_STATISTICS_MEDIA *pStats);
+void __RPC_STUB IDXGISwapChainMedia_GetFrameStatisticsMedia_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IDXGISwapChainMedia_SetPresentDuration_Proxy(
+    IDXGISwapChainMedia* This,
+    UINT duration);
+void __RPC_STUB IDXGISwapChainMedia_SetPresentDuration_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IDXGISwapChainMedia_CheckPresentDurationSupport_Proxy(
+    IDXGISwapChainMedia* This,
+    UINT duration,
+    UINT *smallerduration,
+    UINT *largerduration);
+void __RPC_STUB IDXGISwapChainMedia_CheckPresentDurationSupport_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __IDXGISwapChainMedia_INTERFACE_DEFINED__ */
+
+typedef enum DXGI_OVERLAY_SUPPORT_FLAG {
+    DXGI_OVERLAY_SUPPORT_FLAG_DIRECT = 0x1,
+    DXGI_OVERLAY_SUPPORT_FLAG_SCALING = 0x2
+} DXGI_OVERLAY_SUPPORT_FLAG;
+/*****************************************************************************
+ * IDXGIDevice3 interface
+ */
+#ifndef __IDXGIDevice3_INTERFACE_DEFINED__
+#define __IDXGIDevice3_INTERFACE_DEFINED__
+
+DEFINE_GUID(IID_IDXGIDevice3, 0x6007896c, 0x3244, 0x4afd, 0xbf,0x18, 0xa6,0xd3,0xbe,0xda,0x50,0x23);
+#if defined(__cplusplus) && !defined(CINTERFACE)
+MIDL_INTERFACE("6007896c-3244-4afd-bf18-a6d3beda5023")
+IDXGIDevice3 : public IDXGIDevice2
+{
+    virtual void STDMETHODCALLTYPE Trim(
+        ) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(IDXGIDevice3, 0x6007896c, 0x3244, 0x4afd, 0xbf,0x18, 0xa6,0xd3,0xbe,0xda,0x50,0x23)
+#endif
+#else
+typedef struct IDXGIDevice3Vtbl {
+    BEGIN_INTERFACE
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        IDXGIDevice3* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        IDXGIDevice3* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        IDXGIDevice3* This);
+
+    /*** IDXGIObject methods ***/
+    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
+        IDXGIDevice3* This,
+        REFGUID guid,
+        UINT data_size,
+        const void *data);
+
+    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
+        IDXGIDevice3* This,
+        REFGUID guid,
+        const IUnknown *object);
+
+    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
+        IDXGIDevice3* This,
+        REFGUID guid,
+        UINT *data_size,
+        void *data);
+
+    HRESULT (STDMETHODCALLTYPE *GetParent)(
+        IDXGIDevice3* This,
+        REFIID riid,
+        void **parent);
+
+    /*** IDXGIDevice methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetAdapter)(
+        IDXGIDevice3* This,
+        IDXGIAdapter **adapter);
+
+    HRESULT (STDMETHODCALLTYPE *CreateSurface)(
+        IDXGIDevice3* This,
+        const DXGI_SURFACE_DESC *desc,
+        UINT surface_count,
+        DXGI_USAGE usage,
+        const DXGI_SHARED_RESOURCE *shared_resource,
+        IDXGISurface **surface);
+
+    HRESULT (STDMETHODCALLTYPE *QueryResourceResidency)(
+        IDXGIDevice3* This,
+        IUnknown *const *resources,
+        DXGI_RESIDENCY *residency,
+        UINT resource_count);
+
+    HRESULT (STDMETHODCALLTYPE *SetGPUThreadPriority)(
+        IDXGIDevice3* This,
+        INT priority);
+
+    HRESULT (STDMETHODCALLTYPE *GetGPUThreadPriority)(
+        IDXGIDevice3* This,
+        INT *priority);
+
+    /*** IDXGIDevice1 methods ***/
+    HRESULT (STDMETHODCALLTYPE *SetMaximumFrameLatency)(
+        IDXGIDevice3* This,
+        UINT MaxLatency);
+
+    HRESULT (STDMETHODCALLTYPE *GetMaximumFrameLatency)(
+        IDXGIDevice3* This,
+        UINT *pMaxLatency);
+
+    /*** IDXGIDevice2 methods ***/
+    HRESULT (STDMETHODCALLTYPE *OfferResources)(
+        IDXGIDevice3* This,
+        UINT NumResources,
+        IDXGIResource *const *ppResources,
+        DXGI_OFFER_RESOURCE_PRIORITY Priority);
+
+    HRESULT (STDMETHODCALLTYPE *ReclaimResources)(
+        IDXGIDevice3* This,
+        UINT NumResources,
+        IDXGIResource *const *ppResources,
+        WINBOOL *pDiscarded);
+
+    HRESULT (STDMETHODCALLTYPE *EnqueueSetEvent)(
+        IDXGIDevice3* This,
+        HANDLE hEvent);
+
+    /*** IDXGIDevice3 methods ***/
+    void (STDMETHODCALLTYPE *Trim)(
+        IDXGIDevice3* This);
+
+    END_INTERFACE
+} IDXGIDevice3Vtbl;
+interface IDXGIDevice3 {
+    CONST_VTBL IDXGIDevice3Vtbl* lpVtbl;
+};
+
+#ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
+#define IDXGIDevice3_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define IDXGIDevice3_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define IDXGIDevice3_Release(This) (This)->lpVtbl->Release(This)
+/*** IDXGIObject methods ***/
+#define IDXGIDevice3_SetPrivateData(This,guid,data_size,data) (This)->lpVtbl->SetPrivateData(This,guid,data_size,data)
+#define IDXGIDevice3_SetPrivateDataInterface(This,guid,object) (This)->lpVtbl->SetPrivateDataInterface(This,guid,object)
+#define IDXGIDevice3_GetPrivateData(This,guid,data_size,data) (This)->lpVtbl->GetPrivateData(This,guid,data_size,data)
+#define IDXGIDevice3_GetParent(This,riid,parent) (This)->lpVtbl->GetParent(This,riid,parent)
+/*** IDXGIDevice methods ***/
+#define IDXGIDevice3_GetAdapter(This,adapter) (This)->lpVtbl->GetAdapter(This,adapter)
+#define IDXGIDevice3_CreateSurface(This,desc,surface_count,usage,shared_resource,surface) (This)->lpVtbl->CreateSurface(This,desc,surface_count,usage,shared_resource,surface)
+#define IDXGIDevice3_QueryResourceResidency(This,resources,residency,resource_count) (This)->lpVtbl->QueryResourceResidency(This,resources,residency,resource_count)
+#define IDXGIDevice3_SetGPUThreadPriority(This,priority) (This)->lpVtbl->SetGPUThreadPriority(This,priority)
+#define IDXGIDevice3_GetGPUThreadPriority(This,priority) (This)->lpVtbl->GetGPUThreadPriority(This,priority)
+/*** IDXGIDevice1 methods ***/
+#define IDXGIDevice3_SetMaximumFrameLatency(This,MaxLatency) (This)->lpVtbl->SetMaximumFrameLatency(This,MaxLatency)
+#define IDXGIDevice3_GetMaximumFrameLatency(This,pMaxLatency) (This)->lpVtbl->GetMaximumFrameLatency(This,pMaxLatency)
+/*** IDXGIDevice2 methods ***/
+#define IDXGIDevice3_OfferResources(This,NumResources,ppResources,Priority) (This)->lpVtbl->OfferResources(This,NumResources,ppResources,Priority)
+#define IDXGIDevice3_ReclaimResources(This,NumResources,ppResources,pDiscarded) (This)->lpVtbl->ReclaimResources(This,NumResources,ppResources,pDiscarded)
+#define IDXGIDevice3_EnqueueSetEvent(This,hEvent) (This)->lpVtbl->EnqueueSetEvent(This,hEvent)
+/*** IDXGIDevice3 methods ***/
+#define IDXGIDevice3_Trim(This) (This)->lpVtbl->Trim(This)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT IDXGIDevice3_QueryInterface(IDXGIDevice3* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG IDXGIDevice3_AddRef(IDXGIDevice3* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG IDXGIDevice3_Release(IDXGIDevice3* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IDXGIObject methods ***/
+static FORCEINLINE HRESULT IDXGIDevice3_SetPrivateData(IDXGIDevice3* This,REFGUID guid,UINT data_size,const void *data) {
+    return This->lpVtbl->SetPrivateData(This,guid,data_size,data);
+}
+static FORCEINLINE HRESULT IDXGIDevice3_SetPrivateDataInterface(IDXGIDevice3* This,REFGUID guid,const IUnknown *object) {
+    return This->lpVtbl->SetPrivateDataInterface(This,guid,object);
+}
+static FORCEINLINE HRESULT IDXGIDevice3_GetPrivateData(IDXGIDevice3* This,REFGUID guid,UINT *data_size,void *data) {
+    return This->lpVtbl->GetPrivateData(This,guid,data_size,data);
+}
+static FORCEINLINE HRESULT IDXGIDevice3_GetParent(IDXGIDevice3* This,REFIID riid,void **parent) {
+    return This->lpVtbl->GetParent(This,riid,parent);
+}
+/*** IDXGIDevice methods ***/
+static FORCEINLINE HRESULT IDXGIDevice3_GetAdapter(IDXGIDevice3* This,IDXGIAdapter **adapter) {
+    return This->lpVtbl->GetAdapter(This,adapter);
+}
+static FORCEINLINE HRESULT IDXGIDevice3_CreateSurface(IDXGIDevice3* This,const DXGI_SURFACE_DESC *desc,UINT surface_count,DXGI_USAGE usage,const DXGI_SHARED_RESOURCE *shared_resource,IDXGISurface **surface) {
+    return This->lpVtbl->CreateSurface(This,desc,surface_count,usage,shared_resource,surface);
+}
+static FORCEINLINE HRESULT IDXGIDevice3_QueryResourceResidency(IDXGIDevice3* This,IUnknown *const *resources,DXGI_RESIDENCY *residency,UINT resource_count) {
+    return This->lpVtbl->QueryResourceResidency(This,resources,residency,resource_count);
+}
+static FORCEINLINE HRESULT IDXGIDevice3_SetGPUThreadPriority(IDXGIDevice3* This,INT priority) {
+    return This->lpVtbl->SetGPUThreadPriority(This,priority);
+}
+static FORCEINLINE HRESULT IDXGIDevice3_GetGPUThreadPriority(IDXGIDevice3* This,INT *priority) {
+    return This->lpVtbl->GetGPUThreadPriority(This,priority);
+}
+/*** IDXGIDevice1 methods ***/
+static FORCEINLINE HRESULT IDXGIDevice3_SetMaximumFrameLatency(IDXGIDevice3* This,UINT MaxLatency) {
+    return This->lpVtbl->SetMaximumFrameLatency(This,MaxLatency);
+}
+static FORCEINLINE HRESULT IDXGIDevice3_GetMaximumFrameLatency(IDXGIDevice3* This,UINT *pMaxLatency) {
+    return This->lpVtbl->GetMaximumFrameLatency(This,pMaxLatency);
+}
+/*** IDXGIDevice2 methods ***/
+static FORCEINLINE HRESULT IDXGIDevice3_OfferResources(IDXGIDevice3* This,UINT NumResources,IDXGIResource *const *ppResources,DXGI_OFFER_RESOURCE_PRIORITY Priority) {
+    return This->lpVtbl->OfferResources(This,NumResources,ppResources,Priority);
+}
+static FORCEINLINE HRESULT IDXGIDevice3_ReclaimResources(IDXGIDevice3* This,UINT NumResources,IDXGIResource *const *ppResources,WINBOOL *pDiscarded) {
+    return This->lpVtbl->ReclaimResources(This,NumResources,ppResources,pDiscarded);
+}
+static FORCEINLINE HRESULT IDXGIDevice3_EnqueueSetEvent(IDXGIDevice3* This,HANDLE hEvent) {
+    return This->lpVtbl->EnqueueSetEvent(This,hEvent);
+}
+/*** IDXGIDevice3 methods ***/
+static FORCEINLINE void IDXGIDevice3_Trim(IDXGIDevice3* This) {
+    This->lpVtbl->Trim(This);
+}
+#endif
+#endif
+
+#endif
+
+void STDMETHODCALLTYPE IDXGIDevice3_Trim_Proxy(
+    IDXGIDevice3* This);
+void __RPC_STUB IDXGIDevice3_Trim_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __IDXGIDevice3_INTERFACE_DEFINED__ */
+
+/*****************************************************************************
+ * IDXGIOutput2 interface
+ */
+#ifndef __IDXGIOutput2_INTERFACE_DEFINED__
+#define __IDXGIOutput2_INTERFACE_DEFINED__
+
+DEFINE_GUID(IID_IDXGIOutput2, 0x595e39d1, 0x2724, 0x4663, 0x99,0xb1, 0xda,0x96,0x9d,0xe2,0x83,0x64);
+#if defined(__cplusplus) && !defined(CINTERFACE)
+MIDL_INTERFACE("595e39d1-2724-4663-99b1-da969de28364")
+IDXGIOutput2 : public IDXGIOutput1
+{
+    virtual WINBOOL STDMETHODCALLTYPE SupportsOverlays(
+        ) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(IDXGIOutput2, 0x595e39d1, 0x2724, 0x4663, 0x99,0xb1, 0xda,0x96,0x9d,0xe2,0x83,0x64)
+#endif
+#else
+typedef struct IDXGIOutput2Vtbl {
+    BEGIN_INTERFACE
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        IDXGIOutput2* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        IDXGIOutput2* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        IDXGIOutput2* This);
+
+    /*** IDXGIObject methods ***/
+    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
+        IDXGIOutput2* This,
+        REFGUID guid,
+        UINT data_size,
+        const void *data);
+
+    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
+        IDXGIOutput2* This,
+        REFGUID guid,
+        const IUnknown *object);
+
+    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
+        IDXGIOutput2* This,
+        REFGUID guid,
+        UINT *data_size,
+        void *data);
+
+    HRESULT (STDMETHODCALLTYPE *GetParent)(
+        IDXGIOutput2* This,
+        REFIID riid,
+        void **parent);
+
+    /*** IDXGIOutput methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetDesc)(
+        IDXGIOutput2* This,
+        DXGI_OUTPUT_DESC *desc);
+
+    HRESULT (STDMETHODCALLTYPE *GetDisplayModeList)(
+        IDXGIOutput2* This,
+        DXGI_FORMAT format,
+        UINT flags,
+        UINT *mode_count,
+        DXGI_MODE_DESC *desc);
+
+    HRESULT (STDMETHODCALLTYPE *FindClosestMatchingMode)(
+        IDXGIOutput2* This,
+        const DXGI_MODE_DESC *mode,
+        DXGI_MODE_DESC *closest_match,
+        IUnknown *device);
+
+    HRESULT (STDMETHODCALLTYPE *WaitForVBlank)(
+        IDXGIOutput2* This);
+
+    HRESULT (STDMETHODCALLTYPE *TakeOwnership)(
+        IDXGIOutput2* This,
+        IUnknown *device,
+        WINBOOL exclusive);
+
+    void (STDMETHODCALLTYPE *ReleaseOwnership)(
+        IDXGIOutput2* This);
+
+    HRESULT (STDMETHODCALLTYPE *GetGammaControlCapabilities)(
+        IDXGIOutput2* This,
+        DXGI_GAMMA_CONTROL_CAPABILITIES *gamma_caps);
+
+    HRESULT (STDMETHODCALLTYPE *SetGammaControl)(
+        IDXGIOutput2* This,
+        const DXGI_GAMMA_CONTROL *gamma_control);
+
+    HRESULT (STDMETHODCALLTYPE *GetGammaControl)(
+        IDXGIOutput2* This,
+        DXGI_GAMMA_CONTROL *gamma_control);
+
+    HRESULT (STDMETHODCALLTYPE *SetDisplaySurface)(
+        IDXGIOutput2* This,
+        IDXGISurface *surface);
+
+    HRESULT (STDMETHODCALLTYPE *GetDisplaySurfaceData)(
+        IDXGIOutput2* This,
+        IDXGISurface *surface);
+
+    HRESULT (STDMETHODCALLTYPE *GetFrameStatistics)(
+        IDXGIOutput2* This,
+        DXGI_FRAME_STATISTICS *stats);
+
+    /*** IDXGIOutput1 methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetDisplayModeList1)(
+        IDXGIOutput2* This,
+        DXGI_FORMAT format,
+        UINT flags,
+        UINT *mode_count,
+        DXGI_MODE_DESC1 *desc);
+
+    HRESULT (STDMETHODCALLTYPE *FindClosestMatchingMode1)(
+        IDXGIOutput2* This,
+        const DXGI_MODE_DESC1 *mode,
+        DXGI_MODE_DESC1 *closest_match,
+        IUnknown *device);
+
+    HRESULT (STDMETHODCALLTYPE *GetDisplaySurfaceData1)(
+        IDXGIOutput2* This,
+        IDXGIResource *resource);
+
+    HRESULT (STDMETHODCALLTYPE *DuplicateOutput)(
+        IDXGIOutput2* This,
+        IUnknown *device,
+        IDXGIOutputDuplication **output);
+
+    /*** IDXGIOutput2 methods ***/
+    WINBOOL (STDMETHODCALLTYPE *SupportsOverlays)(
+        IDXGIOutput2* This);
+
+    END_INTERFACE
+} IDXGIOutput2Vtbl;
+interface IDXGIOutput2 {
+    CONST_VTBL IDXGIOutput2Vtbl* lpVtbl;
+};
+
+#ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
+#define IDXGIOutput2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define IDXGIOutput2_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define IDXGIOutput2_Release(This) (This)->lpVtbl->Release(This)
+/*** IDXGIObject methods ***/
+#define IDXGIOutput2_SetPrivateData(This,guid,data_size,data) (This)->lpVtbl->SetPrivateData(This,guid,data_size,data)
+#define IDXGIOutput2_SetPrivateDataInterface(This,guid,object) (This)->lpVtbl->SetPrivateDataInterface(This,guid,object)
+#define IDXGIOutput2_GetPrivateData(This,guid,data_size,data) (This)->lpVtbl->GetPrivateData(This,guid,data_size,data)
+#define IDXGIOutput2_GetParent(This,riid,parent) (This)->lpVtbl->GetParent(This,riid,parent)
+/*** IDXGIOutput methods ***/
+#define IDXGIOutput2_GetDesc(This,desc) (This)->lpVtbl->GetDesc(This,desc)
+#define IDXGIOutput2_GetDisplayModeList(This,format,flags,mode_count,desc) (This)->lpVtbl->GetDisplayModeList(This,format,flags,mode_count,desc)
+#define IDXGIOutput2_FindClosestMatchingMode(This,mode,closest_match,device) (This)->lpVtbl->FindClosestMatchingMode(This,mode,closest_match,device)
+#define IDXGIOutput2_WaitForVBlank(This) (This)->lpVtbl->WaitForVBlank(This)
+#define IDXGIOutput2_TakeOwnership(This,device,exclusive) (This)->lpVtbl->TakeOwnership(This,device,exclusive)
+#define IDXGIOutput2_ReleaseOwnership(This) (This)->lpVtbl->ReleaseOwnership(This)
+#define IDXGIOutput2_GetGammaControlCapabilities(This,gamma_caps) (This)->lpVtbl->GetGammaControlCapabilities(This,gamma_caps)
+#define IDXGIOutput2_SetGammaControl(This,gamma_control) (This)->lpVtbl->SetGammaControl(This,gamma_control)
+#define IDXGIOutput2_GetGammaControl(This,gamma_control) (This)->lpVtbl->GetGammaControl(This,gamma_control)
+#define IDXGIOutput2_SetDisplaySurface(This,surface) (This)->lpVtbl->SetDisplaySurface(This,surface)
+#define IDXGIOutput2_GetDisplaySurfaceData(This,surface) (This)->lpVtbl->GetDisplaySurfaceData(This,surface)
+#define IDXGIOutput2_GetFrameStatistics(This,stats) (This)->lpVtbl->GetFrameStatistics(This,stats)
+/*** IDXGIOutput1 methods ***/
+#define IDXGIOutput2_GetDisplayModeList1(This,format,flags,mode_count,desc) (This)->lpVtbl->GetDisplayModeList1(This,format,flags,mode_count,desc)
+#define IDXGIOutput2_FindClosestMatchingMode1(This,mode,closest_match,device) (This)->lpVtbl->FindClosestMatchingMode1(This,mode,closest_match,device)
+#define IDXGIOutput2_GetDisplaySurfaceData1(This,resource) (This)->lpVtbl->GetDisplaySurfaceData1(This,resource)
+#define IDXGIOutput2_DuplicateOutput(This,device,output) (This)->lpVtbl->DuplicateOutput(This,device,output)
+/*** IDXGIOutput2 methods ***/
+#define IDXGIOutput2_SupportsOverlays(This) (This)->lpVtbl->SupportsOverlays(This)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT IDXGIOutput2_QueryInterface(IDXGIOutput2* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG IDXGIOutput2_AddRef(IDXGIOutput2* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG IDXGIOutput2_Release(IDXGIOutput2* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IDXGIObject methods ***/
+static FORCEINLINE HRESULT IDXGIOutput2_SetPrivateData(IDXGIOutput2* This,REFGUID guid,UINT data_size,const void *data) {
+    return This->lpVtbl->SetPrivateData(This,guid,data_size,data);
+}
+static FORCEINLINE HRESULT IDXGIOutput2_SetPrivateDataInterface(IDXGIOutput2* This,REFGUID guid,const IUnknown *object) {
+    return This->lpVtbl->SetPrivateDataInterface(This,guid,object);
+}
+static FORCEINLINE HRESULT IDXGIOutput2_GetPrivateData(IDXGIOutput2* This,REFGUID guid,UINT *data_size,void *data) {
+    return This->lpVtbl->GetPrivateData(This,guid,data_size,data);
+}
+static FORCEINLINE HRESULT IDXGIOutput2_GetParent(IDXGIOutput2* This,REFIID riid,void **parent) {
+    return This->lpVtbl->GetParent(This,riid,parent);
+}
+/*** IDXGIOutput methods ***/
+static FORCEINLINE HRESULT IDXGIOutput2_GetDesc(IDXGIOutput2* This,DXGI_OUTPUT_DESC *desc) {
+    return This->lpVtbl->GetDesc(This,desc);
+}
+static FORCEINLINE HRESULT IDXGIOutput2_GetDisplayModeList(IDXGIOutput2* This,DXGI_FORMAT format,UINT flags,UINT *mode_count,DXGI_MODE_DESC *desc) {
+    return This->lpVtbl->GetDisplayModeList(This,format,flags,mode_count,desc);
+}
+static FORCEINLINE HRESULT IDXGIOutput2_FindClosestMatchingMode(IDXGIOutput2* This,const DXGI_MODE_DESC *mode,DXGI_MODE_DESC *closest_match,IUnknown *device) {
+    return This->lpVtbl->FindClosestMatchingMode(This,mode,closest_match,device);
+}
+static FORCEINLINE HRESULT IDXGIOutput2_WaitForVBlank(IDXGIOutput2* This) {
+    return This->lpVtbl->WaitForVBlank(This);
+}
+static FORCEINLINE HRESULT IDXGIOutput2_TakeOwnership(IDXGIOutput2* This,IUnknown *device,WINBOOL exclusive) {
+    return This->lpVtbl->TakeOwnership(This,device,exclusive);
+}
+static FORCEINLINE void IDXGIOutput2_ReleaseOwnership(IDXGIOutput2* This) {
+    This->lpVtbl->ReleaseOwnership(This);
+}
+static FORCEINLINE HRESULT IDXGIOutput2_GetGammaControlCapabilities(IDXGIOutput2* This,DXGI_GAMMA_CONTROL_CAPABILITIES *gamma_caps) {
+    return This->lpVtbl->GetGammaControlCapabilities(This,gamma_caps);
+}
+static FORCEINLINE HRESULT IDXGIOutput2_SetGammaControl(IDXGIOutput2* This,const DXGI_GAMMA_CONTROL *gamma_control) {
+    return This->lpVtbl->SetGammaControl(This,gamma_control);
+}
+static FORCEINLINE HRESULT IDXGIOutput2_GetGammaControl(IDXGIOutput2* This,DXGI_GAMMA_CONTROL *gamma_control) {
+    return This->lpVtbl->GetGammaControl(This,gamma_control);
+}
+static FORCEINLINE HRESULT IDXGIOutput2_SetDisplaySurface(IDXGIOutput2* This,IDXGISurface *surface) {
+    return This->lpVtbl->SetDisplaySurface(This,surface);
+}
+static FORCEINLINE HRESULT IDXGIOutput2_GetDisplaySurfaceData(IDXGIOutput2* This,IDXGISurface *surface) {
+    return This->lpVtbl->GetDisplaySurfaceData(This,surface);
+}
+static FORCEINLINE HRESULT IDXGIOutput2_GetFrameStatistics(IDXGIOutput2* This,DXGI_FRAME_STATISTICS *stats) {
+    return This->lpVtbl->GetFrameStatistics(This,stats);
+}
+/*** IDXGIOutput1 methods ***/
+static FORCEINLINE HRESULT IDXGIOutput2_GetDisplayModeList1(IDXGIOutput2* This,DXGI_FORMAT format,UINT flags,UINT *mode_count,DXGI_MODE_DESC1 *desc) {
+    return This->lpVtbl->GetDisplayModeList1(This,format,flags,mode_count,desc);
+}
+static FORCEINLINE HRESULT IDXGIOutput2_FindClosestMatchingMode1(IDXGIOutput2* This,const DXGI_MODE_DESC1 *mode,DXGI_MODE_DESC1 *closest_match,IUnknown *device) {
+    return This->lpVtbl->FindClosestMatchingMode1(This,mode,closest_match,device);
+}
+static FORCEINLINE HRESULT IDXGIOutput2_GetDisplaySurfaceData1(IDXGIOutput2* This,IDXGIResource *resource) {
+    return This->lpVtbl->GetDisplaySurfaceData1(This,resource);
+}
+static FORCEINLINE HRESULT IDXGIOutput2_DuplicateOutput(IDXGIOutput2* This,IUnknown *device,IDXGIOutputDuplication **output) {
+    return This->lpVtbl->DuplicateOutput(This,device,output);
+}
+/*** IDXGIOutput2 methods ***/
+static FORCEINLINE WINBOOL IDXGIOutput2_SupportsOverlays(IDXGIOutput2* This) {
+    return This->lpVtbl->SupportsOverlays(This);
+}
+#endif
+#endif
+
+#endif
+
+WINBOOL STDMETHODCALLTYPE IDXGIOutput2_SupportsOverlays_Proxy(
+    IDXGIOutput2* This);
+void __RPC_STUB IDXGIOutput2_SupportsOverlays_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __IDXGIOutput2_INTERFACE_DEFINED__ */
+
+/*****************************************************************************
+ * IDXGIOutput3 interface
+ */
+#ifndef __IDXGIOutput3_INTERFACE_DEFINED__
+#define __IDXGIOutput3_INTERFACE_DEFINED__
+
+DEFINE_GUID(IID_IDXGIOutput3, 0x8a6bb301, 0x7e7e, 0x41f4, 0xa8,0xe0, 0x5b,0x32,0xf7,0xf9,0x9b,0x18);
+#if defined(__cplusplus) && !defined(CINTERFACE)
+MIDL_INTERFACE("8a6bb301-7e7e-41f4-a8e0-5b32f7f99b18")
+IDXGIOutput3 : public IDXGIOutput2
+{
+    virtual HRESULT STDMETHODCALLTYPE CheckOverlaySupport(
+        DXGI_FORMAT format,
+        IUnknown *device,
+        UINT *flags) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(IDXGIOutput3, 0x8a6bb301, 0x7e7e, 0x41f4, 0xa8,0xe0, 0x5b,0x32,0xf7,0xf9,0x9b,0x18)
+#endif
+#else
+typedef struct IDXGIOutput3Vtbl {
+    BEGIN_INTERFACE
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        IDXGIOutput3* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        IDXGIOutput3* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        IDXGIOutput3* This);
+
+    /*** IDXGIObject methods ***/
+    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
+        IDXGIOutput3* This,
+        REFGUID guid,
+        UINT data_size,
+        const void *data);
+
+    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
+        IDXGIOutput3* This,
+        REFGUID guid,
+        const IUnknown *object);
+
+    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
+        IDXGIOutput3* This,
+        REFGUID guid,
+        UINT *data_size,
+        void *data);
+
+    HRESULT (STDMETHODCALLTYPE *GetParent)(
+        IDXGIOutput3* This,
+        REFIID riid,
+        void **parent);
+
+    /*** IDXGIOutput methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetDesc)(
+        IDXGIOutput3* This,
+        DXGI_OUTPUT_DESC *desc);
+
+    HRESULT (STDMETHODCALLTYPE *GetDisplayModeList)(
+        IDXGIOutput3* This,
+        DXGI_FORMAT format,
+        UINT flags,
+        UINT *mode_count,
+        DXGI_MODE_DESC *desc);
+
+    HRESULT (STDMETHODCALLTYPE *FindClosestMatchingMode)(
+        IDXGIOutput3* This,
+        const DXGI_MODE_DESC *mode,
+        DXGI_MODE_DESC *closest_match,
+        IUnknown *device);
+
+    HRESULT (STDMETHODCALLTYPE *WaitForVBlank)(
+        IDXGIOutput3* This);
+
+    HRESULT (STDMETHODCALLTYPE *TakeOwnership)(
+        IDXGIOutput3* This,
+        IUnknown *device,
+        WINBOOL exclusive);
+
+    void (STDMETHODCALLTYPE *ReleaseOwnership)(
+        IDXGIOutput3* This);
+
+    HRESULT (STDMETHODCALLTYPE *GetGammaControlCapabilities)(
+        IDXGIOutput3* This,
+        DXGI_GAMMA_CONTROL_CAPABILITIES *gamma_caps);
+
+    HRESULT (STDMETHODCALLTYPE *SetGammaControl)(
+        IDXGIOutput3* This,
+        const DXGI_GAMMA_CONTROL *gamma_control);
+
+    HRESULT (STDMETHODCALLTYPE *GetGammaControl)(
+        IDXGIOutput3* This,
+        DXGI_GAMMA_CONTROL *gamma_control);
+
+    HRESULT (STDMETHODCALLTYPE *SetDisplaySurface)(
+        IDXGIOutput3* This,
+        IDXGISurface *surface);
+
+    HRESULT (STDMETHODCALLTYPE *GetDisplaySurfaceData)(
+        IDXGIOutput3* This,
+        IDXGISurface *surface);
+
+    HRESULT (STDMETHODCALLTYPE *GetFrameStatistics)(
+        IDXGIOutput3* This,
+        DXGI_FRAME_STATISTICS *stats);
+
+    /*** IDXGIOutput1 methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetDisplayModeList1)(
+        IDXGIOutput3* This,
+        DXGI_FORMAT format,
+        UINT flags,
+        UINT *mode_count,
+        DXGI_MODE_DESC1 *desc);
+
+    HRESULT (STDMETHODCALLTYPE *FindClosestMatchingMode1)(
+        IDXGIOutput3* This,
+        const DXGI_MODE_DESC1 *mode,
+        DXGI_MODE_DESC1 *closest_match,
+        IUnknown *device);
+
+    HRESULT (STDMETHODCALLTYPE *GetDisplaySurfaceData1)(
+        IDXGIOutput3* This,
+        IDXGIResource *resource);
+
+    HRESULT (STDMETHODCALLTYPE *DuplicateOutput)(
+        IDXGIOutput3* This,
+        IUnknown *device,
+        IDXGIOutputDuplication **output);
+
+    /*** IDXGIOutput2 methods ***/
+    WINBOOL (STDMETHODCALLTYPE *SupportsOverlays)(
+        IDXGIOutput3* This);
+
+    /*** IDXGIOutput3 methods ***/
+    HRESULT (STDMETHODCALLTYPE *CheckOverlaySupport)(
+        IDXGIOutput3* This,
+        DXGI_FORMAT format,
+        IUnknown *device,
+        UINT *flags);
+
+    END_INTERFACE
+} IDXGIOutput3Vtbl;
+interface IDXGIOutput3 {
+    CONST_VTBL IDXGIOutput3Vtbl* lpVtbl;
+};
+
+#ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
+#define IDXGIOutput3_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define IDXGIOutput3_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define IDXGIOutput3_Release(This) (This)->lpVtbl->Release(This)
+/*** IDXGIObject methods ***/
+#define IDXGIOutput3_SetPrivateData(This,guid,data_size,data) (This)->lpVtbl->SetPrivateData(This,guid,data_size,data)
+#define IDXGIOutput3_SetPrivateDataInterface(This,guid,object) (This)->lpVtbl->SetPrivateDataInterface(This,guid,object)
+#define IDXGIOutput3_GetPrivateData(This,guid,data_size,data) (This)->lpVtbl->GetPrivateData(This,guid,data_size,data)
+#define IDXGIOutput3_GetParent(This,riid,parent) (This)->lpVtbl->GetParent(This,riid,parent)
+/*** IDXGIOutput methods ***/
+#define IDXGIOutput3_GetDesc(This,desc) (This)->lpVtbl->GetDesc(This,desc)
+#define IDXGIOutput3_GetDisplayModeList(This,format,flags,mode_count,desc) (This)->lpVtbl->GetDisplayModeList(This,format,flags,mode_count,desc)
+#define IDXGIOutput3_FindClosestMatchingMode(This,mode,closest_match,device) (This)->lpVtbl->FindClosestMatchingMode(This,mode,closest_match,device)
+#define IDXGIOutput3_WaitForVBlank(This) (This)->lpVtbl->WaitForVBlank(This)
+#define IDXGIOutput3_TakeOwnership(This,device,exclusive) (This)->lpVtbl->TakeOwnership(This,device,exclusive)
+#define IDXGIOutput3_ReleaseOwnership(This) (This)->lpVtbl->ReleaseOwnership(This)
+#define IDXGIOutput3_GetGammaControlCapabilities(This,gamma_caps) (This)->lpVtbl->GetGammaControlCapabilities(This,gamma_caps)
+#define IDXGIOutput3_SetGammaControl(This,gamma_control) (This)->lpVtbl->SetGammaControl(This,gamma_control)
+#define IDXGIOutput3_GetGammaControl(This,gamma_control) (This)->lpVtbl->GetGammaControl(This,gamma_control)
+#define IDXGIOutput3_SetDisplaySurface(This,surface) (This)->lpVtbl->SetDisplaySurface(This,surface)
+#define IDXGIOutput3_GetDisplaySurfaceData(This,surface) (This)->lpVtbl->GetDisplaySurfaceData(This,surface)
+#define IDXGIOutput3_GetFrameStatistics(This,stats) (This)->lpVtbl->GetFrameStatistics(This,stats)
+/*** IDXGIOutput1 methods ***/
+#define IDXGIOutput3_GetDisplayModeList1(This,format,flags,mode_count,desc) (This)->lpVtbl->GetDisplayModeList1(This,format,flags,mode_count,desc)
+#define IDXGIOutput3_FindClosestMatchingMode1(This,mode,closest_match,device) (This)->lpVtbl->FindClosestMatchingMode1(This,mode,closest_match,device)
+#define IDXGIOutput3_GetDisplaySurfaceData1(This,resource) (This)->lpVtbl->GetDisplaySurfaceData1(This,resource)
+#define IDXGIOutput3_DuplicateOutput(This,device,output) (This)->lpVtbl->DuplicateOutput(This,device,output)
+/*** IDXGIOutput2 methods ***/
+#define IDXGIOutput3_SupportsOverlays(This) (This)->lpVtbl->SupportsOverlays(This)
+/*** IDXGIOutput3 methods ***/
+#define IDXGIOutput3_CheckOverlaySupport(This,format,device,flags) (This)->lpVtbl->CheckOverlaySupport(This,format,device,flags)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT IDXGIOutput3_QueryInterface(IDXGIOutput3* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG IDXGIOutput3_AddRef(IDXGIOutput3* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG IDXGIOutput3_Release(IDXGIOutput3* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IDXGIObject methods ***/
+static FORCEINLINE HRESULT IDXGIOutput3_SetPrivateData(IDXGIOutput3* This,REFGUID guid,UINT data_size,const void *data) {
+    return This->lpVtbl->SetPrivateData(This,guid,data_size,data);
+}
+static FORCEINLINE HRESULT IDXGIOutput3_SetPrivateDataInterface(IDXGIOutput3* This,REFGUID guid,const IUnknown *object) {
+    return This->lpVtbl->SetPrivateDataInterface(This,guid,object);
+}
+static FORCEINLINE HRESULT IDXGIOutput3_GetPrivateData(IDXGIOutput3* This,REFGUID guid,UINT *data_size,void *data) {
+    return This->lpVtbl->GetPrivateData(This,guid,data_size,data);
+}
+static FORCEINLINE HRESULT IDXGIOutput3_GetParent(IDXGIOutput3* This,REFIID riid,void **parent) {
+    return This->lpVtbl->GetParent(This,riid,parent);
+}
+/*** IDXGIOutput methods ***/
+static FORCEINLINE HRESULT IDXGIOutput3_GetDesc(IDXGIOutput3* This,DXGI_OUTPUT_DESC *desc) {
+    return This->lpVtbl->GetDesc(This,desc);
+}
+static FORCEINLINE HRESULT IDXGIOutput3_GetDisplayModeList(IDXGIOutput3* This,DXGI_FORMAT format,UINT flags,UINT *mode_count,DXGI_MODE_DESC *desc) {
+    return This->lpVtbl->GetDisplayModeList(This,format,flags,mode_count,desc);
+}
+static FORCEINLINE HRESULT IDXGIOutput3_FindClosestMatchingMode(IDXGIOutput3* This,const DXGI_MODE_DESC *mode,DXGI_MODE_DESC *closest_match,IUnknown *device) {
+    return This->lpVtbl->FindClosestMatchingMode(This,mode,closest_match,device);
+}
+static FORCEINLINE HRESULT IDXGIOutput3_WaitForVBlank(IDXGIOutput3* This) {
+    return This->lpVtbl->WaitForVBlank(This);
+}
+static FORCEINLINE HRESULT IDXGIOutput3_TakeOwnership(IDXGIOutput3* This,IUnknown *device,WINBOOL exclusive) {
+    return This->lpVtbl->TakeOwnership(This,device,exclusive);
+}
+static FORCEINLINE void IDXGIOutput3_ReleaseOwnership(IDXGIOutput3* This) {
+    This->lpVtbl->ReleaseOwnership(This);
+}
+static FORCEINLINE HRESULT IDXGIOutput3_GetGammaControlCapabilities(IDXGIOutput3* This,DXGI_GAMMA_CONTROL_CAPABILITIES *gamma_caps) {
+    return This->lpVtbl->GetGammaControlCapabilities(This,gamma_caps);
+}
+static FORCEINLINE HRESULT IDXGIOutput3_SetGammaControl(IDXGIOutput3* This,const DXGI_GAMMA_CONTROL *gamma_control) {
+    return This->lpVtbl->SetGammaControl(This,gamma_control);
+}
+static FORCEINLINE HRESULT IDXGIOutput3_GetGammaControl(IDXGIOutput3* This,DXGI_GAMMA_CONTROL *gamma_control) {
+    return This->lpVtbl->GetGammaControl(This,gamma_control);
+}
+static FORCEINLINE HRESULT IDXGIOutput3_SetDisplaySurface(IDXGIOutput3* This,IDXGISurface *surface) {
+    return This->lpVtbl->SetDisplaySurface(This,surface);
+}
+static FORCEINLINE HRESULT IDXGIOutput3_GetDisplaySurfaceData(IDXGIOutput3* This,IDXGISurface *surface) {
+    return This->lpVtbl->GetDisplaySurfaceData(This,surface);
+}
+static FORCEINLINE HRESULT IDXGIOutput3_GetFrameStatistics(IDXGIOutput3* This,DXGI_FRAME_STATISTICS *stats) {
+    return This->lpVtbl->GetFrameStatistics(This,stats);
+}
+/*** IDXGIOutput1 methods ***/
+static FORCEINLINE HRESULT IDXGIOutput3_GetDisplayModeList1(IDXGIOutput3* This,DXGI_FORMAT format,UINT flags,UINT *mode_count,DXGI_MODE_DESC1 *desc) {
+    return This->lpVtbl->GetDisplayModeList1(This,format,flags,mode_count,desc);
+}
+static FORCEINLINE HRESULT IDXGIOutput3_FindClosestMatchingMode1(IDXGIOutput3* This,const DXGI_MODE_DESC1 *mode,DXGI_MODE_DESC1 *closest_match,IUnknown *device) {
+    return This->lpVtbl->FindClosestMatchingMode1(This,mode,closest_match,device);
+}
+static FORCEINLINE HRESULT IDXGIOutput3_GetDisplaySurfaceData1(IDXGIOutput3* This,IDXGIResource *resource) {
+    return This->lpVtbl->GetDisplaySurfaceData1(This,resource);
+}
+static FORCEINLINE HRESULT IDXGIOutput3_DuplicateOutput(IDXGIOutput3* This,IUnknown *device,IDXGIOutputDuplication **output) {
+    return This->lpVtbl->DuplicateOutput(This,device,output);
+}
+/*** IDXGIOutput2 methods ***/
+static FORCEINLINE WINBOOL IDXGIOutput3_SupportsOverlays(IDXGIOutput3* This) {
+    return This->lpVtbl->SupportsOverlays(This);
+}
+/*** IDXGIOutput3 methods ***/
+static FORCEINLINE HRESULT IDXGIOutput3_CheckOverlaySupport(IDXGIOutput3* This,DXGI_FORMAT format,IUnknown *device,UINT *flags) {
+    return This->lpVtbl->CheckOverlaySupport(This,format,device,flags);
+}
+#endif
+#endif
+
+#endif
+
+HRESULT STDMETHODCALLTYPE IDXGIOutput3_CheckOverlaySupport_Proxy(
+    IDXGIOutput3* This,
+    DXGI_FORMAT format,
+    IUnknown *device,
+    UINT *flags);
+void __RPC_STUB IDXGIOutput3_CheckOverlaySupport_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __IDXGIOutput3_INTERFACE_DEFINED__ */
+
+HRESULT __stdcall  CreateDXGIFactory2(UINT Flags,REFIID riid,void **factory);
+
+typedef struct DXGI_MATRIX_3X2_F {
+    float _11;
+    float _12;
+    float _21;
+    float _22;
+    float _31;
+    float _32;
+} DXGI_MATRIX_3X2_F;
+/*****************************************************************************
+ * IDXGISwapChain2 interface
+ */
+#ifndef __IDXGISwapChain2_INTERFACE_DEFINED__
+#define __IDXGISwapChain2_INTERFACE_DEFINED__
+
+DEFINE_GUID(IID_IDXGISwapChain2, 0xa8be2ac4, 0x199f, 0x4946, 0xb3,0x31, 0x79,0x59,0x9f,0xb9,0x8d,0xe7);
+#if defined(__cplusplus) && !defined(CINTERFACE)
+MIDL_INTERFACE("a8be2ac4-199f-4946-b331-79599fb98de7")
+IDXGISwapChain2 : public IDXGISwapChain1
+{
+    virtual HRESULT STDMETHODCALLTYPE SetSourceSize(
+        UINT width,
+        UINT height) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetSourceSize(
+        UINT *width,
+        UINT *height) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE SetMaximumFrameLatency(
+        UINT max_latency) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetMaximumFrameLatency(
+        UINT *max_latency) = 0;
+
+    virtual HANDLE STDMETHODCALLTYPE GetFrameLatencyWaitableObject(
+        ) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE SetMatrixTransform(
+        const DXGI_MATRIX_3X2_F *matrix) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE GetMatrixTransform(
+        DXGI_MATRIX_3X2_F *matrix) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(IDXGISwapChain2, 0xa8be2ac4, 0x199f, 0x4946, 0xb3,0x31, 0x79,0x59,0x9f,0xb9,0x8d,0xe7)
+#endif
+#else
+typedef struct IDXGISwapChain2Vtbl {
+    BEGIN_INTERFACE
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        IDXGISwapChain2* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        IDXGISwapChain2* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        IDXGISwapChain2* This);
+
+    /*** IDXGIObject methods ***/
+    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
+        IDXGISwapChain2* This,
+        REFGUID guid,
+        UINT data_size,
+        const void *data);
+
+    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
+        IDXGISwapChain2* This,
+        REFGUID guid,
+        const IUnknown *object);
+
+    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
+        IDXGISwapChain2* This,
+        REFGUID guid,
+        UINT *data_size,
+        void *data);
+
+    HRESULT (STDMETHODCALLTYPE *GetParent)(
+        IDXGISwapChain2* This,
+        REFIID riid,
+        void **parent);
+
+    /*** IDXGIDeviceSubObject methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetDevice)(
+        IDXGISwapChain2* This,
+        REFIID riid,
+        void **device);
+
+    /*** IDXGISwapChain methods ***/
+    HRESULT (STDMETHODCALLTYPE *Present)(
+        IDXGISwapChain2* This,
+        UINT sync_interval,
+        UINT flags);
+
+    HRESULT (STDMETHODCALLTYPE *GetBuffer)(
+        IDXGISwapChain2* This,
+        UINT buffer_idx,
+        REFIID riid,
+        void **surface);
+
+    HRESULT (STDMETHODCALLTYPE *SetFullscreenState)(
+        IDXGISwapChain2* This,
+        WINBOOL fullscreen,
+        IDXGIOutput *target);
+
+    HRESULT (STDMETHODCALLTYPE *GetFullscreenState)(
+        IDXGISwapChain2* This,
+        WINBOOL *fullscreen,
+        IDXGIOutput **target);
+
+    HRESULT (STDMETHODCALLTYPE *GetDesc)(
+        IDXGISwapChain2* This,
+        DXGI_SWAP_CHAIN_DESC *desc);
+
+    HRESULT (STDMETHODCALLTYPE *ResizeBuffers)(
+        IDXGISwapChain2* This,
+        UINT buffer_count,
+        UINT width,
+        UINT height,
+        DXGI_FORMAT format,
+        UINT flags);
+
+    HRESULT (STDMETHODCALLTYPE *ResizeTarget)(
+        IDXGISwapChain2* This,
+        const DXGI_MODE_DESC *target_mode_desc);
+
+    HRESULT (STDMETHODCALLTYPE *GetContainingOutput)(
+        IDXGISwapChain2* This,
+        IDXGIOutput **output);
+
+    HRESULT (STDMETHODCALLTYPE *GetFrameStatistics)(
+        IDXGISwapChain2* This,
+        DXGI_FRAME_STATISTICS *stats);
+
+    HRESULT (STDMETHODCALLTYPE *GetLastPresentCount)(
+        IDXGISwapChain2* This,
+        UINT *last_present_count);
+
+    /*** IDXGISwapChain1 methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetDesc1)(
+        IDXGISwapChain2* This,
+        DXGI_SWAP_CHAIN_DESC1 *pDesc);
+
+    HRESULT (STDMETHODCALLTYPE *GetFullscreenDesc)(
+        IDXGISwapChain2* This,
+        DXGI_SWAP_CHAIN_FULLSCREEN_DESC *pDesc);
+
+    HRESULT (STDMETHODCALLTYPE *GetHwnd)(
+        IDXGISwapChain2* This,
+        HWND *pHwnd);
+
+    HRESULT (STDMETHODCALLTYPE *GetCoreWindow)(
+        IDXGISwapChain2* This,
+        REFIID refiid,
+        void **ppUnk);
+
+    HRESULT (STDMETHODCALLTYPE *Present1)(
+        IDXGISwapChain2* This,
+        UINT SyncInterval,
+        UINT PresentFlags,
+        const DXGI_PRESENT_PARAMETERS *pPresentParameters);
+
+    WINBOOL (STDMETHODCALLTYPE *IsTemporaryMonoSupported)(
+        IDXGISwapChain2* This);
+
+    HRESULT (STDMETHODCALLTYPE *GetRestrictToOutput)(
+        IDXGISwapChain2* This,
+        IDXGIOutput **ppRestrictToOutput);
+
+    HRESULT (STDMETHODCALLTYPE *SetBackgroundColor)(
+        IDXGISwapChain2* This,
+        const DXGI_RGBA *pColor);
+
+    HRESULT (STDMETHODCALLTYPE *GetBackgroundColor)(
+        IDXGISwapChain2* This,
+        DXGI_RGBA *pColor);
+
+    HRESULT (STDMETHODCALLTYPE *SetRotation)(
+        IDXGISwapChain2* This,
+        DXGI_MODE_ROTATION Rotation);
+
+    HRESULT (STDMETHODCALLTYPE *GetRotation)(
+        IDXGISwapChain2* This,
+        DXGI_MODE_ROTATION *pRotation);
+
+    /*** IDXGISwapChain2 methods ***/
+    HRESULT (STDMETHODCALLTYPE *SetSourceSize)(
+        IDXGISwapChain2* This,
+        UINT width,
+        UINT height);
+
+    HRESULT (STDMETHODCALLTYPE *GetSourceSize)(
+        IDXGISwapChain2* This,
+        UINT *width,
+        UINT *height);
+
+    HRESULT (STDMETHODCALLTYPE *SetMaximumFrameLatency)(
+        IDXGISwapChain2* This,
+        UINT max_latency);
+
+    HRESULT (STDMETHODCALLTYPE *GetMaximumFrameLatency)(
+        IDXGISwapChain2* This,
+        UINT *max_latency);
+
+    HANDLE (STDMETHODCALLTYPE *GetFrameLatencyWaitableObject)(
+        IDXGISwapChain2* This);
+
+    HRESULT (STDMETHODCALLTYPE *SetMatrixTransform)(
+        IDXGISwapChain2* This,
+        const DXGI_MATRIX_3X2_F *matrix);
+
+    HRESULT (STDMETHODCALLTYPE *GetMatrixTransform)(
+        IDXGISwapChain2* This,
+        DXGI_MATRIX_3X2_F *matrix);
+
+    END_INTERFACE
+} IDXGISwapChain2Vtbl;
+interface IDXGISwapChain2 {
+    CONST_VTBL IDXGISwapChain2Vtbl* lpVtbl;
+};
+
+#ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
+#define IDXGISwapChain2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define IDXGISwapChain2_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define IDXGISwapChain2_Release(This) (This)->lpVtbl->Release(This)
+/*** IDXGIObject methods ***/
+#define IDXGISwapChain2_SetPrivateData(This,guid,data_size,data) (This)->lpVtbl->SetPrivateData(This,guid,data_size,data)
+#define IDXGISwapChain2_SetPrivateDataInterface(This,guid,object) (This)->lpVtbl->SetPrivateDataInterface(This,guid,object)
+#define IDXGISwapChain2_GetPrivateData(This,guid,data_size,data) (This)->lpVtbl->GetPrivateData(This,guid,data_size,data)
+#define IDXGISwapChain2_GetParent(This,riid,parent) (This)->lpVtbl->GetParent(This,riid,parent)
+/*** IDXGIDeviceSubObject methods ***/
+#define IDXGISwapChain2_GetDevice(This,riid,device) (This)->lpVtbl->GetDevice(This,riid,device)
+/*** IDXGISwapChain methods ***/
+#define IDXGISwapChain2_Present(This,sync_interval,flags) (This)->lpVtbl->Present(This,sync_interval,flags)
+#define IDXGISwapChain2_GetBuffer(This,buffer_idx,riid,surface) (This)->lpVtbl->GetBuffer(This,buffer_idx,riid,surface)
+#define IDXGISwapChain2_SetFullscreenState(This,fullscreen,target) (This)->lpVtbl->SetFullscreenState(This,fullscreen,target)
+#define IDXGISwapChain2_GetFullscreenState(This,fullscreen,target) (This)->lpVtbl->GetFullscreenState(This,fullscreen,target)
+#define IDXGISwapChain2_GetDesc(This,desc) (This)->lpVtbl->GetDesc(This,desc)
+#define IDXGISwapChain2_ResizeBuffers(This,buffer_count,width,height,format,flags) (This)->lpVtbl->ResizeBuffers(This,buffer_count,width,height,format,flags)
+#define IDXGISwapChain2_ResizeTarget(This,target_mode_desc) (This)->lpVtbl->ResizeTarget(This,target_mode_desc)
+#define IDXGISwapChain2_GetContainingOutput(This,output) (This)->lpVtbl->GetContainingOutput(This,output)
+#define IDXGISwapChain2_GetFrameStatistics(This,stats) (This)->lpVtbl->GetFrameStatistics(This,stats)
+#define IDXGISwapChain2_GetLastPresentCount(This,last_present_count) (This)->lpVtbl->GetLastPresentCount(This,last_present_count)
+/*** IDXGISwapChain1 methods ***/
+#define IDXGISwapChain2_GetDesc1(This,pDesc) (This)->lpVtbl->GetDesc1(This,pDesc)
+#define IDXGISwapChain2_GetFullscreenDesc(This,pDesc) (This)->lpVtbl->GetFullscreenDesc(This,pDesc)
+#define IDXGISwapChain2_GetHwnd(This,pHwnd) (This)->lpVtbl->GetHwnd(This,pHwnd)
+#define IDXGISwapChain2_GetCoreWindow(This,refiid,ppUnk) (This)->lpVtbl->GetCoreWindow(This,refiid,ppUnk)
+#define IDXGISwapChain2_Present1(This,SyncInterval,PresentFlags,pPresentParameters) (This)->lpVtbl->Present1(This,SyncInterval,PresentFlags,pPresentParameters)
+#define IDXGISwapChain2_IsTemporaryMonoSupported(This) (This)->lpVtbl->IsTemporaryMonoSupported(This)
+#define IDXGISwapChain2_GetRestrictToOutput(This,ppRestrictToOutput) (This)->lpVtbl->GetRestrictToOutput(This,ppRestrictToOutput)
+#define IDXGISwapChain2_SetBackgroundColor(This,pColor) (This)->lpVtbl->SetBackgroundColor(This,pColor)
+#define IDXGISwapChain2_GetBackgroundColor(This,pColor) (This)->lpVtbl->GetBackgroundColor(This,pColor)
+#define IDXGISwapChain2_SetRotation(This,Rotation) (This)->lpVtbl->SetRotation(This,Rotation)
+#define IDXGISwapChain2_GetRotation(This,pRotation) (This)->lpVtbl->GetRotation(This,pRotation)
+/*** IDXGISwapChain2 methods ***/
+#define IDXGISwapChain2_SetSourceSize(This,width,height) (This)->lpVtbl->SetSourceSize(This,width,height)
+#define IDXGISwapChain2_GetSourceSize(This,width,height) (This)->lpVtbl->GetSourceSize(This,width,height)
+#define IDXGISwapChain2_SetMaximumFrameLatency(This,max_latency) (This)->lpVtbl->SetMaximumFrameLatency(This,max_latency)
+#define IDXGISwapChain2_GetMaximumFrameLatency(This,max_latency) (This)->lpVtbl->GetMaximumFrameLatency(This,max_latency)
+#define IDXGISwapChain2_GetFrameLatencyWaitableObject(This) (This)->lpVtbl->GetFrameLatencyWaitableObject(This)
+#define IDXGISwapChain2_SetMatrixTransform(This,matrix) (This)->lpVtbl->SetMatrixTransform(This,matrix)
+#define IDXGISwapChain2_GetMatrixTransform(This,matrix) (This)->lpVtbl->GetMatrixTransform(This,matrix)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT IDXGISwapChain2_QueryInterface(IDXGISwapChain2* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG IDXGISwapChain2_AddRef(IDXGISwapChain2* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG IDXGISwapChain2_Release(IDXGISwapChain2* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IDXGIObject methods ***/
+static FORCEINLINE HRESULT IDXGISwapChain2_SetPrivateData(IDXGISwapChain2* This,REFGUID guid,UINT data_size,const void *data) {
+    return This->lpVtbl->SetPrivateData(This,guid,data_size,data);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_SetPrivateDataInterface(IDXGISwapChain2* This,REFGUID guid,const IUnknown *object) {
+    return This->lpVtbl->SetPrivateDataInterface(This,guid,object);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_GetPrivateData(IDXGISwapChain2* This,REFGUID guid,UINT *data_size,void *data) {
+    return This->lpVtbl->GetPrivateData(This,guid,data_size,data);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_GetParent(IDXGISwapChain2* This,REFIID riid,void **parent) {
+    return This->lpVtbl->GetParent(This,riid,parent);
+}
+/*** IDXGIDeviceSubObject methods ***/
+static FORCEINLINE HRESULT IDXGISwapChain2_GetDevice(IDXGISwapChain2* This,REFIID riid,void **device) {
+    return This->lpVtbl->GetDevice(This,riid,device);
+}
+/*** IDXGISwapChain methods ***/
+static FORCEINLINE HRESULT IDXGISwapChain2_Present(IDXGISwapChain2* This,UINT sync_interval,UINT flags) {
+    return This->lpVtbl->Present(This,sync_interval,flags);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_GetBuffer(IDXGISwapChain2* This,UINT buffer_idx,REFIID riid,void **surface) {
+    return This->lpVtbl->GetBuffer(This,buffer_idx,riid,surface);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_SetFullscreenState(IDXGISwapChain2* This,WINBOOL fullscreen,IDXGIOutput *target) {
+    return This->lpVtbl->SetFullscreenState(This,fullscreen,target);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_GetFullscreenState(IDXGISwapChain2* This,WINBOOL *fullscreen,IDXGIOutput **target) {
+    return This->lpVtbl->GetFullscreenState(This,fullscreen,target);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_GetDesc(IDXGISwapChain2* This,DXGI_SWAP_CHAIN_DESC *desc) {
+    return This->lpVtbl->GetDesc(This,desc);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_ResizeBuffers(IDXGISwapChain2* This,UINT buffer_count,UINT width,UINT height,DXGI_FORMAT format,UINT flags) {
+    return This->lpVtbl->ResizeBuffers(This,buffer_count,width,height,format,flags);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_ResizeTarget(IDXGISwapChain2* This,const DXGI_MODE_DESC *target_mode_desc) {
+    return This->lpVtbl->ResizeTarget(This,target_mode_desc);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_GetContainingOutput(IDXGISwapChain2* This,IDXGIOutput **output) {
+    return This->lpVtbl->GetContainingOutput(This,output);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_GetFrameStatistics(IDXGISwapChain2* This,DXGI_FRAME_STATISTICS *stats) {
+    return This->lpVtbl->GetFrameStatistics(This,stats);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_GetLastPresentCount(IDXGISwapChain2* This,UINT *last_present_count) {
+    return This->lpVtbl->GetLastPresentCount(This,last_present_count);
+}
+/*** IDXGISwapChain1 methods ***/
+static FORCEINLINE HRESULT IDXGISwapChain2_GetDesc1(IDXGISwapChain2* This,DXGI_SWAP_CHAIN_DESC1 *pDesc) {
+    return This->lpVtbl->GetDesc1(This,pDesc);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_GetFullscreenDesc(IDXGISwapChain2* This,DXGI_SWAP_CHAIN_FULLSCREEN_DESC *pDesc) {
+    return This->lpVtbl->GetFullscreenDesc(This,pDesc);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_GetHwnd(IDXGISwapChain2* This,HWND *pHwnd) {
+    return This->lpVtbl->GetHwnd(This,pHwnd);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_GetCoreWindow(IDXGISwapChain2* This,REFIID refiid,void **ppUnk) {
+    return This->lpVtbl->GetCoreWindow(This,refiid,ppUnk);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_Present1(IDXGISwapChain2* This,UINT SyncInterval,UINT PresentFlags,const DXGI_PRESENT_PARAMETERS *pPresentParameters) {
+    return This->lpVtbl->Present1(This,SyncInterval,PresentFlags,pPresentParameters);
+}
+static FORCEINLINE WINBOOL IDXGISwapChain2_IsTemporaryMonoSupported(IDXGISwapChain2* This) {
+    return This->lpVtbl->IsTemporaryMonoSupported(This);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_GetRestrictToOutput(IDXGISwapChain2* This,IDXGIOutput **ppRestrictToOutput) {
+    return This->lpVtbl->GetRestrictToOutput(This,ppRestrictToOutput);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_SetBackgroundColor(IDXGISwapChain2* This,const DXGI_RGBA *pColor) {
+    return This->lpVtbl->SetBackgroundColor(This,pColor);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_GetBackgroundColor(IDXGISwapChain2* This,DXGI_RGBA *pColor) {
+    return This->lpVtbl->GetBackgroundColor(This,pColor);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_SetRotation(IDXGISwapChain2* This,DXGI_MODE_ROTATION Rotation) {
+    return This->lpVtbl->SetRotation(This,Rotation);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_GetRotation(IDXGISwapChain2* This,DXGI_MODE_ROTATION *pRotation) {
+    return This->lpVtbl->GetRotation(This,pRotation);
+}
+/*** IDXGISwapChain2 methods ***/
+static FORCEINLINE HRESULT IDXGISwapChain2_SetSourceSize(IDXGISwapChain2* This,UINT width,UINT height) {
+    return This->lpVtbl->SetSourceSize(This,width,height);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_GetSourceSize(IDXGISwapChain2* This,UINT *width,UINT *height) {
+    return This->lpVtbl->GetSourceSize(This,width,height);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_SetMaximumFrameLatency(IDXGISwapChain2* This,UINT max_latency) {
+    return This->lpVtbl->SetMaximumFrameLatency(This,max_latency);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_GetMaximumFrameLatency(IDXGISwapChain2* This,UINT *max_latency) {
+    return This->lpVtbl->GetMaximumFrameLatency(This,max_latency);
+}
+static FORCEINLINE HANDLE IDXGISwapChain2_GetFrameLatencyWaitableObject(IDXGISwapChain2* This) {
+    return This->lpVtbl->GetFrameLatencyWaitableObject(This);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_SetMatrixTransform(IDXGISwapChain2* This,const DXGI_MATRIX_3X2_F *matrix) {
+    return This->lpVtbl->SetMatrixTransform(This,matrix);
+}
+static FORCEINLINE HRESULT IDXGISwapChain2_GetMatrixTransform(IDXGISwapChain2* This,DXGI_MATRIX_3X2_F *matrix) {
+    return This->lpVtbl->GetMatrixTransform(This,matrix);
+}
+#endif
+#endif
+
+#endif
+
+HRESULT STDMETHODCALLTYPE IDXGISwapChain2_SetSourceSize_Proxy(
+    IDXGISwapChain2* This,
+    UINT width,
+    UINT height);
+void __RPC_STUB IDXGISwapChain2_SetSourceSize_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IDXGISwapChain2_GetSourceSize_Proxy(
+    IDXGISwapChain2* This,
+    UINT *width,
+    UINT *height);
+void __RPC_STUB IDXGISwapChain2_GetSourceSize_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IDXGISwapChain2_SetMaximumFrameLatency_Proxy(
+    IDXGISwapChain2* This,
+    UINT max_latency);
+void __RPC_STUB IDXGISwapChain2_SetMaximumFrameLatency_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IDXGISwapChain2_GetMaximumFrameLatency_Proxy(
+    IDXGISwapChain2* This,
+    UINT *max_latency);
+void __RPC_STUB IDXGISwapChain2_GetMaximumFrameLatency_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HANDLE STDMETHODCALLTYPE IDXGISwapChain2_GetFrameLatencyWaitableObject_Proxy(
+    IDXGISwapChain2* This);
+void __RPC_STUB IDXGISwapChain2_GetFrameLatencyWaitableObject_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IDXGISwapChain2_SetMatrixTransform_Proxy(
+    IDXGISwapChain2* This,
+    const DXGI_MATRIX_3X2_F *matrix);
+void __RPC_STUB IDXGISwapChain2_SetMatrixTransform_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IDXGISwapChain2_GetMatrixTransform_Proxy(
+    IDXGISwapChain2* This,
+    DXGI_MATRIX_3X2_F *matrix);
+void __RPC_STUB IDXGISwapChain2_GetMatrixTransform_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __IDXGISwapChain2_INTERFACE_DEFINED__ */
+
+/*****************************************************************************
+ * IDXGIFactory3 interface
+ */
+#ifndef __IDXGIFactory3_INTERFACE_DEFINED__
+#define __IDXGIFactory3_INTERFACE_DEFINED__
+
+DEFINE_GUID(IID_IDXGIFactory3, 0x25483823, 0xcd46, 0x4c7d, 0x86,0xca, 0x47,0xaa,0x95,0xb8,0x37,0xbd);
+#if defined(__cplusplus) && !defined(CINTERFACE)
+MIDL_INTERFACE("25483823-cd46-4c7d-86ca-47aa95b837bd")
+IDXGIFactory3 : public IDXGIFactory2
+{
+    virtual UINT STDMETHODCALLTYPE GetCreationFlags(
+        ) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(IDXGIFactory3, 0x25483823, 0xcd46, 0x4c7d, 0x86,0xca, 0x47,0xaa,0x95,0xb8,0x37,0xbd)
+#endif
+#else
+typedef struct IDXGIFactory3Vtbl {
+    BEGIN_INTERFACE
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        IDXGIFactory3* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        IDXGIFactory3* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        IDXGIFactory3* This);
+
+    /*** IDXGIObject methods ***/
+    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
+        IDXGIFactory3* This,
+        REFGUID guid,
+        UINT data_size,
+        const void *data);
+
+    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
+        IDXGIFactory3* This,
+        REFGUID guid,
+        const IUnknown *object);
+
+    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
+        IDXGIFactory3* This,
+        REFGUID guid,
+        UINT *data_size,
+        void *data);
+
+    HRESULT (STDMETHODCALLTYPE *GetParent)(
+        IDXGIFactory3* This,
+        REFIID riid,
+        void **parent);
+
+    /*** IDXGIFactory methods ***/
+    HRESULT (STDMETHODCALLTYPE *EnumAdapters)(
+        IDXGIFactory3* This,
+        UINT adapter_idx,
+        IDXGIAdapter **adapter);
+
+    HRESULT (STDMETHODCALLTYPE *MakeWindowAssociation)(
+        IDXGIFactory3* This,
+        HWND window,
+        UINT flags);
+
+    HRESULT (STDMETHODCALLTYPE *GetWindowAssociation)(
+        IDXGIFactory3* This,
+        HWND *window);
+
+    HRESULT (STDMETHODCALLTYPE *CreateSwapChain)(
+        IDXGIFactory3* This,
+        IUnknown *device,
+        DXGI_SWAP_CHAIN_DESC *desc,
+        IDXGISwapChain **swapchain);
+
+    HRESULT (STDMETHODCALLTYPE *CreateSoftwareAdapter)(
+        IDXGIFactory3* This,
+        HMODULE swrast,
+        IDXGIAdapter **adapter);
+
+    /*** IDXGIFactory1 methods ***/
+    HRESULT (STDMETHODCALLTYPE *EnumAdapters1)(
+        IDXGIFactory3* This,
+        UINT Adapter,
+        IDXGIAdapter1 **ppAdapter);
+
+    WINBOOL (STDMETHODCALLTYPE *IsCurrent)(
+        IDXGIFactory3* This);
+
+    /*** IDXGIFactory2 methods ***/
+    WINBOOL (STDMETHODCALLTYPE *IsWindowedStereoEnabled)(
+        IDXGIFactory3* This);
+
+    HRESULT (STDMETHODCALLTYPE *CreateSwapChainForHwnd)(
+        IDXGIFactory3* This,
+        IUnknown *pDevice,
+        HWND hWnd,
+        const DXGI_SWAP_CHAIN_DESC1 *pDesc,
+        const DXGI_SWAP_CHAIN_FULLSCREEN_DESC *pFullscreenDesc,
+        IDXGIOutput *pRestrictToOutput,
+        IDXGISwapChain1 **ppSwapChain);
+
+    HRESULT (STDMETHODCALLTYPE *CreateSwapChainForCoreWindow)(
+        IDXGIFactory3* This,
+        IUnknown *pDevice,
+        IUnknown *pWindow,
+        const DXGI_SWAP_CHAIN_DESC1 *pDesc,
+        IDXGIOutput *pRestrictToOutput,
+        IDXGISwapChain1 **ppSwapChain);
+
+    HRESULT (STDMETHODCALLTYPE *GetSharedResourceAdapterLuid)(
+        IDXGIFactory3* This,
+        HANDLE hResource,
+        LUID *pLuid);
+
+    HRESULT (STDMETHODCALLTYPE *RegisterOcclusionStatusWindow)(
+        IDXGIFactory3* This,
+        HWND WindowHandle,
+        UINT wMsg,
+        DWORD *pdwCookie);
+
+    HRESULT (STDMETHODCALLTYPE *RegisterStereoStatusEvent)(
+        IDXGIFactory3* This,
+        HANDLE hEvent,
+        DWORD *pdwCookie);
+
+    void (STDMETHODCALLTYPE *UnregisterStereoStatus)(
+        IDXGIFactory3* This,
+        DWORD dwCookie);
+
+    HRESULT (STDMETHODCALLTYPE *RegisterStereoStatusWindow)(
+        IDXGIFactory3* This,
+        HWND WindowHandle,
+        UINT wMsg,
+        DWORD *pdwCookie);
+
+    HRESULT (STDMETHODCALLTYPE *RegisterOcclusionStatusEvent)(
+        IDXGIFactory3* This,
+        HANDLE hEvent,
+        DWORD *pdwCookie);
+
+    void (STDMETHODCALLTYPE *UnregisterOcclusionStatus)(
+        IDXGIFactory3* This,
+        DWORD dwCookie);
+
+    HRESULT (STDMETHODCALLTYPE *CreateSwapChainForComposition)(
+        IDXGIFactory3* This,
+        IUnknown *pDevice,
+        const DXGI_SWAP_CHAIN_DESC1 *pDesc,
+        IDXGIOutput *pRestrictToOutput,
+        IDXGISwapChain1 **ppSwapChain);
+
+    /*** IDXGIFactory3 methods ***/
+    UINT (STDMETHODCALLTYPE *GetCreationFlags)(
+        IDXGIFactory3* This);
+
+    END_INTERFACE
+} IDXGIFactory3Vtbl;
+interface IDXGIFactory3 {
+    CONST_VTBL IDXGIFactory3Vtbl* lpVtbl;
+};
+
+#ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
+#define IDXGIFactory3_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define IDXGIFactory3_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define IDXGIFactory3_Release(This) (This)->lpVtbl->Release(This)
+/*** IDXGIObject methods ***/
+#define IDXGIFactory3_SetPrivateData(This,guid,data_size,data) (This)->lpVtbl->SetPrivateData(This,guid,data_size,data)
+#define IDXGIFactory3_SetPrivateDataInterface(This,guid,object) (This)->lpVtbl->SetPrivateDataInterface(This,guid,object)
+#define IDXGIFactory3_GetPrivateData(This,guid,data_size,data) (This)->lpVtbl->GetPrivateData(This,guid,data_size,data)
+#define IDXGIFactory3_GetParent(This,riid,parent) (This)->lpVtbl->GetParent(This,riid,parent)
+/*** IDXGIFactory methods ***/
+#define IDXGIFactory3_EnumAdapters(This,adapter_idx,adapter) (This)->lpVtbl->EnumAdapters(This,adapter_idx,adapter)
+#define IDXGIFactory3_MakeWindowAssociation(This,window,flags) (This)->lpVtbl->MakeWindowAssociation(This,window,flags)
+#define IDXGIFactory3_GetWindowAssociation(This,window) (This)->lpVtbl->GetWindowAssociation(This,window)
+#define IDXGIFactory3_CreateSwapChain(This,device,desc,swapchain) (This)->lpVtbl->CreateSwapChain(This,device,desc,swapchain)
+#define IDXGIFactory3_CreateSoftwareAdapter(This,swrast,adapter) (This)->lpVtbl->CreateSoftwareAdapter(This,swrast,adapter)
+/*** IDXGIFactory1 methods ***/
+#define IDXGIFactory3_EnumAdapters1(This,Adapter,ppAdapter) (This)->lpVtbl->EnumAdapters1(This,Adapter,ppAdapter)
+#define IDXGIFactory3_IsCurrent(This) (This)->lpVtbl->IsCurrent(This)
+/*** IDXGIFactory2 methods ***/
+#define IDXGIFactory3_IsWindowedStereoEnabled(This) (This)->lpVtbl->IsWindowedStereoEnabled(This)
+#define IDXGIFactory3_CreateSwapChainForHwnd(This,pDevice,hWnd,pDesc,pFullscreenDesc,pRestrictToOutput,ppSwapChain) (This)->lpVtbl->CreateSwapChainForHwnd(This,pDevice,hWnd,pDesc,pFullscreenDesc,pRestrictToOutput,ppSwapChain)
+#define IDXGIFactory3_CreateSwapChainForCoreWindow(This,pDevice,pWindow,pDesc,pRestrictToOutput,ppSwapChain) (This)->lpVtbl->CreateSwapChainForCoreWindow(This,pDevice,pWindow,pDesc,pRestrictToOutput,ppSwapChain)
+#define IDXGIFactory3_GetSharedResourceAdapterLuid(This,hResource,pLuid) (This)->lpVtbl->GetSharedResourceAdapterLuid(This,hResource,pLuid)
+#define IDXGIFactory3_RegisterOcclusionStatusWindow(This,WindowHandle,wMsg,pdwCookie) (This)->lpVtbl->RegisterOcclusionStatusWindow(This,WindowHandle,wMsg,pdwCookie)
+#define IDXGIFactory3_RegisterStereoStatusEvent(This,hEvent,pdwCookie) (This)->lpVtbl->RegisterStereoStatusEvent(This,hEvent,pdwCookie)
+#define IDXGIFactory3_UnregisterStereoStatus(This,dwCookie) (This)->lpVtbl->UnregisterStereoStatus(This,dwCookie)
+#define IDXGIFactory3_RegisterStereoStatusWindow(This,WindowHandle,wMsg,pdwCookie) (This)->lpVtbl->RegisterStereoStatusWindow(This,WindowHandle,wMsg,pdwCookie)
+#define IDXGIFactory3_RegisterOcclusionStatusEvent(This,hEvent,pdwCookie) (This)->lpVtbl->RegisterOcclusionStatusEvent(This,hEvent,pdwCookie)
+#define IDXGIFactory3_UnregisterOcclusionStatus(This,dwCookie) (This)->lpVtbl->UnregisterOcclusionStatus(This,dwCookie)
+#define IDXGIFactory3_CreateSwapChainForComposition(This,pDevice,pDesc,pRestrictToOutput,ppSwapChain) (This)->lpVtbl->CreateSwapChainForComposition(This,pDevice,pDesc,pRestrictToOutput,ppSwapChain)
+/*** IDXGIFactory3 methods ***/
+#define IDXGIFactory3_GetCreationFlags(This) (This)->lpVtbl->GetCreationFlags(This)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT IDXGIFactory3_QueryInterface(IDXGIFactory3* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG IDXGIFactory3_AddRef(IDXGIFactory3* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG IDXGIFactory3_Release(IDXGIFactory3* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IDXGIObject methods ***/
+static FORCEINLINE HRESULT IDXGIFactory3_SetPrivateData(IDXGIFactory3* This,REFGUID guid,UINT data_size,const void *data) {
+    return This->lpVtbl->SetPrivateData(This,guid,data_size,data);
+}
+static FORCEINLINE HRESULT IDXGIFactory3_SetPrivateDataInterface(IDXGIFactory3* This,REFGUID guid,const IUnknown *object) {
+    return This->lpVtbl->SetPrivateDataInterface(This,guid,object);
+}
+static FORCEINLINE HRESULT IDXGIFactory3_GetPrivateData(IDXGIFactory3* This,REFGUID guid,UINT *data_size,void *data) {
+    return This->lpVtbl->GetPrivateData(This,guid,data_size,data);
+}
+static FORCEINLINE HRESULT IDXGIFactory3_GetParent(IDXGIFactory3* This,REFIID riid,void **parent) {
+    return This->lpVtbl->GetParent(This,riid,parent);
+}
+/*** IDXGIFactory methods ***/
+static FORCEINLINE HRESULT IDXGIFactory3_EnumAdapters(IDXGIFactory3* This,UINT adapter_idx,IDXGIAdapter **adapter) {
+    return This->lpVtbl->EnumAdapters(This,adapter_idx,adapter);
+}
+static FORCEINLINE HRESULT IDXGIFactory3_MakeWindowAssociation(IDXGIFactory3* This,HWND window,UINT flags) {
+    return This->lpVtbl->MakeWindowAssociation(This,window,flags);
+}
+static FORCEINLINE HRESULT IDXGIFactory3_GetWindowAssociation(IDXGIFactory3* This,HWND *window) {
+    return This->lpVtbl->GetWindowAssociation(This,window);
+}
+static FORCEINLINE HRESULT IDXGIFactory3_CreateSwapChain(IDXGIFactory3* This,IUnknown *device,DXGI_SWAP_CHAIN_DESC *desc,IDXGISwapChain **swapchain) {
+    return This->lpVtbl->CreateSwapChain(This,device,desc,swapchain);
+}
+static FORCEINLINE HRESULT IDXGIFactory3_CreateSoftwareAdapter(IDXGIFactory3* This,HMODULE swrast,IDXGIAdapter **adapter) {
+    return This->lpVtbl->CreateSoftwareAdapter(This,swrast,adapter);
+}
+/*** IDXGIFactory1 methods ***/
+static FORCEINLINE HRESULT IDXGIFactory3_EnumAdapters1(IDXGIFactory3* This,UINT Adapter,IDXGIAdapter1 **ppAdapter) {
+    return This->lpVtbl->EnumAdapters1(This,Adapter,ppAdapter);
+}
+static FORCEINLINE WINBOOL IDXGIFactory3_IsCurrent(IDXGIFactory3* This) {
+    return This->lpVtbl->IsCurrent(This);
+}
+/*** IDXGIFactory2 methods ***/
+static FORCEINLINE WINBOOL IDXGIFactory3_IsWindowedStereoEnabled(IDXGIFactory3* This) {
+    return This->lpVtbl->IsWindowedStereoEnabled(This);
+}
+static FORCEINLINE HRESULT IDXGIFactory3_CreateSwapChainForHwnd(IDXGIFactory3* This,IUnknown *pDevice,HWND hWnd,const DXGI_SWAP_CHAIN_DESC1 *pDesc,const DXGI_SWAP_CHAIN_FULLSCREEN_DESC *pFullscreenDesc,IDXGIOutput *pRestrictToOutput,IDXGISwapChain1 **ppSwapChain) {
+    return This->lpVtbl->CreateSwapChainForHwnd(This,pDevice,hWnd,pDesc,pFullscreenDesc,pRestrictToOutput,ppSwapChain);
+}
+static FORCEINLINE HRESULT IDXGIFactory3_CreateSwapChainForCoreWindow(IDXGIFactory3* This,IUnknown *pDevice,IUnknown *pWindow,const DXGI_SWAP_CHAIN_DESC1 *pDesc,IDXGIOutput *pRestrictToOutput,IDXGISwapChain1 **ppSwapChain) {
+    return This->lpVtbl->CreateSwapChainForCoreWindow(This,pDevice,pWindow,pDesc,pRestrictToOutput,ppSwapChain);
+}
+static FORCEINLINE HRESULT IDXGIFactory3_GetSharedResourceAdapterLuid(IDXGIFactory3* This,HANDLE hResource,LUID *pLuid) {
+    return This->lpVtbl->GetSharedResourceAdapterLuid(This,hResource,pLuid);
+}
+static FORCEINLINE HRESULT IDXGIFactory3_RegisterOcclusionStatusWindow(IDXGIFactory3* This,HWND WindowHandle,UINT wMsg,DWORD *pdwCookie) {
+    return This->lpVtbl->RegisterOcclusionStatusWindow(This,WindowHandle,wMsg,pdwCookie);
+}
+static FORCEINLINE HRESULT IDXGIFactory3_RegisterStereoStatusEvent(IDXGIFactory3* This,HANDLE hEvent,DWORD *pdwCookie) {
+    return This->lpVtbl->RegisterStereoStatusEvent(This,hEvent,pdwCookie);
+}
+static FORCEINLINE void IDXGIFactory3_UnregisterStereoStatus(IDXGIFactory3* This,DWORD dwCookie) {
+    This->lpVtbl->UnregisterStereoStatus(This,dwCookie);
+}
+static FORCEINLINE HRESULT IDXGIFactory3_RegisterStereoStatusWindow(IDXGIFactory3* This,HWND WindowHandle,UINT wMsg,DWORD *pdwCookie) {
+    return This->lpVtbl->RegisterStereoStatusWindow(This,WindowHandle,wMsg,pdwCookie);
+}
+static FORCEINLINE HRESULT IDXGIFactory3_RegisterOcclusionStatusEvent(IDXGIFactory3* This,HANDLE hEvent,DWORD *pdwCookie) {
+    return This->lpVtbl->RegisterOcclusionStatusEvent(This,hEvent,pdwCookie);
+}
+static FORCEINLINE void IDXGIFactory3_UnregisterOcclusionStatus(IDXGIFactory3* This,DWORD dwCookie) {
+    This->lpVtbl->UnregisterOcclusionStatus(This,dwCookie);
+}
+static FORCEINLINE HRESULT IDXGIFactory3_CreateSwapChainForComposition(IDXGIFactory3* This,IUnknown *pDevice,const DXGI_SWAP_CHAIN_DESC1 *pDesc,IDXGIOutput *pRestrictToOutput,IDXGISwapChain1 **ppSwapChain) {
+    return This->lpVtbl->CreateSwapChainForComposition(This,pDevice,pDesc,pRestrictToOutput,ppSwapChain);
+}
+/*** IDXGIFactory3 methods ***/
+static FORCEINLINE UINT IDXGIFactory3_GetCreationFlags(IDXGIFactory3* This) {
+    return This->lpVtbl->GetCreationFlags(This);
+}
+#endif
+#endif
+
+#endif
+
+UINT STDMETHODCALLTYPE IDXGIFactory3_GetCreationFlags_Proxy(
+    IDXGIFactory3* This);
+void __RPC_STUB IDXGIFactory3_GetCreationFlags_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __IDXGIFactory3_INTERFACE_DEFINED__ */
+
+/* Begin additional prototypes for all interfaces */
+
+
+/* End additional prototypes */
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* __dxgi1_3_h__ */
diff --git a/mingw-w64-headers/direct-x/include/dxgi1_3.idl b/mingw-w64-headers/direct-x/include/dxgi1_3.idl
new file mode 100644
index 00000000..da4b5fbc
--- /dev/null
+++ b/mingw-w64-headers/direct-x/include/dxgi1_3.idl
@@ -0,0 +1,242 @@
+/*
+ * Copyright 2015 Martell Malone
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+import "dxgi1_2.idl";
+
+cpp_quote("#define DXGI_CREATE_FACTORY_DEBUG   0x1")
+
+typedef struct DXGI_DECODE_SWAP_CHAIN_DESC
+{
+    UINT Flags;
+} DXGI_DECODE_SWAP_CHAIN_DESC;
+
+typedef enum DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS
+{
+    DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_NOMINAL_RANGE = 0x1,
+    DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_BT709         = 0x2,
+    DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_xvYCC         = 0x4,
+} DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS;
+
+[
+    object,
+    local,
+    uuid(2633066b-4514-4c7a-8fd8-12ea98059d18)
+]
+interface IDXGIDecodeSwapChain : IUnknown
+{
+    HRESULT PresentBuffer(
+        UINT buffer,
+        UINT sync,
+        UINT flags
+    );
+
+    HRESULT SetSourceRect(
+        const RECT* rect
+    );
+
+    HRESULT SetTargetRect(
+        const RECT* rect
+    );
+
+    HRESULT SetDestSize(
+        UINT width,
+        UINT height
+    );
+
+    HRESULT GetSourceRect(
+        [out] RECT* rect
+    );
+
+    HRESULT GetTargetRect(
+        [out] RECT* rect
+    );
+
+    HRESULT GetDestSize(
+        [out] UINT* width,
+        [out] UINT* height
+    );
+
+    HRESULT SetColorSpace(
+        DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS colorSpace
+    );
+
+    DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS GetColorSpace();
+}
+
+[
+    object,
+    local,
+    uuid(41e7d1f2-a591-4f7b-a2e5-fa9c843e1c12)
+]
+interface IDXGIFactoryMedia :IUnknown
+{
+    HRESULT CreateSwapChainForCompositionSurfaceHandle(
+        [in] IUnknown* device,
+        [in] HANDLE surface,
+        [in] const DXGI_SWAP_CHAIN_DESC1* desc,
+        [in] IDXGIOutput* output,
+        [out] IDXGISwapChain1** swapchain
+    );
+
+    HRESULT CreateDecodeSwapChainForCompositionSurfaceHandle(
+        [in] IUnknown* device,
+        [in] HANDLE surface,
+        [in] DXGI_DECODE_SWAP_CHAIN_DESC* desc,
+        [in] IDXGIResource* buffer,
+        [in] IDXGIOutput* output,
+        [out] IDXGIDecodeSwapChain** swapchain
+    );
+}
+
+typedef enum DXGI_FRAME_PRESENTATION_MODE
+{
+    DXGI_FRAME_PRESENTATION_MODE_COMPOSED = 0,
+    DXGI_FRAME_PRESENTATION_MODE_OVERLAY = 1,
+    DXGI_FRAME_PRESENTATION_MODE_NONE = 2,
+} DXGI_FRAME_PRESENTATION_MODE;
+
+typedef struct DXGI_FRAME_STATISTICS_MEDIA
+{
+    UINT PresentCount;
+    UINT PresentRefreshCount;
+    UINT SyncRefreshCount;
+    LARGE_INTEGER SyncQPCTime;
+    LARGE_INTEGER SyncGPUTime;
+    DXGI_FRAME_PRESENTATION_MODE CompositionMode;
+    UINT ApprovedPresentDuration;
+} DXGI_FRAME_STATISTICS_MEDIA;
+
+[
+    object,
+    local,
+    uuid(dd95b90b-f05f-4f6a-bd65-25bfb264bd84)
+]
+interface IDXGISwapChainMedia : IUnknown
+{
+    HRESULT GetFrameStatisticsMedia(
+        [out] DXGI_FRAME_STATISTICS_MEDIA* pStats
+    );
+
+    HRESULT SetPresentDuration(
+        UINT duration
+    );
+
+    HRESULT CheckPresentDurationSupport(
+        UINT duration,
+        [out] UINT* smallerduration,
+        [out] UINT* largerduration
+    );
+};
+
+typedef enum DXGI_OVERLAY_SUPPORT_FLAG
+{
+    DXGI_OVERLAY_SUPPORT_FLAG_DIRECT   = 0x1,
+    DXGI_OVERLAY_SUPPORT_FLAG_SCALING  = 0x2
+} DXGI_OVERLAY_SUPPORT_FLAG;
+
+[
+    object,
+    local,
+    uuid(6007896c-3244-4afd-bf18-a6d3beda5023)
+]
+interface IDXGIDevice3 : IDXGIDevice2
+{
+    void Trim();
+}
+
+[
+    object,
+    local,
+    uuid(595e39d1-2724-4663-99b1-da969de28364)
+]
+interface IDXGIOutput2 : IDXGIOutput1
+{
+    BOOL SupportsOverlays();
+}
+
+[
+    object,
+    local,
+    uuid(8a6bb301-7e7e-41F4-a8e0-5b32f7f99b18)
+]
+interface IDXGIOutput3 : IDXGIOutput2
+{
+    HRESULT CheckOverlaySupport(
+        [in] DXGI_FORMAT format,
+        [out, in] IUnknown* device,
+        [out] UINT* flags
+    );
+}
+
+[local] HRESULT __stdcall CreateDXGIFactory2(UINT Flags, REFIID riid, void **factory);
+
+typedef struct DXGI_MATRIX_3X2_F
+{
+    float _11;
+    float _12;
+    float _21;
+    float _22;
+    float _31;
+    float _32;
+} DXGI_MATRIX_3X2_F;
+
+[
+    object,
+    local,
+    uuid(a8be2ac4-199f-4946-b331-79599fb98de7)
+]
+interface IDXGISwapChain2 : IDXGISwapChain1
+{
+    HRESULT SetSourceSize(
+        UINT width,
+        UINT height
+    );
+
+    HRESULT GetSourceSize(
+        [out] UINT* width,
+        [out] UINT* height
+    );
+
+    HRESULT SetMaximumFrameLatency(
+        UINT max_latency
+    );
+
+    HRESULT GetMaximumFrameLatency(
+        [out] UINT* max_latency
+    );
+
+    HANDLE  GetFrameLatencyWaitableObject();
+
+    HRESULT SetMatrixTransform(
+        const DXGI_MATRIX_3X2_F* matrix
+    );
+
+    HRESULT GetMatrixTransform(
+        [out] DXGI_MATRIX_3X2_F* matrix
+    );
+}
+
+[
+    object,
+    local,
+    uuid(25483823-cd46-4c7d-86ca-47aa95b837bd)
+]
+interface IDXGIFactory3 : IDXGIFactory2
+{
+    UINT GetCreationFlags();
+}
diff --git a/mingw-w64-headers/direct-x/include/dxgi1_4.h b/mingw-w64-headers/direct-x/include/dxgi1_4.h
new file mode 100644
index 00000000..980287ca
--- /dev/null
+++ b/mingw-w64-headers/direct-x/include/dxgi1_4.h
@@ -0,0 +1,525 @@
+/*** Autogenerated by WIDL 1.6 from dxgi1_4.idl - Do not edit ***/
+
+#ifndef __REQUIRED_RPCNDR_H_VERSION__
+#define __REQUIRED_RPCNDR_H_VERSION__ 475
+#endif
+
+#include <rpc.h>
+#include <rpcndr.h>
+
+#ifndef COM_NO_WINDOWS_H
+#include <windows.h>
+#include <ole2.h>
+#endif
+
+#ifndef __dxgi1_4_h__
+#define __dxgi1_4_h__
+
+/* Forward declarations */
+
+#ifndef __IDXGISwapChain3_FWD_DEFINED__
+#define __IDXGISwapChain3_FWD_DEFINED__
+typedef interface IDXGISwapChain3 IDXGISwapChain3;
+#endif
+
+/* Headers for imported files */
+
+#include <dxgi1_3.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+typedef enum DXGI_COLOR_SPACE_TYPE {
+    DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709 = 0,
+    DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709 = 1,
+    DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P709 = 2,
+    DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P2020 = 3,
+    DXGI_COLOR_SPACE_RESERVED = 4,
+    DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601 = 5,
+    DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601 = 6,
+    DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601 = 7,
+    DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709 = 8,
+    DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709 = 9,
+    DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020 = 10,
+    DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020 = 11,
+    DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020 = 12,
+    DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_LEFT_P2020 = 13,
+    DXGI_COLOR_SPACE_RGB_STUDIO_G2084_NONE_P2020 = 14,
+    DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_TOPLEFT_P2020 = 15,
+    DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_TOPLEFT_P2020 = 16,
+    DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P2020 = 17,
+    DXGI_COLOR_SPACE_CUSTOM = 0xffffffff
+} DXGI_COLOR_SPACE_TYPE;
+/*****************************************************************************
+ * IDXGISwapChain3 interface
+ */
+#ifndef __IDXGISwapChain3_INTERFACE_DEFINED__
+#define __IDXGISwapChain3_INTERFACE_DEFINED__
+
+DEFINE_GUID(IID_IDXGISwapChain3, 0x94d99bdb, 0xf1f8, 0x4ab0, 0xb2,0x36, 0x7d,0xa0,0x17,0x0e,0xda,0xb1);
+#if defined(__cplusplus) && !defined(CINTERFACE)
+MIDL_INTERFACE("94d99bdb-f1f8-4ab0-b236-7da0170edab1")
+IDXGISwapChain3 : public IDXGISwapChain2
+{
+    virtual UINT STDMETHODCALLTYPE GetCurrentBackBufferIndex(
+        ) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE CheckColorSpaceSupport(
+        DXGI_COLOR_SPACE_TYPE ColorSpace,
+        UINT *pColorSpaceSupport) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE SetColorSpace1(
+        DXGI_COLOR_SPACE_TYPE ColorSpace) = 0;
+
+    virtual HRESULT STDMETHODCALLTYPE ResizeBuffers1(
+        UINT BufferCount,
+        UINT Width,
+        UINT Height,
+        DXGI_FORMAT Format,
+        UINT SwapChainFlags,
+        const UINT *pCreationNodeMask,
+        IUnknown *const *ppPresentQueue) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(IDXGISwapChain3, 0x94d99bdb, 0xf1f8, 0x4ab0, 0xb2,0x36, 0x7d,0xa0,0x17,0x0e,0xda,0xb1)
+#endif
+#else
+typedef struct IDXGISwapChain3Vtbl {
+    BEGIN_INTERFACE
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        IDXGISwapChain3* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        IDXGISwapChain3* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        IDXGISwapChain3* This);
+
+    /*** IDXGIObject methods ***/
+    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
+        IDXGISwapChain3* This,
+        REFGUID guid,
+        UINT data_size,
+        const void *data);
+
+    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
+        IDXGISwapChain3* This,
+        REFGUID guid,
+        const IUnknown *object);
+
+    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
+        IDXGISwapChain3* This,
+        REFGUID guid,
+        UINT *data_size,
+        void *data);
+
+    HRESULT (STDMETHODCALLTYPE *GetParent)(
+        IDXGISwapChain3* This,
+        REFIID riid,
+        void **parent);
+
+    /*** IDXGIDeviceSubObject methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetDevice)(
+        IDXGISwapChain3* This,
+        REFIID riid,
+        void **device);
+
+    /*** IDXGISwapChain methods ***/
+    HRESULT (STDMETHODCALLTYPE *Present)(
+        IDXGISwapChain3* This,
+        UINT sync_interval,
+        UINT flags);
+
+    HRESULT (STDMETHODCALLTYPE *GetBuffer)(
+        IDXGISwapChain3* This,
+        UINT buffer_idx,
+        REFIID riid,
+        void **surface);
+
+    HRESULT (STDMETHODCALLTYPE *SetFullscreenState)(
+        IDXGISwapChain3* This,
+        WINBOOL fullscreen,
+        IDXGIOutput *target);
+
+    HRESULT (STDMETHODCALLTYPE *GetFullscreenState)(
+        IDXGISwapChain3* This,
+        WINBOOL *fullscreen,
+        IDXGIOutput **target);
+
+    HRESULT (STDMETHODCALLTYPE *GetDesc)(
+        IDXGISwapChain3* This,
+        DXGI_SWAP_CHAIN_DESC *desc);
+
+    HRESULT (STDMETHODCALLTYPE *ResizeBuffers)(
+        IDXGISwapChain3* This,
+        UINT buffer_count,
+        UINT width,
+        UINT height,
+        DXGI_FORMAT format,
+        UINT flags);
+
+    HRESULT (STDMETHODCALLTYPE *ResizeTarget)(
+        IDXGISwapChain3* This,
+        const DXGI_MODE_DESC *target_mode_desc);
+
+    HRESULT (STDMETHODCALLTYPE *GetContainingOutput)(
+        IDXGISwapChain3* This,
+        IDXGIOutput **output);
+
+    HRESULT (STDMETHODCALLTYPE *GetFrameStatistics)(
+        IDXGISwapChain3* This,
+        DXGI_FRAME_STATISTICS *stats);
+
+    HRESULT (STDMETHODCALLTYPE *GetLastPresentCount)(
+        IDXGISwapChain3* This,
+        UINT *last_present_count);
+
+    /*** IDXGISwapChain1 methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetDesc1)(
+        IDXGISwapChain3* This,
+        DXGI_SWAP_CHAIN_DESC1 *pDesc);
+
+    HRESULT (STDMETHODCALLTYPE *GetFullscreenDesc)(
+        IDXGISwapChain3* This,
+        DXGI_SWAP_CHAIN_FULLSCREEN_DESC *pDesc);
+
+    HRESULT (STDMETHODCALLTYPE *GetHwnd)(
+        IDXGISwapChain3* This,
+        HWND *pHwnd);
+
+    HRESULT (STDMETHODCALLTYPE *GetCoreWindow)(
+        IDXGISwapChain3* This,
+        REFIID refiid,
+        void **ppUnk);
+
+    HRESULT (STDMETHODCALLTYPE *Present1)(
+        IDXGISwapChain3* This,
+        UINT SyncInterval,
+        UINT PresentFlags,
+        const DXGI_PRESENT_PARAMETERS *pPresentParameters);
+
+    WINBOOL (STDMETHODCALLTYPE *IsTemporaryMonoSupported)(
+        IDXGISwapChain3* This);
+
+    HRESULT (STDMETHODCALLTYPE *GetRestrictToOutput)(
+        IDXGISwapChain3* This,
+        IDXGIOutput **ppRestrictToOutput);
+
+    HRESULT (STDMETHODCALLTYPE *SetBackgroundColor)(
+        IDXGISwapChain3* This,
+        const DXGI_RGBA *pColor);
+
+    HRESULT (STDMETHODCALLTYPE *GetBackgroundColor)(
+        IDXGISwapChain3* This,
+        DXGI_RGBA *pColor);
+
+    HRESULT (STDMETHODCALLTYPE *SetRotation)(
+        IDXGISwapChain3* This,
+        DXGI_MODE_ROTATION Rotation);
+
+    HRESULT (STDMETHODCALLTYPE *GetRotation)(
+        IDXGISwapChain3* This,
+        DXGI_MODE_ROTATION *pRotation);
+
+    /*** IDXGISwapChain2 methods ***/
+    HRESULT (STDMETHODCALLTYPE *SetSourceSize)(
+        IDXGISwapChain3* This,
+        UINT width,
+        UINT height);
+
+    HRESULT (STDMETHODCALLTYPE *GetSourceSize)(
+        IDXGISwapChain3* This,
+        UINT *width,
+        UINT *height);
+
+    HRESULT (STDMETHODCALLTYPE *SetMaximumFrameLatency)(
+        IDXGISwapChain3* This,
+        UINT max_latency);
+
+    HRESULT (STDMETHODCALLTYPE *GetMaximumFrameLatency)(
+        IDXGISwapChain3* This,
+        UINT *max_latency);
+
+    HANDLE (STDMETHODCALLTYPE *GetFrameLatencyWaitableObject)(
+        IDXGISwapChain3* This);
+
+    HRESULT (STDMETHODCALLTYPE *SetMatrixTransform)(
+        IDXGISwapChain3* This,
+        const DXGI_MATRIX_3X2_F *matrix);
+
+    HRESULT (STDMETHODCALLTYPE *GetMatrixTransform)(
+        IDXGISwapChain3* This,
+        DXGI_MATRIX_3X2_F *matrix);
+
+    /*** IDXGISwapChain3 methods ***/
+    UINT (STDMETHODCALLTYPE *GetCurrentBackBufferIndex)(
+        IDXGISwapChain3* This);
+
+    HRESULT (STDMETHODCALLTYPE *CheckColorSpaceSupport)(
+        IDXGISwapChain3* This,
+        DXGI_COLOR_SPACE_TYPE ColorSpace,
+        UINT *pColorSpaceSupport);
+
+    HRESULT (STDMETHODCALLTYPE *SetColorSpace1)(
+        IDXGISwapChain3* This,
+        DXGI_COLOR_SPACE_TYPE ColorSpace);
+
+    HRESULT (STDMETHODCALLTYPE *ResizeBuffers1)(
+        IDXGISwapChain3* This,
+        UINT BufferCount,
+        UINT Width,
+        UINT Height,
+        DXGI_FORMAT Format,
+        UINT SwapChainFlags,
+        const UINT *pCreationNodeMask,
+        IUnknown *const *ppPresentQueue);
+
+    END_INTERFACE
+} IDXGISwapChain3Vtbl;
+interface IDXGISwapChain3 {
+    CONST_VTBL IDXGISwapChain3Vtbl* lpVtbl;
+};
+
+#ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
+#define IDXGISwapChain3_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define IDXGISwapChain3_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define IDXGISwapChain3_Release(This) (This)->lpVtbl->Release(This)
+/*** IDXGIObject methods ***/
+#define IDXGISwapChain3_SetPrivateData(This,guid,data_size,data) (This)->lpVtbl->SetPrivateData(This,guid,data_size,data)
+#define IDXGISwapChain3_SetPrivateDataInterface(This,guid,object) (This)->lpVtbl->SetPrivateDataInterface(This,guid,object)
+#define IDXGISwapChain3_GetPrivateData(This,guid,data_size,data) (This)->lpVtbl->GetPrivateData(This,guid,data_size,data)
+#define IDXGISwapChain3_GetParent(This,riid,parent) (This)->lpVtbl->GetParent(This,riid,parent)
+/*** IDXGIDeviceSubObject methods ***/
+#define IDXGISwapChain3_GetDevice(This,riid,device) (This)->lpVtbl->GetDevice(This,riid,device)
+/*** IDXGISwapChain methods ***/
+#define IDXGISwapChain3_Present(This,sync_interval,flags) (This)->lpVtbl->Present(This,sync_interval,flags)
+#define IDXGISwapChain3_GetBuffer(This,buffer_idx,riid,surface) (This)->lpVtbl->GetBuffer(This,buffer_idx,riid,surface)
+#define IDXGISwapChain3_SetFullscreenState(This,fullscreen,target) (This)->lpVtbl->SetFullscreenState(This,fullscreen,target)
+#define IDXGISwapChain3_GetFullscreenState(This,fullscreen,target) (This)->lpVtbl->GetFullscreenState(This,fullscreen,target)
+#define IDXGISwapChain3_GetDesc(This,desc) (This)->lpVtbl->GetDesc(This,desc)
+#define IDXGISwapChain3_ResizeBuffers(This,buffer_count,width,height,format,flags) (This)->lpVtbl->ResizeBuffers(This,buffer_count,width,height,format,flags)
+#define IDXGISwapChain3_ResizeTarget(This,target_mode_desc) (This)->lpVtbl->ResizeTarget(This,target_mode_desc)
+#define IDXGISwapChain3_GetContainingOutput(This,output) (This)->lpVtbl->GetContainingOutput(This,output)
+#define IDXGISwapChain3_GetFrameStatistics(This,stats) (This)->lpVtbl->GetFrameStatistics(This,stats)
+#define IDXGISwapChain3_GetLastPresentCount(This,last_present_count) (This)->lpVtbl->GetLastPresentCount(This,last_present_count)
+/*** IDXGISwapChain1 methods ***/
+#define IDXGISwapChain3_GetDesc1(This,pDesc) (This)->lpVtbl->GetDesc1(This,pDesc)
+#define IDXGISwapChain3_GetFullscreenDesc(This,pDesc) (This)->lpVtbl->GetFullscreenDesc(This,pDesc)
+#define IDXGISwapChain3_GetHwnd(This,pHwnd) (This)->lpVtbl->GetHwnd(This,pHwnd)
+#define IDXGISwapChain3_GetCoreWindow(This,refiid,ppUnk) (This)->lpVtbl->GetCoreWindow(This,refiid,ppUnk)
+#define IDXGISwapChain3_Present1(This,SyncInterval,PresentFlags,pPresentParameters) (This)->lpVtbl->Present1(This,SyncInterval,PresentFlags,pPresentParameters)
+#define IDXGISwapChain3_IsTemporaryMonoSupported(This) (This)->lpVtbl->IsTemporaryMonoSupported(This)
+#define IDXGISwapChain3_GetRestrictToOutput(This,ppRestrictToOutput) (This)->lpVtbl->GetRestrictToOutput(This,ppRestrictToOutput)
+#define IDXGISwapChain3_SetBackgroundColor(This,pColor) (This)->lpVtbl->SetBackgroundColor(This,pColor)
+#define IDXGISwapChain3_GetBackgroundColor(This,pColor) (This)->lpVtbl->GetBackgroundColor(This,pColor)
+#define IDXGISwapChain3_SetRotation(This,Rotation) (This)->lpVtbl->SetRotation(This,Rotation)
+#define IDXGISwapChain3_GetRotation(This,pRotation) (This)->lpVtbl->GetRotation(This,pRotation)
+/*** IDXGISwapChain2 methods ***/
+#define IDXGISwapChain3_SetSourceSize(This,width,height) (This)->lpVtbl->SetSourceSize(This,width,height)
+#define IDXGISwapChain3_GetSourceSize(This,width,height) (This)->lpVtbl->GetSourceSize(This,width,height)
+#define IDXGISwapChain3_SetMaximumFrameLatency(This,max_latency) (This)->lpVtbl->SetMaximumFrameLatency(This,max_latency)
+#define IDXGISwapChain3_GetMaximumFrameLatency(This,max_latency) (This)->lpVtbl->GetMaximumFrameLatency(This,max_latency)
+#define IDXGISwapChain3_GetFrameLatencyWaitableObject(This) (This)->lpVtbl->GetFrameLatencyWaitableObject(This)
+#define IDXGISwapChain3_SetMatrixTransform(This,matrix) (This)->lpVtbl->SetMatrixTransform(This,matrix)
+#define IDXGISwapChain3_GetMatrixTransform(This,matrix) (This)->lpVtbl->GetMatrixTransform(This,matrix)
+/*** IDXGISwapChain3 methods ***/
+#define IDXGISwapChain3_GetCurrentBackBufferIndex(This) (This)->lpVtbl->GetCurrentBackBufferIndex(This)
+#define IDXGISwapChain3_CheckColorSpaceSupport(This,ColorSpace,pColorSpaceSupport) (This)->lpVtbl->CheckColorSpaceSupport(This,ColorSpace,pColorSpaceSupport)
+#define IDXGISwapChain3_SetColorSpace1(This,ColorSpace) (This)->lpVtbl->SetColorSpace1(This,ColorSpace)
+#define IDXGISwapChain3_ResizeBuffers1(This,BufferCount,Width,Height,Format,SwapChainFlags,pCreationNodeMask,ppPresentQueue) (This)->lpVtbl->ResizeBuffers1(This,BufferCount,Width,Height,Format,SwapChainFlags,pCreationNodeMask,ppPresentQueue)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT IDXGISwapChain3_QueryInterface(IDXGISwapChain3* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG IDXGISwapChain3_AddRef(IDXGISwapChain3* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG IDXGISwapChain3_Release(IDXGISwapChain3* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IDXGIObject methods ***/
+static FORCEINLINE HRESULT IDXGISwapChain3_SetPrivateData(IDXGISwapChain3* This,REFGUID guid,UINT data_size,const void *data) {
+    return This->lpVtbl->SetPrivateData(This,guid,data_size,data);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_SetPrivateDataInterface(IDXGISwapChain3* This,REFGUID guid,const IUnknown *object) {
+    return This->lpVtbl->SetPrivateDataInterface(This,guid,object);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_GetPrivateData(IDXGISwapChain3* This,REFGUID guid,UINT *data_size,void *data) {
+    return This->lpVtbl->GetPrivateData(This,guid,data_size,data);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_GetParent(IDXGISwapChain3* This,REFIID riid,void **parent) {
+    return This->lpVtbl->GetParent(This,riid,parent);
+}
+/*** IDXGIDeviceSubObject methods ***/
+static FORCEINLINE HRESULT IDXGISwapChain3_GetDevice(IDXGISwapChain3* This,REFIID riid,void **device) {
+    return This->lpVtbl->GetDevice(This,riid,device);
+}
+/*** IDXGISwapChain methods ***/
+static FORCEINLINE HRESULT IDXGISwapChain3_Present(IDXGISwapChain3* This,UINT sync_interval,UINT flags) {
+    return This->lpVtbl->Present(This,sync_interval,flags);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_GetBuffer(IDXGISwapChain3* This,UINT buffer_idx,REFIID riid,void **surface) {
+    return This->lpVtbl->GetBuffer(This,buffer_idx,riid,surface);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_SetFullscreenState(IDXGISwapChain3* This,WINBOOL fullscreen,IDXGIOutput *target) {
+    return This->lpVtbl->SetFullscreenState(This,fullscreen,target);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_GetFullscreenState(IDXGISwapChain3* This,WINBOOL *fullscreen,IDXGIOutput **target) {
+    return This->lpVtbl->GetFullscreenState(This,fullscreen,target);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_GetDesc(IDXGISwapChain3* This,DXGI_SWAP_CHAIN_DESC *desc) {
+    return This->lpVtbl->GetDesc(This,desc);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_ResizeBuffers(IDXGISwapChain3* This,UINT buffer_count,UINT width,UINT height,DXGI_FORMAT format,UINT flags) {
+    return This->lpVtbl->ResizeBuffers(This,buffer_count,width,height,format,flags);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_ResizeTarget(IDXGISwapChain3* This,const DXGI_MODE_DESC *target_mode_desc) {
+    return This->lpVtbl->ResizeTarget(This,target_mode_desc);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_GetContainingOutput(IDXGISwapChain3* This,IDXGIOutput **output) {
+    return This->lpVtbl->GetContainingOutput(This,output);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_GetFrameStatistics(IDXGISwapChain3* This,DXGI_FRAME_STATISTICS *stats) {
+    return This->lpVtbl->GetFrameStatistics(This,stats);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_GetLastPresentCount(IDXGISwapChain3* This,UINT *last_present_count) {
+    return This->lpVtbl->GetLastPresentCount(This,last_present_count);
+}
+/*** IDXGISwapChain1 methods ***/
+static FORCEINLINE HRESULT IDXGISwapChain3_GetDesc1(IDXGISwapChain3* This,DXGI_SWAP_CHAIN_DESC1 *pDesc) {
+    return This->lpVtbl->GetDesc1(This,pDesc);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_GetFullscreenDesc(IDXGISwapChain3* This,DXGI_SWAP_CHAIN_FULLSCREEN_DESC *pDesc) {
+    return This->lpVtbl->GetFullscreenDesc(This,pDesc);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_GetHwnd(IDXGISwapChain3* This,HWND *pHwnd) {
+    return This->lpVtbl->GetHwnd(This,pHwnd);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_GetCoreWindow(IDXGISwapChain3* This,REFIID refiid,void **ppUnk) {
+    return This->lpVtbl->GetCoreWindow(This,refiid,ppUnk);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_Present1(IDXGISwapChain3* This,UINT SyncInterval,UINT PresentFlags,const DXGI_PRESENT_PARAMETERS *pPresentParameters) {
+    return This->lpVtbl->Present1(This,SyncInterval,PresentFlags,pPresentParameters);
+}
+static FORCEINLINE WINBOOL IDXGISwapChain3_IsTemporaryMonoSupported(IDXGISwapChain3* This) {
+    return This->lpVtbl->IsTemporaryMonoSupported(This);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_GetRestrictToOutput(IDXGISwapChain3* This,IDXGIOutput **ppRestrictToOutput) {
+    return This->lpVtbl->GetRestrictToOutput(This,ppRestrictToOutput);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_SetBackgroundColor(IDXGISwapChain3* This,const DXGI_RGBA *pColor) {
+    return This->lpVtbl->SetBackgroundColor(This,pColor);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_GetBackgroundColor(IDXGISwapChain3* This,DXGI_RGBA *pColor) {
+    return This->lpVtbl->GetBackgroundColor(This,pColor);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_SetRotation(IDXGISwapChain3* This,DXGI_MODE_ROTATION Rotation) {
+    return This->lpVtbl->SetRotation(This,Rotation);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_GetRotation(IDXGISwapChain3* This,DXGI_MODE_ROTATION *pRotation) {
+    return This->lpVtbl->GetRotation(This,pRotation);
+}
+/*** IDXGISwapChain2 methods ***/
+static FORCEINLINE HRESULT IDXGISwapChain3_SetSourceSize(IDXGISwapChain3* This,UINT width,UINT height) {
+    return This->lpVtbl->SetSourceSize(This,width,height);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_GetSourceSize(IDXGISwapChain3* This,UINT *width,UINT *height) {
+    return This->lpVtbl->GetSourceSize(This,width,height);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_SetMaximumFrameLatency(IDXGISwapChain3* This,UINT max_latency) {
+    return This->lpVtbl->SetMaximumFrameLatency(This,max_latency);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_GetMaximumFrameLatency(IDXGISwapChain3* This,UINT *max_latency) {
+    return This->lpVtbl->GetMaximumFrameLatency(This,max_latency);
+}
+static FORCEINLINE HANDLE IDXGISwapChain3_GetFrameLatencyWaitableObject(IDXGISwapChain3* This) {
+    return This->lpVtbl->GetFrameLatencyWaitableObject(This);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_SetMatrixTransform(IDXGISwapChain3* This,const DXGI_MATRIX_3X2_F *matrix) {
+    return This->lpVtbl->SetMatrixTransform(This,matrix);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_GetMatrixTransform(IDXGISwapChain3* This,DXGI_MATRIX_3X2_F *matrix) {
+    return This->lpVtbl->GetMatrixTransform(This,matrix);
+}
+/*** IDXGISwapChain3 methods ***/
+static FORCEINLINE UINT IDXGISwapChain3_GetCurrentBackBufferIndex(IDXGISwapChain3* This) {
+    return This->lpVtbl->GetCurrentBackBufferIndex(This);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_CheckColorSpaceSupport(IDXGISwapChain3* This,DXGI_COLOR_SPACE_TYPE ColorSpace,UINT *pColorSpaceSupport) {
+    return This->lpVtbl->CheckColorSpaceSupport(This,ColorSpace,pColorSpaceSupport);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_SetColorSpace1(IDXGISwapChain3* This,DXGI_COLOR_SPACE_TYPE ColorSpace) {
+    return This->lpVtbl->SetColorSpace1(This,ColorSpace);
+}
+static FORCEINLINE HRESULT IDXGISwapChain3_ResizeBuffers1(IDXGISwapChain3* This,UINT BufferCount,UINT Width,UINT Height,DXGI_FORMAT Format,UINT SwapChainFlags,const UINT *pCreationNodeMask,IUnknown *const *ppPresentQueue) {
+    return This->lpVtbl->ResizeBuffers1(This,BufferCount,Width,Height,Format,SwapChainFlags,pCreationNodeMask,ppPresentQueue);
+}
+#endif
+#endif
+
+#endif
+
+UINT STDMETHODCALLTYPE IDXGISwapChain3_GetCurrentBackBufferIndex_Proxy(
+    IDXGISwapChain3* This);
+void __RPC_STUB IDXGISwapChain3_GetCurrentBackBufferIndex_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IDXGISwapChain3_CheckColorSpaceSupport_Proxy(
+    IDXGISwapChain3* This,
+    DXGI_COLOR_SPACE_TYPE ColorSpace,
+    UINT *pColorSpaceSupport);
+void __RPC_STUB IDXGISwapChain3_CheckColorSpaceSupport_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IDXGISwapChain3_SetColorSpace1_Proxy(
+    IDXGISwapChain3* This,
+    DXGI_COLOR_SPACE_TYPE ColorSpace);
+void __RPC_STUB IDXGISwapChain3_SetColorSpace1_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+HRESULT STDMETHODCALLTYPE IDXGISwapChain3_ResizeBuffers1_Proxy(
+    IDXGISwapChain3* This,
+    UINT BufferCount,
+    UINT Width,
+    UINT Height,
+    DXGI_FORMAT Format,
+    UINT SwapChainFlags,
+    const UINT *pCreationNodeMask,
+    IUnknown *const *ppPresentQueue);
+void __RPC_STUB IDXGISwapChain3_ResizeBuffers1_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __IDXGISwapChain3_INTERFACE_DEFINED__ */
+
+typedef enum DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG {
+    DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_PRESENT = 0x1,
+    DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_OVERLAY_PRESENT = 0x2
+} DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG;
+/* Begin additional prototypes for all interfaces */
+
+
+/* End additional prototypes */
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* __dxgi1_4_h__ */
diff --git a/mingw-w64-headers/direct-x/include/dxgi1_4.idl b/mingw-w64-headers/direct-x/include/dxgi1_4.idl
new file mode 100644
index 00000000..1a8e508d
--- /dev/null
+++ b/mingw-w64-headers/direct-x/include/dxgi1_4.idl
@@ -0,0 +1,76 @@
+/*
+ * Copyright 2016 Steve Lhomme
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+import "dxgi1_3.idl";
+
+typedef enum DXGI_COLOR_SPACE_TYPE {
+    DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709         = 0,
+    DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709         = 1,
+    DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P709       = 2,
+    DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P2020      = 3,
+    DXGI_COLOR_SPACE_RESERVED                       = 4,
+    DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601  = 5,
+    DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601     = 6,
+    DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601       = 7,
+    DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709     = 8,
+    DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709       = 9,
+    DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020    = 10,
+    DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020      = 11,
+    DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020      = 12,
+    DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_LEFT_P2020  = 13,
+    DXGI_COLOR_SPACE_RGB_STUDIO_G2084_NONE_P2020    = 14,
+    DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_TOPLEFT_P2020 = 15,
+    DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_TOPLEFT_P2020 = 16,
+    DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P2020        = 17,
+    DXGI_COLOR_SPACE_CUSTOM                         = 0xFFFFFFFF,
+} DXGI_COLOR_SPACE_TYPE;
+
+[
+    object,
+    local,
+    uuid(94d99bdb-f1f8-4ab0-b236-7da0170edab1)
+]
+interface IDXGISwapChain3 : IDXGISwapChain2
+{
+    UINT GetCurrentBackBufferIndex();
+
+    HRESULT CheckColorSpaceSupport(
+        [in] DXGI_COLOR_SPACE_TYPE ColorSpace,
+        [out] UINT* pColorSpaceSupport
+    );
+
+    HRESULT SetColorSpace1(
+        [in] DXGI_COLOR_SPACE_TYPE ColorSpace
+    );
+
+    HRESULT ResizeBuffers1(
+        [in] UINT BufferCount,
+        [in] UINT Width,
+        [in] UINT Height,
+        [in] DXGI_FORMAT Format,
+        [in] UINT SwapChainFlags,
+        [in] const UINT* pCreationNodeMask,
+        [in] IUnknown* const* ppPresentQueue
+    );
+};
+
+typedef enum DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG
+{
+    DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_PRESENT         = 0x01,
+    DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_OVERLAY_PRESENT = 0x02,
+} DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG;
diff --git a/mingw-w64-headers/direct-x/include/dxgi1_5.h b/mingw-w64-headers/direct-x/include/dxgi1_5.h
new file mode 100644
index 00000000..321dea0b
--- /dev/null
+++ b/mingw-w64-headers/direct-x/include/dxgi1_5.h
@@ -0,0 +1,485 @@
+/*** Autogenerated by WIDL 1.6 from dxgi1_5.idl - Do not edit ***/
+
+#ifndef __REQUIRED_RPCNDR_H_VERSION__
+#define __REQUIRED_RPCNDR_H_VERSION__ 475
+#endif
+
+#include <rpc.h>
+#include <rpcndr.h>
+
+#ifndef COM_NO_WINDOWS_H
+#include <windows.h>
+#include <ole2.h>
+#endif
+
+#ifndef __dxgi1_5_h__
+#define __dxgi1_5_h__
+
+/* Forward declarations */
+
+#ifndef __IDXGISwapChain4_FWD_DEFINED__
+#define __IDXGISwapChain4_FWD_DEFINED__
+typedef interface IDXGISwapChain4 IDXGISwapChain4;
+#endif
+
+/* Headers for imported files */
+
+#include <dxgi1_4.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+typedef enum DXGI_HDR_METADATA_TYPE {
+    DXGI_HDR_METADATA_TYPE_NONE = 0x0,
+    DXGI_HDR_METADATA_TYPE_HDR10 = 0x1
+} DXGI_HDR_METADATA_TYPE;
+typedef struct DXGI_HDR_METADATA_HDR10 {
+    UINT16 RedPrimary[2];
+    UINT16 GreenPrimary[2];
+    UINT16 BluePrimary[2];
+    UINT16 WhitePoint[2];
+    UINT MaxMasteringLuminance;
+    UINT MinMasteringLuminance;
+    UINT16 MaxContentLightLevel;
+    UINT16 MaxFrameAverageLightLevel;
+} DXGI_HDR_METADATA_HDR10;
+/*****************************************************************************
+ * IDXGISwapChain4 interface
+ */
+#ifndef __IDXGISwapChain4_INTERFACE_DEFINED__
+#define __IDXGISwapChain4_INTERFACE_DEFINED__
+
+DEFINE_GUID(IID_IDXGISwapChain4, 0x3d585d5a, 0xbd4a, 0x489e, 0xb1,0xf4, 0x3d,0xbc,0xb6,0x45,0x2f,0xfb);
+#if defined(__cplusplus) && !defined(CINTERFACE)
+MIDL_INTERFACE("3d585d5a-bd4a-489e-b1f4-3dbcb6452ffb")
+IDXGISwapChain4 : public IDXGISwapChain3
+{
+    virtual HRESULT STDMETHODCALLTYPE SetHDRMetaData(
+        DXGI_HDR_METADATA_TYPE Type,
+        UINT Size,
+        void *pMetaData) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(IDXGISwapChain4, 0x3d585d5a, 0xbd4a, 0x489e, 0xb1,0xf4, 0x3d,0xbc,0xb6,0x45,0x2f,0xfb)
+#endif
+#else
+typedef struct IDXGISwapChain4Vtbl {
+    BEGIN_INTERFACE
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        IDXGISwapChain4* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        IDXGISwapChain4* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        IDXGISwapChain4* This);
+
+    /*** IDXGIObject methods ***/
+    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
+        IDXGISwapChain4* This,
+        REFGUID guid,
+        UINT data_size,
+        const void *data);
+
+    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
+        IDXGISwapChain4* This,
+        REFGUID guid,
+        const IUnknown *object);
+
+    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
+        IDXGISwapChain4* This,
+        REFGUID guid,
+        UINT *data_size,
+        void *data);
+
+    HRESULT (STDMETHODCALLTYPE *GetParent)(
+        IDXGISwapChain4* This,
+        REFIID riid,
+        void **parent);
+
+    /*** IDXGIDeviceSubObject methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetDevice)(
+        IDXGISwapChain4* This,
+        REFIID riid,
+        void **device);
+
+    /*** IDXGISwapChain methods ***/
+    HRESULT (STDMETHODCALLTYPE *Present)(
+        IDXGISwapChain4* This,
+        UINT sync_interval,
+        UINT flags);
+
+    HRESULT (STDMETHODCALLTYPE *GetBuffer)(
+        IDXGISwapChain4* This,
+        UINT buffer_idx,
+        REFIID riid,
+        void **surface);
+
+    HRESULT (STDMETHODCALLTYPE *SetFullscreenState)(
+        IDXGISwapChain4* This,
+        WINBOOL fullscreen,
+        IDXGIOutput *target);
+
+    HRESULT (STDMETHODCALLTYPE *GetFullscreenState)(
+        IDXGISwapChain4* This,
+        WINBOOL *fullscreen,
+        IDXGIOutput **target);
+
+    HRESULT (STDMETHODCALLTYPE *GetDesc)(
+        IDXGISwapChain4* This,
+        DXGI_SWAP_CHAIN_DESC *desc);
+
+    HRESULT (STDMETHODCALLTYPE *ResizeBuffers)(
+        IDXGISwapChain4* This,
+        UINT buffer_count,
+        UINT width,
+        UINT height,
+        DXGI_FORMAT format,
+        UINT flags);
+
+    HRESULT (STDMETHODCALLTYPE *ResizeTarget)(
+        IDXGISwapChain4* This,
+        const DXGI_MODE_DESC *target_mode_desc);
+
+    HRESULT (STDMETHODCALLTYPE *GetContainingOutput)(
+        IDXGISwapChain4* This,
+        IDXGIOutput **output);
+
+    HRESULT (STDMETHODCALLTYPE *GetFrameStatistics)(
+        IDXGISwapChain4* This,
+        DXGI_FRAME_STATISTICS *stats);
+
+    HRESULT (STDMETHODCALLTYPE *GetLastPresentCount)(
+        IDXGISwapChain4* This,
+        UINT *last_present_count);
+
+    /*** IDXGISwapChain1 methods ***/
+    HRESULT (STDMETHODCALLTYPE *GetDesc1)(
+        IDXGISwapChain4* This,
+        DXGI_SWAP_CHAIN_DESC1 *pDesc);
+
+    HRESULT (STDMETHODCALLTYPE *GetFullscreenDesc)(
+        IDXGISwapChain4* This,
+        DXGI_SWAP_CHAIN_FULLSCREEN_DESC *pDesc);
+
+    HRESULT (STDMETHODCALLTYPE *GetHwnd)(
+        IDXGISwapChain4* This,
+        HWND *pHwnd);
+
+    HRESULT (STDMETHODCALLTYPE *GetCoreWindow)(
+        IDXGISwapChain4* This,
+        REFIID refiid,
+        void **ppUnk);
+
+    HRESULT (STDMETHODCALLTYPE *Present1)(
+        IDXGISwapChain4* This,
+        UINT SyncInterval,
+        UINT PresentFlags,
+        const DXGI_PRESENT_PARAMETERS *pPresentParameters);
+
+    WINBOOL (STDMETHODCALLTYPE *IsTemporaryMonoSupported)(
+        IDXGISwapChain4* This);
+
+    HRESULT (STDMETHODCALLTYPE *GetRestrictToOutput)(
+        IDXGISwapChain4* This,
+        IDXGIOutput **ppRestrictToOutput);
+
+    HRESULT (STDMETHODCALLTYPE *SetBackgroundColor)(
+        IDXGISwapChain4* This,
+        const DXGI_RGBA *pColor);
+
+    HRESULT (STDMETHODCALLTYPE *GetBackgroundColor)(
+        IDXGISwapChain4* This,
+        DXGI_RGBA *pColor);
+
+    HRESULT (STDMETHODCALLTYPE *SetRotation)(
+        IDXGISwapChain4* This,
+        DXGI_MODE_ROTATION Rotation);
+
+    HRESULT (STDMETHODCALLTYPE *GetRotation)(
+        IDXGISwapChain4* This,
+        DXGI_MODE_ROTATION *pRotation);
+
+    /*** IDXGISwapChain2 methods ***/
+    HRESULT (STDMETHODCALLTYPE *SetSourceSize)(
+        IDXGISwapChain4* This,
+        UINT width,
+        UINT height);
+
+    HRESULT (STDMETHODCALLTYPE *GetSourceSize)(
+        IDXGISwapChain4* This,
+        UINT *width,
+        UINT *height);
+
+    HRESULT (STDMETHODCALLTYPE *SetMaximumFrameLatency)(
+        IDXGISwapChain4* This,
+        UINT max_latency);
+
+    HRESULT (STDMETHODCALLTYPE *GetMaximumFrameLatency)(
+        IDXGISwapChain4* This,
+        UINT *max_latency);
+
+    HANDLE (STDMETHODCALLTYPE *GetFrameLatencyWaitableObject)(
+        IDXGISwapChain4* This);
+
+    HRESULT (STDMETHODCALLTYPE *SetMatrixTransform)(
+        IDXGISwapChain4* This,
+        const DXGI_MATRIX_3X2_F *matrix);
+
+    HRESULT (STDMETHODCALLTYPE *GetMatrixTransform)(
+        IDXGISwapChain4* This,
+        DXGI_MATRIX_3X2_F *matrix);
+
+    /*** IDXGISwapChain3 methods ***/
+    UINT (STDMETHODCALLTYPE *GetCurrentBackBufferIndex)(
+        IDXGISwapChain4* This);
+
+    HRESULT (STDMETHODCALLTYPE *CheckColorSpaceSupport)(
+        IDXGISwapChain4* This,
+        DXGI_COLOR_SPACE_TYPE ColorSpace,
+        UINT *pColorSpaceSupport);
+
+    HRESULT (STDMETHODCALLTYPE *SetColorSpace1)(
+        IDXGISwapChain4* This,
+        DXGI_COLOR_SPACE_TYPE ColorSpace);
+
+    HRESULT (STDMETHODCALLTYPE *ResizeBuffers1)(
+        IDXGISwapChain4* This,
+        UINT BufferCount,
+        UINT Width,
+        UINT Height,
+        DXGI_FORMAT Format,
+        UINT SwapChainFlags,
+        const UINT *pCreationNodeMask,
+        IUnknown *const *ppPresentQueue);
+
+    /*** IDXGISwapChain4 methods ***/
+    HRESULT (STDMETHODCALLTYPE *SetHDRMetaData)(
+        IDXGISwapChain4* This,
+        DXGI_HDR_METADATA_TYPE Type,
+        UINT Size,
+        void *pMetaData);
+
+    END_INTERFACE
+} IDXGISwapChain4Vtbl;
+interface IDXGISwapChain4 {
+    CONST_VTBL IDXGISwapChain4Vtbl* lpVtbl;
+};
+
+#ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
+#define IDXGISwapChain4_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define IDXGISwapChain4_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define IDXGISwapChain4_Release(This) (This)->lpVtbl->Release(This)
+/*** IDXGIObject methods ***/
+#define IDXGISwapChain4_SetPrivateData(This,guid,data_size,data) (This)->lpVtbl->SetPrivateData(This,guid,data_size,data)
+#define IDXGISwapChain4_SetPrivateDataInterface(This,guid,object) (This)->lpVtbl->SetPrivateDataInterface(This,guid,object)
+#define IDXGISwapChain4_GetPrivateData(This,guid,data_size,data) (This)->lpVtbl->GetPrivateData(This,guid,data_size,data)
+#define IDXGISwapChain4_GetParent(This,riid,parent) (This)->lpVtbl->GetParent(This,riid,parent)
+/*** IDXGIDeviceSubObject methods ***/
+#define IDXGISwapChain4_GetDevice(This,riid,device) (This)->lpVtbl->GetDevice(This,riid,device)
+/*** IDXGISwapChain methods ***/
+#define IDXGISwapChain4_Present(This,sync_interval,flags) (This)->lpVtbl->Present(This,sync_interval,flags)
+#define IDXGISwapChain4_GetBuffer(This,buffer_idx,riid,surface) (This)->lpVtbl->GetBuffer(This,buffer_idx,riid,surface)
+#define IDXGISwapChain4_SetFullscreenState(This,fullscreen,target) (This)->lpVtbl->SetFullscreenState(This,fullscreen,target)
+#define IDXGISwapChain4_GetFullscreenState(This,fullscreen,target) (This)->lpVtbl->GetFullscreenState(This,fullscreen,target)
+#define IDXGISwapChain4_GetDesc(This,desc) (This)->lpVtbl->GetDesc(This,desc)
+#define IDXGISwapChain4_ResizeBuffers(This,buffer_count,width,height,format,flags) (This)->lpVtbl->ResizeBuffers(This,buffer_count,width,height,format,flags)
+#define IDXGISwapChain4_ResizeTarget(This,target_mode_desc) (This)->lpVtbl->ResizeTarget(This,target_mode_desc)
+#define IDXGISwapChain4_GetContainingOutput(This,output) (This)->lpVtbl->GetContainingOutput(This,output)
+#define IDXGISwapChain4_GetFrameStatistics(This,stats) (This)->lpVtbl->GetFrameStatistics(This,stats)
+#define IDXGISwapChain4_GetLastPresentCount(This,last_present_count) (This)->lpVtbl->GetLastPresentCount(This,last_present_count)
+/*** IDXGISwapChain1 methods ***/
+#define IDXGISwapChain4_GetDesc1(This,pDesc) (This)->lpVtbl->GetDesc1(This,pDesc)
+#define IDXGISwapChain4_GetFullscreenDesc(This,pDesc) (This)->lpVtbl->GetFullscreenDesc(This,pDesc)
+#define IDXGISwapChain4_GetHwnd(This,pHwnd) (This)->lpVtbl->GetHwnd(This,pHwnd)
+#define IDXGISwapChain4_GetCoreWindow(This,refiid,ppUnk) (This)->lpVtbl->GetCoreWindow(This,refiid,ppUnk)
+#define IDXGISwapChain4_Present1(This,SyncInterval,PresentFlags,pPresentParameters) (This)->lpVtbl->Present1(This,SyncInterval,PresentFlags,pPresentParameters)
+#define IDXGISwapChain4_IsTemporaryMonoSupported(This) (This)->lpVtbl->IsTemporaryMonoSupported(This)
+#define IDXGISwapChain4_GetRestrictToOutput(This,ppRestrictToOutput) (This)->lpVtbl->GetRestrictToOutput(This,ppRestrictToOutput)
+#define IDXGISwapChain4_SetBackgroundColor(This,pColor) (This)->lpVtbl->SetBackgroundColor(This,pColor)
+#define IDXGISwapChain4_GetBackgroundColor(This,pColor) (This)->lpVtbl->GetBackgroundColor(This,pColor)
+#define IDXGISwapChain4_SetRotation(This,Rotation) (This)->lpVtbl->SetRotation(This,Rotation)
+#define IDXGISwapChain4_GetRotation(This,pRotation) (This)->lpVtbl->GetRotation(This,pRotation)
+/*** IDXGISwapChain2 methods ***/
+#define IDXGISwapChain4_SetSourceSize(This,width,height) (This)->lpVtbl->SetSourceSize(This,width,height)
+#define IDXGISwapChain4_GetSourceSize(This,width,height) (This)->lpVtbl->GetSourceSize(This,width,height)
+#define IDXGISwapChain4_SetMaximumFrameLatency(This,max_latency) (This)->lpVtbl->SetMaximumFrameLatency(This,max_latency)
+#define IDXGISwapChain4_GetMaximumFrameLatency(This,max_latency) (This)->lpVtbl->GetMaximumFrameLatency(This,max_latency)
+#define IDXGISwapChain4_GetFrameLatencyWaitableObject(This) (This)->lpVtbl->GetFrameLatencyWaitableObject(This)
+#define IDXGISwapChain4_SetMatrixTransform(This,matrix) (This)->lpVtbl->SetMatrixTransform(This,matrix)
+#define IDXGISwapChain4_GetMatrixTransform(This,matrix) (This)->lpVtbl->GetMatrixTransform(This,matrix)
+/*** IDXGISwapChain3 methods ***/
+#define IDXGISwapChain4_GetCurrentBackBufferIndex(This) (This)->lpVtbl->GetCurrentBackBufferIndex(This)
+#define IDXGISwapChain4_CheckColorSpaceSupport(This,ColorSpace,pColorSpaceSupport) (This)->lpVtbl->CheckColorSpaceSupport(This,ColorSpace,pColorSpaceSupport)
+#define IDXGISwapChain4_SetColorSpace1(This,ColorSpace) (This)->lpVtbl->SetColorSpace1(This,ColorSpace)
+#define IDXGISwapChain4_ResizeBuffers1(This,BufferCount,Width,Height,Format,SwapChainFlags,pCreationNodeMask,ppPresentQueue) (This)->lpVtbl->ResizeBuffers1(This,BufferCount,Width,Height,Format,SwapChainFlags,pCreationNodeMask,ppPresentQueue)
+/*** IDXGISwapChain4 methods ***/
+#define IDXGISwapChain4_SetHDRMetaData(This,Type,Size,pMetaData) (This)->lpVtbl->SetHDRMetaData(This,Type,Size,pMetaData)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT IDXGISwapChain4_QueryInterface(IDXGISwapChain4* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG IDXGISwapChain4_AddRef(IDXGISwapChain4* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG IDXGISwapChain4_Release(IDXGISwapChain4* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IDXGIObject methods ***/
+static FORCEINLINE HRESULT IDXGISwapChain4_SetPrivateData(IDXGISwapChain4* This,REFGUID guid,UINT data_size,const void *data) {
+    return This->lpVtbl->SetPrivateData(This,guid,data_size,data);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_SetPrivateDataInterface(IDXGISwapChain4* This,REFGUID guid,const IUnknown *object) {
+    return This->lpVtbl->SetPrivateDataInterface(This,guid,object);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_GetPrivateData(IDXGISwapChain4* This,REFGUID guid,UINT *data_size,void *data) {
+    return This->lpVtbl->GetPrivateData(This,guid,data_size,data);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_GetParent(IDXGISwapChain4* This,REFIID riid,void **parent) {
+    return This->lpVtbl->GetParent(This,riid,parent);
+}
+/*** IDXGIDeviceSubObject methods ***/
+static FORCEINLINE HRESULT IDXGISwapChain4_GetDevice(IDXGISwapChain4* This,REFIID riid,void **device) {
+    return This->lpVtbl->GetDevice(This,riid,device);
+}
+/*** IDXGISwapChain methods ***/
+static FORCEINLINE HRESULT IDXGISwapChain4_Present(IDXGISwapChain4* This,UINT sync_interval,UINT flags) {
+    return This->lpVtbl->Present(This,sync_interval,flags);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_GetBuffer(IDXGISwapChain4* This,UINT buffer_idx,REFIID riid,void **surface) {
+    return This->lpVtbl->GetBuffer(This,buffer_idx,riid,surface);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_SetFullscreenState(IDXGISwapChain4* This,WINBOOL fullscreen,IDXGIOutput *target) {
+    return This->lpVtbl->SetFullscreenState(This,fullscreen,target);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_GetFullscreenState(IDXGISwapChain4* This,WINBOOL *fullscreen,IDXGIOutput **target) {
+    return This->lpVtbl->GetFullscreenState(This,fullscreen,target);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_GetDesc(IDXGISwapChain4* This,DXGI_SWAP_CHAIN_DESC *desc) {
+    return This->lpVtbl->GetDesc(This,desc);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_ResizeBuffers(IDXGISwapChain4* This,UINT buffer_count,UINT width,UINT height,DXGI_FORMAT format,UINT flags) {
+    return This->lpVtbl->ResizeBuffers(This,buffer_count,width,height,format,flags);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_ResizeTarget(IDXGISwapChain4* This,const DXGI_MODE_DESC *target_mode_desc) {
+    return This->lpVtbl->ResizeTarget(This,target_mode_desc);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_GetContainingOutput(IDXGISwapChain4* This,IDXGIOutput **output) {
+    return This->lpVtbl->GetContainingOutput(This,output);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_GetFrameStatistics(IDXGISwapChain4* This,DXGI_FRAME_STATISTICS *stats) {
+    return This->lpVtbl->GetFrameStatistics(This,stats);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_GetLastPresentCount(IDXGISwapChain4* This,UINT *last_present_count) {
+    return This->lpVtbl->GetLastPresentCount(This,last_present_count);
+}
+/*** IDXGISwapChain1 methods ***/
+static FORCEINLINE HRESULT IDXGISwapChain4_GetDesc1(IDXGISwapChain4* This,DXGI_SWAP_CHAIN_DESC1 *pDesc) {
+    return This->lpVtbl->GetDesc1(This,pDesc);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_GetFullscreenDesc(IDXGISwapChain4* This,DXGI_SWAP_CHAIN_FULLSCREEN_DESC *pDesc) {
+    return This->lpVtbl->GetFullscreenDesc(This,pDesc);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_GetHwnd(IDXGISwapChain4* This,HWND *pHwnd) {
+    return This->lpVtbl->GetHwnd(This,pHwnd);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_GetCoreWindow(IDXGISwapChain4* This,REFIID refiid,void **ppUnk) {
+    return This->lpVtbl->GetCoreWindow(This,refiid,ppUnk);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_Present1(IDXGISwapChain4* This,UINT SyncInterval,UINT PresentFlags,const DXGI_PRESENT_PARAMETERS *pPresentParameters) {
+    return This->lpVtbl->Present1(This,SyncInterval,PresentFlags,pPresentParameters);
+}
+static FORCEINLINE WINBOOL IDXGISwapChain4_IsTemporaryMonoSupported(IDXGISwapChain4* This) {
+    return This->lpVtbl->IsTemporaryMonoSupported(This);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_GetRestrictToOutput(IDXGISwapChain4* This,IDXGIOutput **ppRestrictToOutput) {
+    return This->lpVtbl->GetRestrictToOutput(This,ppRestrictToOutput);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_SetBackgroundColor(IDXGISwapChain4* This,const DXGI_RGBA *pColor) {
+    return This->lpVtbl->SetBackgroundColor(This,pColor);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_GetBackgroundColor(IDXGISwapChain4* This,DXGI_RGBA *pColor) {
+    return This->lpVtbl->GetBackgroundColor(This,pColor);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_SetRotation(IDXGISwapChain4* This,DXGI_MODE_ROTATION Rotation) {
+    return This->lpVtbl->SetRotation(This,Rotation);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_GetRotation(IDXGISwapChain4* This,DXGI_MODE_ROTATION *pRotation) {
+    return This->lpVtbl->GetRotation(This,pRotation);
+}
+/*** IDXGISwapChain2 methods ***/
+static FORCEINLINE HRESULT IDXGISwapChain4_SetSourceSize(IDXGISwapChain4* This,UINT width,UINT height) {
+    return This->lpVtbl->SetSourceSize(This,width,height);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_GetSourceSize(IDXGISwapChain4* This,UINT *width,UINT *height) {
+    return This->lpVtbl->GetSourceSize(This,width,height);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_SetMaximumFrameLatency(IDXGISwapChain4* This,UINT max_latency) {
+    return This->lpVtbl->SetMaximumFrameLatency(This,max_latency);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_GetMaximumFrameLatency(IDXGISwapChain4* This,UINT *max_latency) {
+    return This->lpVtbl->GetMaximumFrameLatency(This,max_latency);
+}
+static FORCEINLINE HANDLE IDXGISwapChain4_GetFrameLatencyWaitableObject(IDXGISwapChain4* This) {
+    return This->lpVtbl->GetFrameLatencyWaitableObject(This);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_SetMatrixTransform(IDXGISwapChain4* This,const DXGI_MATRIX_3X2_F *matrix) {
+    return This->lpVtbl->SetMatrixTransform(This,matrix);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_GetMatrixTransform(IDXGISwapChain4* This,DXGI_MATRIX_3X2_F *matrix) {
+    return This->lpVtbl->GetMatrixTransform(This,matrix);
+}
+/*** IDXGISwapChain3 methods ***/
+static FORCEINLINE UINT IDXGISwapChain4_GetCurrentBackBufferIndex(IDXGISwapChain4* This) {
+    return This->lpVtbl->GetCurrentBackBufferIndex(This);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_CheckColorSpaceSupport(IDXGISwapChain4* This,DXGI_COLOR_SPACE_TYPE ColorSpace,UINT *pColorSpaceSupport) {
+    return This->lpVtbl->CheckColorSpaceSupport(This,ColorSpace,pColorSpaceSupport);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_SetColorSpace1(IDXGISwapChain4* This,DXGI_COLOR_SPACE_TYPE ColorSpace) {
+    return This->lpVtbl->SetColorSpace1(This,ColorSpace);
+}
+static FORCEINLINE HRESULT IDXGISwapChain4_ResizeBuffers1(IDXGISwapChain4* This,UINT BufferCount,UINT Width,UINT Height,DXGI_FORMAT Format,UINT SwapChainFlags,const UINT *pCreationNodeMask,IUnknown *const *ppPresentQueue) {
+    return This->lpVtbl->ResizeBuffers1(This,BufferCount,Width,Height,Format,SwapChainFlags,pCreationNodeMask,ppPresentQueue);
+}
+/*** IDXGISwapChain4 methods ***/
+static FORCEINLINE HRESULT IDXGISwapChain4_SetHDRMetaData(IDXGISwapChain4* This,DXGI_HDR_METADATA_TYPE Type,UINT Size,void *pMetaData) {
+    return This->lpVtbl->SetHDRMetaData(This,Type,Size,pMetaData);
+}
+#endif
+#endif
+
+#endif
+
+HRESULT STDMETHODCALLTYPE IDXGISwapChain4_SetHDRMetaData_Proxy(
+    IDXGISwapChain4* This,
+    DXGI_HDR_METADATA_TYPE Type,
+    UINT Size,
+    void *pMetaData);
+void __RPC_STUB IDXGISwapChain4_SetHDRMetaData_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __IDXGISwapChain4_INTERFACE_DEFINED__ */
+
+/* Begin additional prototypes for all interfaces */
+
+
+/* End additional prototypes */
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* __dxgi1_5_h__ */
diff --git a/mingw-w64-headers/direct-x/include/dxgi1_5.idl b/mingw-w64-headers/direct-x/include/dxgi1_5.idl
new file mode 100644
index 00000000..67a08684
--- /dev/null
+++ b/mingw-w64-headers/direct-x/include/dxgi1_5.idl
@@ -0,0 +1,51 @@
+/*
+ * Copyright 2017 Steve Lhomme
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+import "dxgi1_4.idl";
+
+typedef enum DXGI_HDR_METADATA_TYPE
+{
+    DXGI_HDR_METADATA_TYPE_NONE    = 0x00,
+    DXGI_HDR_METADATA_TYPE_HDR10   = 0x01,
+} DXGI_HDR_METADATA_TYPE;
+
+typedef struct DXGI_HDR_METADATA_HDR10
+{
+    UINT16 RedPrimary[2];
+    UINT16 GreenPrimary[2];
+    UINT16 BluePrimary[2];
+    UINT16 WhitePoint[2];
+    UINT   MaxMasteringLuminance;
+    UINT   MinMasteringLuminance;
+    UINT16 MaxContentLightLevel;
+    UINT16 MaxFrameAverageLightLevel;
+} DXGI_HDR_METADATA_HDR10;
+
+[
+    object,
+    local,
+    uuid(3d585d5a-bd4a-489e-b1f4-3dbcb6452ffb)
+]
+interface IDXGISwapChain4 : IDXGISwapChain3
+{
+    HRESULT SetHDRMetaData(
+        [in] DXGI_HDR_METADATA_TYPE Type,
+        [in] UINT Size,
+        [in] void* pMetaData
+    );
+};
diff --git a/mingw-w64-headers/direct-x/include/dxgidebug.h b/mingw-w64-headers/direct-x/include/dxgidebug.h
new file mode 100644
index 00000000..d992721f
--- /dev/null
+++ b/mingw-w64-headers/direct-x/include/dxgidebug.h
@@ -0,0 +1,139 @@
+/*** Autogenerated by WIDL 1.6 from dxgidebug.idl - Do not edit ***/
+
+#ifndef __REQUIRED_RPCNDR_H_VERSION__
+#define __REQUIRED_RPCNDR_H_VERSION__ 475
+#endif
+
+#include <rpc.h>
+#include <rpcndr.h>
+
+#ifndef COM_NO_WINDOWS_H
+#include <windows.h>
+#include <ole2.h>
+#endif
+
+#ifndef __dxgidebug_h__
+#define __dxgidebug_h__
+
+/* Forward declarations */
+
+#ifndef __IDXGIDebug_FWD_DEFINED__
+#define __IDXGIDebug_FWD_DEFINED__
+typedef interface IDXGIDebug IDXGIDebug;
+#endif
+
+/* Headers for imported files */
+
+#include <oaidl.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+DEFINE_GUID(DXGI_DEBUG_ALL,   0xe48ae283, 0xda80, 0x490b,0x87, 0xe6, 0x43, 0xe9, 0xa9, 0xcf, 0xda, 0x08);
+DEFINE_GUID(DXGI_DEBUG_DX,    0x35cdd7fc, 0x13b2, 0x421d,0xa5, 0xd7, 0x7e, 0x44, 0x51, 0x28, 0x7d, 0x64);
+DEFINE_GUID(DXGI_DEBUG_DXGI,  0x25cddaa4, 0xb1c6, 0x47e1,0xac, 0x3e, 0x98, 0x87, 0x5b, 0x5a, 0x2e, 0x2a);
+DEFINE_GUID(DXGI_DEBUG_APP,   0x06cd6e01, 0x4219, 0x4ebd,0x87, 0x90, 0x27, 0xed, 0x23, 0x36, 0x0c, 0x62);
+typedef enum DXGI_DEBUG_RLO_FLAGS {
+    DXGI_DEBUG_RLO_SUMMARY = 0x1,
+    DXGI_DEBUG_RLO_DETAIL = 0x2,
+    DXGI_DEBUG_RLO_IGNORE_INTERNAL = 0x4,
+    DXGI_DEBUG_RLO_ALL = 0x7
+} DXGI_DEBUG_RLO_FLAGS;
+/*****************************************************************************
+ * IDXGIDebug interface
+ */
+#ifndef __IDXGIDebug_INTERFACE_DEFINED__
+#define __IDXGIDebug_INTERFACE_DEFINED__
+
+DEFINE_GUID(IID_IDXGIDebug, 0x119e7452, 0xde9e, 0x40fe, 0x88,0x06, 0x88,0xf9,0x0c,0x12,0xb4,0x41);
+#if defined(__cplusplus) && !defined(CINTERFACE)
+MIDL_INTERFACE("119e7452-de9e-40fe-8806-88f90c12b441")
+IDXGIDebug : public IUnknown
+{
+    virtual HRESULT STDMETHODCALLTYPE ReportLiveObjects(
+        GUID apiid,
+        DXGI_DEBUG_RLO_FLAGS flags) = 0;
+
+};
+#ifdef __CRT_UUID_DECL
+__CRT_UUID_DECL(IDXGIDebug, 0x119e7452, 0xde9e, 0x40fe, 0x88,0x06, 0x88,0xf9,0x0c,0x12,0xb4,0x41)
+#endif
+#else
+typedef struct IDXGIDebugVtbl {
+    BEGIN_INTERFACE
+
+    /*** IUnknown methods ***/
+    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
+        IDXGIDebug* This,
+        REFIID riid,
+        void **ppvObject);
+
+    ULONG (STDMETHODCALLTYPE *AddRef)(
+        IDXGIDebug* This);
+
+    ULONG (STDMETHODCALLTYPE *Release)(
+        IDXGIDebug* This);
+
+    /*** IDXGIDebug methods ***/
+    HRESULT (STDMETHODCALLTYPE *ReportLiveObjects)(
+        IDXGIDebug* This,
+        GUID apiid,
+        DXGI_DEBUG_RLO_FLAGS flags);
+
+    END_INTERFACE
+} IDXGIDebugVtbl;
+interface IDXGIDebug {
+    CONST_VTBL IDXGIDebugVtbl* lpVtbl;
+};
+
+#ifdef COBJMACROS
+#ifndef WIDL_C_INLINE_WRAPPERS
+/*** IUnknown methods ***/
+#define IDXGIDebug_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
+#define IDXGIDebug_AddRef(This) (This)->lpVtbl->AddRef(This)
+#define IDXGIDebug_Release(This) (This)->lpVtbl->Release(This)
+/*** IDXGIDebug methods ***/
+#define IDXGIDebug_ReportLiveObjects(This,apiid,flags) (This)->lpVtbl->ReportLiveObjects(This,apiid,flags)
+#else
+/*** IUnknown methods ***/
+static FORCEINLINE HRESULT IDXGIDebug_QueryInterface(IDXGIDebug* This,REFIID riid,void **ppvObject) {
+    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
+}
+static FORCEINLINE ULONG IDXGIDebug_AddRef(IDXGIDebug* This) {
+    return This->lpVtbl->AddRef(This);
+}
+static FORCEINLINE ULONG IDXGIDebug_Release(IDXGIDebug* This) {
+    return This->lpVtbl->Release(This);
+}
+/*** IDXGIDebug methods ***/
+static FORCEINLINE HRESULT IDXGIDebug_ReportLiveObjects(IDXGIDebug* This,GUID apiid,DXGI_DEBUG_RLO_FLAGS flags) {
+    return This->lpVtbl->ReportLiveObjects(This,apiid,flags);
+}
+#endif
+#endif
+
+#endif
+
+HRESULT STDMETHODCALLTYPE IDXGIDebug_ReportLiveObjects_Proxy(
+    IDXGIDebug* This,
+    GUID apiid,
+    DXGI_DEBUG_RLO_FLAGS flags);
+void __RPC_STUB IDXGIDebug_ReportLiveObjects_Stub(
+    IRpcStubBuffer* This,
+    IRpcChannelBuffer* pRpcChannelBuffer,
+    PRPC_MESSAGE pRpcMessage,
+    DWORD* pdwStubPhase);
+
+#endif  /* __IDXGIDebug_INTERFACE_DEFINED__ */
+
+/* Begin additional prototypes for all interfaces */
+
+
+/* End additional prototypes */
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* __dxgidebug_h__ */
diff --git a/mingw-w64-headers/direct-x/include/dxgidebug.idl b/mingw-w64-headers/direct-x/include/dxgidebug.idl
new file mode 100644
index 00000000..7ed13940
--- /dev/null
+++ b/mingw-w64-headers/direct-x/include/dxgidebug.idl
@@ -0,0 +1,43 @@
+/*
+ * Copyright 2015 Steve Lhomme
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA02110-1301, USA
+ */
+
+import "oaidl.idl";
+
+cpp_quote("DEFINE_GUID(DXGI_DEBUG_ALL,   0xe48ae283, 0xda80, 0x490b,0x87, 0xe6, 0x43, 0xe9, 0xa9, 0xcf, 0xda, 0x08);")
+cpp_quote("DEFINE_GUID(DXGI_DEBUG_DX,    0x35cdd7fc, 0x13b2, 0x421d,0xa5, 0xd7, 0x7e, 0x44, 0x51, 0x28, 0x7d, 0x64);")
+cpp_quote("DEFINE_GUID(DXGI_DEBUG_DXGI,  0x25cddaa4, 0xb1c6, 0x47e1,0xac, 0x3e, 0x98, 0x87, 0x5b, 0x5a, 0x2e, 0x2a);")
+cpp_quote("DEFINE_GUID(DXGI_DEBUG_APP,   0x06cd6e01, 0x4219, 0x4ebd,0x87, 0x90, 0x27, 0xed, 0x23, 0x36, 0x0c, 0x62);")
+
+typedef enum DXGI_DEBUG_RLO_FLAGS {
+    DXGI_DEBUG_RLO_SUMMARY         = 0x0001,
+    DXGI_DEBUG_RLO_DETAIL          = 0x0002,
+    DXGI_DEBUG_RLO_IGNORE_INTERNAL = 0x0004,
+    DXGI_DEBUG_RLO_ALL             = 0x0007
+} DXGI_DEBUG_RLO_FLAGS;
+
+[
+    object,
+    local,
+    uuid(119e7452-de9e-40fe-8806-88f90c12b441)
+]
+interface IDXGIDebug : IUnknown
+{
+    HRESULT ReportLiveObjects(
+        [in] GUID apiid,
+        [in] DXGI_DEBUG_RLO_FLAGS flags);
+}
-- 
2.14.1

