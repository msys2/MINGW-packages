From 208e7e93466d02b583012029a60ad958b1eb234b Mon Sep 17 00:00:00 2001
From: Jeremy Tan <jtanx@outlook.com>
Date: Sun, 10 Sep 2017 13:55:41 +1000
Subject: [PATCH] cache: Attempt to prevent premature destruction of global
 cache lock

https://stackoverflow.com/questions/335369/finding-c-static-initialization-order-problems#335746
---
 common/cache-t.hpp | 1 +
 common/cache.cpp   | 8 ++++----
 2 files changed, 5 insertions(+), 4 deletions(-)

diff --git a/common/cache-t.hpp b/common/cache-t.hpp
index c326fd2..b39b847 100644
--- a/common/cache-t.hpp
+++ b/common/cache-t.hpp
@@ -16,6 +16,7 @@ public: // but don't use
   const char * name;
   GlobalCacheBase * next;
   GlobalCacheBase * * prev;
+  static Mutex global_cache_lock;
 protected:
   Cacheable * first;
   void del(Cacheable * d);
diff --git a/common/cache.cpp b/common/cache.cpp
index c4884e5..3cc48ab 100644
--- a/common/cache.cpp
+++ b/common/cache.cpp
@@ -5,8 +5,8 @@
 
 namespace acommon {
 
-static StackPtr<Mutex> global_cache_lock(new Mutex);
 static GlobalCacheBase * first_cache = 0;
+Mutex GlobalCacheBase::global_cache_lock;
 
 void Cacheable::copy() const
 {
@@ -70,7 +70,7 @@ void release_cache_data(GlobalCacheBase * cache, const Cacheable * d)
 GlobalCacheBase::GlobalCacheBase(const char * n)
   : name (n)
 {
-  LOCK(global_cache_lock);
+  LOCK(&global_cache_lock);
   next = first_cache;
   prev = &first_cache;
   if (first_cache) first_cache->prev = &next;
@@ -80,14 +80,14 @@ GlobalCacheBase::GlobalCacheBase(const char * n)
 GlobalCacheBase::~GlobalCacheBase()
 {
   detach_all();
-  LOCK(global_cache_lock);
+  LOCK(&global_cache_lock);
   *prev = next;
   if (next) next->prev = prev;
 }
 
 bool reset_cache(const char * which)
 {
-  LOCK(global_cache_lock);
+  LOCK(&GlobalCacheBase::global_cache_lock);
   bool any = false;
   for (GlobalCacheBase * i = first_cache; i; i = i->next)
   {
-- 
2.13.3

