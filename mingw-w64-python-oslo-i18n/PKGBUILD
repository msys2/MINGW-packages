# Maintainer: J. Peter Mugaas <jpmugaas@suddenlink.net>

_realname=oslo-i18n
pkgbase=mingw-w64-python-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-python2-${_realname}"  "${MINGW_PACKAGE_PREFIX}-python3-${_realname}")
pkgver=3.23.0
pkgrel=1
pkgdesc="Oslo i18n library (mingw-w64)"
arch=('any')
url='https://pypi.python.org/pypi/oslo.i18n/3.21.0'
license=('Apache')
makedepends=("${MINGW_PACKAGE_PREFIX}-python2"
             "${MINGW_PACKAGE_PREFIX}-python3"
             "${MINGW_PACKAGE_PREFIX}-python3-setuptools"
             "${MINGW_PACKAGE_PREFIX}-python2-setuptools")
options=('staticlibs' 'strip' '!debug')
source=("${_realname}-$pkgver.tar.gz"::"https://github.com/openstack/oslo.i18n/archive/$pkgver.tar.gz")
sha512sums=('3191ea88e73ad283c91ac57c4ab4999265daa9f33f6b3c5b8e9f04679ff435844ae380947192738c1466ffb4d03e65e436895a3deb89dbd31c846a6ff9759cb9')

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying $_patch"
    patch -Nbp1 -i "${srcdir}/$_patch"
  done
}

del_file_exists() {
  for _fname in "$@"
  do
    if [ -f $_fname ]; then
      rm -rf $_fname
    fi
  done
}
# =========================================== #

prepare() {
  cd "${srcdir}"
#  pushd "${_realname}-${pkgver}"
#    apply_patch_with_msg 0001-A-really-important-fix.patch \
#      0002-A-less-important-fix.patch
#  popd 
  for builddir in python{2,3}-build-${CARCH}; do
    rm -rf ${builddir} | true
    cp -r "oslo.i18n-${pkgver}" "${builddir}"
  done
  # Set version for setuptools_scm
  export SETUPTOOLS_SCM_PRETEND_VERSION=$pkgver
  # Set version for python_pbr
  export PBR_VERSION=$pkgver
}

# Note that build() is sometimes skipped because it's done in 
# the packages setup.py install for simplicity if you can do so.
# but sometimes, you want to do a check before install which would
# also trigger the build.
build() {
  for pver in {2,3}; do  
    msg "Python ${pver} build for ${CARCH}"  
    cd "${srcdir}/python${pver}-build-${CARCH}"
    ${MINGW_PREFIX}/bin/python${pver} setup.py build
  done  
}

check() {
  for pver in {2,3}; do
    msg "Python ${pver} test for ${CARCH}"
    cd "${srcdir}/python${pver}-build-${CARCH}"
    ${MINGW_PREFIX}/bin/python${pver} setup.py check

    cd "${srcdir}/python3-build-${CARCH}"
#    ${MINGW_PREFIX}/bin/stestr run

    cd "${srcdir}/python2-build-${CARCH}"
#    PYTHON=python2 ${MINGW_PREFIX}/bin/stestr2 run
  done
}

package_python3-oslo-i18n() {
  depends=("${MINGW_PACKAGE_PREFIX}-python3" 
           "${MINGW_PACKAGE_PREFIX}-python3-six"
           "${MINGW_PACKAGE_PREFIX}-python3-pbr"
           "${MINGW_PACKAGE_PREFIX}-python3-babel")

  cd "${srcdir}/python3-build-${CARCH}"
  MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
  ${MINGW_PREFIX}/bin/python3 setup.py install --prefix=${MINGW_PREFIX} \
    --root="${pkgdir}" --optimize=1 --skip-build
}

package_python2-oslo-i18n() {
  depends=("${MINGW_PACKAGE_PREFIX}-python2" 
           "${MINGW_PACKAGE_PREFIX}-python2-six"
           "${MINGW_PACKAGE_PREFIX}-python2-pbr"
           "${MINGW_PACKAGE_PREFIX}-python2-babel")

  cd "${srcdir}/python2-build-${CARCH}"
  MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
  ${MINGW_PREFIX}/bin/python2 setup.py install --prefix=${MINGW_PREFIX} \
    --root="${pkgdir}" --optimize=1 --skip-build
}

package_mingw-w64-i686-python2-oslo-i18n() {
  package_python2-oslo-i18n
}

package_mingw-w64-i686-python3-oslo-i18n() {
  package_python3-oslo-i18n
}

package_mingw-w64-x86_64-python2-oslo-i18n() {
  package_python2-oslo-i18n
}

package_mingw-w64-x86_64-python3-oslo-i18n() {
  package_python3-oslo-i18n
}
