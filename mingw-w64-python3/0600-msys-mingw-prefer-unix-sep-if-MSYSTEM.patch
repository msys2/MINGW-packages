diff -urN a/Include/osdefs.h b/Include/osdefs.h
--- a/Include/osdefs.h	2014-10-11 14:21:54.729296000 +0100
+++ b/Include/osdefs.h	2014-10-11 14:21:56.586402200 +0100
@@ -10,8 +10,13 @@
 /* Mod by chrish: QNX has WATCOM, but isn't DOS */
 #if !defined(__QNX__)
 #if defined(MS_WINDOWS) || defined(__BORLANDC__) || defined(__WATCOMC__) || defined(__DJGPP__)
+#if defined(__MINGW32__)
+#define SEP L'/'
+#define ALTSEP L'\\'
+#else
 #define SEP L'\\'
 #define ALTSEP L'/'
+#endif
 #define MAXPATHLEN 256
 #define DELIM L';'
 #define DELIMSTR ";"
diff -urN a/Lib/ntpath.py b/Lib/ntpath.py
--- a/Lib/ntpath.py	2014-10-11 14:21:53.975252900 +0100
+++ b/Lib/ntpath.py	2014-10-11 14:21:56.588402400 +0100
@@ -24,9 +24,13 @@
 curdir = '.'
 pardir = '..'
 extsep = '.'
-sep = '\\'
+if sys.platform == "win32" and "MSYSTEM" in os.environ:
+    sep = '/'
+    altsep = '\\'
+else:
+    sep = '\\'
+    altsep = '/'
 pathsep = ';'
-altsep = '/'
 defpath = '.;C:\\bin'
 if 'ce' in sys.builtin_module_names:
     defpath = '\\Windows'
@@ -40,21 +44,21 @@
 
 def _get_sep(path):
     if isinstance(path, bytes):
-        return b'\\'
+        return str.encode(sep)
     else:
-        return '\\'
+        return sep
 
 def _get_altsep(path):
     if isinstance(path, bytes):
-        return b'/'
+        return str.encode(altsep)
     else:
-        return '/'
+        return altsep
 
 def _get_bothseps(path):
     if isinstance(path, bytes):
-        return b'\\/'
+        return str.encode(sep+altsep)
     else:
-        return '\\/'
+        return sep+altsep
 
 def _get_dot(path):
     if isinstance(path, bytes):
diff -urN a/Python/pythonrun.c b/Python/pythonrun.c
--- a/Python/pythonrun.c	2014-10-11 14:21:53.853245900 +0100
+++ b/Python/pythonrun.c	2014-10-11 14:21:56.591402500 +0100
@@ -871,17 +871,34 @@
     PyInterpreterState_Delete(interp);
 }
 
-#ifdef MS_WINDOWS
-static wchar_t *progname = L"python";
+
+#if defined(MS_WINDOWS) && !defined(__MINGW32__)
+static wchar_t progname[PATH_MAX+1] = L"python";
 #else
-static wchar_t *progname = L"python3";
+static wchar_t progname[PATH_MAX+1] = L"python3";
 #endif
 
 void
 Py_SetProgramName(wchar_t *pn)
 {
     if (pn && *pn)
-        progname = pn;
+        wcsncpy(progname, pn, PATH_MAX);
+    pn = &progname[0];
+#ifdef __MINGW32__
+  {
+    char* msystem;
+    wchar_t altsep, sep;
+    wchar_t* seps;
+    msystem = Py_GETENV("MSYSTEM");
+    altsep  = msystem ? L'\\' : L'/';
+    sep     = msystem ? L'/'  : L'\\';
+    seps    = wcschr(pn, altsep);
+    while(seps) {
+        *seps = sep;
+        seps = wcschr(seps, altsep);
+    }
+  }
+#endif
 }
 
 wchar_t *
