# Contributor (Fluke): Ricky Wu <rickleaf.wu@gmail.com>

_realname=lsqlite3
pkgbase=mingw-w64-lua-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-lua-${_realname}"
         "${MINGW_PACKAGE_PREFIX}-lua51-${_realname}"
         "${MINGW_PACKAGE_PREFIX}-lua53-${_realname}")
pkgver=0.9.6
pkgrel=3
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clangarm64')
url="http://lua.sqlite.org"
license=('spdx:MIT')
depends=("${MINGW_PACKAGE_PREFIX}-sqlite3")
makedepends=("${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-ninja"
             "${MINGW_PACKAGE_PREFIX}-lua"
             "${MINGW_PACKAGE_PREFIX}-lua51"
             "${MINGW_PACKAGE_PREFIX}-lua53")
source=("lsqlite3_${pkgver}.zip::http://lua.sqlite.org/index.cgi/zip/lsqlite3_v${pkgver//./}.zip?uuid=v${pkgver}"
        "CMakeLists.txt"
        "MSYS2-GetLuaInfoFromPkgConfig-v1.0.0.cmake"
        "https://github.com/dcurrie/lunit/archive/refs/tags/0.8.1.tar.gz")
sha256sums=('09c826da84f470d97b350a85308f1b6f8523b25fccc8f98110c0b9fbca211a09'
            'a6c8da1f1e492fa1802692e275fbc14438926206c4488fec115a35ed8364c7f3'
            '07778c5d92b5f82af6af3409ed7bcb334e52557505634cbaa8166e8bfc9da9ed'
            'e571ff01cb8f8f77dceeb098359bc5d7f5b4b696023e3b9d5ee1b4c3d986ac32')

prepare() {
  cp "${srcdir}"/CMakeLists.txt "${srcdir}/${_realname}_v${pkgver//./}"
  cp "${srcdir}"/MSYS2-GetLuaInfoFromPkgConfig-v1.0.0.cmake "${srcdir}/${_realname}_v${pkgver//./}"
  mv "${srcdir}"/lunit-0.8.1 "${srcdir}/lunit"
}

build() {
  declare -a extra_config
  if check_option "debug" "n"; then
    extra_config+=("-DCMAKE_BUILD_TYPE=Release")
  else
    extra_config+=("-DCMAKE_BUILD_TYPE=Debug")
  fi

  # current Lua
  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
    "${MINGW_PREFIX}"/bin/cmake.exe \
      -GNinja \
      -DCMAKE_INSTALL_PREFIX="${MINGW_PREFIX}" \
      "${extra_config[@]}" \
      -DLUNIT_ROOT_DIR=lunit \
      -DLSQLITE3_VERSION=${pkgver} \
      -DIS_CURRENT_VERSION=ON \
      -S "${srcdir}/${_realname}_v${pkgver//./}" \
      -B "build-${MSYSTEM}"

  "${MINGW_PREFIX}"/bin/cmake.exe --build "build-${MSYSTEM}"

  # Lua 5.1
  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
    "${MINGW_PREFIX}"/bin/cmake.exe \
      -GNinja \
      -DCMAKE_INSTALL_PREFIX="${MINGW_PREFIX}" \
      "${extra_config[@]}" \
      -DLUNIT_ROOT_DIR=lunit \
      -DLSQLITE3_VERSION=${pkgver} \
      -DLUA_VERSION=5.1 \
      -S "${srcdir}/${_realname}_v${pkgver//./}" \
      -B "build-${MSYSTEM}-51"

  "${MINGW_PREFIX}"/bin/cmake.exe --build "build-${MSYSTEM}-51"

  # Lua 5.3
  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
    "${MINGW_PREFIX}"/bin/cmake.exe \
      -GNinja \
      -DCMAKE_INSTALL_PREFIX="${MINGW_PREFIX}" \
      "${extra_config[@]}" \
      -DLUNIT_ROOT_DIR=lunit \
      -DLSQLITE3_VERSION=${pkgver} \
      -DLUA_VERSION=5.3 \
      -S "${srcdir}/${_realname}_v${pkgver//./}" \
      -B "build-${MSYSTEM}-53"

  "${MINGW_PREFIX}"/bin/cmake.exe --build "build-${MSYSTEM}-53"
}

check() {
  "${MINGW_PREFIX}"/bin/cmake.exe --build "build-${MSYSTEM}" --target test

  "${MINGW_PREFIX}"/bin/cmake.exe --build "build-${MSYSTEM}-51" --target test

  "${MINGW_PREFIX}"/bin/cmake.exe --build "build-${MSYSTEM}-53" --target test
}

package_lua-lsqlite3() {
  pkgdesc="A binding for Lua to the SQLite3 database library (mingw-w64)"
  depends+=("${MINGW_PACKAGE_PREFIX}-lua")

  DESTDIR="${pkgdir}" "${MINGW_PREFIX}"/bin/cmake.exe --install "build-${MSYSTEM}"
}

package_lua51-lsqlite3() {
  pkgdesc="A binding for Lua 5.1 to the SQLite3 database library (mingw-w64)"
  depends+=("${MINGW_PACKAGE_PREFIX}-lua51")

  DESTDIR="${pkgdir}" "${MINGW_PREFIX}"/bin/cmake.exe --install "build-${MSYSTEM}-51"
}

package_lua53-lsqlite3() {
  pkgdesc="A binding for Lua 5.3 to the SQLite3 database library (mingw-w64)"
  depends+=("${MINGW_PACKAGE_PREFIX}-lua53")

  DESTDIR="${pkgdir}" "${MINGW_PREFIX}"/bin/cmake.exe --install "build-${MSYSTEM}-53"
}

# generate wrappers
for _name in "${pkgname[@]}"; do
  _short="package_${_name#${MINGW_PACKAGE_PREFIX}-}"
  _func="$(declare -f "${_short}")"
  eval "${_func/#${_short}/package_${_name}}"
done