Configure scripts tend to do things like this:
nm -B /dev/null
which, on Windows, turn into:
nm -B nul
and nul here acts like a normal file with 0 size as far as stat() is concerned.
Check harder for the file in question being unusual (isatty() does see that).
And since configure script expects /dev/nul, do report it that way.

--- binutils-git-39d1b2aef3c1dbbf31d82e555624afcbda9d58e7/binutils/bucomm.c.orig	2014-04-27 18:05:31.328777900 +0400
+++ binutils-git-39d1b2aef3c1dbbf31d82e555624afcbda9d58e7/binutils/bucomm.c	2014-05-02 08:54:46.651964974 +0400
@@ -570,7 +570,15 @@
 get_file_size (const char * file_name)
 {
   struct stat statbuf;
-
+  int f, t;
+  t = -1;
+  f = open (file_name, O_RDONLY | O_BINARY);
+  if (f != 0)
+    {
+      t = isatty (f);
+      close (f);
+    }
+
   if (stat (file_name, &statbuf) < 0)
     {
       if (errno == ENOENT)
@@ -579,8 +587,15 @@
 	non_fatal (_("Warning: could not locate '%s'.  reason: %s"),
 		   file_name, strerror (errno));
     }
-  else if (! S_ISREG (statbuf.st_mode))
-    non_fatal (_("Warning: '%s' is not an ordinary file"), file_name);
+  else if (! S_ISREG (statbuf.st_mode) || t > 0)
+    {
+#ifdef _WIN32
+      /* libtool passes /dev/null and checks for /dev/null in the output */
+      if (stricmp (file_name, "nul") == 0)
+        file_name = "/dev/null";
+#endif
+      non_fatal (_("Warning: '%s' is not an ordinary file"), file_name);
+    }
   else if (statbuf.st_size < 0)
     non_fatal (_("Warning: '%s' has negative size, probably it is too large"),
                file_name);
--- binutils-git-39d1b2aef3c1dbbf31d82e555624afcbda9d58e7/binutils/elfedit.c.orig	2014-04-27 18:05:31.340778000 +0400
+++ binutils-git-39d1b2aef3c1dbbf31d82e555624afcbda9d58e7/binutils/elfedit.c	2014-05-02 08:55:09.433461424 +0400
@@ -441,6 +441,14 @@
 check_file (const char *file_name, struct stat *statbuf_p)
 {
   struct stat statbuf;
+  int f, t;
+  t = -1;
+  f = open (file_name, O_RDONLY | O_BINARY);
+  if (f != 0)
+    {
+      t = isatty (f);
+      close (f);
+    }
 
   if (statbuf_p == NULL)
     statbuf_p = &statbuf;
@@ -455,8 +463,13 @@
       return 1;
     }
 
-  if (! S_ISREG (statbuf_p->st_mode))
+  if (! S_ISREG (statbuf_p->st_mode) || t > 0)
     {
+#ifdef _WIN32
+      /* libtool passes /dev/null and checks for /dev/null in the output */
+      if (stricmp (file_name, "nul") == 0)
+        file_name = "/dev/null";
+#endif
       error (_("'%s' is not an ordinary file\n"), file_name);
       return 1;
     }
--- binutils-git-39d1b2aef3c1dbbf31d82e555624afcbda9d58e7/binutils/readelf.c.orig	2014-04-27 18:05:31.384778200 +0400
+++ binutils-git-39d1b2aef3c1dbbf31d82e555624afcbda9d58e7/binutils/readelf.c	2014-05-02 08:55:27.018918502 +0400
@@ -14613,6 +14613,14 @@
   struct stat statbuf;
   char armag[SARMAG];
   int ret;
+  int f, t;
+  t = -1;
+  f = open (file_name, O_RDONLY | O_BINARY);
+  if (f != 0)
+    {
+      t = isatty (f);
+      close (f);
+    }
 
   if (stat (file_name, &statbuf) < 0)
     {
@@ -14624,8 +14632,13 @@
       return 1;
     }
 
-  if (! S_ISREG (statbuf.st_mode))
+  if (! S_ISREG (statbuf.st_mode) || t > 0)
     {
+#ifdef _WIN32
+      /* libtool passes /dev/null and checks for /dev/null in the output */
+      if (stricmp (file_name, "nul") == 0)
+        file_name = "/dev/null";
+#endif
       error (_("'%s' is not an ordinary file\n"), file_name);
       return 1;
     }
