diff --git a/bfd/cofflink.c b/bfd/cofflink.c
index 8d98fec..8f76b4d 100644
--- a/bfd/cofflink.c
+++ b/bfd/cofflink.c
@@ -426,7 +426,7 @@ coff_link_add_symbols (bfd *abfd,
   	      if (((*sym_hash)->symbol_class == C_NULL
   		   && (*sym_hash)->type == T_NULL)
   		  || sym.n_scnum != 0
-  		  || (sym.n_value != 0
+  		  || ((sym.n_value != 0 || IS_WEAK_EXTERNAL(abfd, sym))
   		      && (*sym_hash)->root.type != bfd_link_hash_defined
   		      && (*sym_hash)->root.type != bfd_link_hash_defweak))
   		{
@@ -2890,6 +2890,37 @@ _bfd_coff_reloc_link_order (bfd *output_bfd,
   return TRUE;
 }
 
+/* See _Microsoft Portable Executable and Common Object File Format
+   Specification_, section 5.5.3.  Note that weak symbols without aux records
+   are a GNU extension.
+
+   FIXME: All weak externals are treated as having characteristic
+   IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY (1).  These behave as per SVR4 ABI: A
+   library member will resolve a weak external only if a normal external causes
+   the library member to be linked.  See also linker.c:
+   generic_link_check_archive_element. */
+
+static void _bfd_coff_relocate_weak_externals(struct coff_link_hash_entry *h,
+					      bfd_vma *val, asection **sec)
+{
+  long aux_index = h->aux->x_sym.x_tagndx.l;
+  struct coff_tdata *cdata = h->auxbfd->tdata.coff_obj_data;
+  struct coff_link_hash_entry *h2 = cdata->sym_hashes[aux_index];
+
+  if (!h2 || h2->root.type == bfd_link_hash_undefined)
+    {
+      *sec = bfd_abs_section_ptr;
+      *val = 0;
+    }
+  else
+    {
+      *sec = h2->root.u.def.section;
+      *val = h2->root.u.def.value + (*sec)->output_section->vma +
+	      (*sec)->output_offset;
+    }
+}
+
+
 /* A basic reloc handling routine which may be used by processors with
    simple relocs.  */
 
@@ -2999,38 +3030,14 @@ _bfd_coff_generic_relocate_section (bfd *output_bfd,
 	  else if (h->root.type == bfd_link_hash_undefweak)
 	    {
               if (h->symbol_class == C_NT_WEAK && h->numaux == 1)
-		{
-		  /* See _Microsoft Portable Executable and Common Object
-                     File Format Specification_, section 5.5.3.
-		     Note that weak symbols without aux records are a GNU
-		     extension.
-		     FIXME: All weak externals are treated as having
-		     characteristic IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY (1).
-		     These behave as per SVR4 ABI:  A library member
-		     will resolve a weak external only if a normal
-		     external causes the library member to be linked.
-		     See also linker.c: generic_link_check_archive_element. */
-		  struct coff_link_hash_entry *h2 =
-		    h->auxbfd->tdata.coff_obj_data->sym_hashes[
-		    h->aux->x_sym.x_tagndx.l];
-
-		  if (!h2 || h2->root.type == bfd_link_hash_undefined)
-		    {
-		      sec = bfd_abs_section_ptr;
-		      val = 0;
-		    }
-		  else
-		    {
-		      sec = h2->root.u.def.section;
-		      val = h2->root.u.def.value
-			+ sec->output_section->vma + sec->output_offset;
-		    }
-		}
+	        _bfd_coff_relocate_weak_externals(h, &val, &sec);
 	      else
                 /* This is a GNU extension.  */
 		val = 0;
 	    }
-
+	  else if (h->root.type == bfd_link_hash_undefined &&
+		   h->symbol_class == C_NT_WEAK && h->numaux == 1)
+	    _bfd_coff_relocate_weak_externals(h, &val, &sec);
 	  else if (! bfd_link_relocatable (info))
 	    {
 	      if (! ((*info->callbacks->undefined_symbol)
-- 
2.1.0
