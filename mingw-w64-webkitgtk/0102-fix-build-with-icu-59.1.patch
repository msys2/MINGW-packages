--- webkitgtk-2.4.11/Source/WTF/wtf/gobject/GlibUtilities.cpp
+++ webkitgtk-2.4.11/Source/WTF/wtf/gobject/GlibUtilities.cpp
@@ -22,6 +22,7 @@
 #if OS(WINDOWS)
 #include <windows.h>
 #include <wtf/text/WTFString.h>
+#include <wtf/text/win/WCharStringExtras.h>
 #else
 #include <limits.h>
 #include <unistd.h>
@@ -59,7 +59,7 @@
     if (!length || (length == MAX_PATH && GetLastError() == ERROR_INSUFFICIENT_BUFFER))
         return CString();
 
-    String path(buffer, length);
+    String path = wcharToString(buffer, length);
     return path.utf8();
 }
 #endif
--- null	1970-01-01 03:00:00.000000000 +0300
+++ webkitgtk-2.4.11/Source/WTF/wtf/text/win/WCharStringExtras.h	2017-06-15 14:56:11.000000000 +0300
@@ -0,0 +1,70 @@
+/*
+ * Copyright (C) 2017 Konstantin Tokarev <annulen@yandex.ru>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ * THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#pragma once
+
+#include <wchar.h>
+#include <wtf/text/WTFString.h>
+
+namespace WTF {
+
+inline Vector<wchar_t> stringToNullTerminatedWChar(const String& string)
+{
+    Vector<wchar_t> result;
+
+    if (!string.isNull()) {
+        result.reserveInitialCapacity(string.impl()->length() + 1);
+
+        if (string.is8Bit()) {
+            const LChar* characters8 = string.impl()->characters8();
+            for (size_t i = 0; i < string.impl()->length(); ++i)
+                result.uncheckedAppend(characters8[i]);
+        } else {
+            const UChar* characters16 = string.impl()->characters16();
+            result.append(characters16, string.impl()->length());
+        }
+
+        result.append(0);
+    }
+
+    return result;
+}
+
+inline String wcharToString(const wchar_t* characters, unsigned length)
+{
+    static_assert(sizeof(wchar_t) == sizeof(UChar), "We assume wchar_t and UChar have the same size");
+    return String(reinterpret_cast<const UChar*>(characters), length);
+}
+
+inline String nullTerminatedWCharToString(const wchar_t* characters)
+{
+    return wcharToString(characters, wcslen(characters) - 1);
+}
+
+} // namespace WTF
+
+using WTF::stringToNullTerminatedWChar;
+using WTF::wcharToString;
+using WTF::nullTerminatedWCharToString;
--- webkitgtk-2.4.11/Source/JavaScriptCore/API/JSStringRef.cpp
+++ webkitgtk-2.4.11/Source/JavaScriptCore/API/JSStringRef.cpp
@@ -37,7 +37,7 @@
 JSStringRef JSStringCreateWithCharacters(const JSChar* chars, size_t numChars)
 {
     initializeThreading();
-    return OpaqueJSString::create(chars, numChars).leakRef();
+    return OpaqueJSString::create(reinterpret_cast<const UChar*>(chars), numChars).leakRef();
 }
 
 JSStringRef JSStringCreateWithUTF8CString(const char* string)
@@ -62,7 +62,7 @@
 JSStringRef JSStringCreateWithCharactersNoCopy(const JSChar* chars, size_t numChars)
 {
     initializeThreading();
-    return OpaqueJSString::create(StringImpl::createWithoutCopying(chars, numChars)).leakRef();
+    return OpaqueJSString::create(StringImpl::createWithoutCopying(reinterpret_cast<const UChar*>(chars), numChars)).leakRef();
 }
 
 JSStringRef JSStringRetain(JSStringRef string)
@@ -83,7 +83,7 @@
 
 const JSChar* JSStringGetCharactersPtr(JSStringRef string)
 {
-    return string->characters();
+    return reinterpret_cast<const JSChar*>(string->characters());
 }
 
 size_t JSStringGetMaximumUTF8CStringSize(JSStringRef string)
--- webkitgtk-2.4.11/Source/JavaScriptCore/runtime/DateConversion.cpp
+++ webkitgtk-2.4.11/Source/JavaScriptCore/runtime/DateConversion.cpp
@@ -32,6 +32,7 @@
 
 #if OS(WINDOWS)
 #include <windows.h>
+#include <wtf/text/win/WCharStringExtras.h>
 #endif
 
 using namespace WTF;
@@ -108,7 +108,8 @@
 #if OS(WINDOWS)
             TIME_ZONE_INFORMATION timeZoneInformation;
             GetTimeZoneInformation(&timeZoneInformation);
-            const WCHAR* timeZoneName = t.isDST() ? timeZoneInformation.DaylightName : timeZoneInformation.StandardName;
+            const WCHAR* winTimeZoneName = t.isDST() ? timeZoneInformation.DaylightName : timeZoneInformation.StandardName;
+            String timeZoneName = nullTerminatedWCharToString(winTimeZoneName);
 #else
             struct tm gtm = t;
             char timeZoneName[70];
--- webkitgtk-2.4.11/Source/WebKit2/Shared/API/c/WKString.cpp
+++ webkitgtk-2.4.11/Source/WebKit2/Shared/API/c/WKString.cpp
@@ -55,7 +55,7 @@
 size_t WKStringGetCharacters(WKStringRef stringRef, WKChar* buffer, size_t bufferLength)
 {
     COMPILE_ASSERT(sizeof(WKChar) == sizeof(UChar), WKStringGetCharacters_sizeof_WKChar_matches_UChar);
-    return (toImpl(stringRef)->getCharacters(static_cast<UChar*>(buffer), bufferLength));
+    return (toImpl(stringRef)->getCharacters(reinterpret_cast<UChar*>(buffer), bufferLength));
 }
 
 size_t WKStringGetMaximumUTF8CStringSize(WKStringRef stringRef)
--- webkitgtk-2.4.11/Source/WebCore/plugins/win/PluginDatabaseWin.cpp.orig	2018-04-20 13:47:17.383413300 +0300
+++ webkitgtk-2.4.11/Source/WebCore/plugins/win/PluginDatabaseWin.cpp	2018-04-20 14:16:51.638953200 +0300
@@ -32,6 +32,7 @@
 #include "URL.h"
 #include "PluginPackage.h"
 #include <wtf/WindowsExtras.h>
+#include <wtf/text/win/WCharStringExtras.h>
 
 #if OS(WINCE)
 // WINCE doesn't support Registry Key Access Rights. The parameter should always be 0
@@ -94,7 +95,7 @@
         if (result != ERROR_SUCCESS || type != REG_SZ)
             continue;
 
-        paths.add(String(pathStr, pathStrSize / sizeof(WCHAR) - 1));
+        paths.add(wcharToString(pathStr, pathStrSize / sizeof(WCHAR) - 1));
     }
 
     RegCloseKey(key);
@@ -115,7 +116,7 @@
     for (Vector<String>::const_iterator it = m_pluginDirectories.begin(); it != end; ++it) {
         String pattern = *it + "\\*";
 
-        hFind = FindFirstFileW(pattern.charactersWithNullTermination().data(), &findFileData);
+        hFind = FindFirstFileW(stringToNullTerminatedWChar(pattern).data(), &findFileData);
 
         if (hFind == INVALID_HANDLE_VALUE)
             continue;
@@ -124,7 +125,7 @@
             if (findFileData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
                 continue;
 
-            String filename = String(findFileData.cFileName, wcslen(findFileData.cFileName));
+            String filename = wcharToString(findFileData.cFileName, wcslen(findFileData.cFileName));
             if ((!filename.startsWith("np", false) || !filename.endsWith("dll", false)) &&
                 (!equalIgnoringCase(filename, "Plugin.dll") || !it->endsWith("Shockwave 10", false)))
                 continue;
@@ -211,11 +212,11 @@
             if (result != ERROR_SUCCESS)
                 break;
 
-            String extensionsPath = String(name, nameLen) + "\\Extensions";
+            String extensionsPath = wcharToString(name, nameLen) + "\\Extensions";
             HKEY extensionsKey;
 
             // Try opening the key
-            result = RegOpenKeyEx(key, extensionsPath.charactersWithNullTermination().data(), 0, KEY_READ, &extensionsKey);
+            result = RegOpenKeyEx(key, stringToNullTerminatedWChar(extensionsPath).data(), 0, KEY_READ, &extensionsKey);
 
             if (result == ERROR_SUCCESS) {
                 // Now get the plugins directory
@@ -226,7 +227,7 @@
                 result = RegQueryValueEx(extensionsKey, TEXT("Plugins"), 0, &type, (LPBYTE)&pluginsDirectoryStr, &pluginsDirectorySize);
 
                 if (result == ERROR_SUCCESS && type == REG_SZ)
-                    directories.append(String(pluginsDirectoryStr, pluginsDirectorySize / sizeof(WCHAR) - 1));
+                    directories.append(wcharToString(pluginsDirectoryStr, pluginsDirectorySize / sizeof(WCHAR) - 1));
 
                 RegCloseKey(extensionsKey);
             }
@@ -244,7 +245,7 @@
     DWORD pluginDirectorySize = ::ExpandEnvironmentStringsW(TEXT("%SYSTEMDRIVE%\\PFiles\\Plugins"), pluginDirectoryStr, WTF_ARRAY_LENGTH(pluginDirectoryStr));
 
     if (pluginDirectorySize > 0 && pluginDirectorySize <= WTF_ARRAY_LENGTH(pluginDirectoryStr))
-        directories.append(String(pluginDirectoryStr, pluginDirectorySize - 1));
+        directories.append(wcharToString(pluginDirectoryStr, pluginDirectorySize - 1));
 #endif
 
     DWORD type;
@@ -254,7 +255,7 @@
     HRESULT result = getRegistryValue(HKEY_LOCAL_MACHINE, L"Software\\Microsoft\\MediaPlayer", L"Installation Directory", &type, &installationDirectoryStr, &installationDirectorySize);
 
     if (result == ERROR_SUCCESS && type == REG_SZ)
-        directories.append(String(installationDirectoryStr, installationDirectorySize / sizeof(WCHAR) - 1));
+        directories.append(wcharToString(installationDirectoryStr, installationDirectorySize / sizeof(WCHAR) - 1));
 }
 
 static inline void addQuickTimePluginDirectory(Vector<String>& directories)
@@ -266,7 +267,7 @@
     HRESULT result = getRegistryValue(HKEY_LOCAL_MACHINE, L"Software\\Apple Computer, Inc.\\QuickTime", L"InstallDir", &type, &installationDirectoryStr, &installationDirectorySize);
 
     if (result == ERROR_SUCCESS && type == REG_SZ) {
-        String pluginDir = String(installationDirectoryStr, installationDirectorySize / sizeof(WCHAR) - 1) + "\\plugins";
+        String pluginDir = wcharToString(installationDirectoryStr, installationDirectorySize / sizeof(WCHAR) - 1) + "\\plugins";
         directories.append(pluginDir);
     }
 }
@@ -292,10 +293,10 @@
         if (result != ERROR_SUCCESS)
             break;
 
-        Vector<int> acrobatVersion = parseVersionString(String(name, nameLen));
+        Vector<int> acrobatVersion = parseVersionString(wcharToString(name, nameLen));
         if (compareVersions(acrobatVersion, latestAcrobatVersion)) {
             latestAcrobatVersion = acrobatVersion;
-            latestAcrobatVersionString = String(name, nameLen);
+            latestAcrobatVersionString = wcharToString(name, nameLen);
         }
     }
 
@@ -305,10 +306,10 @@
         DWORD acrobatInstallPathSize = sizeof(acrobatInstallPathStr);
 
         String acrobatPluginKeyPath = "Software\\Adobe\\Acrobat Reader\\" + latestAcrobatVersionString + "\\InstallPath";
-        result = getRegistryValue(HKEY_LOCAL_MACHINE, acrobatPluginKeyPath.charactersWithNullTermination().data(), 0, &type, acrobatInstallPathStr, &acrobatInstallPathSize);
+        result = getRegistryValue(HKEY_LOCAL_MACHINE, stringToNullTerminatedWChar(acrobatPluginKeyPath).data(), 0, &type, acrobatInstallPathStr, &acrobatInstallPathSize);
 
         if (result == ERROR_SUCCESS) {
-            String acrobatPluginDirectory = String(acrobatInstallPathStr, acrobatInstallPathSize / sizeof(WCHAR) - 1) + "\\browser";
+            String acrobatPluginDirectory = wcharToString(acrobatInstallPathStr, acrobatInstallPathSize / sizeof(WCHAR) - 1) + "\\browser";
             directories.append(acrobatPluginDirectory);
         }
     }
@@ -337,10 +338,10 @@
         if (result != ERROR_SUCCESS)
             break;
 
-        Vector<int> javaVersion = parseVersionString(String(name, nameLen));
+        Vector<int> javaVersion = parseVersionString(wcharToString(name, nameLen));
         if (compareVersions(javaVersion, latestJavaVersion)) {
             latestJavaVersion = javaVersion;
-            latestJavaVersionString = String(name, nameLen);
+            latestJavaVersionString = wcharToString(name, nameLen);
         }
     }
 
@@ -352,12 +353,12 @@
         DWORD useNewPluginSize;
 
         String javaPluginKeyPath = "Software\\JavaSoft\\Java Plug-in\\" + latestJavaVersionString;
-        result = getRegistryValue(HKEY_LOCAL_MACHINE, javaPluginKeyPath.charactersWithNullTermination().data(), L"UseNewJavaPlugin", &type, &useNewPluginValue, &useNewPluginSize);
+        result = getRegistryValue(HKEY_LOCAL_MACHINE, stringToNullTerminatedWChar(javaPluginKeyPath).data(), L"UseNewJavaPlugin", &type, &useNewPluginValue, &useNewPluginSize);
 
         if (result == ERROR_SUCCESS && useNewPluginValue == 1) {
-            result = getRegistryValue(HKEY_LOCAL_MACHINE, javaPluginKeyPath.charactersWithNullTermination().data(), L"JavaHome", &type, javaInstallPathStr, &javaInstallPathSize);
+            result = getRegistryValue(HKEY_LOCAL_MACHINE, stringToNullTerminatedWChar(javaPluginKeyPath).data(), L"JavaHome", &type, javaInstallPathStr, &javaInstallPathSize);
             if (result == ERROR_SUCCESS) {
-                String javaPluginDirectory = String(javaInstallPathStr, javaInstallPathSize / sizeof(WCHAR) - 1) + "\\bin\\new_plugin";
+                String javaPluginDirectory = wcharToString(javaInstallPathStr, javaInstallPathSize / sizeof(WCHAR) - 1) + "\\bin\\new_plugin";
                 directories.append(javaPluginDirectory);
             }
         }
@@ -383,7 +384,7 @@
         if (!PathRemoveFileSpec(moduleFileNameStr))
             goto exit;
 
-        pluginsDirectory = String(moduleFileNameStr) + "\\Plugins";
+        pluginsDirectory = nullTerminatedWCharToString(moduleFileNameStr) + "\\Plugins";
     }
 exit:
     return pluginsDirectory;
@@ -400,10 +401,10 @@
     WCHAR macromediaDirectoryStr[MAX_PATH];
 
     PathCombine(macromediaDirectoryStr, systemDirectoryStr, TEXT("macromed\\Flash"));
-    directories.append(macromediaDirectoryStr);
+    directories.append(nullTerminatedWCharToString(macromediaDirectoryStr));
 
     PathCombine(macromediaDirectoryStr, systemDirectoryStr, TEXT("macromed\\Shockwave 10"));
-    directories.append(macromediaDirectoryStr);
+    directories.append(nullTerminatedWCharToString(macromediaDirectoryStr));
 #endif
 }
 
--- webkitgtk-2.4.11/Source/WebCore/plugins/win/PluginPackageWin.cpp.orig	2018-04-20 14:21:08.212931600 +0300
+++ webkitgtk-2.4.11/Source/WebCore/plugins/win/PluginPackageWin.cpp	2018-04-20 14:24:24.570476500 +0300
@@ -34,10 +34,11 @@
 #include "PluginDebug.h"
 #include "Timer.h"
 #include "npruntime_impl.h"
+#include <shlwapi.h>
 #include <string.h>
 #include <wtf/StdLibExtras.h>
 #include <wtf/text/CString.h>
-#include <shlwapi.h>
+#include <wtf/text/win/WCharStringExtras.h>
 
 namespace WebCore {
 
@@ -47,7 +48,7 @@
     UINT bufferLength;
     String subInfo = "\\StringfileInfo\\040904E4\\" + info;
     bool retval = VerQueryValueW(versionInfoData,
-        const_cast<UChar*>(subInfo.charactersWithNullTermination().data()),
+        stringToNullTerminatedWChar(subInfo).data(),
         &buffer, &bufferLength);
     if (!retval || bufferLength == 0)
         return String();
@@ -167,13 +168,13 @@
 bool PluginPackage::fetchInfo()
 {
     DWORD versionInfoSize, zeroHandle;
-    versionInfoSize = GetFileVersionInfoSizeW(const_cast<UChar*>(m_path.charactersWithNullTermination().data()), &zeroHandle);
+    versionInfoSize = GetFileVersionInfoSizeW(stringToNullTerminatedWChar(m_path).data(), &zeroHandle);
     if (versionInfoSize == 0)
         return false;
 
     auto versionInfoData = std::make_unique<char[]>(versionInfoSize);
 
-    if (!GetFileVersionInfoW(const_cast<UChar*>(m_path.charactersWithNullTermination().data()),
+    if (!GetFileVersionInfoW(stringToNullTerminatedWChar(m_path).data(),
             0, versionInfoSize, versionInfoData.get()))
         return false;
 
@@ -247,11 +248,11 @@
 
         String path = m_path.substring(0, m_path.reverseFind('\\'));
 
-        if (!::SetCurrentDirectoryW(path.charactersWithNullTermination().data()))
+        if (!::SetCurrentDirectoryW(stringToNullTerminatedWChar(path).data()))
             return false;
 
         // Load the library
-        m_module = ::LoadLibraryExW(m_path.charactersWithNullTermination().data(), 0, LOAD_WITH_ALTERED_SEARCH_PATH);
+        m_module = ::LoadLibraryExW(stringToNullTerminatedWChar(m_path).data(), 0, LOAD_WITH_ALTERED_SEARCH_PATH);
 
         if (!::SetCurrentDirectoryW(currentPath)) {
             if (m_module)
--- webkitgtk-2.4.11/Source/WebCore/plugins/win/PluginViewWin.cpp.orig	2018-04-20 14:24:40.154903800 +0300
+++ webkitgtk-2.4.11/Source/WebCore/plugins/win/PluginViewWin.cpp	2018-04-20 14:25:32.960996600 +0300
@@ -71,6 +71,7 @@
 #include <runtime/JSLock.h>
 #include <wtf/ASCIICType.h>
 #include <wtf/text/WTFString.h>
+#include <wtf/text/win/WCharStringExtras.h>
 #include <wtf/win/GDIObject.h>
 
 #if OS(WINCE)
@@ -873,13 +874,13 @@
 
     // Get file info
     WIN32_FILE_ATTRIBUTE_DATA attrs;
-    if (GetFileAttributesExW(filename.charactersWithNullTermination().data(), GetFileExInfoStandard, &attrs) == 0)
+    if (GetFileAttributesExW(stringToNullTerminatedWChar(filename).data(), GetFileExInfoStandard, &attrs))
         return NPERR_FILE_NOT_FOUND;
 
     if (attrs.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
         return NPERR_FILE_NOT_FOUND;
 
-    HANDLE fileHandle = CreateFileW(filename.charactersWithNullTermination().data(), FILE_READ_DATA, FILE_SHARE_READ, 0, OPEN_EXISTING, 0, 0);
+    HANDLE fileHandle = CreateFileW(stringToNullTerminatedWChar(filename).data(), FILE_READ_DATA, FILE_SHARE_READ, 0, OPEN_EXISTING, 0, 0);
     
     if (fileHandle == INVALID_HANDLE_VALUE)
         return NPERR_FILE_NOT_FOUND;
