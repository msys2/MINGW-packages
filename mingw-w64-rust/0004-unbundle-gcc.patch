--- rustc-1.51.0-src/src/bootstrap/dist.rs.orig 2021-03-25 17:17:47.194810700 +0100
+++ rustc-1.51.0-src/src/bootstrap/dist.rs      2021-03-25 17:25:12.625438800 +0100
@@ -112,6 +112,7 @@
     }
 }

+#[allow(dead_code)]
 fn find_files(files: &[&str], path: &[PathBuf]) -> Vec<PathBuf> {
     let mut found = Vec::with_capacity(files.len());

@@ -128,6 +129,7 @@
     found
 }

+#[allow(dead_code)]
 fn make_win_dist(
     rust_root: &Path,
     plat_root: &Path,
@@ -295,7 +297,7 @@
         // thrown away (this contains the runtime DLLs included in the rustc package
         // above) and the second argument is where to place all the MinGW components
         // (which is what we want).
-        make_win_dist(&tmpdir(builder), tarball.image_dir(), host, &builder);
+        //make_win_dist(&tmpdir(builder), tarball.image_dir(), host, &builder);

         Some(tarball.generate())
     }
@@ -340,10 +342,10 @@
         // anything requiring us to distribute a license, but it's likely the
         // install will *also* include the rust-mingw package, which also needs
         // licenses, so to be safe we just include it here in all MinGW packages.
-        if host.contains("pc-windows-gnu") {
-            make_win_dist(tarball.image_dir(), &tmpdir(builder), host, builder);
-            tarball.add_dir(builder.src.join("src/etc/third-party"), "share/doc");
-        }
+        //if host.contains("pc-windows-gnu") {
+        //    make_win_dist(tarball.image_dir(), &tmpdir(builder), host, builder);
+        //    tarball.add_dir(builder.src.join("src/etc/third-party"), "share/doc");
+        //}

         return tarball.generate();

--- rustc-1.51.0-src/src/bootstrap/lib.rs.orig  2021-03-25 17:31:41.612856400 +0100
+++ rustc-1.51.0-src/src/bootstrap/lib.rs       2021-03-25 17:34:02.913055400 +0100
@@ -1274,6 +1274,7 @@
         }
     }

+    #[allow(dead_code)]
     fn copy_to_folder(&self, src: &Path, dest_folder: &Path) {
         let file_name = src.file_name().unwrap();
         let dest = dest_folder.join(file_name);
