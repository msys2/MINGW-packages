# Maintainer: Alexey Pavlov <alexpux@gmail.com>
# Contributor: Zion Nimchuk <zionnimchuk@gmail.com>
# Contributor: Mateusz Miku≈Ça <mati865@gmail.com

_realname=rust
pkgbase=mingw-w64-${_realname}
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
pkgver=1.15.0
pkgrel=2
pkgdesc="Systems programming language focused on safety, speed and concurrency (mingw-w64)"
arch=('any')
url="https://www.rust-lang.org/"
license=('MIT' 'Apache')
depends=("${MINGW_PACKAGE_PREFIX}-gcc-libs"
         "${MINGW_PACKAGE_PREFIX}-libffi")
makedepends=("git"
             "bison"
             "flex"
             "${MINGW_PACKAGE_PREFIX}-curl"
             "${MINGW_PACKAGE_PREFIX}-gcc"
             "${MINGW_PACKAGE_PREFIX}-python2"
             "${MINGW_PACKAGE_PREFIX}-llvm"
             "${MINGW_PACKAGE_PREFIX}-jemalloc"
             "${MINGW_PACKAGE_PREFIX}-rust>=1.13.0"
             "${MINGW_PACKAGE_PREFIX}-cmake")
options=('!makeflags' 'staticlibs')
#install=rust.install
source=(https://static.rust-lang.org/dist/${_realname}c-${pkgver}-src.tar.gz
        "force-curl-rust.patch"
        "force-curl-cargo.patch"
        "force-pthread.patch"
        "fix-jemalloc.patch"
        "git+https://github.com/rust-lang/cargo.git#tag=0.16.0")
sha256sums=('33f3747d231ede34b56c6cc0ae6be8cbaa29d2fdb39d86f25693dceb9fc5f164'
            'c11cd761809d08a108ddc3ac126a38caca740b3d11ed493cf317178b0e0f6f58'
            '50c979b48ebc86dfddb295f2bea62e491ce868eb4308a0ae2324514c8d45e4fd'
            '7f32bd7c43f13a61b2e4f66c40be47fc5fd025b2aad3fa6507d20316b02e3c17'
            '9d5e57a67d98427eb3d34c2e19b3b9f5beadd5ddf62c76c2fd65905034eae84d'
            'SKIP')

prepare() {
  cd ${srcdir}/${_realname}c-${pkgver}-src
  patch -p1 -i "${srcdir}/force-curl-rust.patch"
  patch -p1 -i "${srcdir}/force-pthread.patch"
  patch -p1 -i "${srcdir}/fix-jemalloc.patch"

  cd ${srcdir}/cargo
  #git submodule update --init --recursive
  #patch -p1 -i "${srcdir}/force-curl-cargo.patch"
  sed 's^share/doc^share/licenses^g' -i Makefile.in
}

build() {
  [[ -d "${srcdir}/build-${MINGW_CHOST}" ]] && rm -rf "${srcdir}/build-${MINGW_CHOST}"
  mkdir -p "${srcdir}/build-${MINGW_CHOST}"

  cd "${srcdir}/build-${MINGW_CHOST}"

  #We have to do the following because rust doesn't count x86_64-w64-mingw32 as a target triple
  OSTYPE="$CARCH-pc-windows-gnu"

  ../${_realname}c-${pkgver}-src/configure \
    --prefix=${MINGW_PREFIX} \
    --build=$OSTYPE \
    --host=$OSTYPE \
    --target=$OSTYPE \
    --release-channel=stable \
    --llvm-root=${MINGW_PREFIX} \
    --jemalloc-root=${MINGW_PREFIX}/lib

  make RUSTFLAGS="$RUSTFLAGS -C link-args='-lffi -lpthread'"
}

package() {
  #install rust
  cd "${srcdir}/build-${MINGW_CHOST}"

  make DESTDIR=${pkgdir} install

  cd "${pkgdir}${MINGW_PREFIX}/lib"
  rm rustlib/{components,manifest-rustc,rust-installer-version}
  ln -sf rustlib/$CARCH-pc-windows-gnu/lib/*.dll .

  rm -f ${pkgdir}${MINGW_PREFIX}/bin/libgcc*.dll
  rm -f ${pkgdir}${MINGW_PREFIX}/bin/libstd*.dll

  install -Dm644 ${srcdir}/${_realname}c-${pkgver}-src/LICENSE-APACHE "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}/LICENSE-APACHE"
  install -Dm644 ${srcdir}/${_realname}c-${pkgver}-src/LICENSE-MIT "${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}/LICENSE-MIT"

  #build cargo
  #We need to build cargo here because it requires rustc, so we need to wait until rustc is packaged.
  [[ -d "${srcdir}/build-cargo-${MINGW_CHOST}" ]] && rm -rf "${srcdir}/build-cargo-${MINGW_CHOST}"
  mkdir -p "${srcdir}/build-cargo-${MINGW_CHOST}"
  cd "${srcdir}/build-cargo-${MINGW_CHOST}"

  OSTYPE="$CARCH-pc-windows-gnu"

  ../cargo/configure --local-rust-root=${pkgdir}${MINGW_PREFIX} --prefix=${MINGW_PREFIX} --build=$OSTYPE --host=$OSTYPE --target=$OSTYPE --enable-optimize
  make

  #Install cargo
  cd "${srcdir}/build-cargo-${MINGW_CHOST}"

  make DESTDIR="${pkgdir}" install

  # Remove files that contains references to $srcdir or $pkgdir,
  # or that conflicts with the rust package.
  rm -f "${pkgdir}${MINGW_PREFIX}/lib/rustlib/"{install.log,manifest-cargo,uninstall.sh}

  install -d "$pkgdir${MINGW_PREFIX}/share/bash-completion/completions"
  mv "${pkgdir}${MINGW_PREFIX}/etc/bash_completion.d/cargo" \
     "${pkgdir}${MINGW_PREFIX}/share/bash-completion/completions/cargo"
}
