# Maintainer: Alexey Pavlov <Alexpux@gmail.com>

_realname=openssl
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}")
_ver=1.1.1
# use a pacman compatible version scheme
pkgver=${_ver/[a-z]/.${_ver//[0-9.]/}}
pkgrel=1
arch=('any')
pkgdesc="The Open Source toolkit for Secure Sockets Layer and Transport Layer Security (mingw-w64)"
depends=("${MINGW_PACKAGE_PREFIX}-ca-certificates" "${MINGW_PACKAGE_PREFIX}-gcc-libs" "${MINGW_PACKAGE_PREFIX}-zlib")
makedepends=("${MINGW_PACKAGE_PREFIX}-gcc")
options=('strip' '!buildflags' 'staticlibs')
license=('BSD')
url="https://www.openssl.org"
noextract=(${_realname}-${_ver}.tar.gz)
source=(https://www.openssl.org/source/${_realname}-${_ver}.tar.gz{,.asc}
        'openssl-1.0.0a-ldflags.patch'
        'openssl-1.0.2a-parallel-build.patch'
        'openssl-1.0.1-x32.patch'
        'openssl-0.9.6-x509.patch'
        'openssl-1.1.1-relocation.patch')
sha256sums=('2836875a0f89c03d0fdf483941512613a50cfb421d6fd94b9f41d7279d586a3d'
            'SKIP'
            '164aa4928b022cc716fac545b4fd69899cb274682aa487100e595abb652adbae'
            '609d7ca040f7ab26f5e9844e486b3bcc04f3da656ce2db7733fbd65c6d10457a'
            'f913185a36538315de3ff122ef96fc9a49e068078e65895cfc950bdb4ac4e4f0'
            'e8ed15b50f749064e89f26d49b7fd85b3f95e5dde22e430c0f6181e5b07146c7'
            'SKIP')

validpgpkeys=('8657ABB260F056B1E5190839D9C4D26D0E604491')

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    msg2 "Applying $_patch"
    patch -Nbp1 -i "${srcdir}/$_patch"
  done
}

del_file_exists() {
  for _fname in "$@"
  do
    if [ -f $_fname ]; then
      rm -rf $_fname
    fi
  done
}
# =========================================== #

prepare() {
  # Clean up old sources so re-patching doesn't fail.
  [[ -d ${srcdir}/${_realname}-${_ver} ]] && rm -rf ${srcdir}/${_realname}-${_ver}
  tar -xzvf ${_realname}-${_ver}.tar.gz -C ${srcdir} || true
  cd ${srcdir}/${_realname}-${_ver}

# openssl-1.0.0a-ldflags.patch
# openssl-1.0.2a-parallel-build.patch
# openssl-1.0.1-x32.patch
#  openssl-0.9.6-x509.patch
# openssl-1.0.1i-relocation.patch
  apply_patch_with_msg \
     openssl-1.1.1-relocation.patch

}

build() {
  # No support for out-of-source builds
  rm -rf ${srcdir}/build-${CARCH}
  mkdir -p ${srcdir}/build-${CARCH}

  # Use mingw cflags instead of hardcoded ones
#  sed -i -e '/^"mingw"/ s/-fomit-frame-pointer -O3 -march=i486 -Wall/-O2 -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions --param=ssp-buffer-size=4/' ${srcdir}/build-${CARCH}/Configure

  _mingw=mingw
  if $(echo ${CARCH} | grep -q x86_64); then
    _mingw=mingw64
  fi
  cd "${srcdir}/build-${CARCH}"
  export MSYS2_ARG_CONV_EXCL="--prefix="
  ${srcdir}/${_realname}-${_ver}/Configure \
    --prefix=${MINGW_PREFIX} \
    --openssldir=${MINGW_PREFIX} \
    ${_mingw} \
    shared \
    zlib-dynamic \
    enable-camellia \
    enable-idea \
    enable-mdc2 \
    enable-rfc3779

  make -j1 ZLIB_INCLUDE=-I"${MINGW_PREFIX}"/include depend all
}

check() {
  cd "${srcdir}/build-${CARCH}"
  make -j1 test
}

package() {
  cd "${srcdir}/build-${CARCH}"
  make -j1 DESTDIR="${pkgdir}" MANDIR=${MINGW_PREFIX}/share/man MANSUFFIX=ssl install

  install -D -m644 ${srcdir}/${_realname}-${_ver}/LICENSE ${pkgdir}${MINGW_PREFIX}/share/licenses/${_realname}/LICENSE

  install -m644 ${srcdir}/${_realname}-${_ver}/ms/applink.c "${pkgdir}${MINGW_PREFIX}"/include/openssl/
  rm -rf "${pkgdir}${MINGW_PREFIX}"/bin/c_rehash
  rm -rf "${pkgdir}${MINGW_PREFIX}"/{ssl/misc,ssl/man}
}
